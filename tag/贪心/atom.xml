<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;贪心&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2021-12-26T02:20:40.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/4a8b7903/</id>
        <title>方法总结</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/4a8b7903/"/>
        <content type="html">&lt;h1 id=&#34;括号问题&#34;&gt;&lt;a href=&#34;#括号问题&#34; class=&#34;headerlink&#34; title=&#34;括号问题&#34;&gt;&lt;/a&gt;括号问题&lt;/h1&gt;&lt;h2 id=&#34;是否为有效括号&#34;&gt;&lt;a href=&#34;#是否为有效括号&#34; class=&#34;headerlink&#34; title=&#34;是否为有效括号&#34;&gt;&lt;/a&gt;是否为有效括号&lt;/h2&gt;&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv&#34;&gt;有效的括号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可采用栈的先入后出特性，一个个匹配&lt;/p&gt;
&lt;h2 id=&#34;判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由-locked-存储&#34;&gt;&lt;a href=&#34;#判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由-locked-存储&#34; class=&#34;headerlink&#34; title=&#34;判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储&#34;&gt;&lt;/a&gt;判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储&lt;/h2&gt;&lt;p&gt;如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzaXMtc3RyaW5nLw==&#34;&gt;有效的括号字符串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtYS1wYXJlbnRoZXNlcy1zdHJpbmctY2FuLWJlLXZhbGlkLw==&#34;&gt;判断一个括号字符串是否有效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;利用平衡值的方法，一个字符串是否为有效括号，那么在某个位置前的右括号之前必然有左括号相匹配，在某个某个位置的左括号之后必然有右括号相匹配&lt;/p&gt;
&lt;p&gt;以下为几种不同的具体方法&lt;/p&gt;
&lt;h3 id=&#34;两次遍历，正序遍历和逆序遍历。&#34;&gt;&lt;a href=&#34;#两次遍历，正序遍历和逆序遍历。&#34; class=&#34;headerlink&#34; title=&#34;两次遍历，正序遍历和逆序遍历。&#34;&gt;&lt;/a&gt;两次遍历，正序遍历和逆序遍历。&lt;/h3&gt;&lt;p&gt;正序遍历时，用 count 记录此时未匹配左括号数，其中如果&lt;code&gt;locked[i]=′0′&lt;/code&gt;，那么以左括号来记，当匹配到不可变的右括号时，&lt;code&gt;count−−&lt;/code&gt;，如果&lt;code&gt;count &amp;lt; 0&lt;/code&gt;出现了，那么该字符串不是有效的括号字符串&lt;/p&gt;
&lt;p&gt;逆序遍历时，同正序遍历时的方法，用 count 记录此时未匹配右括号数，其中如果&lt;code&gt;locked[i]=′0′&lt;/code&gt;，那么以右括号来记，当匹配到不可变的左括号时，&lt;code&gt;count−−&lt;/code&gt;，如果&lt;code&gt;count &amp;lt; 0&lt;/code&gt;出现了，那么该字符串不是有效的括号字符串&lt;/p&gt;
&lt;p&gt;以下为参考代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool checkValidString(string s) {
        int count=0;
        for(int i=0;i&amp;lt;s.size();i++)
        {
            if(s[i]==&#39;(&#39;||s[i]==&#39;*&#39;)
                count++;
            else
                count--;
            if(count&amp;lt;0)
                return false;
        }
        count=0;
        for(int i=s.size()-1;i&amp;gt;=0;i--)
        {
            if(s[i]==&#39;)&#39;||s[i]==&#39;*&#39;)
                count++;
            else
                count--;
            if(count&amp;lt;0)
                return false;
        }
        return true;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数&#34;&gt;&lt;a href=&#34;#贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数&#34; class=&#34;headerlink&#34; title=&#34;贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数&#34;&gt;&lt;/a&gt;贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数&lt;/h3&gt;&lt;p&gt;当遇到不可变的右(左)括号时&lt;code&gt;maxc&lt;/code&gt;，和&lt;code&gt;minc&lt;/code&gt;都加一 (减一), 如果在此期间，&lt;code&gt;maxc &amp;lt; 0&lt;/code&gt;，那么证明有右括号不能被匹配那么这串字符串是无效的&lt;/p&gt;
&lt;p&gt;当遇到可变的位置时，由于既可以变也可以不变，那么&lt;code&gt;maxcpp&lt;/code&gt;，&lt;code&gt;minc--&lt;/code&gt;；其中如果&lt;code&gt;minc&lt;/code&gt;减之前如果是0，那么&lt;code&gt;minc&lt;/code&gt;就变为1，因为会增加(如果是&lt;code&gt;*&lt;/code&gt;可代表左右括号或者空字符，那么只需维护&lt;code&gt;minc&amp;gt;=0&lt;/code&gt;即可，因为&lt;code&gt;*&lt;/code&gt;有三种状态)&lt;/p&gt;
&lt;p&gt;如果在遍历过程中，&lt;code&gt;minc &amp;gt; maxc&lt;/code&gt;，那么证明该串是无效的&lt;/p&gt;
&lt;p&gt;最后如果该串是有效，那么&lt;code&gt;minc&lt;/code&gt;必为0，所以返回值为&lt;code&gt;minc == 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码示例&lt;/p&gt;
&lt;h4 id=&#34;第一道&#34;&gt;&lt;a href=&#34;#第一道&#34; class=&#34;headerlink&#34; title=&#34;第一道&#34;&gt;&lt;/a&gt;第一道&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool checkValidString(string s) {
        int minc=0,maxc=0;
        for(int i=0;i&amp;lt;s.size();i++)
        {
            if(s[i]==&#39;(&#39;)
            {
                mincpp;
                maxcpp;
            }
            else if(s[i]==&#39;)&#39;)
            {
                minc=minc==0?0:minc-1;
                maxc--;
                if(maxc&amp;lt;0)
                    return false;
            }
            else
            {
                minc=minc==0?0:minc-1;
                maxcpp;
            }
        }
        return minc==0;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;第二道&#34;&gt;&lt;a href=&#34;#第二道&#34; class=&#34;headerlink&#34; title=&#34;第二道&#34;&gt;&lt;/a&gt;第二道&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool canBeValid(string s, string locked) {
        if(s.size()%2==1)  return false;
        int minc=0,maxc=0;
        for(int i=0;i&amp;lt;s.size();i++)
        {
            if(locked[i]==&#39;1&#39;)
            {
                if(s[i]==&#39;(&#39;)
                {
                    mincpp;
                    maxcpp;
                }
                if(s[i]==&#39;)&#39;)
                {
                    maxc--;
                    minc=minc==0?1:minc-1;
                    if(maxc&amp;lt;0)
                        return false;
                }
            }
            else
            {
                minc=minc==0?1:minc-1;
                maxcpp;
            }
            if(minc&amp;gt;maxc)
                return false;
        }
        return minc==0;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="贪心" />
        <category term="括号" />
        <updated>2021-12-26T02:20:40.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.cn/posts/b115b06a/</id>
        <title>加油站</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/b115b06a/"/>
        <content type="html">&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9nYXMtc3RhdGlvbi8=&#34;&gt;加油站&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E5%8A%A0%E6%B2%B9%E7%AB%99_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;算法思路：贪心算法&lt;/p&gt;
&lt;h1 id=&#34;pos-数组记录每个位置的剩余油量&#34;&gt;&lt;a href=&#34;#pos-数组记录每个位置的剩余油量&#34; class=&#34;headerlink&#34; title=&#34;pos 数组记录每个位置的剩余油量&#34;&gt;&lt;/a&gt;pos 数组记录每个位置的剩余油量&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用另一个数组$pos$，其中$pos[i]=gas[i]-cost[i]$, 从下标$0$开始遍历，若$pos[i]&amp;lt;0$, 则必不以此为起点；若 $pos[i]&amp;gt;=0$, 则以其为起点，&lt;/p&gt;
&lt;p&gt; 用$res$存储当前剩余油量，之后以此为起点遍历之后位置$n$，若$pos[n]+res&amp;lt;0$, 此起点不满足题意，若 $&amp;gt;=0$, 则更新$res$，并使&lt;/p&gt;
&lt;p&gt; $n=(n+1)%pos.size()$，继续遍历若正常结束循环，则可以返回$i$的值&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;  以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int canCompleteCircuit(vector&amp;lt;int&amp;gt;&amp;amp; gas, vector&amp;lt;int&amp;gt;&amp;amp; cost) {
        if(gas.size()==1)return (gas[0]&amp;lt;cost[0])?-1:0;
        vector&amp;lt;int&amp;gt;pos(gas.size());
        for(int i=0;i&amp;lt;pos.size();i++)
        {
            pos[i]=gas[i]-cost[i];
        }
        for(int i=0;i&amp;lt;pos.size();i++)
        {
            if(pos[i]&amp;gt;0)
            {
                int res=pos[i],n=(i+1)%pos.size();
                while(n!=i)
                {
                    if(pos[n]+res&amp;lt;0)
                    break;
                    res+=pos[n];
                    n=(n+1)%pos.size();
                }
                if(n==i)return i;
            }
            
        }
        return -1;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;优化：由上代码，当不满足$pos[n]+res&amp;gt;=0$时，$n$即为以$i$为起点不可能到达的位置，那么这两个位置之间的位置都不可能到达$n$因为以$i$为起点，当它到两者中间位置时，初始油量大于等于零，而从$i$位置到达不了，更别说两者其中位置了由此，可增加一个变量记录每次前进的长度$num$，当以某一起点得不到答案时，使$i=i+num+1$更新$i$，提高效率&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int canCompleteCircuit(vector&amp;lt;int&amp;gt;&amp;amp; gas, vector&amp;lt;int&amp;gt;&amp;amp; cost) {
        int n=gas.size();
        int i=0;
        while(i&amp;lt;n)
        {
            int num=0,total_gas=0,total_cost=0;
            while(num&amp;lt;n)
            {
                int j=(i+num)%n;
                total_gas+=gas[j];
                total_cost+=cost[j];
                if(total_gas&amp;lt;total_cost)
                break;
                num++;
            }
            if(num==n)return i;
            else
            {
                i=i+num+1;
            }
        }
        return -1;

    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="贪心" />
        <updated>2021-11-27T06:20:40.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.cn/posts/723dcd0c/</id>
        <title>摆动序列</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/723dcd0c/"/>
        <content type="html">&lt;p&gt;[题目链接:]{.orange}&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvd2lnZ2xlLXN1YnNlcXVlbmNlLw==&#34;&gt;摆动序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[题目详情:]{.orange}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg&#34; alt=&#34;摆动序列_题目详情&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&#34;原始&#34;&gt;&lt;a href=&#34;#原始&#34; class=&#34;headerlink&#34; title=&#34;原始&#34;&gt;&lt;/a&gt;原始&lt;/h2&gt;&lt;p&gt;思路：关键点在于，当增添一个数成为摆动序列中的一个元素时，那么这个数要么小于，要么大于其前面的一个数 其大于或小于取决于前面一个数与再前面一个数之间的大小关系 就此，可利用动态规划的思想，分别用$up[i]$,$down[i]$记录前$i+1$个数的最长摆动序列。(其中$up[i]$记录末尾为上升的，$down[i]$记录下降的)     &lt;/p&gt;
&lt;p&gt;将题目解决方法转换为三方面：   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当$nums[i]&amp;lt;nums[i-1]$时，该元素不可添加到$up[i]$中，而对于$down[i]$，取$down[i-1]$(不加上该数),$up[i-1]+1$(加上该数)中的最大值，即&lt;br&gt;$$&lt;br&gt;down[i] = max{up[i-1]+1, down[i-1]}&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当$nums[i]&amp;gt;nums[i-1]$时，该元素不可添加到$down[i]$中,而对于$up[i]$,取$up[i-1]$(不加上该数),$down[i-1]+1$(加上该数)中的最大值，即&lt;br&gt;$$&lt;br&gt;up[i] = max{up[i-1], down[i-1]+1}&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当$nums[i]=nums[i-1]$时，都不能加上,故&lt;br&gt;$$&lt;br&gt;up[i]=up[i-1]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;dowm[i]=down[i-1]&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int wiggleMaxLength(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (n == 1) return n;
        vector&amp;lt;int&amp;gt;up(n), down(n);
        up[0] = down[0] = 1;
        for (int i = 1; i&amp;lt;n; i++)
        {
            if (nums[i]&amp;lt;nums[i - 1])
            {
                up[i] = up[i - 1];
                down[i] = max(down[i - 1], up[i - 1] + 1);
            }
            else if (nums[i]&amp;gt;nums[i - 1])
            {
                up[i] = max(up[i - 1], down[i - 1] + 1);
                down[i] = down[i - 1];
            }
            else
            {
                up[i] = up[i - 1];
                down[i] = down[i - 1];
            }
        }
        return max(up[n - 1], down[n - 1]);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;动态规划的空间优化&#34;&gt;&lt;a href=&#34;#动态规划的空间优化&#34; class=&#34;headerlink&#34; title=&#34;动态规划的空间优化&#34;&gt;&lt;/a&gt;动态规划的空间优化&lt;/h3&gt;&lt;p&gt;由于$up[i]$,$down[i]$只与下标为$i-1$的值有关，那么可以用两个变量代替数组，最后取这两个变量的最大值&lt;/p&gt;
&lt;p&gt;优化代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int wiggleMaxLength(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (n == 1) return n;
        int up = 1, down = 1;
        for (int i = 1; i&amp;lt;n; i++)
        {
            if (nums[i]&amp;lt;nums[i - 1])
            {
                down = max(down, up + 1);
            }
            else if (nums[i]&amp;gt;nums[i - 1])
            {
                up = max(up, down + 1);
            }
        }
        return max(up, down);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;贪心算法&#34;&gt;&lt;a href=&#34;#贪心算法&#34; class=&#34;headerlink&#34; title=&#34;贪心算法&#34;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;p&gt;代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int wiggleMaxLength(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (n &amp;lt; 2) {
            return n;
        }
        int prevdiff = nums[1] - nums[0];
        int num = prevdiff != 0 ? 2 : 1;
        for (int i = 2; i &amp;lt; n; i++) {
            int diff = nums[i] - nums[i - 1];
            if ((diff &amp;gt; 0 &amp;amp;&amp;amp; prevdiff &amp;lt;= 0) || (diff &amp;lt; 0 &amp;amp;&amp;amp; prevdiff &amp;gt;= 0)) {
                num++;
                prevdiff = diff;
            }
        }
        return num;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一开始本身的疑点：其代码行只要有&lt;code&gt;(diff&amp;gt; 0 &amp;amp;&amp;amp; prevdiff &amp;lt;= 0) || (diff &amp;lt; 0 &amp;amp;&amp;amp; prevdiff &amp;gt;= 0)&lt;/code&gt;情况出现，则&lt;code&gt;num++&lt;/code&gt;,&lt;br&gt;不会导致因为所选数不是最佳方案而造成答案错误吗？&lt;br&gt;// 经过思考：正因为代码段&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int diff = nums[i] - nums[i - 1];
if ((diff &amp;gt; 0 &amp;amp;&amp;amp; prevdiff &amp;lt;= 0) || (diff &amp;lt; 0 &amp;amp;&amp;amp; prevdiff &amp;gt;= 0)) {
    num++;
    prevdiff = diff;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每次都会更新diff的值，也就是说每次都会更新“峰”或“谷”的值，从而使得为最佳方案&lt;/p&gt;
</content>
        <category term="动态规划" />
        <category term="贪心" />
        <updated>2021-11-26T02:20:40.000Z</updated>
    </entry>
</feed>
