<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;misc&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Tue, 15 Nov 2022 20:10:32 +0800</pubDate>
        <lastBuildDate>Tue, 15 Nov 2022 20:10:32 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/df95b584/</guid>
            <title>Misc</title>
            <link>http://dpm12345.cn/posts/df95b584/</link>
            <category>CTF</category>
            <category>Misc</category>
            <pubDate>Tue, 15 Nov 2022 20:10:32 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;文件操作&#34;&gt;&lt;a href=&#34;#文件操作&#34; class=&#34;headerlink&#34; title=&#34;文件操作&#34;&gt;&lt;/a&gt;文件操作&lt;/h1&gt;&lt;h2 id=&#34;文件类型判断&#34;&gt;&lt;a href=&#34;#文件类型判断&#34; class=&#34;headerlink&#34; title=&#34;文件类型判断&#34;&gt;&lt;/a&gt;文件类型判断&lt;/h2&gt;&lt;p&gt;Linux下的file命令&lt;/p&gt;
&lt;p&gt;十六进制查看文件头&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;JPEG (jpg)：FF D8 FF E1
PNG (png)：89 50 4E 47
GIF (gif)：47 49 46 38
TIFF (tif)：49 49 2A 00
Windows Bitmap (bmp)：42 4D C0 01
CAD (dwg)：41 43 31 30
Adobe Photoshop (psd)：38 42 50 53
Rich Text Format (rtf)：7B 5C 72 74 66
XML (xml)：3C 3F 78 6D 6C
HTML (html)：68 74 6D 6C3 E
Email [thorough only] (eml)：44 65 6C 69 76 65 72 79 2D 64 61 74 65 3A
Outlook Express (dbx)：CF AD 12 FE C5 FD 74 6F
Outlook (pst)：21 42 44 4E
MS Word/Excel (xls.or.doc)：D0 CF 11 E0
MS Access (mdb)：53 74 61 6E 64 61 72 64 20 4A
WordPerfect (wpd)：FF 57 50 43
Adobe Acrobat (pdf)：25 50 44 46 2D 31 2E
Quicken (qdf)：AC 9E BD 8F
Windows Password (pwl)：E3 82 85 96
ZIP Archive (zip)：50 4B 03 04
RAR Archive (rar)：52 61 72 21
Wave (wav)：57 41 56 45
AVI (avi)：41 56 49 20
Real Audio (ram)：2E 72 61 FD
Real Media (rm)：2E 52 4D 46
MPEG (mpg)：00 00 01 BA
MPEG (mpg)：00 00 01 B3
Quicktime (mov)：6D 6F 6F 76
Windows Media (asf)：30 26 B2 75 8E 66 CF 11
MIDI (mid)：4D 54 68 64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;文件分离&#34;&gt;&lt;a href=&#34;#文件分离&#34; class=&#34;headerlink&#34; title=&#34;文件分离&#34;&gt;&lt;/a&gt;文件分离&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Binwalk工具&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;binwalk filename  分析文件

binwalk -e filename  分离文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;foremost&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;foremost filename -o output_floder
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dd手动分离&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;dd if = 源文件 of = 目标文件名 bs=1 skip = 开始分离的字节数

if=file  #输入文件名，缺省为标准输入
of=file  #输出文件名，缺省为标准输出
bs=bytes  #同时设置读写块的大小为 bytes，可代替 ibs 和 obs
skip=blocks  #从输入文件开头跳过 block 个块后再开始复制
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例如: &lt;code&gt;dd if=1.txt of=2.txt bs=5 count=1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中，&lt;code&gt;1.txt&lt;/code&gt;为源文件，&lt;code&gt;2.txt&lt;/code&gt;为输出文件，&lt;code&gt;bs&lt;/code&gt;为设置的块的大小，&lt;code&gt;count&lt;/code&gt;为读几个这样的块，如果是上面的，那么就读写&lt;code&gt;1.txt&lt;/code&gt;的&lt;code&gt;1&lt;/code&gt;个&lt;code&gt;5&lt;/code&gt;字节的块，并输出到&lt;code&gt;2.txt&lt;/code&gt;中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;010 Editor手动分离&lt;/p&gt;
&lt;p&gt;选择需要保存的部分，右键 -&amp;gt; Selection-&amp;gt;Save Selection&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件合并&#34;&gt;&lt;a href=&#34;#文件合并&#34; class=&#34;headerlink&#34; title=&#34;文件合并&#34;&gt;&lt;/a&gt;文件合并&lt;/h2&gt;&lt;h3 id=&#34;Linux&#34;&gt;&lt;a href=&#34;#Linux&#34; class=&#34;headerlink&#34; title=&#34;Linux&#34;&gt;&lt;/a&gt;Linux&lt;/h3&gt;&lt;p&gt;合并&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;cat file1 file2 file3 ... &amp;gt; new_file
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;完整性检测&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;md5sum new_file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;Windows&#34;&gt;&lt;a href=&#34;#Windows&#34; class=&#34;headerlink&#34; title=&#34;Windows&#34;&gt;&lt;/a&gt;Windows&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;copy /B file1+file2+file3+... new_file
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;文件隐写&#34;&gt;&lt;a href=&#34;#文件隐写&#34; class=&#34;headerlink&#34; title=&#34;文件隐写&#34;&gt;&lt;/a&gt;文件隐写&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;notepad++/010Editor 打开后搜索相关内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片隐写&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;细微的颜色差别&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GIF 图多帧隐藏&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;颜色通道隐藏&lt;/li&gt;
&lt;li&gt;不同帧图信息隐藏&lt;/li&gt;
&lt;li&gt;不同帧对比隐写&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Exif 信息隐藏 (windows 右键属性，Linux 使用 exiftool )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片修复&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;图片头修复&lt;/li&gt;
&lt;li&gt;图片尾修复&lt;/li&gt;
&lt;li&gt;CRC 校验修复&lt;/li&gt;
&lt;li&gt;长、宽、高度修复&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;最低有效位 LSB 隐写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片加密&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stegdetect&lt;/li&gt;
&lt;li&gt;outguess&lt;/li&gt;
&lt;li&gt;Jphide&lt;/li&gt;
&lt;li&gt;F5&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;firework&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;LSB-隐写的工具&#34;&gt;&lt;a href=&#34;#LSB-隐写的工具&#34; class=&#34;headerlink&#34; title=&#34;LSB 隐写的工具&#34;&gt;&lt;/a&gt;LSB 隐写的工具&lt;/h2&gt;&lt;h3 id=&#34;Stegsolve&#34;&gt;&lt;a href=&#34;#Stegsolve&#34; class=&#34;headerlink&#34; title=&#34;Stegsolve&#34;&gt;&lt;/a&gt;Stegsolve&lt;/h3&gt;&lt;h3 id=&#34;zsteg-能自动列举出所有情况的最低有效位&#34;&gt;&lt;a href=&#34;#zsteg-能自动列举出所有情况的最低有效位&#34; class=&#34;headerlink&#34; title=&#34;zsteg (能自动列举出所有情况的最低有效位)&#34;&gt;&lt;/a&gt;zsteg (能自动列举出所有情况的最低有效位)&lt;/h3&gt;&lt;h3 id=&#34;wbstego4-解密通过-lsb-加密的图片&#34;&gt;&lt;a href=&#34;#wbstego4-解密通过-lsb-加密的图片&#34; class=&#34;headerlink&#34; title=&#34;wbstego4 (解密通过 lsb 加密的图片)&#34;&gt;&lt;/a&gt;wbstego4 (解密通过 lsb 加密的图片)&lt;/h3&gt;&lt;h3 id=&#34;python-脚本&#34;&gt;&lt;a href=&#34;#python-脚本&#34; class=&#34;headerlink&#34; title=&#34;python 脚本&#34;&gt;&lt;/a&gt;python 脚本&lt;/h3&gt;&lt;h3 id=&#34;TweakPNG&#34;&gt;&lt;a href=&#34;#TweakPNG&#34; class=&#34;headerlink&#34; title=&#34;TweakPNG&#34;&gt;&lt;/a&gt;TweakPNG&lt;/h3&gt;&lt;p&gt;使用场景：文件头正常却无法打开文件，利用TweakPN修改CRC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CRC出错，根据提示在源文件搜索替换即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CRC没错，但由于高度或宽度错误，需通过CRC计算出正确的高度或宽度，之后修改高度或宽度&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Bftools&#34;&gt;&lt;a href=&#34;#Bftools&#34; class=&#34;headerlink&#34; title=&#34;Bftools&#34;&gt;&lt;/a&gt;Bftools&lt;/h3&gt;&lt;p&gt;用于解密图片信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;Bftools.exe decode braincopter filename --output out_file
Bftools.exe run out_file
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;slienteye&#34;&gt;&lt;a href=&#34;#slienteye&#34; class=&#34;headerlink&#34; title=&#34;slienteye&#34;&gt;&lt;/a&gt;slienteye&lt;/h3&gt;&lt;h2 id=&#34;JPG-图像相关&#34;&gt;&lt;a href=&#34;#JPG-图像相关&#34; class=&#34;headerlink&#34; title=&#34;JPG 图像相关&#34;&gt;&lt;/a&gt;JPG 图像相关&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Stegdetect 工具探测加密方式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要有&lt;code&gt;JSteg&lt;/code&gt;、&lt;code&gt;JPHide&lt;/code&gt; 、&lt;code&gt;OutGuess&lt;/code&gt;、&lt;code&gt;Invisible Secrets&lt;/code&gt;、&lt;code&gt;F5&lt;/code&gt;、&lt;code&gt;appendX&lt;/code&gt;、&lt;code&gt;Camouflage&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jhide图形化工具&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;outguess&lt;/p&gt;
&lt;p&gt;&lt;code&gt;outguess -r file out_file&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;F5 F5-steganography_F5&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java Extract file -p password&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对于黑变白，或变彩色的二维码图片&#34;&gt;&lt;a href=&#34;#对于黑变白，或变彩色的二维码图片&#34; class=&#34;headerlink&#34; title=&#34;对于黑变白，或变彩色的二维码图片&#34;&gt;&lt;/a&gt;对于黑变白，或变彩色的二维码图片&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;画图软件，选择后 &lt;code&gt;反色&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Stegsolve选择各种通道查看图片 (或许需要先反色)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;压缩文件操作&#34;&gt;&lt;a href=&#34;#压缩文件操作&#34; class=&#34;headerlink&#34; title=&#34;压缩文件操作&#34;&gt;&lt;/a&gt;压缩文件操作&lt;/h2&gt;&lt;h3 id=&#34;伪加密&#34;&gt;&lt;a href=&#34;#伪加密&#34; class=&#34;headerlink&#34; title=&#34;伪加密&#34;&gt;&lt;/a&gt;伪加密&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;对于zip搜索&lt;code&gt;504b0102&lt;/code&gt;，再从&lt;code&gt;50&lt;/code&gt;开始，数到第九个和第十个，将其改为&lt;code&gt;0000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于rar，从头往后，第&lt;code&gt;24&lt;/code&gt;个字节，尾数为&lt;code&gt;4&lt;/code&gt;为加密，尾数为&lt;code&gt;0&lt;/code&gt;为无加密&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;ZIP 文件主要由三个部分组成：压缩源文件数据区 + 核心目录 + 目录结束标志

压缩源文件数据区
local file header + file data + data descriptor

local file header：文件头用于标识该文件的开始，记录了该压缩文件的信息，
这里的文件头标识由固定值 50 4B 03 04 开头，也是 ZIP 的文件头的重要标志。

file data：文件数据记录了相应压缩文件的数据。

data descriptor：数据描述符用于标识该文件压缩结束，
该结构只有在相应的 local file header 中通用标记字段的第 3 bit 设为 1 时才会出现，
紧接在压缩文件源数据后。
50 4B 03 04：这是头文件标记（0x04034b50） 
14 00：解压文件所需 pkware 版本 
00 00：全局方式位标记（有无加密） 
08 00：压缩方式 
5A 7E：最后修改文件时间 
F7 46：最后修改文件日期 
16 B5 80 14：CRC-32 校验（1480B516） 
19 00 00 00：压缩后尺寸（25） 
17 00 00 00：未压缩尺寸（23） 
07 00：文件名长度 
00 00：扩展记录长度 

6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 （直到核心目录文件头标识）


压缩源文件目录区
记录了压缩文件的目录信息，在这个数据区中每一条纪录对应在压缩源文件数据区中的一条数据。

50 4B 01 02：目录中文件文件头标记 (0x02014b50)  
3F 00：压缩使用的 pkware 版本  
14 00：解压文件所需 pkware 版本  
00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为 09 00 打开就会提示有密码了）  
08 00：压缩方式  
5A 7E：最后修改文件时间  
F7 46：最后修改文件日期 

16 B5 80 14：CRC-32 校验（1480B516）  
19 00 00 00：压缩后尺寸（25）  
17 00 00 00：未压缩尺寸（23）  
07 00：文件名长度  
24 00：扩展字段长度  
00 00：文件注释长度  
00 00：磁盘开始号  
00 00：内部文件属性  
20 00 00 00：外部文件属性  
00 00 00 00：局部头部偏移量  
6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 (直到目录结束标识头）

目录结束标识（End of Central Directory Record)
存在于整个归档包的结尾，用于标记压缩的目录数据的结束。每个压缩文件必须有且只有一个结束标识。

50 4B 05 06：目录结束标记  
00 00：当前磁盘编号  
00 00：目录区开始磁盘编号  
01 00：本磁盘上纪录总数  
01 00：目录区中纪录总数  
59 00 00 00：目录区尺寸大小  
3E 00 00 00：目录区对第一张磁盘的偏移量  
00 00：ZIP 文件注释长度
————————————————
版权声明：本文为 CSDN 博主「Hardworking666」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/Hardworking666/article/details/122266479
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;暴力破解&#34;&gt;&lt;a href=&#34;#暴力破解&#34; class=&#34;headerlink&#34; title=&#34;暴力破解&#34;&gt;&lt;/a&gt;暴力破解&lt;/h3&gt;&lt;p&gt;ARCHPR 工具&lt;/p&gt;
&lt;p&gt;Zip&lt;/p&gt;
&lt;h3 id=&#34;明文攻击&#34;&gt;&lt;a href=&#34;#明文攻击&#34; class=&#34;headerlink&#34; title=&#34;明文攻击&#34;&gt;&lt;/a&gt;明文攻击&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拥有压缩文件中其中一个或多个相同的文件时，可以将其用与压缩包相同的算法压缩，然后放入ARCHPR中破解，得到密钥后，然后使用密钥破解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bkcrack工具&lt;/p&gt;
&lt;p&gt;知道某一文件的其中部分内容时，可以使用bkcrack, 如知道解压文件中&lt;code&gt;flag.txt&lt;/code&gt;的&lt;code&gt;xxxx&lt;/code&gt;内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;echo -n &#39;xxxx&#39;(已知的明文内容) &amp;gt; plain.txt 
bkcrack -C flag.zip(目标压缩文件) -c flag.txt(目标文件) -p plain.txt(已知道的部分明文存储文件) -x 33 30394632 # 33 为 09F2 的十六进制在 flag 中的偏移量
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到密钥后&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;bkcrack -C flag.zip -c flag.txt -k xxxxxxxx xxxxxxxx xxxxxxxx(上面操作得到的密钥) -d flag.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获得一个没有密码的压缩包，正常解压&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;RAR-文件格式相关-本地试没有成功&#34;&gt;&lt;a href=&#34;#RAR-文件格式相关-本地试没有成功&#34; class=&#34;headerlink&#34; title=&#34;RAR 文件格式相关 (本地试没有成功)&#34;&gt;&lt;/a&gt;RAR 文件格式相关 (本地试没有成功)&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;HEAD_CRC		2 字节					所有块或块部分的 CRC
HEAD_TYPE		1 字节					块类型
HEAD_FLAGS		2 字节					块标记
HEAD_SIZE		2 字节					块大小
ADD_SIZE		4 字节					可选结构，增加块大小
-----------------------------------------------
那么，文件块的第 3 个字节为块类型，也叫头类型
头类型是 0x72 表示是标记块
头类型是 0x73 表示是压缩文件头块
头类型是 0x74 表示是文件头块
头类型是 0x75 表示是注释头块
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;# 本文作者： dpm12345 @dpm12345&lt;br&gt;# 本文链接： &lt;a href=&#34;http://dpm12345.cn/2022/10/02/Misc/&#34;&gt;http://dpm12345.cn/2022/10/02/Misc/&lt;/a&gt;&lt;br&gt;# 版权声明： 本站所有文章除特别声明外，均采用 (CC)BY-NC-SA 许可协议。转载请注明出处！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;确定文件块的位置：&lt;/strong&gt; 查看右边字符，根据内容来确认一个文件的开始与结束&lt;/p&gt;
&lt;h1 id=&#34;流量取证&#34;&gt;&lt;a href=&#34;#流量取证&#34; class=&#34;headerlink&#34; title=&#34;流量取证&#34;&gt;&lt;/a&gt;流量取证&lt;/h1&gt;&lt;h2 id=&#34;wireshark&#34;&gt;&lt;a href=&#34;#wireshark&#34; class=&#34;headerlink&#34; title=&#34;wireshark&#34;&gt;&lt;/a&gt;wireshark&lt;/h2&gt;&lt;h3 id=&#34;过滤命令&#34;&gt;&lt;a href=&#34;#过滤命令&#34; class=&#34;headerlink&#34; title=&#34;过滤命令&#34;&gt;&lt;/a&gt;过滤命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ip&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ip.src eq / == x.x.x.x 对源地址的过滤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ip.dst eq / == x.x.x.x 对目标地址的过滤&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ip.addr eq / == x.x.x.x 对源或目标的过滤&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;port&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;tcp.port eq 80 or udp.port eq 80&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp.dstport == 80 只显示 tcp 协议的目标端口 80&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp.srcport == 80 只显示 tcp 协议的源端口为 80&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp.port &amp;gt;=1 and tcp.port &amp;lt;= 80 显示一段范围内 tcp 协议的端口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过滤协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tcp/udp/http…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;过滤 MAC&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;eth.dst == A0:00:00:04:C5:84 过滤目标 MAC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包长度过滤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;udp.lenth == 26 指 udp 本身固定长度 8 加上 udp 下面那块数据包之和&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp.len &amp;gt;= 7 指的是 ip 数据包 ( tcp 下面那块数据), 不包括 tcp 本身&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ip.len == 94 除了以太网头固定长度 14 ，其他都是 ip.len ，及从 ip 本身到最后&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;frame.len == xxx 整个数据包长度，从 eth 开始到最后&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http 模式过滤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;http.request.method == “GET”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http.request.method == “POST”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http.request.url == “/img/logo-edu.gif”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http contains “GET”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http contains “HTTP/1.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http contains “flag”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;http contains “KEY”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tcp contains “flag”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协议分级&#34;&gt;&lt;a href=&#34;#协议分级&#34; class=&#34;headerlink&#34; title=&#34;协议分级&#34;&gt;&lt;/a&gt;协议分级&lt;/h3&gt;&lt;p&gt;工具栏中的&lt;code&gt;统计--&amp;gt;协议分级&lt;/code&gt;，可以用来查看大致的协议分别情况&lt;/p&gt;
&lt;h3 id=&#34;筛选特征&#34;&gt;&lt;a href=&#34;#筛选特征&#34; class=&#34;headerlink&#34; title=&#34;筛选特征&#34;&gt;&lt;/a&gt;筛选特征&lt;/h3&gt;&lt;p&gt;右键 –&amp;gt; 作为过滤器应用 –&amp;gt; 选中&lt;/p&gt;
&lt;h3 id=&#34;流汇聚&#34;&gt;&lt;a href=&#34;#流汇聚&#34; class=&#34;headerlink&#34; title=&#34;流汇聚&#34;&gt;&lt;/a&gt;流汇聚&lt;/h3&gt;&lt;p&gt;右键 –&amp;gt; 追踪流&lt;/p&gt;
&lt;h3 id=&#34;数据提取&#34;&gt;&lt;a href=&#34;#数据提取&#34; class=&#34;headerlink&#34; title=&#34;数据提取&#34;&gt;&lt;/a&gt;数据提取&lt;/h3&gt;&lt;h3 id=&#34;自动提取通过-http-传输的文件内容&#34;&gt;&lt;a href=&#34;#自动提取通过-http-传输的文件内容&#34; class=&#34;headerlink&#34; title=&#34;自动提取通过 http 传输的文件内容&#34;&gt;&lt;/a&gt;自动提取通过 http 传输的文件内容&lt;/h3&gt;&lt;p&gt;&lt;code&gt;文件--&amp;gt;导出对象--&amp;gt;HTTP&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;手动提取文件内容-信息&#34;&gt;&lt;a href=&#34;#手动提取文件内容-信息&#34; class=&#34;headerlink&#34; title=&#34;手动提取文件内容 (信息)&#34;&gt;&lt;/a&gt;手动提取文件内容 (信息)&lt;/h3&gt;&lt;p&gt;右键 –&amp;gt; 导出分组字节流 –&amp;gt; 或者 点击菜单栏 文件 –&amp;gt; 导出分组字节流，&lt;/p&gt;
&lt;p&gt;快捷方式 &lt;code&gt;Ctrl+H&lt;/code&gt; ，在弹出的框中将文件保存成二进制文件&lt;/p&gt;
&lt;h3 id=&#34;无线wifi流量包跑密码&#34;&gt;&lt;a href=&#34;#无线wifi流量包跑密码&#34; class=&#34;headerlink&#34; title=&#34;无线wifi流量包跑密码&#34;&gt;&lt;/a&gt;无线wifi流量包跑密码&lt;/h3&gt;&lt;p&gt;协议分析：wireless LAN 协议，很有可能是WPA或者WEP加密的无线数据包&lt;/p&gt;
&lt;h4 id=&#34;aircrack-ng&#34;&gt;&lt;a href=&#34;#aircrack-ng&#34; class=&#34;headerlink&#34; title=&#34;aircrack-ng&#34;&gt;&lt;/a&gt;aircrack-ng&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用aircrack-ng检查cap包&lt;code&gt;aircrack-ng xxx.cap&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用aircrack-ng跑字典进行握手包破解&lt;code&gt;aircrack-ng xxx.cap -w pass.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;USB-流量包分析&#34;&gt;&lt;a href=&#34;#USB-流量包分析&#34; class=&#34;headerlink&#34; title=&#34;USB 流量包分析&#34;&gt;&lt;/a&gt;USB 流量包分析&lt;/h3&gt;&lt;p&gt;USB 主要涉及键盘击键、鼠标移动与点击，存储设备的明文传输通信。USB 无线网卡网络传输内容等&lt;/p&gt;
&lt;p&gt;USB 协议的数据部分在 Leftover Capture Data 域之中&lt;/p&gt;
&lt;p&gt;右键 –&amp;gt;leftover capture data –&amp;gt; 应用为列&lt;/p&gt;
&lt;p&gt;Leftover capture data 有着信息数据&lt;/p&gt;
&lt;h4 id=&#34;键盘流量&#34;&gt;&lt;a href=&#34;#键盘流量&#34; class=&#34;headerlink&#34; title=&#34;键盘流量&#34;&gt;&lt;/a&gt;键盘流量&lt;/h4&gt;&lt;h4 id=&#34;鼠标流量&#34;&gt;&lt;a href=&#34;#鼠标流量&#34; class=&#34;headerlink&#34; title=&#34;鼠标流量&#34;&gt;&lt;/a&gt;鼠标流量&lt;/h4&gt;&lt;p&gt;鼠标数据包的数据长度是4个字节&lt;/p&gt;
&lt;p&gt;第一个字节代表按键，当取&lt;code&gt;0x00&lt;/code&gt;时，代表没有按键；当&lt;code&gt;0x01&lt;/code&gt;时，代表按左键，为&lt;code&gt;0x02&lt;/code&gt;时，代表按右键&lt;/p&gt;
&lt;p&gt;第二个字节代表左右偏移，值为正，代表右移多少像素，为负，则向左移多少像素&lt;/p&gt;
&lt;p&gt;第三个字节代表上下偏移，上为正，下位负&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;提取：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;文件 -&amp;gt; 导出分组解析结果 -&amp;gt; 为csv，导出保存成一个.csv文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;wireshark提供的命令行工具&lt;code&gt;tshark&lt;/code&gt;，可以将&lt;code&gt;Leftover Capture Data&lt;/code&gt;数据单独复制出来&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tshark -r usb1.pcap(流量文件) -T fields -e usb.capdata &amp;gt; usbdata.txt&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于键盘数据，可以通过脚本进行转换，转换成对应的字母&lt;/p&gt;
&lt;p&gt;对于鼠标数据，则根据数据用脚本描出轨迹，画图，得到信息&lt;/p&gt;
&lt;p&gt;这里有两个脚本&lt;/p&gt;
&lt;p&gt;键盘数据：(修改了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1dhbmdZaWhhbmcvVXNiS2V5Ym9hcmREYXRhSGFja2Vy&#34;&gt;https://github.com/WangYihang/UsbKeyboardDataHacker&lt;/span&gt; 部分代码)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#!/usr/bin/env python

import sys
import os

DataFileName = &#34;usb.dat&#34;

presses = []

normalKeys = {&#34;04&#34;:&#34;a&#34;, &#34;05&#34;:&#34;b&#34;, &#34;06&#34;:&#34;c&#34;, &#34;07&#34;:&#34;d&#34;, &#34;08&#34;:&#34;e&#34;, &#34;09&#34;:&#34;f&#34;, &#34;0a&#34;:&#34;g&#34;, &#34;0b&#34;:&#34;h&#34;, &#34;0c&#34;:&#34;i&#34;, &#34;0d&#34;:&#34;j&#34;, &#34;0e&#34;:&#34;k&#34;, &#34;0f&#34;:&#34;l&#34;, &#34;10&#34;:&#34;m&#34;, &#34;11&#34;:&#34;n&#34;, &#34;12&#34;:&#34;o&#34;, &#34;13&#34;:&#34;p&#34;, &#34;14&#34;:&#34;q&#34;, &#34;15&#34;:&#34;r&#34;, &#34;16&#34;:&#34;s&#34;, &#34;17&#34;:&#34;t&#34;, &#34;18&#34;:&#34;u&#34;, &#34;19&#34;:&#34;v&#34;, &#34;1a&#34;:&#34;w&#34;, &#34;1b&#34;:&#34;x&#34;, &#34;1c&#34;:&#34;y&#34;, &#34;1d&#34;:&#34;z&#34;,&#34;1e&#34;:&#34;1&#34;, &#34;1f&#34;:&#34;2&#34;, &#34;20&#34;:&#34;3&#34;, &#34;21&#34;:&#34;4&#34;, &#34;22&#34;:&#34;5&#34;, &#34;23&#34;:&#34;6&#34;,&#34;24&#34;:&#34;7&#34;,&#34;25&#34;:&#34;8&#34;,&#34;26&#34;:&#34;9&#34;,&#34;27&#34;:&#34;0&#34;,&#34;28&#34;:&#34;&amp;lt;RET&amp;gt;&#34;,&#34;29&#34;:&#34;&amp;lt;ESC&amp;gt;&#34;,&#34;2a&#34;:&#34;&amp;lt;DEL&amp;gt;&#34;, &#34;2b&#34;:&#34;\t&#34;,&#34;2c&#34;:&#34;&amp;lt;SPACE&amp;gt;&#34;,&#34;2d&#34;:&#34;-&#34;,&#34;2e&#34;:&#34;=&#34;,&#34;2f&#34;:&#34;[&#34;,&#34;30&#34;:&#34;]&#34;,&#34;31&#34;:&#34;\\&#34;,&#34;32&#34;:&#34;&amp;lt;NON&amp;gt;&#34;,&#34;33&#34;:&#34;;&#34;,&#34;34&#34;:&#34;&#39;&#34;,&#34;35&#34;:&#34;&amp;lt;GA&amp;gt;&#34;,&#34;36&#34;:&#34;,&#34;,&#34;37&#34;:&#34;.&#34;,&#34;38&#34;:&#34;/&#34;,&#34;39&#34;:&#34;&amp;lt;CAP&amp;gt;&#34;,&#34;3a&#34;:&#34;&amp;lt;F1&amp;gt;&#34;,&#34;3b&#34;:&#34;&amp;lt;F2&amp;gt;&#34;, &#34;3c&#34;:&#34;&amp;lt;F3&amp;gt;&#34;,&#34;3d&#34;:&#34;&amp;lt;F4&amp;gt;&#34;,&#34;3e&#34;:&#34;&amp;lt;F5&amp;gt;&#34;,&#34;3f&#34;:&#34;&amp;lt;F6&amp;gt;&#34;,&#34;40&#34;:&#34;&amp;lt;F7&amp;gt;&#34;,&#34;41&#34;:&#34;&amp;lt;F8&amp;gt;&#34;,&#34;42&#34;:&#34;&amp;lt;F9&amp;gt;&#34;,&#34;43&#34;:&#34;&amp;lt;F10&amp;gt;&#34;,&#34;44&#34;:&#34;&amp;lt;F11&amp;gt;&#34;,&#34;45&#34;:&#34;&amp;lt;F12&amp;gt;&#34;}

shiftKeys = {&#34;04&#34;:&#34;A&#34;, &#34;05&#34;:&#34;B&#34;, &#34;06&#34;:&#34;C&#34;, &#34;07&#34;:&#34;D&#34;, &#34;08&#34;:&#34;E&#34;, &#34;09&#34;:&#34;F&#34;, &#34;0a&#34;:&#34;G&#34;, &#34;0b&#34;:&#34;H&#34;, &#34;0c&#34;:&#34;I&#34;, &#34;0d&#34;:&#34;J&#34;, &#34;0e&#34;:&#34;K&#34;, &#34;0f&#34;:&#34;L&#34;, &#34;10&#34;:&#34;M&#34;, &#34;11&#34;:&#34;N&#34;, &#34;12&#34;:&#34;O&#34;, &#34;13&#34;:&#34;P&#34;, &#34;14&#34;:&#34;Q&#34;, &#34;15&#34;:&#34;R&#34;, &#34;16&#34;:&#34;S&#34;, &#34;17&#34;:&#34;T&#34;, &#34;18&#34;:&#34;U&#34;, &#34;19&#34;:&#34;V&#34;, &#34;1a&#34;:&#34;W&#34;, &#34;1b&#34;:&#34;X&#34;, &#34;1c&#34;:&#34;Y&#34;, &#34;1d&#34;:&#34;Z&#34;,&#34;1e&#34;:&#34;!&#34;, &#34;1f&#34;:&#34;@&#34;, &#34;20&#34;:&#34;#&#34;, &#34;21&#34;:&#34;$&#34;, &#34;22&#34;:&#34;%&#34;, &#34;23&#34;:&#34;^&#34;,&#34;24&#34;:&#34;&amp;amp;&#34;,&#34;25&#34;:&#34;*&#34;,&#34;26&#34;:&#34;(&#34;,&#34;27&#34;:&#34;)&#34;,&#34;28&#34;:&#34;&amp;lt;RET&amp;gt;&#34;,&#34;29&#34;:&#34;&amp;lt;ESC&amp;gt;&#34;,&#34;2a&#34;:&#34;&amp;lt;DEL&amp;gt;&#34;, &#34;2b&#34;:&#34;\t&#34;,&#34;2c&#34;:&#34;&amp;lt;SPACE&amp;gt;&#34;,&#34;2d&#34;:&#34;_&#34;,&#34;2e&#34;:&#34;+&#34;,&#34;2f&#34;:&#34;{&#34;,&#34;30&#34;:&#34;}&#34;,&#34;31&#34;:&#34;|&#34;,&#34;32&#34;:&#34;&amp;lt;NON&amp;gt;&#34;,&#34;33&#34;:&#34;:&#34;,&#34;34&#34;:&#34;\&#34;&#34;,&#34;35&#34;:&#34;&amp;lt;GA&amp;gt;&#34;,&#34;36&#34;:&#34;&amp;lt;&#34;,&#34;37&#34;:&#34;&amp;gt;&#34;,&#34;38&#34;:&#34;?&#34;,&#34;39&#34;:&#34;&amp;lt;CAP&amp;gt;&#34;,&#34;3a&#34;:&#34;&amp;lt;F1&amp;gt;&#34;,&#34;3b&#34;:&#34;&amp;lt;F2&amp;gt;&#34;, &#34;3c&#34;:&#34;&amp;lt;F3&amp;gt;&#34;,&#34;3d&#34;:&#34;&amp;lt;F4&amp;gt;&#34;,&#34;3e&#34;:&#34;&amp;lt;F5&amp;gt;&#34;,&#34;3f&#34;:&#34;&amp;lt;F6&amp;gt;&#34;,&#34;40&#34;:&#34;&amp;lt;F7&amp;gt;&#34;,&#34;41&#34;:&#34;&amp;lt;F8&amp;gt;&#34;,&#34;42&#34;:&#34;&amp;lt;F9&amp;gt;&#34;,&#34;43&#34;:&#34;&amp;lt;F10&amp;gt;&#34;,&#34;44&#34;:&#34;&amp;lt;F11&amp;gt;&#34;,&#34;45&#34;:&#34;&amp;lt;F12&amp;gt;&#34;}

def main():
    # check argv
    if len(sys.argv) != 2:
        print(&#34;Usage : &#34;)
        print(&#34;        python UsbKeyboardHacker.py data.pcap&#34;)
        print(&#34;Tips : &#34;)
        print(&#34;        To use this python script , you must install the tshark first.&#34;)
        print(&#34;        You can use `sudo apt-get install tshark` to install it&#34;)
        print(&#34;Author : &#34;)
        print(&#34;        WangYihang &amp;lt;wangyihanger@gmail.com&amp;gt;&#34;)
        print(&#34;        If you have any questions , please contact me by email.&#34;)
        print(&#34;        Thank you for using.&#34;)
        exit(1)

    # get argv
    pcapFilePath = sys.argv[1]
    
    # get data of pcap
    os.system(&#34;tshark -r %s -T fields -e usb.capdata  &amp;gt; %s&#34; % (pcapFilePath, DataFileName))

    # read data
    with open(DataFileName, &#34;r&#34;) as f:
        for line in f:
            presses.append(line[0:-1])
    # handle
    result = &#34;&#34;
    for press in presses:
        if press == &#39;&#39;:
            continue
        if &#39;:&#39; in press:
            Bytes = press.split(&#34;:&#34;)
        else:
            Bytes = [press[i:i+2] for i in range(0, len(press), 2)]
        if Bytes[0] == &#34;00&#34;:
            if Bytes[2] != &#34;00&#34; and normalKeys.get(Bytes[2]):
                result += normalKeys[Bytes[2]]
        elif int(Bytes[0],16) &amp;amp; 0b10 or int(Bytes[0],16) &amp;amp; 0b100000: # shift key is pressed.
            if Bytes[2] != &#34;00&#34; and normalKeys.get(Bytes[2]):
                result += shiftKeys[Bytes[2]]
        else:
            print(&#34;[-] Unknow Key : %s&#34; % (Bytes[0]))
    print(&#34;[+] Found : %s&#34; % (result))

    # clean the temp data
    os.remove(DataFileName)


if __name__ == &#34;__main__&#34;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;鼠标数据：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RwbTEyMzQ1L1VzYk1pY2VEYXRhSGFja2Vy&#34;&gt;https://github.com/dpm12345/UsbMiceDataHacker&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;(修改自 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1dhbmdZaWhhbmcvVXNiTWljZURhdGFIYWNrZXI=&#34;&gt;https://github.com/WangYihang/UsbMiceDataHacker&lt;/span&gt;)&lt;/p&gt;
&lt;h3 id=&#34;HTTPS-流量包分析&#34;&gt;&lt;a href=&#34;#HTTPS-流量包分析&#34; class=&#34;headerlink&#34; title=&#34;HTTPS 流量包分析&#34;&gt;&lt;/a&gt;HTTPS 流量包分析&lt;/h3&gt;&lt;p&gt;https流量是经过TLS协议加密过的，需要导入key才能看到原始的http流量&lt;/p&gt;
&lt;p&gt;编辑 -&amp;gt; 首选项 -&amp;gt; Protocols -&amp;gt; SSL -&amp;gt; Edit RSA keys list&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
