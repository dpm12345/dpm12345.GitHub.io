<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;数据结构&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Sun, 20 Feb 2022 20:07:26 +0800</pubDate>
        <lastBuildDate>Sun, 20 Feb 2022 20:07:26 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/e85d694a/</guid>
            <title>二叉树</title>
            <link>http://dpm12345.cn/posts/e85d694a/</link>
            <category>树</category>
            <category>二叉树</category>
            <category>数据结构</category>
            <pubDate>Sun, 20 Feb 2022 20:07:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;树的相关定义&#34;&gt;&lt;a href=&#34;#树的相关定义&#34; class=&#34;headerlink&#34; title=&#34;树的相关定义&#34;&gt;&lt;/a&gt;树的相关定义&lt;/h1&gt;&lt;p&gt;![](../../../post_images/树.jpeg “树”)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组成：树由若干个节点构成，根节点在最上方，如图 1 为根节点&lt;/li&gt;
&lt;li&gt;度：节点下方延申的部分称为子树，其个数被称为度，如图 2，3，4，5 为 1 的度，个数为 4叶子节点和分支节点：度为$0$ 的节点被称为&lt;/li&gt;
&lt;li&gt;叶子节点或终端节点，不为$0$ 被称为非终端节点或分支节点，如 13 为叶子节点，3 为分支节点&lt;/li&gt;
&lt;li&gt;父节点：若一个节点含有子节点，那么称为该子节点的父节点，如 6 为 13 的父节点&lt;/li&gt;
&lt;li&gt;兄弟节点：具有相同父节点的节点互称为兄弟节点，如 2，3，4，5&lt;/li&gt;
&lt;li&gt;树的度：一棵树中，最大的节点的度称为树的度&lt;/li&gt;
&lt;li&gt;节点点的层次：从根开始定义起，根为第 1 层，根的子节点为第 2 层，以此类推；树的高度或深度：树中节点的最大层次，如图为 4&lt;/li&gt;
&lt;li&gt;节点的祖先：从根到该节点所经分支上的所有节点；如上图：1 是所有节点的祖先&lt;/li&gt;
&lt;li&gt;子孙：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是 1 的子孙&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二叉树的定义&#34;&gt;&lt;a href=&#34;#二叉树的定义&#34; class=&#34;headerlink&#34; title=&#34;二叉树的定义&#34;&gt;&lt;/a&gt;二叉树的定义&lt;/h1&gt;&lt;p&gt;只有两个子树&lt;/p&gt;
&lt;p&gt;基本组成形式为 节点 + 左子树 + 右子树 &lt;/p&gt;
&lt;p&gt;如图:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E4%BA%8C%E5%8F%89%E6%A0%91.jpeg&#34; title=&#34;二叉树&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;特殊的二叉树&#34;&gt;&lt;a href=&#34;#特殊的二叉树&#34; class=&#34;headerlink&#34; title=&#34;特殊的二叉树&#34;&gt;&lt;/a&gt;特殊的二叉树&lt;/h1&gt;&lt;p&gt;**满二叉树:**一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为$K$，且结点总数是$2^k-1$，则它就是满二叉树。&lt;/p&gt;
&lt;p&gt;**完全二叉树:**完全二叉树是效率很高的数据结构，完全二叉树是由满二叉树而引出来的。对于深度为$K$的，有$n$个结点的二叉树，当且仅当其每一个结点都与深度为$K$的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树。要注意的是满二叉树是一种特殊的完全二叉树。&lt;/p&gt;
&lt;p&gt;![](../../../post_images/满二叉树.png “满二叉树”)&lt;/p&gt;
&lt;h1 id=&#34;二叉树的性质&#34;&gt;&lt;a href=&#34;#二叉树的性质&#34; class=&#34;headerlink&#34; title=&#34;二叉树的性质&#34;&gt;&lt;/a&gt;二叉树的性质&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;若规定根节点的层数为$1$，则一棵非空二叉树的第$i$层上最多有$2^{i-1}$个结点.&lt;/li&gt;
&lt;li&gt;若规定根节点的层数为$1$，则深度为h的二叉树的最大结点数是$2^h-1$.&lt;/li&gt;
&lt;li&gt;对任何一棵二叉树，如果度为$0$其叶结点个数为$n_0$, 度为2的分支结点个数为$n_2$, 则有$n_0＝n_2+1$&lt;/li&gt;
&lt;li&gt;若规定根节点的层数为$1$，具有$n$个结点的满二叉树的深度，$h=LogN$&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二叉树的实现形式&#34;&gt;&lt;a href=&#34;#二叉树的实现形式&#34; class=&#34;headerlink&#34; title=&#34;二叉树的实现形式&#34;&gt;&lt;/a&gt;二叉树的实现形式&lt;/h1&gt;&lt;h2 id=&#34;顺序形式&#34;&gt;&lt;a href=&#34;#顺序形式&#34; class=&#34;headerlink&#34; title=&#34;顺序形式&#34;&gt;&lt;/a&gt;顺序形式&lt;/h2&gt;&lt;p&gt;采用数组的方式，一个存放一个节点，可能会存在空，大小需要变化&lt;/p&gt;
&lt;p&gt;采用该种方式构建的完全二叉树&lt;/p&gt;
&lt;p&gt;性质&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左子树根节点 $leftchild=parent*2+1$&lt;/li&gt;
&lt;li&gt;右子树根节点 $leftchild=parent*2+1$&lt;/li&gt;
&lt;li&gt;根节点 $parent=(child-1)/2$&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;链式形式&#34;&gt;&lt;a href=&#34;#链式形式&#34; class=&#34;headerlink&#34; title=&#34;链式形式&#34;&gt;&lt;/a&gt;链式形式&lt;/h2&gt;&lt;p&gt;可以定义出每一个节点，用地址进行链接&lt;/p&gt;
&lt;h3 id=&#34;二叉树的链式实现及相关遍历&#34;&gt;&lt;a href=&#34;#二叉树的链式实现及相关遍历&#34; class=&#34;headerlink&#34; title=&#34;二叉树的链式实现及相关遍历&#34;&gt;&lt;/a&gt;二叉树的链式实现及相关遍历&lt;/h3&gt;&lt;h4 id=&#34;实现&#34;&gt;&lt;a href=&#34;#实现&#34; class=&#34;headerlink&#34; title=&#34;实现&#34;&gt;&lt;/a&gt;实现&lt;/h4&gt;&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;//tree.h
#ifndef TREE_H
#define TREE_H

// 每个结点的定义
template&amp;lt;class T&amp;gt;
class RNode{
public:
    T data;
    class RNode&amp;lt;T&amp;gt; * lNode;
    class RNode&amp;lt;T&amp;gt; * rNode;
};

#endif

//tree.c
void test1()
{
    //A
    RNode&amp;lt;int&amp;gt;* A = new RNode&amp;lt;int&amp;gt;;
    A-&amp;gt;data = 5;
    A-&amp;gt;lNode = nullptr;
    A-&amp;gt;rNode = nullptr;
    //B
    RNode&amp;lt;int&amp;gt;* B = new RNode&amp;lt;int&amp;gt;;
    B-&amp;gt;data = 3;
    B-&amp;gt;lNode = nullptr;
    B-&amp;gt;rNode = nullptr;
    //C
    RNode&amp;lt;int&amp;gt;* C = new RNode&amp;lt;int&amp;gt;;
    C-&amp;gt;data = 4;
    C-&amp;gt;lNode = nullptr;
    C-&amp;gt;rNode = nullptr;
    //D
    RNode&amp;lt;int&amp;gt;* D = new RNode&amp;lt;int&amp;gt;;
    D-&amp;gt;data = 7;
    D-&amp;gt;lNode = nullptr;
    D-&amp;gt;rNode = nullptr;
    //E
    RNode&amp;lt;int&amp;gt;* E = new RNode&amp;lt;int&amp;gt;;
    E-&amp;gt;data = 12;
    E-&amp;gt;lNode = nullptr;
    E-&amp;gt;rNode = nullptr;

    // 建立联系
    A-&amp;gt;lNode = B;
    A-&amp;gt;rNode = C;
    B-&amp;gt;lNode = D;
    C-&amp;gt;rNode = E;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;遍历&#34;&gt;&lt;a href=&#34;#遍历&#34; class=&#34;headerlink&#34; title=&#34;遍历&#34;&gt;&lt;/a&gt;遍历&lt;/h4&gt;&lt;h5 id=&#34;前序&#34;&gt;&lt;a href=&#34;#前序&#34; class=&#34;headerlink&#34; title=&#34;前序&#34;&gt;&lt;/a&gt;前序&lt;/h5&gt;&lt;p&gt;根 –&amp;gt; 左子树 –&amp;gt; 右子树&lt;/p&gt;
&lt;p&gt;leetcode相关链接: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtcHJlb3JkZXItdHJhdmVyc2FsLw==&#34;&gt;二叉树的前序遍历&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;void PrevOrder(RNode&amp;lt;int&amp;gt;* P)
{
    if (P == nullptr)
    {
        cout &amp;lt;&amp;lt; &#34;NULL &#34;;
        return;
    }
    cout &amp;lt;&amp;lt; P-&amp;gt;data &amp;lt;&amp;lt; &#34; &#34;;
    PrevOrder(P-&amp;gt;lNode);
    PrevOrder(P-&amp;gt;rNode);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;附上 leetcode 上的迭代写法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; preorderTraversal(TreeNode* root) {
        vector&amp;lt;int&amp;gt;ans;
        if(root==nullptr)
            return ans;
        
        stack&amp;lt;TreeNode*&amp;gt;record;
        TreeNode* node=root;
        while(!record.empty()||node!=nullptr)
        {
            while(node!=nullptr)
            {
                ans.push_back(node-&amp;gt;val);
                record.push(node);
                node=node-&amp;gt;left;
            }
            node=record.top();
            record.pop();
            node=node-&amp;gt;right;
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;中序&#34;&gt;&lt;a href=&#34;#中序&#34; class=&#34;headerlink&#34; title=&#34;中序&#34;&gt;&lt;/a&gt;中序&lt;/h5&gt;&lt;p&gt;左子树 –&amp;gt; 根 –&amp;gt; 右子树&lt;/p&gt;
&lt;p&gt;leetcode相关链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtaW5vcmRlci10cmF2ZXJzYWwv&#34;&gt;二叉树的中序遍历&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;void MidOrder(RNode&amp;lt;int&amp;gt;* P)
{
    if (P == nullptr)
    {
        cout &amp;lt;&amp;lt; &#34;NULL &#34;;
        return;
    }
    MidOrder(P-&amp;gt;lNode);
    cout &amp;lt;&amp;lt; P-&amp;gt;data &amp;lt;&amp;lt; &#34; &#34;;
    MidOrder(P-&amp;gt;rNode);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;附上leetcode上的迭代写法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; inorderTraversal(TreeNode* root) {
        vector&amp;lt;int&amp;gt;ans;
        if(root==nullptr)
            return ans;
        stack&amp;lt;TreeNode*&amp;gt;re;
        TreeNode* node=root;
        while(!re.empty()||node!=nullptr)
        {
            while(node!=nullptr)
            {
                re.push(node);
                node=node-&amp;gt;left;
            }
            node=re.top();
            ans.push_back(node-&amp;gt;val);
            re.pop();
            node=node-&amp;gt;right;
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;后序&#34;&gt;&lt;a href=&#34;#后序&#34; class=&#34;headerlink&#34; title=&#34;后序&#34;&gt;&lt;/a&gt;后序&lt;/h5&gt;&lt;p&gt;左子树 –&amp;gt;右子树 –&amp;gt;根&lt;/p&gt;
&lt;p&gt;leetcode 相关链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtcHJlb3JkZXItdHJhdmVyc2FsLw==&#34;&gt;二叉树的后序遍历&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;void LastOrder(RNode&amp;lt;int&amp;gt;* P)
{
    if (P == nullptr)
    {
        cout &amp;lt;&amp;lt; &#34;NULL &#34;;
        return;
    }
    LastOrder(P-&amp;gt;lNode);
    LastOrder(P-&amp;gt;rNode);
    cout &amp;lt;&amp;lt; P-&amp;gt;data &amp;lt;&amp;lt; &#34; &#34;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;附上leetcode上的迭代写法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; postorderTraversal(TreeNode *root) {
        vector&amp;lt;int&amp;gt; res;
        if (root == nullptr) {
            return res;
        }

        stack&amp;lt;TreeNode *&amp;gt; stk;
        TreeNode *prev = nullptr;
        while (root != nullptr || !stk.empty()) {
            while (root != nullptr) {
                stk.emplace(root);
                root = root-&amp;gt;left;
            }
            root = stk.top();
            stk.pop();
            if (root-&amp;gt;right == nullptr || root-&amp;gt;right == prev) {
                res.emplace_back(root-&amp;gt;val);
                prev = root;
                root = nullptr;
            } else {
                stk.emplace(root);
                root = root-&amp;gt;right;
            }
        }
        return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相关解释&lt;/p&gt;
&lt;p&gt;为了实现这一顺序，该方法中&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;由于左子树始终首先输出，那么依旧存入所有的左子树结点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为了防止根先于右子树输出，在该方法中，使用了&lt;code&gt;prev&lt;/code&gt;这一变量，代表的是前一个右子树，只有当右子树为空或者右子树之前输出过了才可以输入&lt;code&gt;root&lt;/code&gt;的内容，而为了先输出右子树的内容，会将右子树的根节点存入栈中，并指向该节点的右子树&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后再判断上面的指向是否为存在子树(即进入while循环判断，如果有，那么继续深入)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;之后按照正常输出即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;其他相关题目&#34;&gt;&lt;a href=&#34;#其他相关题目&#34; class=&#34;headerlink&#34; title=&#34;其他相关题目&#34;&gt;&lt;/a&gt;其他相关题目&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1kZXB0aC1vZi1iaW5hcnktdHJlZS8=&#34;&gt;二叉树的最大深度&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFsYW5jZWQtYmluYXJ5LXRyZWUv&#34;&gt;平衡二叉树&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtbGV2ZWwtb3JkZXItdHJhdmVyc2FsLw==&#34;&gt;二叉树的层序遍历&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/3140d327/</guid>
            <title>队列实现</title>
            <link>http://dpm12345.cn/posts/3140d327/</link>
            <category>数据结构</category>
            <category>队列</category>
            <pubDate>Tue, 04 Jan 2022 10:07:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;队列的实现&#34;&gt;&lt;a href=&#34;#队列的实现&#34; class=&#34;headerlink&#34; title=&#34;队列的实现&#34;&gt;&lt;/a&gt;队列的实现&lt;/h1&gt;&lt;p&gt;该实现使用的是C++的函数模板&lt;/p&gt;
&lt;h2 id=&#34;队列的特点&#34;&gt;&lt;a href=&#34;#队列的特点&#34; class=&#34;headerlink&#34; title=&#34;队列的特点&#34;&gt;&lt;/a&gt;队列的特点&lt;/h2&gt;&lt;p&gt;与栈有些许类似，将数据放入队列中时，放入的位置是队尾，但弹出$pop()$ 操作时，是将队头元素删去，并且队列可以通过$[$ $]$来访问数据，故可知实现的函数功能有以下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;void push(T val); // 入队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void pop(); // 出队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;T back(); // 返回队尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;T front(); // 返回队首元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void operator=(const Queue&lt;t&gt;&amp;amp; q); // 重载 = 运算符&lt;/t&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void print(); // 打印队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bool empty(); // 判断是否为空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;int size(); // 返回队列大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现之前的思考&#34;&gt;&lt;a href=&#34;#实现之前的思考&#34; class=&#34;headerlink&#34; title=&#34;实现之前的思考&#34;&gt;&lt;/a&gt;实现之前的思考&lt;/h2&gt;&lt;p&gt;由上面的实现功能列表，可以清楚此时队列中的元素增删分别是在尾部和头部来进行的 如果存储数据的是数组，增加数据时还好，可以直接添加，如果是删去元素，那么为了确保队列前面都有人存在(不为循环队列), 必须分别将各个元素慢慢地向前挪，效率较慢。注意到队列的增删操作与链表的尾插和头删相同，而链表的尾插和头删比较简单，因此 此实现采用链表来存储数据&lt;/p&gt;
&lt;h2 id=&#34;结点构造&#34;&gt;&lt;a href=&#34;#结点构造&#34; class=&#34;headerlink&#34; title=&#34;结点构造&#34;&gt;&lt;/a&gt;结点构造&lt;/h2&gt;&lt;p&gt;由于采用的是链表来存储数据，所以直接按照链表格式创建结点即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
struct node{
    T data;
    node&amp;lt;T&amp;gt;* next;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Queue-类&#34;&gt;&lt;a href=&#34;#Queue-类&#34; class=&#34;headerlink&#34; title=&#34;Queue 类&#34;&gt;&lt;/a&gt;Queue 类&lt;/h2&gt;&lt;h3 id=&#34;函数成员&#34;&gt;&lt;a href=&#34;#函数成员&#34; class=&#34;headerlink&#34; title=&#34;函数成员&#34;&gt;&lt;/a&gt;函数成员&lt;/h3&gt;&lt;p&gt;在队列的实现中，我们要进行头删，尾插，并且可以通过$[$ $]$来访问数据，故需要的数据分别为头结点地址、尾结点地址(方便进行尾插)、链表的元素个数&lt;/p&gt;
&lt;p&gt;而函数成员即为实现功能所列&lt;/p&gt;
&lt;p&gt;所以整体结构为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
class Queue{
private:
    node&amp;lt;T&amp;gt;* head;         // 头结点
    node&amp;lt;T&amp;gt;* tail;         // 尾结点
    int num;
public:
    Queue();                              // 无参构造函数
    Queue(T val);                         // 有参构造函数
    ~Queue();                             // 析构函数
    Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q);             // 复制构造函数
    void push(T val);                     // 入队
    void pop();                           // 出队
    T back();                             // 返回队尾元素
    T front();                            // 返回队首元素
    void operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q);   // 重载 = 运算符
    void print();                         // 打印队列
    bool empty();                         // 判断是否为空
    int size();                           // 返回队列大小

};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;成员函数实现&#34;&gt;&lt;a href=&#34;#成员函数实现&#34; class=&#34;headerlink&#34; title=&#34;成员函数实现&#34;&gt;&lt;/a&gt;成员函数实现&lt;/h3&gt;&lt;h4 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;p&gt;在上面，拟定为两种构造函数形式，无参和有参，两种方式做的工作一样，目的是对数据进行初始化。&lt;/p&gt;
&lt;p&gt;如果是无参，$head$和$tail$都应指向空，而$num=0$, 如果是有参，那么新建一个结点后，$head$ 和$tail$ 都指向它，$num=1$&lt;/p&gt;
&lt;p&gt;由于涉及指针，故需要深复制，重写复制构造函数&lt;/p&gt;
&lt;p&gt;以下为实现代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;// 无参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue()
{
    head = tail = nullptr;
    num = 0;
}

// 有参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    head = tail = newnode;
    num = 1;
}

// 复制构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp!= nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;析构函数&#34;&gt;&lt;a href=&#34;#析构函数&#34; class=&#34;headerlink&#34; title=&#34;析构函数&#34;&gt;&lt;/a&gt;析构函数&lt;/h4&gt;&lt;p&gt;由于存储数据申请了空间，那么析构函数应当执行释放内存操作&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::~Queue()
{
    while (head != nullptr)
    {
        node&amp;lt;T&amp;gt;* temp = head;
        head = head-&amp;gt;next;
        delete temp;
    }
    tail = nullptr;
    num = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;push-T-val&#34;&gt;&lt;a href=&#34;#push-T-val&#34; class=&#34;headerlink&#34; title=&#34;push(T val)&#34;&gt;&lt;/a&gt;push(T val)&lt;/h4&gt;&lt;p&gt;由于$push_back()$即为链表中的尾插，那么只需创建新的结点，存储数值，之后使当前$tail$的$next$指向该结点，最后$tail$指向该结点即可。需要注意的是，如果队列中无元素，那么直接将$head$和$tail$指向该结点即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::push(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    if (head == nullptr)        // 无元素，或者可以写成 tail==nullptr 或 num==0
    {
        head = tail = newnode;
        num = 1;
    }
    else
    {
        tail-&amp;gt;next = newnode;
        tail = tail-&amp;gt;next;
        num++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pop&#34;&gt;&lt;a href=&#34;#pop&#34; class=&#34;headerlink&#34; title=&#34;pop()&#34;&gt;&lt;/a&gt;pop()&lt;/h4&gt;&lt;p&gt;所做的操作为头删&lt;/p&gt;
&lt;p&gt;在删之前，我们必须考虑队列为空的情况，因此可以使用$assert()$进行判断报错&lt;/p&gt;
&lt;p&gt;当队列中有元素时，删去头结点，那么可以先创建一个结点指针指向头结点，在删去头结点后再令&lt;code&gt;head=head-&amp;gt;next&lt;/code&gt;，&lt;code&gt;num--&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::pop()
{
    assert(head);
    node&amp;lt;T&amp;gt;*temp = head;
    head = head-&amp;gt;next;
    delete temp;     // 删去 head 也可以，只不过上面的 head 赋值需换到下面写成 head=temp-&amp;gt;next;
    num--;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;back&#34;&gt;&lt;a href=&#34;#back&#34; class=&#34;headerlink&#34; title=&#34;back()&#34;&gt;&lt;/a&gt;back()&lt;/h4&gt;&lt;p&gt;返回队尾元素，直接使用$tail$指针即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::back()
{
    return tail-&amp;gt;data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;front&#34;&gt;&lt;a href=&#34;#front&#34; class=&#34;headerlink&#34; title=&#34;front()&#34;&gt;&lt;/a&gt;front()&lt;/h4&gt;&lt;p&gt;返回队首元素，直接使用$head$指针即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::front()
{
    return head-&amp;gt;data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;operator-x3D-const-Queue-amp-q&#34;&gt;&lt;a href=&#34;#operator-x3D-const-Queue-amp-q&#34; class=&#34;headerlink&#34; title=&#34;operator=(const Queue&amp;amp;q)&#34;&gt;&lt;/a&gt;operator=(const Queue&lt;t&gt;&amp;amp;q)&lt;/t&gt;&lt;/h4&gt;&lt;p&gt;与复制构造函数类似，但这里需要判断原Queue对象是否已经有队列元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;// 重载 = 运算符
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    if (head)             // 如果存在队列
    {
        this-&amp;gt;~Queue();
    }
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp != nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;print&#34;&gt;&lt;a href=&#34;#print&#34; class=&#34;headerlink&#34; title=&#34;print()&#34;&gt;&lt;/a&gt;print()&lt;/h4&gt;&lt;p&gt;即遍历链表，打印队列&lt;/p&gt;
&lt;p&gt;较为简单，直接上代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::print()
{
    node&amp;lt;T&amp;gt;* temp = head;
    while (temp != nullptr)
    {
        cout &amp;lt;&amp;lt; temp-&amp;gt;data &amp;lt;&amp;lt; &#34;  &#34;;
        temp = temp-&amp;gt;next;
    }
    cout &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;empty&#34;&gt;&lt;a href=&#34;#empty&#34; class=&#34;headerlink&#34; title=&#34;empty()&#34;&gt;&lt;/a&gt;empty()&lt;/h4&gt;&lt;p&gt;判断是否为空，即可判断$n==0?$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
bool Queue&amp;lt;T&amp;gt;::empty()
{
    return num == 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;size&#34;&gt;&lt;a href=&#34;#size&#34; class=&#34;headerlink&#34; title=&#34;size()&#34;&gt;&lt;/a&gt;size()&lt;/h4&gt;&lt;p&gt;返回队列大小，即为$num$的值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
int Queue&amp;lt;T&amp;gt;::size()
{
    return num;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;结果&#34;&gt;&lt;a href=&#34;#结果&#34; class=&#34;headerlink&#34; title=&#34;结果&#34;&gt;&lt;/a&gt;结果&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;//#ifndef  _QUEUE_H
//#define  _QUEUE_H

#include&amp;lt;assert.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;

template&amp;lt;class T&amp;gt;
struct node{
    T data;
    node&amp;lt;T&amp;gt;* next;
};


template&amp;lt;class T&amp;gt;
class Queue{
private:
    node&amp;lt;T&amp;gt;* head;         // 头结点
    node&amp;lt;T&amp;gt;* tail;         // 尾结点
    int num;
public:
    Queue();                              // 无参构造函数
    Queue(T val);                         // 有参构造函数
    ~Queue();                             // 析构函数
    Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q);             // 复制构造函数
    void push(T val);                     // 入队
    void pop();                           // 出队
    T back();                             // 返回队尾元素
    T front();                            // 返回队首元素
    void operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q);   // 重载 = 运算符
    void print();                         // 打印队列
    bool empty();                         // 判断是否为空
    int size();                           // 返回队列大小

};

// 无参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue()
{
    head = tail = nullptr;
    num = 0;
}

// 有参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    head = tail = newnode;
    num = 1;
}

// 析构函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::~Queue()
{
    while (head != nullptr)
    {
        node&amp;lt;T&amp;gt;* temp = head;
        head = head-&amp;gt;next;
        delete temp;
    }
    tail = nullptr;
    num = 0;
}

// 复制构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp!= nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }

}

// 入队 (尾插)
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::push(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    if (head == nullptr)
    {
        head = tail = newnode;
        num = 1;
    }
    else
    {
        tail-&amp;gt;next = newnode;
        tail = tail-&amp;gt;next;
        num++;
    }
}

// 出队 (头删)
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::pop()
{
    assert(head);
    node&amp;lt;T&amp;gt;*temp = head;
    head = head-&amp;gt;next;
    delete temp;
    num--;
}

// 返回队尾元素
template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::back()
{
    return tail-&amp;gt;data;
}

// 返回队首元素
template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::front()
{
    return head-&amp;gt;data;
}

// 重载 = 运算符
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    if (head)
    {
        this-&amp;gt;~Queue();
    }
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp != nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }
}

// 打印队列
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::print()
{
    node&amp;lt;T&amp;gt;* temp = head;
    while (temp != nullptr)
    {
        cout &amp;lt;&amp;lt; temp-&amp;gt;data &amp;lt;&amp;lt; &#34;  &#34;;
        temp = temp-&amp;gt;next;
    }
    cout &amp;lt;&amp;lt; endl;
}

// 判断队列是否为空
template&amp;lt;class T&amp;gt;
bool Queue&amp;lt;T&amp;gt;::empty()
{
    return num == 0;
}

// 返回队列大小
template&amp;lt;class T&amp;gt;
int Queue&amp;lt;T&amp;gt;::size()
{
    return num;
}
//#endif
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
