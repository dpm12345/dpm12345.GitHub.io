{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"括号\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/4a8b7903/",
            "url": "http://dpm12345.cn/posts/4a8b7903/",
            "title": "方法总结",
            "date_published": "2021-12-26T02:20:40.000Z",
            "content_html": "<h1 id=\"括号问题\"><a class=\"anchor\" href=\"#括号问题\">#</a> 括号问题</h1>\n<h2 id=\"是否为有效括号\"><a class=\"anchor\" href=\"#是否为有效括号\">#</a> 是否为有效括号</h2>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv\">有效的括号</span></p>\n<p>可采用栈的先入后出特性，一个个匹配</p>\n<h2 id=\"判断一段字符串经过部分修改后是否能够成为有效括号字符串可以修改的位置由-locked-存储\"><a class=\"anchor\" href=\"#判断一段字符串经过部分修改后是否能够成为有效括号字符串可以修改的位置由-locked-存储\">#</a> 判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储</h2>\n<p>如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzaXMtc3RyaW5nLw==\">有效的括号字符串</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtYS1wYXJlbnRoZXNlcy1zdHJpbmctY2FuLWJlLXZhbGlkLw==\">判断一个括号字符串是否有效</span></p>\n<p>利用平衡值的方法，一个字符串是否为有效括号，那么在某个位置前的右括号之前必然有左括号相匹配，在某个某个位置的左括号之后必然有右括号相匹配</p>\n<p>以下为几种不同的具体方法</p>\n<h3 id=\"两次遍历正序遍历和逆序遍历\"><a class=\"anchor\" href=\"#两次遍历正序遍历和逆序遍历\">#</a> 两次遍历，正序遍历和逆序遍历。</h3>\n<p>正序遍历时，用 count 记录此时未匹配左括号数，其中如果 <code>locked[i]=′0′</code> ，那么以左括号来记，当匹配到不可变的右括号时， <code>count−−</code> ，如果 <code>count &lt; 0</code>  出现了，那么该字符串不是有效的括号字符串</p>\n<p>逆序遍历时，同正序遍历时的方法，用 count 记录此时未匹配右括号数，其中如果 <code>locked[i]=′0′</code> ，那么以右括号来记，当匹配到不可变的左括号时， <code>count−−</code> ，如果 <code>count &lt; 0</code>  出现了，那么该字符串不是有效的括号字符串</p>\n<p>以下为参考代码</p>\n<pre><code class=\"language-c++\">class Solution &#123;\npublic:\n    bool checkValidString(string s) &#123;\n        int count=0;\n        for(int i=0;i&lt;s.size();i++)\n        &#123;\n            if(s[i]=='('||s[i]=='*')\n                count++;\n            else\n                count--;\n            if(count&lt;0)\n                return false;\n        &#125;\n        count=0;\n        for(int i=s.size()-1;i&gt;=0;i--)\n        &#123;\n            if(s[i]==')'||s[i]=='*')\n                count++;\n            else\n                count--;\n            if(count&lt;0)\n                return false;\n        &#125;\n        return true;\n    &#125;\n&#125;;\n</code></pre>\n<h3 id=\"贪心算法一次遍历用-maxc-记录最大未匹配数minc-记录最小未匹配数\"><a class=\"anchor\" href=\"#贪心算法一次遍历用-maxc-记录最大未匹配数minc-记录最小未匹配数\">#</a> 贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数</h3>\n<p>当遇到不可变的右 (左) 括号时 <code>maxc</code> ，和 <code>minc</code>  都加一 (减一), 如果在此期间， <code>maxc &lt; 0</code> ，那么证明有右括号不能被匹配那么这串字符串是无效的</p>\n<p>当遇到可变的位置时，由于既可以变也可以不变，那么 <code>maxc++</code> ， <code>minc--</code> ；其中如果 <code>minc</code>  减之前如果是 0，那么 <code>minc</code>  就变为 1，因为会增加 (如果是 <code>*</code>  可代表左右括号或者空字符，那么只需维护 <code>minc&gt;=0</code>  即可，因为 <code>*</code>  有三种状态)</p>\n<p>如果在遍历过程中， <code>minc &gt; maxc</code> ，那么证明该串是无效的</p>\n<p>最后如果该串是有效，那么 <code>minc</code>  必为 0，所以返回值为 <code>minc == 0</code></p>\n<p>代码示例</p>\n<h4 id=\"第一道\"><a class=\"anchor\" href=\"#第一道\">#</a> 第一道</h4>\n<pre><code class=\"language-c++\">class Solution &#123;\npublic:\n    bool checkValidString(string s) &#123;\n        int minc=0,maxc=0;\n        for(int i=0;i&lt;s.size();i++)\n        &#123;\n            if(s[i]=='(')\n            &#123;\n                minc++;\n                maxc++;\n            &#125;\n            else if(s[i]==')')\n            &#123;\n                minc=minc==0?0:minc-1;\n                maxc--;\n                if(maxc&lt;0)\n                    return false;\n            &#125;\n            else\n            &#123;\n                minc=minc==0?0:minc-1;\n                maxc++;\n            &#125;\n        &#125;\n        return minc==0;\n    &#125;\n&#125;;\n</code></pre>\n<h4 id=\"第二道\"><a class=\"anchor\" href=\"#第二道\">#</a> 第二道</h4>\n<pre><code class=\"language-c++\">class Solution &#123;\npublic:\n    bool canBeValid(string s, string locked) &#123;\n        if(s.size()%2==1)  return false;\n        int minc=0,maxc=0;\n        for(int i=0;i&lt;s.size();i++)\n        &#123;\n            if(locked[i]=='1')\n            &#123;\n                if(s[i]=='(')\n                &#123;\n                    minc++;\n                    maxc++;\n                &#125;\n                if(s[i]==')')\n                &#123;\n                    maxc--;\n                    minc=minc==0?1:minc-1;\n                    if(maxc&lt;0)\n                        return false;\n                &#125;\n            &#125;\n            else\n            &#123;\n                minc=minc==0?1:minc-1;\n                maxc++;\n            &#125;\n            if(minc&gt;maxc)\n                return false;\n        &#125;\n        return minc==0;\n    &#125;\n&#125;;\n</code></pre>\n",
            "tags": [
                "贪心",
                "括号"
            ]
        }
    ]
}