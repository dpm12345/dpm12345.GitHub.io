<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;括号&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Sun, 26 Dec 2021 10:20:40 +0800</pubDate>
        <lastBuildDate>Sun, 26 Dec 2021 10:20:40 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/4a8b7903/</guid>
            <title>方法总结</title>
            <link>http://dpm12345.cn/posts/4a8b7903/</link>
            <category>贪心</category>
            <category>括号</category>
            <pubDate>Sun, 26 Dec 2021 10:20:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;括号问题&#34;&gt;&lt;a href=&#34;#括号问题&#34; class=&#34;headerlink&#34; title=&#34;括号问题&#34;&gt;&lt;/a&gt;括号问题&lt;/h1&gt;&lt;h2 id=&#34;是否为有效括号&#34;&gt;&lt;a href=&#34;#是否为有效括号&#34; class=&#34;headerlink&#34; title=&#34;是否为有效括号&#34;&gt;&lt;/a&gt;是否为有效括号&lt;/h2&gt;&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv&#34;&gt;有效的括号&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可采用栈的先入后出特性，一个个匹配&lt;/p&gt;
&lt;h2 id=&#34;判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由-locked-存储&#34;&gt;&lt;a href=&#34;#判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由-locked-存储&#34; class=&#34;headerlink&#34; title=&#34;判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储&#34;&gt;&lt;/a&gt;判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储&lt;/h2&gt;&lt;p&gt;如 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzaXMtc3RyaW5nLw==&#34;&gt;有效的括号字符串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtYS1wYXJlbnRoZXNlcy1zdHJpbmctY2FuLWJlLXZhbGlkLw==&#34;&gt;判断一个括号字符串是否有效&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;利用平衡值的方法，一个字符串是否为有效括号，那么在某个位置前的右括号之前必然有左括号相匹配，在某个某个位置的左括号之后必然有右括号相匹配&lt;/p&gt;
&lt;p&gt;以下为几种不同的具体方法&lt;/p&gt;
&lt;h3 id=&#34;两次遍历，正序遍历和逆序遍历。&#34;&gt;&lt;a href=&#34;#两次遍历，正序遍历和逆序遍历。&#34; class=&#34;headerlink&#34; title=&#34;两次遍历，正序遍历和逆序遍历。&#34;&gt;&lt;/a&gt;两次遍历，正序遍历和逆序遍历。&lt;/h3&gt;&lt;p&gt;正序遍历时，用 count 记录此时未匹配左括号数，其中如果&lt;code&gt;locked[i]=′0′&lt;/code&gt;，那么以左括号来记，当匹配到不可变的右括号时，&lt;code&gt;count−−&lt;/code&gt;，如果&lt;code&gt;count &amp;lt; 0&lt;/code&gt;出现了，那么该字符串不是有效的括号字符串&lt;/p&gt;
&lt;p&gt;逆序遍历时，同正序遍历时的方法，用 count 记录此时未匹配右括号数，其中如果&lt;code&gt;locked[i]=′0′&lt;/code&gt;，那么以右括号来记，当匹配到不可变的左括号时，&lt;code&gt;count−−&lt;/code&gt;，如果&lt;code&gt;count &amp;lt; 0&lt;/code&gt;出现了，那么该字符串不是有效的括号字符串&lt;/p&gt;
&lt;p&gt;以下为参考代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool checkValidString(string s) {
        int count=0;
        for(int i=0;i&amp;lt;s.size();i++)
        {
            if(s[i]==&#39;(&#39;||s[i]==&#39;*&#39;)
                count++;
            else
                count--;
            if(count&amp;lt;0)
                return false;
        }
        count=0;
        for(int i=s.size()-1;i&amp;gt;=0;i--)
        {
            if(s[i]==&#39;)&#39;||s[i]==&#39;*&#39;)
                count++;
            else
                count--;
            if(count&amp;lt;0)
                return false;
        }
        return true;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数&#34;&gt;&lt;a href=&#34;#贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数&#34; class=&#34;headerlink&#34; title=&#34;贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数&#34;&gt;&lt;/a&gt;贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数&lt;/h3&gt;&lt;p&gt;当遇到不可变的右(左)括号时&lt;code&gt;maxc&lt;/code&gt;，和&lt;code&gt;minc&lt;/code&gt;都加一 (减一), 如果在此期间，&lt;code&gt;maxc &amp;lt; 0&lt;/code&gt;，那么证明有右括号不能被匹配那么这串字符串是无效的&lt;/p&gt;
&lt;p&gt;当遇到可变的位置时，由于既可以变也可以不变，那么&lt;code&gt;maxcpp&lt;/code&gt;，&lt;code&gt;minc--&lt;/code&gt;；其中如果&lt;code&gt;minc&lt;/code&gt;减之前如果是0，那么&lt;code&gt;minc&lt;/code&gt;就变为1，因为会增加(如果是&lt;code&gt;*&lt;/code&gt;可代表左右括号或者空字符，那么只需维护&lt;code&gt;minc&amp;gt;=0&lt;/code&gt;即可，因为&lt;code&gt;*&lt;/code&gt;有三种状态)&lt;/p&gt;
&lt;p&gt;如果在遍历过程中，&lt;code&gt;minc &amp;gt; maxc&lt;/code&gt;，那么证明该串是无效的&lt;/p&gt;
&lt;p&gt;最后如果该串是有效，那么&lt;code&gt;minc&lt;/code&gt;必为0，所以返回值为&lt;code&gt;minc == 0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码示例&lt;/p&gt;
&lt;h4 id=&#34;第一道&#34;&gt;&lt;a href=&#34;#第一道&#34; class=&#34;headerlink&#34; title=&#34;第一道&#34;&gt;&lt;/a&gt;第一道&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool checkValidString(string s) {
        int minc=0,maxc=0;
        for(int i=0;i&amp;lt;s.size();i++)
        {
            if(s[i]==&#39;(&#39;)
            {
                mincpp;
                maxcpp;
            }
            else if(s[i]==&#39;)&#39;)
            {
                minc=minc==0?0:minc-1;
                maxc--;
                if(maxc&amp;lt;0)
                    return false;
            }
            else
            {
                minc=minc==0?0:minc-1;
                maxcpp;
            }
        }
        return minc==0;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;第二道&#34;&gt;&lt;a href=&#34;#第二道&#34; class=&#34;headerlink&#34; title=&#34;第二道&#34;&gt;&lt;/a&gt;第二道&lt;/h4&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool canBeValid(string s, string locked) {
        if(s.size()%2==1)  return false;
        int minc=0,maxc=0;
        for(int i=0;i&amp;lt;s.size();i++)
        {
            if(locked[i]==&#39;1&#39;)
            {
                if(s[i]==&#39;(&#39;)
                {
                    mincpp;
                    maxcpp;
                }
                if(s[i]==&#39;)&#39;)
                {
                    maxc--;
                    minc=minc==0?1:minc-1;
                    if(maxc&amp;lt;0)
                        return false;
                }
            }
            else
            {
                minc=minc==0?1:minc-1;
                maxcpp;
            }
            if(minc&amp;gt;maxc)
                return false;
        }
        return minc==0;
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
