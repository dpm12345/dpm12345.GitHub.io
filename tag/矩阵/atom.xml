<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;矩阵&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2021-11-29T12:54:40.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/308e5841/</id>
        <title>有效的括号</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/308e5841/"/>
        <content type="html">&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmFuZ2Utc3VtLXF1ZXJ5LTJkLWltbXV0YWJsZS8=&#34;&gt;二维区域和检索 - 矩阵不可变&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/304%E4%BA%8C%E7%BB%B4%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E7%9F%A9%E9%98%B5%E4%B8%8D%E5%8F%AF%E5%8F%98.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;思路：该题考查了矩形的相关知识，同时涉及到前缀和。那么必须知道矩形的前缀和如何求。这里给出两种解法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;以$sum [i][j+1]$表示$matrix$第$i$行从下标$0$到下标为$j$元素的和,那么计算左上端点为$[row1,col1]$, 右下端点为$[row2,col2]$的矩形区域内元素总和，就可以将每一行每一行加起来代码形式为$sum [i][col2+1]-sum [i][col1+1]$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以$sum [i][j]$表示以$[0,0]$为左上端点，$[i,j]$为右上端点的矩形区域内元素总和,那么计算左上端点为$[row1,col1]$, 右下端点为$[row2,col2]$的矩形区域内元素总和时&lt;br&gt; 可试着画图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
  &lt;img data-src=&#34;../../../post_images/二维数组前缀和第二种解法.jpg&#34; style=&#34;zoom:50%;&#34;&gt;



&lt;p&gt;那么由此可以推得解法代码为：&lt;br&gt;$$&lt;br&gt;sum[row2][col2]-sum[row2][col1-1]-sum[row1-1][col2]+sum[row1-1][col-1]&lt;br&gt;$$&lt;br&gt;但为了防止$col1-1$,$row1-1$越界，在创建数组时可以顺便将其行列各增加一行，排除越界情况具体代码只需下标加一即可&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;h1 id=&#34;解法一&#34;&gt;&lt;a href=&#34;#解法一&#34; class=&#34;headerlink&#34; title=&#34;解法一&#34;&gt;&lt;/a&gt;解法一&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class NumMatrix {
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;sum;
    NumMatrix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) {
        int m=matrix.size();
        if(m&amp;gt;0)
        {
            sum.resize(m,vector&amp;lt;int&amp;gt;(matrix[0].size()+1));
            for(int i=0;i&amp;lt;m;i++)
            {
                for(int j=0;j&amp;lt;matrix[0].size();j++)
                {
                    sum[i][j+1]=sum[i][j]+matrix[i][j];
                }
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        int ans=0;
        for(int i=row1;i&amp;lt;=row2;i++)
        {
            ans+=sum[i][col2+1]-sum[i][col1];
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;解法二&#34;&gt;&lt;a href=&#34;#解法二&#34; class=&#34;headerlink&#34; title=&#34;解法二&#34;&gt;&lt;/a&gt;解法二&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class NumMatrix {
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;sum;
    NumMatrix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) {
        int m=matrix.size();
        if(m&amp;gt;0)
        {
            int n=matrix[0].size();
            sum.resize(m+1,vector&amp;lt;int&amp;gt;(n+1));
            for(int i=1;i&amp;lt;m+1;i++)
            {
                for(int j=1;j&amp;lt;n+1;j++)
                {
                    sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+matrix[i-1][j-1];
                }
            }
        }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        return sum[row2+1][col2+1]-sum[row2+1][col1]-sum[row1][col2+1]+sum[row1][col1];

    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="矩阵" />
        <updated>2021-11-29T12:54:40.000Z</updated>
    </entry>
</feed>
