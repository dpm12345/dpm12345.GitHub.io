<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;双指针（快慢指针）&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2021-12-31T11:54:40.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/45daaf11/</id>
        <title>环形链表</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/45daaf11/"/>
        <content type="html">&lt;h1 id=&#34;环形链表&#34;&gt;&lt;a href=&#34;#环形链表&#34; class=&#34;headerlink&#34; title=&#34;环形链表&#34;&gt;&lt;/a&gt;环形链表&lt;/h1&gt;&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUv&#34;&gt;环形链表&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;利用哈希表&#34;&gt;&lt;a href=&#34;#利用哈希表&#34; class=&#34;headerlink&#34; title=&#34;利用哈希表&#34;&gt;&lt;/a&gt;利用哈希表&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;方法详情：&lt;/strong&gt;由于如果一个链表是环形链表，那么在不断地跳入下一个结点坐标时，其地址必然与前面d的某个地址相同，也就是说，我们可以把每个结点的地址存入哈希表中，当出现要存入结点地址已经在哈希表中存过之后，那么该链表必然是环形链表，否则不是。据此，时间方面，我们可知只需最长只需遍历链表结点一遍；空间方面，我们创建了一个哈希表，最多存入链表的总个数$n$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下为代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool hasCycle(ListNode *head) {
        unordered_map&amp;lt;ListNode*,int&amp;gt;a;
        while(head!=NULL)
        {
            if(a.count(head))
            return true;
            a.insert({head,0});
            head=head-&amp;gt;next;
        }
        return false;
        
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;利用双指针（快慢指针）&#34;&gt;&lt;a href=&#34;#利用双指针（快慢指针）&#34; class=&#34;headerlink&#34; title=&#34;利用双指针（快慢指针）&#34;&gt;&lt;/a&gt;利用双指针（快慢指针）&lt;/h2&gt;&lt;p&gt;题目中的进阶要求我们使用$O(1)$的内存，该方案是可以实现的，具体涉及到双指针方法详情：我们可以创建两个指针，快指针fast，每次走两步，慢指针slow，每次走一步。那么就很容易得到如果该环形链表为环形链表，快指针必定会在环形结点的某一个结点与慢指针相遇(或者说是追上慢指针)，那么只需判断最后两个指针是否指向同一个结点即可&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明：&lt;/strong&gt;在该方法中，使用了分别走一步和两步的指针。如果该链表是环形链表，当慢指针进入环形部分中，此时快指针也在某处，设他们相差$n$个结点，而他们的速度之差为$1$，$n\quad mod\quad1==0$ 也就是说，必定存在某一时刻能够使两指针指向同一个地址据此，时间方面，在慢指针进入环形结点后，快慢指针初始相距最长为$L(L&amp;lt;=N)$, 而在此之前遍历次数也只和$N$有关，如果没有环形链表，那么遍历次数为$\lfloor$$\frac{n}{2}$$\rfloor$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下为代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode*fast=head,*slow=head;
        while(fast!=NULL&amp;amp;&amp;amp;fast-&amp;gt;next!=NULL)
        {
            fast=fast-&amp;gt;next-&amp;gt;next;
            slow=slow-&amp;gt;next;
            if(fast==slow)
                return true;
        }
        return false;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;环形链表-II（求出环形链表开始结点位置）&#34;&gt;&lt;a href=&#34;#环形链表-II（求出环形链表开始结点位置）&#34; class=&#34;headerlink&#34; title=&#34;环形链表 II（求出环形链表开始结点位置）&#34;&gt;&lt;/a&gt;环形链表 II（求出环形链表开始结点位置）&lt;/h1&gt;&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUtaWkv&#34;&gt;环形链表 II&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;该题与上面题目比较像，但在确定环的同时也要返回环开始结点&lt;/p&gt;
&lt;h2 id=&#34;哈希表&#34;&gt;&lt;a href=&#34;#哈希表&#34; class=&#34;headerlink&#34; title=&#34;哈希表&#34;&gt;&lt;/a&gt;哈希表&lt;/h2&gt;&lt;p&gt;在上一个问题中，我们是找到重复就返回true，那么同理在这里我们可以使用相同的代码，仅仅把返回值的true和false分别改成对应节点和NULL即可&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度$O(n)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        unordered_map&amp;lt;ListNode*,int&amp;gt;a;
        while(head!=NULL)
        {
            if(a.count(head))
               return head;
            a.insert({head,1});
            head=head-&amp;gt;next;
        }
        return NULL;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;双指针（快慢指针）&#34;&gt;&lt;a href=&#34;#双指针（快慢指针）&#34; class=&#34;headerlink&#34; title=&#34;双指针（快慢指针）&#34;&gt;&lt;/a&gt;双指针（快慢指针）&lt;/h2&gt;&lt;p&gt;为了降低内存我们同样也可以使用快慢指针，将空间复杂度降到$O(1)$，这里涉及到一个证明&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II_%E8%AF%81%E6%98%8E.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以我们可以在双指针基础上，在他们相遇时新建两个指针 (或者直接用现成的&lt;code&gt;head&lt;/code&gt;和&lt;code&gt;slow/fast&lt;/code&gt;指针，不断往后面走，相遇时得到该位置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间复杂度$O(n)$&lt;/li&gt;
&lt;li&gt;空间复杂度$O(1)$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *slow=head,*fast=head;
        while(fast&amp;amp;&amp;amp;fast-&amp;gt;next)
        {
            slow=slow-&amp;gt;next;
            fast=fast-&amp;gt;next-&amp;gt;next;
            if(slow==fast)
            {
                ListNode* start=head,*meet=slow;
                while(start!=meet)
                {
                    start=start-&amp;gt;next;
                    meet=meet-&amp;gt;next;
                }
                return meet;
            }
        }
        return NULL;
        
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="哈希表" />
        <category term="链表" />
        <category term="双指针（快慢指针）" />
        <updated>2021-12-31T11:54:40.000Z</updated>
    </entry>
</feed>
