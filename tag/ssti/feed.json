{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"ssti\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/47d18edd/",
            "url": "http://dpm12345.cn/posts/47d18edd/",
            "title": "SSTI",
            "date_published": "2022-09-09T12:56:46.000Z",
            "content_html": "<pre><code class=\"raw\">__class__            类的一个内置属性，表示实例对象的类。\n \n__base__             类型对象的直接基类\n \n__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__\n \n__mro__              method resolution order，即解析方法调用的顺序；此属性是由类组成的元组，在方法解析期间会基于它来查找基类。\n \n__subclasses__()     返回这个类的子类集合，每个类都保留一个对其直接子类的弱引用列表。该方法返回一个列表，其中包含所有仍然存在的引用。列表按照定义顺序排列。\n \n__init__             初始化类，返回的类型是function\n \n__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。\n \n__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里\n \n__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。\n \n__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a['b']，就是a.__getitem__('b')\n \n__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。\n \n__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__('os').popen('ls').read()]\n \n__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。\n \nurl_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__['__builtins__']含有current_app。\n \nget_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__['__builtins__']含有current_app。\n \nlipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：{{lipsum.__globals__['os'].popen('ls').read()}}\n \ncurrent_app          应用上下文，一个全局变量。\n \nrequest              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__['__builtins__'].open('/proc\\self\\fd/3').read()\n \nrequest.args.x1   \t get传参\n \nrequest.values.x1 \t 所有参数\n \nrequest.cookies      cookies参数\n \nrequest.headers      请求头参数\n \nrequest.form.x1   \t post传参\t(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)\n \nrequest.data  \t\t post传参\t(Content-Type:a/b)\n \nrequest.json\t\t post传json  (Content-Type: application/json)\n \nconfig               当前application的所有配置。此外，也可以这样{{ config.__class__.__init__.__globals__['os'].popen('ls').read() }}\n \ng                    {{g}}得到&lt;flask.g of 'flask_ssti'&gt;\n</code></pre>\n<p>常用过滤器</p>\n<pre><code class=\"raw\">int()：将值转换为int类型；\n \nfloat()：将值转换为float类型；\n \nlower()：将字符串转换为小写；\n \nupper()：将字符串转换为大写；\n \ntitle()：把值中的每个单词的首字母都转成大写；\n \ncapitalize()：把变量值的首字母转成大写，其余字母转小写；\n \ntrim()：截取字符串前面和后面的空白字符；\n \nwordcount()：计算一个长字符串中单词的个数；\n \nreverse()：字符串反转；\n \nreplace(value,old,new)： 替换将old替换为new的字符串；\n \ntruncate(value,length=255,killwords=False)：截取length长度的字符串；\n \nstriptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；\n \nescape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。\n \nsafe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： {{'<em>hello</em>'|safe}}；\n \nlist()：将变量列成列表；\n \nstring()：将变量转换成字符串；\n \njoin()：将一个序列中的参数值拼接成字符串。示例看上面payload；\n \nabs()：返回一个数值的绝对值；\n \nfirst()：返回一个序列的第一个元素；\n \nlast()：返回一个序列的最后一个元素；\n \nformat(value,arags,*kwargs)：格式化字符串。比如：{{ \"%s\" - \"%s\"|format('Hello?',\"Foo!\") }}将输出：Helloo? - Foo!\n \nlength()：返回一个序列或者字典的长度；\n \nsum()：返回列表内数值的和；\n \nsort()：返回排序后的列表；\n \ndefault(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default('xiaotuo')----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。\n \nlength()返回字符串的长度，别名是count\n</code></pre>\n",
            "tags": [
                "CTF",
                "SSTI"
            ]
        }
    ]
}