{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"递归\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/12ad1f11/",
            "url": "http://dpm12345.cn/posts/12ad1f11/",
            "title": "全排列",
            "date_published": "2021-12-24T01:54:40.000Z",
            "content_html": "<h1 id=\"无重复数字的全排列\"><a href=\"#无重复数字的全排列\" class=\"headerlink\" title=\"无重复数字的全排列\"></a>无重复数字的全排列</h1><p>先考虑 2 个数的全排列，很明显就是只有两种，一种两个数字的顺序不改变，另一种改变两个数字的顺序</p>\n<p>然后再考虑 3 个数的全排列，比如<code>1，2，3</code></p>\n<p>那么总共排列的种类总共为</p>\n<p>1，2，3<br>1，3，2<br>2，1，3<br>2，3，1<br>3，1，2<br>3，2，1</p>\n<p>由此不难发现，每一次的排列总个数（不同的数字开头）都可以看作是在前一种的基础上交换两个数的结果</p>\n<p>例如<code>1，3，2</code>是在<code>1，2，3</code>的基础上交换 2，3 位置后得到的。以此类推，4 个数，5 个数，n 个数也一样。那么在这里可以采用递归方法，与汉诺塔问题相似，我们将 n 个数划分为 1 和 n-1 个数，先交换两部分得到一种情况，然后以此为基础再进行交换，结束此种情况后将数字交换回来进入下一种情况</p>\n<p>因此我们可以构造 perm 函数，第一个形参为数组，第二个为未交换数，第三个为数组的末尾下标</p>\n<p>因此核心代码为:</p>\n<pre><code class=\"cpp\">// 假设这里的递归函数为 perm，数组为 nums，交换的对象为 nums [i] 和 nums [k]\n    for(int i=k;i&lt;=m;i++)        // 这里用于把后面的数进行交换\n    {\n        swap(nums[i],nums[k]);            // 交换，创造新的情况\n        perm(nums,k+1,m);                 // 进入新的情况，k+1 为之后未交换的情况\n        swap(nums[i],nums[k]);           // 交换回来\n    }\n</code></pre>\n<p>这里我们需要考虑原来的情况，也就是说此时不需要交换，所以为了保持代码的一致性，可以一开始使其与自身交换，因此为<code>swap(nums[i],nums[k])</code></p>\n<p>代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    void swap(int*p,int*q)\n    {\n        int temp=*p;\n        *p=*q;\n        *q=temp;\n    }\n    void out(vector&lt;int&gt;&amp;nums,vector&lt;vector&lt;int&gt;&gt;&amp;ans,int k,int m)\n    {\n        if(k==m)\n        {\n            ans.push_back(nums);\n        }\n        else\n        {\n            for(int i=k;i&lt;=m;i++)\n            {\n                swap(&amp;nums[i],&amp;nums[k]);\n                out(nums,ans,k+1,m);\n                swap(&amp;nums[i],&amp;nums[k]);\n            }\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt;ans;\n        out(nums,ans,0,nums.size()-1);\n        return ans;\n    }\n};\n</code></pre>\n<p>该问题在 leetcode 也有题目</p>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGVybXV0YXRpb25zLw==\">全排列</span></p>\n<h1 id=\"有重复数字的全排列\"><a href=\"#有重复数字的全排列\" class=\"headerlink\" title=\"有重复数字的全排列\"></a>有重复数字的全排列</h1>",
            "tags": [
                "递归"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/20c47d09/",
            "url": "http://dpm12345.cn/posts/20c47d09/",
            "title": "快速幂",
            "date_published": "2021-12-05T02:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcG93eC1uLw==\">快速幂</span></p>\n<p>题目详情：实现 Pow (x,n)</p>\n<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><p>思路：要实现$Pow(x,n)$，显然不可能用for或while循环进行一个一个$x$相乘，这样时间相对较长，那么可以做以下简化，若要求$x^n$，当n为奇数时，那么$x^n$就等于$x^{\\frac{n}{2}}$次方的的平方再乘一个$x$；当n为偶数时，$x^n$等于$x^{\\frac{n}{2}}$的平方，以此类推，递归方程就可写出以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    double quickMul(double x, long long N) {\n        if (N == 0) {\n            return 1.0;\n        }\n        double y = quickMul(x, N / 2);\n        return N % 2 == 0 ? y * y : y * y * x;\n    }\n\n    double myPow(double x, int n) {\n        long long N = n;\n        return N &gt;= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n};\n</code></pre>\n<p>注意：代码中递归结束条件为<code>N==0</code>，而不是<code>N==1</code>；原因为考虑一开始<code>N==0</code>的情况</p>\n<h1 id=\"迭代优化\"><a href=\"#迭代优化\" class=\"headerlink\" title=\"迭代优化\"></a>迭代优化</h1><p>在递归方法中，我们是通过倒序来进行判断什么时候乘x，什么时候不乘x的，而要实现迭代优化，那么必然要正序遍历，所以现在的目的便是要找到怎样正序遍历的方法。</p>\n<p>我们再仔细想一下第一种确定乘x和不乘x的方法，是偶数不乘，是奇数则乘x，倒序遍历，或许这样说还不够明白，那么换一种说法，偶数乘x的零次方(和不乘结果相同), 而奇数乘x的1次方，倒序排列，换成这样的说法，我们很容易得到，这便是n的二进制形式，它的二进制的每一位表示着乘x的权，而每次计算时又会平方，那么也就是幂的二进制乘2，若偶数末尾即零，奇数末尾即1，如此继续下去，最后得到的值便为$x^n$的值，因此这样便可得到迭代优化后的程序</p>\n<p>代码如下:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    double myPow(double x, int n) {\n        double ans=1;\n        int flag=n;\n        double xc=x;         // 记录每一位如果为 1 应乘的 x 次方\n        while(n!=0)\n        {\n            if(n%2)\n                ans*=xc;\n            xc=xc*xc;               // 每进一位则平方一次 xc\n            n/=2;\n        }\n        return flag&gt;0?ans:1.0/ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "递归"
            ]
        }
    ]
}