<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;递归&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2021-12-24T01:54:40.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/12ad1f11/</id>
        <title>全排列</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/12ad1f11/"/>
        <content type="html">&lt;h1 id=&#34;无重复数字的全排列&#34;&gt;&lt;a href=&#34;#无重复数字的全排列&#34; class=&#34;headerlink&#34; title=&#34;无重复数字的全排列&#34;&gt;&lt;/a&gt;无重复数字的全排列&lt;/h1&gt;&lt;p&gt;先考虑 2 个数的全排列，很明显就是只有两种，一种两个数字的顺序不改变，另一种改变两个数字的顺序&lt;/p&gt;
&lt;p&gt;然后再考虑 3 个数的全排列，比如&lt;code&gt;1，2，3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么总共排列的种类总共为&lt;/p&gt;
&lt;p&gt;1，2，3&lt;br&gt;1，3，2&lt;br&gt;2，1，3&lt;br&gt;2，3，1&lt;br&gt;3，1，2&lt;br&gt;3，2，1&lt;/p&gt;
&lt;p&gt;由此不难发现，每一次的排列总个数（不同的数字开头）都可以看作是在前一种的基础上交换两个数的结果&lt;/p&gt;
&lt;p&gt;例如&lt;code&gt;1，3，2&lt;/code&gt;是在&lt;code&gt;1，2，3&lt;/code&gt;的基础上交换 2，3 位置后得到的。以此类推，4 个数，5 个数，n 个数也一样。那么在这里可以采用递归方法，与汉诺塔问题相似，我们将 n 个数划分为 1 和 n-1 个数，先交换两部分得到一种情况，然后以此为基础再进行交换，结束此种情况后将数字交换回来进入下一种情况&lt;/p&gt;
&lt;p&gt;因此我们可以构造 perm 函数，第一个形参为数组，第二个为未交换数，第三个为数组的末尾下标&lt;/p&gt;
&lt;p&gt;因此核心代码为:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;// 假设这里的递归函数为 perm，数组为 nums，交换的对象为 nums [i] 和 nums [k]
    for(int i=k;i&amp;lt;=m;i++)        // 这里用于把后面的数进行交换
    {
        swap(nums[i],nums[k]);            // 交换，创造新的情况
        perm(nums,k+1,m);                 // 进入新的情况，k+1 为之后未交换的情况
        swap(nums[i],nums[k]);           // 交换回来
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我们需要考虑原来的情况，也就是说此时不需要交换，所以为了保持代码的一致性，可以一开始使其与自身交换，因此为&lt;code&gt;swap(nums[i],nums[k])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    void swap(int*p,int*q)
    {
        int temp=*p;
        *p=*q;
        *q=temp;
    }
    void out(vector&amp;lt;int&amp;gt;&amp;amp;nums,vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp;ans,int k,int m)
    {
        if(k==m)
        {
            ans.push_back(nums);
        }
        else
        {
            for(int i=k;i&amp;lt;=m;i++)
            {
                swap(&amp;amp;nums[i],&amp;amp;nums[k]);
                out(nums,ans,k+1,m);
                swap(&amp;amp;nums[i],&amp;amp;nums[k]);
            }
        }
    }
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; permute(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;ans;
        out(nums,ans,0,nums.size()-1);
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该问题在 leetcode 也有题目&lt;/p&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGVybXV0YXRpb25zLw==&#34;&gt;全排列&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;有重复数字的全排列&#34;&gt;&lt;a href=&#34;#有重复数字的全排列&#34; class=&#34;headerlink&#34; title=&#34;有重复数字的全排列&#34;&gt;&lt;/a&gt;有重复数字的全排列&lt;/h1&gt;</content>
        <category term="递归" />
        <updated>2021-12-24T01:54:40.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.cn/posts/20c47d09/</id>
        <title>快速幂</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/20c47d09/"/>
        <content type="html">&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcG93eC1uLw==&#34;&gt;快速幂&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：实现 Pow (x,n)&lt;/p&gt;
&lt;h1 id=&#34;递归&#34;&gt;&lt;a href=&#34;#递归&#34; class=&#34;headerlink&#34; title=&#34;递归&#34;&gt;&lt;/a&gt;递归&lt;/h1&gt;&lt;p&gt;思路：要实现$Pow(x,n)$，显然不可能用for或while循环进行一个一个$x$相乘，这样时间相对较长，那么可以做以下简化，若要求$x^n$，当n为奇数时，那么$x^n$就等于$x^{\frac{n}{2}}$次方的的平方再乘一个$x$；当n为偶数时，$x^n$等于$x^{\frac{n}{2}}$的平方，以此类推，递归方程就可写出以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    double quickMul(double x, long long N) {
        if (N == 0) {
            return 1.0;
        }
        double y = quickMul(x, N / 2);
        return N % 2 == 0 ? y * y : y * y * x;
    }

    double myPow(double x, int n) {
        long long N = n;
        return N &amp;gt;= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意：代码中递归结束条件为&lt;code&gt;N==0&lt;/code&gt;，而不是&lt;code&gt;N==1&lt;/code&gt;；原因为考虑一开始&lt;code&gt;N==0&lt;/code&gt;的情况&lt;/p&gt;
&lt;h1 id=&#34;迭代优化&#34;&gt;&lt;a href=&#34;#迭代优化&#34; class=&#34;headerlink&#34; title=&#34;迭代优化&#34;&gt;&lt;/a&gt;迭代优化&lt;/h1&gt;&lt;p&gt;在递归方法中，我们是通过倒序来进行判断什么时候乘x，什么时候不乘x的，而要实现迭代优化，那么必然要正序遍历，所以现在的目的便是要找到怎样正序遍历的方法。&lt;/p&gt;
&lt;p&gt;我们再仔细想一下第一种确定乘x和不乘x的方法，是偶数不乘，是奇数则乘x，倒序遍历，或许这样说还不够明白，那么换一种说法，偶数乘x的零次方(和不乘结果相同), 而奇数乘x的1次方，倒序排列，换成这样的说法，我们很容易得到，这便是n的二进制形式，它的二进制的每一位表示着乘x的权，而每次计算时又会平方，那么也就是幂的二进制乘2，若偶数末尾即零，奇数末尾即1，如此继续下去，最后得到的值便为$x^n$的值，因此这样便可得到迭代优化后的程序&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    double myPow(double x, int n) {
        double ans=1;
        int flag=n;
        double xc=x;         // 记录每一位如果为 1 应乘的 x 次方
        while(n!=0)
        {
            if(n%2)
                ans*=xc;
            xc=xc*xc;               // 每进一位则平方一次 xc
            n/=2;
        }
        return flag&amp;gt;0?ans:1.0/ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="递归" />
        <updated>2021-12-05T02:54:40.000Z</updated>
    </entry>
</feed>
