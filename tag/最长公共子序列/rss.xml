<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;最长公共子序列&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Thu, 09 Dec 2021 09:54:40 +0800</pubDate>
        <lastBuildDate>Thu, 09 Dec 2021 09:54:40 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/9e6e8fdc/</guid>
            <title>子序列问题</title>
            <link>http://dpm12345.cn/posts/9e6e8fdc/</link>
            <category>动态规划</category>
            <category>子序列</category>
            <category>最长公共子序列</category>
            <category>最长回文子序列</category>
            <pubDate>Thu, 09 Dec 2021 09:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;最长公共子序列&#34;&gt;&lt;a href=&#34;#最长公共子序列&#34; class=&#34;headerlink&#34; title=&#34;最长公共子序列&#34;&gt;&lt;/a&gt;最长公共子序列&lt;/h1&gt;&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb21tb24tc3Vic2VxdWVuY2Uv&#34;&gt;最长公共子序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;p&gt;我们可以用$dp [i][j]$表示字符串1$[0&lt;del&gt;i]$范围内和字符串2$ [0&lt;/del&gt;i]$范围内的最长公共序列&lt;/p&gt;
&lt;p&gt;当$text1[i]=text2[j]$时，很明显 $dp [i][j]=dp [i-1][j-1]+2$&lt;/p&gt;
&lt;p&gt;当$text1[i]!=text2[j]$时，$dp[i][j]=max(dp[i][j-1],dp[i-1][j])$&lt;/p&gt;
&lt;p&gt;因为此时需要找个最长的子序列为然后连接上后面未知的字符，这样遍历到最后就能得到最大&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m=text1.length(),n=text2.length();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(m+1,vector&amp;lt;int&amp;gt;(n+1));
        int ans=0;
        for(int i=1;i&amp;lt;=m;i++)
        {
            for(int j=1;j&amp;lt;=n;j++)
            {
                if(text1[i-1]==text2[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                ans=max(ans,dp[i][j]);
            }
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;最长回文子序列&#34;&gt;&lt;a href=&#34;#最长回文子序列&#34; class=&#34;headerlink&#34; title=&#34;最长回文子序列&#34;&gt;&lt;/a&gt;最长回文子序列&lt;/h1&gt;&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXBhbGluZHJvbWljLXN1YnNlcXVlbmNlL3N1Ym1pc3Npb25zLw==&#34;&gt;最长回文子序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法一&#34;&gt;&lt;a href=&#34;#解法一&#34; class=&#34;headerlink&#34; title=&#34;解法一&#34;&gt;&lt;/a&gt;解法一&lt;/h2&gt;&lt;p&gt;沿用求最长公共子序列的方法，我们可以先将字符串反转，得到一个新的字符串，再求这两个字符串的最长公共子序列的值，即为最长回文子序列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明：&lt;/strong&gt; 回文串的表现为成对称分布，从前往后遍历和从后往前遍历的结果是一样的，所以说如果求其与其本身的反转字符串的最长公共子序列，因为一个是正向，一个是反向，当求的该共同字符串时，那就说明该字符子序列在原字符串中为回文子序列，又由于在求解过程中记录的为最长，那么结果就能得到最长回文子序列&lt;/p&gt;
&lt;p&gt;下面为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int longestPalindromeSubseq(string s) {
        string re=s;
        int ans=0;
        reverse(re.begin(),re.end());
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(s.length()+1,vector&amp;lt;int&amp;gt;(s.length()+1));
        for(int i=1;i&amp;lt;=s.length();i++)
        {
            for(int j=1;j&amp;lt;=re.length();j++)
            {
                if(s[i-1]==re[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                ans=max(ans,dp[i][j]);
            }
        }
        return ans;

    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解法二&#34;&gt;&lt;a href=&#34;#解法二&#34; class=&#34;headerlink&#34; title=&#34;解法二&#34;&gt;&lt;/a&gt;解法二&lt;/h2&gt;&lt;p&gt;根据回文串的特征，如果一段字符串是回文串，那么将其两边各删去一个字符后依然为回文串，所以我们可以用$dp[i][j]$来表示$i$到$j$最长回文子序列的长度，当遍历时，如果$s[i]=s[j]$，那么$dp[i]=dp[i+1][j-1]+2$，如果不相等，$dp[i][j]=max(dp[i+1][j],dp[i][j-1]$&lt;/p&gt;
&lt;p&gt;需要注意的是，回文串最短为其本身，所以在开始真正寻找前，可以先将$dp [i][i]=1$&lt;/p&gt;
&lt;p&gt;在这里，我们选择由后至前推导，根据上方思想，那么最后的值应为$dp [0][n-1]$($n$为字符串长度)&lt;/p&gt;
&lt;p&gt;下面为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n=s.length();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(n,vector&amp;lt;int&amp;gt;(n));
        for(int i=n-1;i&amp;gt;=0;i--)
        {
            dp[i][i]=1;
            for(int j=i+1;j&amp;lt;n;j++)
            {
                if(s[j]==s[i])
                    dp[i][j]=dp[i+1][j-1]+2;
                else
                    dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
            }
        }
        return dp[0][n-1];
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
