{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"栈\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/5c639822/",
            "url": "http://dpm12345.cn/posts/5c639822/",
            "title": "最小栈",
            "date_published": "2022-01-24T14:54:40.000Z",
            "content_html": "<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluLXN0YWNrLw==\">最小栈</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E6%9C%80%E5%B0%8F%E6%A0%88.png\" alt=\"最小栈详情\"></p>\n<p>要完成题目所要的功能，首先至少需要一个栈存储压入数据</p>\n<p>而对于该栈的使用方法有所不同</p>\n<h2 id=\"用一个栈存储数据，使用-vector-数组存最小值\"><a href=\"#用一个栈存储数据，使用-vector-数组存最小值\" class=\"headerlink\" title=\"用一个栈存储数据，使用 vector 数组存最小值\"></a>用一个栈存储数据，使用 vector 数组存最小值</h2><p>在该方法中，入栈时，用$vector$存储最小值，当栈为空即可直接将要压入栈的值作为最小值，放入数组末尾，而如果栈不为空，那么根据压入值与最小值的比较，将较小值放入$vector$数组末尾，这样做的好处是在$pop()$操作时，不需判断$pop()$的值是否为最小值，可直接$pop_back()$$vector$数组末尾值</p>\n<p>代码如下:</p>\n<pre><code class=\"cpp\">class MinStack {\nprivate:\n    stack&lt;int&gt;a;\n    vector&lt;int&gt;m;\npublic:\n    MinStack() {\n\n    }\n    \n    void push(int val) {\n        if(a.empty())\n        {\n            a.push(val);\n            m.push_back(val);\n        }\n        else\n        {\n            a.push(val);\n            if(val&lt;m.back())\n            {\n                m.push_back(val);\n            }\n            else\n            {\n                m.push_back(m.back());\n            }\n        }\n    }\n    \n    void pop() {\n        a.pop();\n        m.pop_back();\n    }\n    \n    int top() {\n        return a.top();\n      \n    }\n    \n    int getMin() {\n       return m.back();\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj-&gt;push(val);\n * obj-&gt;pop();\n * int param_3 = obj-&gt;top();\n * int param_4 = obj-&gt;getMin();\n */\n</code></pre>\n<h2 id=\"栈不用于存储数据，同时不需要额外空间存储\"><a href=\"#栈不用于存储数据，同时不需要额外空间存储\" class=\"headerlink\" title=\"栈不用于存储数据，同时不需要额外空间存储\"></a>栈不用于存储数据，同时不需要额外空间存储</h2><p>在该方法中，栈中存储的数值为压入栈值与当前最小值的差值</p>\n<p>代码如下:</p>\n<pre><code class=\"cpp\">class MinStack {\npublic:\n    stack&lt;long long&gt; st;   // 使用 long long 防止数据溢出\n    long long minv;\n\n    MinStack() {\n        minv = -1;\n    }\n\n    void push(int val) {\n        if (!st.size()) {\n            st.push(0);\n            minv = val;\n        }\n        else {// 这次的值减去已有的最小值\n            long long diff = val - minv;\n            st.push(diff);\n            minv = diff &lt; 0 ? val : minv;\n        }\n    }\n\n    void pop() {\n        if (st.size()) {\n            long long diff = st.top();\n            st.pop();\n            if (diff &lt; 0)\n                minv -= diff;\n        }\n    }\n\n    int top() {\n        long long diff = st.top();\n        if (diff &lt; 0)\n            return minv;\n        else \n            return minv + diff;\n    }\n    \n    int getMin() {\n        return minv;\n    }\n};\n</code></pre>\n",
            "tags": [
                "vector",
                "栈"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/308e5841/",
            "url": "http://dpm12345.cn/posts/308e5841/",
            "title": "有效的括号",
            "date_published": "2021-11-28T13:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv\">有效的括号</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<p>思路：因为相同括号只能连续出现，那么我们可以利用栈的特性，当找到一个左括号时，压入栈；当找到一个右括号时，判断栈顶是不是与其相配对的括号，若不是，则返回<code>false</code>，是则去除栈顶元素，到最后，因为有一直压入栈顶的情况，故不能直接<code>return true</code>，而是可以返回<code>empty()</code></p>\n<p>代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool isValid(string s) {\n        if(s.length()&lt;2)return false;\n        unordered_map&lt;char,char&gt;dict={\n            {')', '('},\n            {']', '['},\n            {'}', '{'}\n        };\n        stack&lt;char&gt;a;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(dict.count(s[i]))\n            {\n                if(a.empty()||a.top()!=dict[s[i]])\n                return false;\n                a.pop();\n            }\n            else \n                a.push(s[i]);\n        }\n        return a.empty();\n    }\n};\n</code></pre>\n",
            "tags": [
                "栈"
            ]
        }
    ]
}