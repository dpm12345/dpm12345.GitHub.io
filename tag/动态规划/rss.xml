<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;动态规划&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Fri, 14 Jan 2022 22:54:40 +0800</pubDate>
        <lastBuildDate>Fri, 14 Jan 2022 22:54:40 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/73645ce2/</guid>
            <title>丑数</title>
            <link>http://dpm12345.cn/posts/73645ce2/</link>
            <category>动态规划</category>
            <pubDate>Fri, 14 Jan 2022 22:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;丑数，其所有因数均属于所给的数字集合，如对于因数 2，3，5，&lt;/p&gt;
&lt;p&gt;2，6，10 均为满足条件的丑数&lt;/p&gt;
&lt;p&gt;以下为 leetcode 上丑数的相关问题&lt;/p&gt;
&lt;h1 id=&#34;丑数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#丑数&#34;&gt;#&lt;/a&gt; 丑数&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdWdseS1udW1iZXIvc29sdXRpb24v&#34;&gt; 丑数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../post_images/%E4%B8%91%E6%95%B0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据丑数因数特点，我们可以依次不断除以所给因数集的各因数，如果其为丑数，结束后其必定变为数字 &lt;code&gt;1&lt;/code&gt; ，如果不满足，其必不为 &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;丑数&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;isUgly&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; div&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; div&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                n &lt;span class=&#34;token operator&#34;&gt;/=&lt;/span&gt; div&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; n&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;丑数-ii&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#丑数-ii&#34;&gt;#&lt;/a&gt; 丑数 II&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdWdseS1udW1iZXItaWkv&#34;&gt; 丑数 II&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../post_images/%E4%B8%91%E6%95%B0II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;思路:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一道题目的因数集与上题相同，但要求不同，求的是满足条件的第&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 个丑数&lt;/p&gt;
&lt;p&gt;仔细观察题目示例，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;4&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;6&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;8&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;9&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[1,2,3,4,5,6,8,9,10,12]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 为前十个丑数组成的序列，结合丑数特点，每个数字最多只有&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2,3,5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，三个因数，也就是说我们可以利用动态规划的思想，在前面的基础上乘以因数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2,3,5&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8388800000000001em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;​，得到的数必然为满足的丑数。由于要涵盖所有的数，那么前面的数都应要乘各项因数，因此可以为不同因数各设置一个记录应该乘第几个丑数的变量，并将所得乘积记录到数组中，在取时，只需取数组中的最小值即可，取出后相应的也需要更新该因数对应的最小数&lt;/p&gt;
&lt;p&gt;由于存在公倍数，因此在判断取出的数是哪个因数时需要对每个因素都进行判断一次，排除重复的情况&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;丑数II&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;nthUglyNumber&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;//dp [n] 表示第 n 个丑数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;              &lt;span class=&#34;token comment&#34;&gt;// 默认第一个为 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; p2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;//p2,p3,p5 分别表示对应因数应乘的丑数下标&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; num2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p2&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p3&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num5 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;p5&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34;&gt;// 更新数组&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num2&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;// 找到最小值&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; num2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;                        &lt;span class=&#34;token comment&#34;&gt;// 判断该最小值是否由因数 2 得到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                p2&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; num3&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;                        &lt;span class=&#34;token comment&#34;&gt;// 判断该最小值是否由因数 2 得到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                p3&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; num5&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;                        &lt;span class=&#34;token comment&#34;&gt;// 判断该最小值是否由因数 2 得到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                p5&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;xxxxxxxxxx49-1class-solution-2public3-int-numislandsvectorvectorchar-grid-4-int-mgridsizengrid0size5-ifm0-6-return-07-int-ans08-forint-i0imi9-10-forint-j0jnj11-12-ifgridij113-14-ans15-gridij016-queuepairintints17-spushij18-whilesempty19-20-auto-rcsfront21-spop22-ifr-10gridr-1c123-24-gridr-1c025-spushr-1c26-27-ifr1mgridr1c128-29-gridr1c030-spushr1c31-32-ifc-10gridrc-1133-34-gridrc-1035-spushrc-136-37-ifc1ngridrc1138-39-gridrc1040-spushrc141-4243-44-45-46-47-return-ans48-49cpp-广度优先搜索4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xxxxxxxxxx49-1class-solution-2public3-int-numislandsvectorvectorchar-grid-4-int-mgridsizengrid0size5-ifm0-6-return-07-int-ans08-forint-i0imi9-10-forint-j0jnj11-12-ifgridij113-14-ans15-gridij016-queuepairintints17-spushij18-whilesempty19-20-auto-rcsfront21-spop22-ifr-10gridr-1c123-24-gridr-1c025-spushr-1c26-27-ifr1mgridr1c128-29-gridr1c030-spushr1c31-32-ifc-10gridrc-1133-34-gridrc-1035-spushrc-136-37-ifc1ngridrc1138-39-gridrc1040-spushrc141-4243-44-45-46-47-return-ans48-49cpp-广度优先搜索4&#34;&gt;#&lt;/a&gt; xxxxxxxxxx49&amp;nbsp;1class Solution {2public:3 &amp;nbsp; &amp;nbsp;int numIslands(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid) {4 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;int m=grid.size(),n=grid[0].size();5 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if(m&lt;mark&gt;0) &amp;nbsp;6 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return 0;7 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;int ans=0;8 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;for(int i=0;i&amp;lt;m;i++)9 &amp;nbsp; &amp;nbsp; &amp;nbsp;  {10 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;for(int j=0;j&amp;lt;n;j++)11 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  {12 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if(grid[i][j]&lt;/mark&gt;&#39;1&#39;)13 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  {14 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;ans++;15 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;grid[i][j]=&#39;0&#39;;16 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;queue&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;s;17 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;s.push({i,j});18 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;while(!s.empty())19 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  {20 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;auto [r,c]=s.front();21 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;s.pop();22 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if(r-1&amp;gt;=0&amp;amp;&amp;amp;grid[r-1][c]&lt;mark&gt;&#39;1&#39;)23 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  {24 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;grid[r-1][c]=&#39;0&#39;;25 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;s.push({r-1,c});26 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  }27 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if(r+1&amp;lt;m&amp;amp;&amp;amp;grid[r+1][c]&lt;/mark&gt;&#39;1&#39;)28 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  {29 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;grid[r+1][c]=&#39;0&#39;;30 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;s.push({r+1,c});31 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  }32 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if(c-1&amp;gt;=0&amp;amp;&amp;amp;grid[r][c-1]&lt;mark&gt;&#39;1&#39;)33 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  { &amp;nbsp; &amp;nbsp;34 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;grid[r][c-1]=&#39;0&#39;;35 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;s.push({r,c-1});36 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  }37 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;if(c+1&amp;lt;n&amp;amp;&amp;amp;grid[r][c+1]&lt;/mark&gt;&#39;1&#39;) 38 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  {39 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;grid [r][c+1]=&#39;0&#39;;40 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;s.push ({r,c+1});41 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } 42​43 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } 44 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } 45 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } 46 &amp;nbsp; &amp;nbsp; &amp;nbsp;  } 47 &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return ans;48 &amp;nbsp;  } 49};cpp  广度优先搜索 4&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VwZXItdWdseS1udW1iZXIv&#34;&gt; 超级丑数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;../../../post_images/%E8%B6%85%E7%BA%A7%E4%B8%91%E6%95%B0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;超级丑数_题目详情&#34;&gt;&lt;/p&gt;
&lt;p&gt;这题与与丑数 II 十分相似，不同的是，因数集不在是固定为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;5&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[2,3,5]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，而是由给定的数组决定。&lt;/p&gt;
&lt;p&gt;同样的沿用丑数 II 的思想，在丑数 II 中，首先需要存储丑数的数组 dp，同时用于实现动态规划思想，其次需要有记录各因数应乘丑数的下标和记录目前丑数集的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;num&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;因此需要的变量为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;dp[n]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 存储丑数&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;point[i]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 记录因数&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;primes[i]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.02778em;&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 应乘的丑数下标&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;nums[i]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 存储丑数集，其中下标&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.65952em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 对应因数下标&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.65952em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;figcaption data-lang=&#34;C++&#34;&gt;&lt;span&gt;超级丑数&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Solution&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;nthSuperUglyNumber&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; n&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; primes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;point&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;primes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 使用 long 防止数据溢出，因为虽然题目保证第 n 各数不会超出 32-bit，&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;		&lt;span class=&#34;token comment&#34;&gt;// 但我们在使用该方法时是找已知丑数的最小值，因此可能超过 32-bit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;nums&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;primes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        vector&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;long&lt;/span&gt; minn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;INT_MAX&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;token comment&#34;&gt;// 用于找到丑数集中的最小数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                minn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;min&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;minn&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;minn&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                   &lt;span class=&#34;token comment&#34;&gt;// 放入存储丑数的数组中&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;minn&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;token comment&#34;&gt;// 表示目前找到的最小丑数可以有因数 primes [j] 得到&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    point&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;token comment&#34;&gt;// 对应丑数小标加 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    nums&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;point&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;primes&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;token comment&#34;&gt;// 更新丑数集&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dp&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/9e6e8fdc/</guid>
            <title>子序列问题</title>
            <link>http://dpm12345.cn/posts/9e6e8fdc/</link>
            <category>动态规划</category>
            <category>子序列</category>
            <category>最长公共子序列</category>
            <category>最长回文子序列</category>
            <pubDate>Thu, 09 Dec 2021 09:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;最长公共子序列&#34;&gt;&lt;a href=&#34;#最长公共子序列&#34; class=&#34;headerlink&#34; title=&#34;最长公共子序列&#34;&gt;&lt;/a&gt;最长公共子序列&lt;/h1&gt;&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb21tb24tc3Vic2VxdWVuY2Uv&#34;&gt;最长公共子序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h2&gt;&lt;p&gt;我们可以用$dp [i][j]$表示字符串1$[0&lt;del&gt;i]$范围内和字符串2$ [0&lt;/del&gt;i]$范围内的最长公共序列&lt;/p&gt;
&lt;p&gt;当$text1[i]=text2[j]$时，很明显 $dp [i][j]=dp [i-1][j-1]+2$&lt;/p&gt;
&lt;p&gt;当$text1[i]!=text2[j]$时，$dp[i][j]=max(dp[i][j-1],dp[i-1][j])$&lt;/p&gt;
&lt;p&gt;因为此时需要找个最长的子序列为然后连接上后面未知的字符，这样遍历到最后就能得到最大&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m=text1.length(),n=text2.length();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(m+1,vector&amp;lt;int&amp;gt;(n+1));
        int ans=0;
        for(int i=1;i&amp;lt;=m;i++)
        {
            for(int j=1;j&amp;lt;=n;j++)
            {
                if(text1[i-1]==text2[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                ans=max(ans,dp[i][j]);
            }
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;最长回文子序列&#34;&gt;&lt;a href=&#34;#最长回文子序列&#34; class=&#34;headerlink&#34; title=&#34;最长回文子序列&#34;&gt;&lt;/a&gt;最长回文子序列&lt;/h1&gt;&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXBhbGluZHJvbWljLXN1YnNlcXVlbmNlL3N1Ym1pc3Npb25zLw==&#34;&gt;最长回文子序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法一&#34;&gt;&lt;a href=&#34;#解法一&#34; class=&#34;headerlink&#34; title=&#34;解法一&#34;&gt;&lt;/a&gt;解法一&lt;/h2&gt;&lt;p&gt;沿用求最长公共子序列的方法，我们可以先将字符串反转，得到一个新的字符串，再求这两个字符串的最长公共子序列的值，即为最长回文子序列&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明：&lt;/strong&gt; 回文串的表现为成对称分布，从前往后遍历和从后往前遍历的结果是一样的，所以说如果求其与其本身的反转字符串的最长公共子序列，因为一个是正向，一个是反向，当求的该共同字符串时，那就说明该字符子序列在原字符串中为回文子序列，又由于在求解过程中记录的为最长，那么结果就能得到最长回文子序列&lt;/p&gt;
&lt;p&gt;下面为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int longestPalindromeSubseq(string s) {
        string re=s;
        int ans=0;
        reverse(re.begin(),re.end());
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(s.length()+1,vector&amp;lt;int&amp;gt;(s.length()+1));
        for(int i=1;i&amp;lt;=s.length();i++)
        {
            for(int j=1;j&amp;lt;=re.length();j++)
            {
                if(s[i-1]==re[j-1])
                    dp[i][j]=dp[i-1][j-1]+1;
                else
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                ans=max(ans,dp[i][j]);
            }
        }
        return ans;

    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解法二&#34;&gt;&lt;a href=&#34;#解法二&#34; class=&#34;headerlink&#34; title=&#34;解法二&#34;&gt;&lt;/a&gt;解法二&lt;/h2&gt;&lt;p&gt;根据回文串的特征，如果一段字符串是回文串，那么将其两边各删去一个字符后依然为回文串，所以我们可以用$dp[i][j]$来表示$i$到$j$最长回文子序列的长度，当遍历时，如果$s[i]=s[j]$，那么$dp[i]=dp[i+1][j-1]+2$，如果不相等，$dp[i][j]=max(dp[i+1][j],dp[i][j-1]$&lt;/p&gt;
&lt;p&gt;需要注意的是，回文串最短为其本身，所以在开始真正寻找前，可以先将$dp [i][i]=1$&lt;/p&gt;
&lt;p&gt;在这里，我们选择由后至前推导，根据上方思想，那么最后的值应为$dp [0][n-1]$($n$为字符串长度)&lt;/p&gt;
&lt;p&gt;下面为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int longestPalindromeSubseq(string s) {
        int n=s.length();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(n,vector&amp;lt;int&amp;gt;(n));
        for(int i=n-1;i&amp;gt;=0;i--)
        {
            dp[i][i]=1;
            for(int j=i+1;j&amp;lt;n;j++)
            {
                if(s[j]==s[i])
                    dp[i][j]=dp[i+1][j-1]+2;
                else
                    dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
            }
        }
        return dp[0][n-1];
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/ca7417e/</guid>
            <title>三个无重叠子数组的最大和</title>
            <link>http://dpm12345.cn/posts/ca7417e/</link>
            <category>动态规划</category>
            <pubDate>Thu, 09 Dec 2021 09:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWZ1bmN0aW9uLw==&#34;&gt;旋转函数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%97%8B%E8%BD%AC%E5%87%BD%E6%95%B0.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;解题思路:&lt;/p&gt;
&lt;p&gt;由题目中的旋转函数形式&lt;br&gt;$$&lt;br&gt;F(k) = 0 * B_k[0] + 1 * B_k[1] + … + (n-1) * B_k[n-1]&lt;br&gt;$$&lt;br&gt;以题目示例为例&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A = [4, 3, 2, 6]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25 &lt;/p&gt;
&lt;p&gt;F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16 F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23 F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即&lt;br&gt;$$&lt;br&gt;F(0) = (0 * A [0]) + (1 * A [1]) + (2 * A [2]) + (3 * A [3])&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;F(1) = (0 * A[3]) + (1 * A[0]) + (2 * A[1]) + (3 * A[2])&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;F(2) = (0 * A[2]) + (1 * A[3]) + (2 * A[0]) + (3 * A[1])&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;F(3) = (0 * A[1]) + (1 * A[2]) + (2 * A[3]) + (3 * A[0])&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;将相邻两个函数相减，可以发现&lt;br&gt;$$&lt;br&gt;F(1)-F(0)=A[0]+A[1]+A[2]+A[3]-4*A[3]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;F(2)-F(1)=A[0]+A[1]+A[2]+A[3]-4*A[2]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;F(3)-F(2)=A[0]+A[1]+A[2]+A[3]-4*A[1]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;那么可以发现一般规律&lt;br&gt;$$&lt;br&gt;F(k)-F(k-1)=A[0]+A[1]+A[2]+A[3]+···+A[n-1]-n&lt;em&gt;A[n-k];&lt;br&gt;$$&lt;br&gt;形式为数组A元素之和减去$n&lt;/em&gt;A[n-k]$&lt;/p&gt;
&lt;p&gt;由此我们可以维护一个$dp$数组，$dp[i]$表示$F(k)$; 一个$sum$表示$A$的元素之和。&lt;br&gt;$$&lt;br&gt;dp[i]=dp[i-1]+sum-n*A[n-i];&lt;br&gt;$$&lt;br&gt;特别的，当$i=0$时，$dp[i]=sum$。&lt;/p&gt;
&lt;p&gt;最后输出$dp[i]$的最大值&lt;/p&gt;
&lt;p&gt;因此，代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int maxRotateFunction(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n=nums.size();
        int sum=0;
        vector&amp;lt;int&amp;gt;dp(n);
        for(int i=0;i&amp;lt;n;i++)
        {
            sum+=nums[i];
            dp[0]+=i*nums[i];
        }
        for(int i=1;i&amp;lt;n;i++)
        {
            dp[i]=dp[i-1]+sum-n*nums[n-i];
        }
        return *max_element(dp.begin(),dp.end());
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/ca7417e/</guid>
            <title>三个无重叠子数组的最大和</title>
            <link>http://dpm12345.cn/posts/ca7417e/</link>
            <category>前缀和</category>
            <category>动态规划</category>
            <category>滑动窗口</category>
            <pubDate>Wed, 08 Dec 2021 09:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1zdW0tb2YtMy1ub24tb3ZlcmxhcHBpbmctc3ViYXJyYXlzLw==&#34;&gt; 三个无重叠子数组的最大和&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E4%B8%89%E4%B8%AA%E6%97%A0%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;该题为 2021-12-8 的每日一题，可解决该问题的方法涉及到前缀和，动态规划，滑动窗口知识&lt;/p&gt;
&lt;p&gt;思路: 题目要求求出某一数组三个长度为 k 的无重叠数组，使它们的元素之和为最大。&lt;/p&gt;
&lt;p&gt;看到这个个数为 k，很容易想到滑动窗口这一算法，只是在这里，需要同时存在三个滑动窗口，&lt;/p&gt;
&lt;p&gt;同样的，在这题，也可以用动态规划进行解决&lt;/p&gt;
&lt;p&gt;下面是我自己在解题时的过程&lt;/p&gt;
&lt;h1 id=&#34;动态规划（劣质版）&#34;&gt;&lt;a href=&#34;#动态规划（劣质版）&#34; class=&#34;headerlink&#34; title=&#34;动态规划（劣质版）&#34;&gt;&lt;/a&gt;动态规划（劣质版）&lt;/h1&gt;&lt;p&gt;刚拿到题目时，我能想到，该题可以使用动态规划解决，但并无方向该从哪个地方下手将什么作为$dp[i]$所表达的意义，&lt;/p&gt;
&lt;p&gt;思考了大约20分钟后，我还是无从下手，于是打开了题解，第一眼看到的是”单个子数组的最大和“，顿时恍然大悟，我可以将不同个数的子数组作为一个$dp$，在计算个数加一时，便可以利用前面的$dp$，得到最优解。仔细思考，该方案的时间复杂度为$O(n)$。&lt;/p&gt;
&lt;p&gt;在以下的代码中，我是如此考虑的：&lt;/p&gt;
&lt;p&gt;先用$sum[i]$计算前缀和，为后续计算提供便利再分别使用$dp1$，$dp2$，$dp3$记录不同个数的子数组元素的最大值，其转移方程分别为：&lt;br&gt;$$&lt;br&gt;dp1[i]=max{dp1[i-1],sum[i+1]-sum[i-k+1]}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;dp2[i]=max{dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;dp3[i]=max{dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;但这样并不能记录下标输出答案，所以这里我采用了，三个flag数组，用于记录下标，具体见代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; maxSumOfThreeSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        vector&amp;lt;int&amp;gt;dp1(n),dp2(n),dp3(n);
        vector&amp;lt;int&amp;gt;flag1(n);
        vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;flag2(n);
        vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;flag3(n);
        vector&amp;lt;int&amp;gt;sum(n+1,0);
        vector&amp;lt;int&amp;gt;ans;
        for(int i=0;i&amp;lt;n;i++)
        {
            sum[i+1]+=nums[i]+sum[i];           
        }
        for(int i=k-1;i&amp;lt;n;i++)
        {
            dp1[i]=max(dp1[i-1],sum[i+1]-sum[i-k+1]);
            if(dp1[i]==dp1[i-1])
            {
                flag1[i]=flag1[i-1];
            }
            else
            {
                flag1[i]=i-k+1;
            }
        }
        for(int i=2*k-1;i&amp;lt;n;i++)
        {
            dp2[i]=max(dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp2[i]==dp2[i-1])
            {
                flag2[i]=flag2[i-1];
            }
            else
            {
                flag2[i]={flag1[i-k],i-k+1};
            }
        }
        for(int i=3*k-1;i&amp;lt;n;i++)
        {
            dp3[i]=max(dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp3[i]==dp3[i-1])
            {
                flag3[i]=flag3[i-1];
            }
            else
            {
                flag3[i]={flag2[i-k].second,i-k+1};
            }
        }
        return {flag2[flag3[n-1].first].first,flag3[n-1].first,flag3[n-1].second};
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;class Solution {public: &amp;nbsp; &amp;nbsp;int maxResult(vector&lt;int&gt;&amp;amp; nums, int k) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;int n = nums.size(); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;vector&lt;int&gt; dp(n); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dp[0] = nums[0]; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; q; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;q.emplace(nums[0], 0); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;for (int i = 1; i &amp;lt; n; ++i) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;while (i - q.top().second &amp;gt; k) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;q.pop(); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dp[i] = q.top().first + nums[i]; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;q.emplace(dp[i], i); &amp;nbsp; &amp;nbsp; &amp;nbsp;  } &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return dp[n - 1]; &amp;nbsp;  }};cpp 优先级队列2&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;观察报错信息，可知，在我的代码中，并未考虑&lt;code&gt;k==1&lt;/code&gt;的情况，因为代码中我是通过&lt;code&gt;for(int i=k-1;i&amp;lt;n;i++)&lt;/code&gt;实现循环的，k-1 就会为 0，至于后面 i-1 造成错误&lt;/p&gt;
&lt;p&gt;改进代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;if(k==1)                      // 考虑 k==1 的情况
    {
        vector&amp;lt;int&amp;gt;ans(3);
        for(int i=0;i&amp;lt;3;i++)
        {
            ans[i]=max_element(nums.begin(),nums.end())-nums.begin();
                *max_element(nums.begin(),nums.end())=0;
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次提交，发现答案出错，如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E4%B8%89%E4%B8%AA%E6%97%A0%E9%87%8D%E5%8F%A0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这并不能看出什么，为此，我进行了多组数据的尝试，发现第一个大部分都不符合答案，但后两个一直都是正确的，说明&lt;code&gt;flag1&lt;/code&gt;求解过程无误，而是输出出错&lt;/p&gt;
&lt;p&gt;对此，进行代码分析，最后输出时，我写的是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return {flag2[flag3[n-1].first].first,flag3[n-1].first,flag3[n-1].second};&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[flag2[flag3[n-1].first].first&lt;/code&gt;，因为我在&lt;code&gt;flag3.first&lt;/code&gt;存入的是&lt;code&gt;flag2&lt;/code&gt;的索引的第二个元素，以此来得到&lt;code&gt;flag1&lt;/code&gt;明显是不可行的，因为对应&lt;code&gt;flag1&lt;/code&gt;的下标与&lt;code&gt;flag2&lt;/code&gt;的第二个元素并无关系，&lt;code&gt;flag1[i-k]&lt;/code&gt;可能是前一个继承来的，与&lt;code&gt;flag2&lt;/code&gt;的第二个元素无关，也有可能与其有关，总之该方法不一定正确&lt;/p&gt;
&lt;p&gt;那么我做以下修改&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重新定义&lt;code&gt;flag3&lt;/code&gt;数组类型，为&lt;code&gt;&amp;lt;pair&amp;lt;pair&amp;lt;int,int&amp;gt;，int&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;存入&lt;code&gt;flag3&lt;/code&gt;时存入&lt;code&gt;{flag2 [i-k],i-k+1}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;读取第一个使用&lt;code&gt;flag3[n-1].first.first&lt;/code&gt;，第二个使用&lt;code&gt;flag3[n-1].first.second&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下为修改后的代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; maxSumOfThreeSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        if(k==1)                      // 考虑 k==1 的情况
        {
            vector&amp;lt;int&amp;gt;ans(3);
            for(int i=0;i&amp;lt;3;i++)
            {
                ans[i]=max_element(nums.begin(),nums.end())-nums.begin();
                *max_element(nums.begin(),nums.end())=0;
            }
            sort(ans.begin(),ans.end());
            return ans;
        }
        //dp [i] 表示 0 到该位置所能得到的 x 个无重叠数组和的最大值
        vector&amp;lt;int&amp;gt;dp1(n),dp2(n),dp3(n);
        
        //flag1 记录某一位置 1 个最大无重叠数组的下标       
        vector&amp;lt;int&amp;gt;flag1(n);
        
        //flag2 记录某一位置 2 个最大无重叠数组的下标    
        vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;flag2(n);
        
        //flag3 记录某一位置 3 个最大无重叠数组的下标                  
        vector&amp;lt;pair&amp;lt;pair&amp;lt;int,int&amp;gt;,int&amp;gt;&amp;gt;flag3(n);              
        
        //sum [i] 表示前 i 个数之和
        vector&amp;lt;int&amp;gt;sum(n+1,0); 
        
        for(int i=0;i&amp;lt;n;i++)                       // 计算前缀和
        {
            sum[i+1]+=nums[i]+sum[i];           
        }
        
        // 计算从 k-1 开始 1 个无重叠子数组最大的值，用 flag1 记录下标值
        for(int i=k-1;i&amp;lt;n;i++)                      
        {
            dp1[i]=max(dp1[i-1],sum[i+1]-sum[i-k+1]);
            if(dp1[i]==dp1[i-1])
            {
                flag1[i]=flag1[i-1];
            }
            else
            {
                flag1[i]=i-k+1;
            }
        }
        
        // 计算从 2*k-1 开始 2 个无重叠子数组最大的值，用 flag2 记录下标值
        for(int i=2*k-1;i&amp;lt;n;i++)                   
        {
            dp2[i]=max(dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp2[i]==dp2[i-1])
            {
                flag2[i]=flag2[i-1];
            }
            else
            {
                flag2[i]={flag1[i-k],i-k+1};
            }
        }
        
        // 计算从 3*k-1 位置开始 3 个无重叠子数组最大的值，用 flag2 记录下标值
        for(int i=3*k-1;i&amp;lt;n;i++)                        
        { 
            dp3[i]=max(dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp3[i]==dp3[i-1])
            {
                flag3[i]=flag3[i-1];
            }
            else
            {
                flag3[i]={flag2[i-k],i-k+1};
            }
        }
        
        // 根据 flag3 找寻下标
        return {flag3[n-1].first.first,flag3[n-1].first.second,flag3[n-1].second};   
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;滑动窗口&#34;&gt;&lt;a href=&#34;#滑动窗口&#34; class=&#34;headerlink&#34; title=&#34;滑动窗口&#34;&gt;&lt;/a&gt;滑动窗口&lt;/h1&gt;&lt;p&gt;维护&lt;code&gt;sum1&lt;/code&gt;，&lt;code&gt;sum2&lt;/code&gt;，&lt;code&gt;sum3&lt;/code&gt;，分别表示&lt;code&gt;n&lt;/code&gt;个子数组的最大值，若大于原来的更新下标(代码中为&lt;code&gt;sum1maxid,sum2maxid1,sum2maxid2&lt;/code&gt;) 当数组个数大于等于k时，那么需删去首个元素，更新窗口&lt;/p&gt;
&lt;p&gt;以下为代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; maxSumOfThreeSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        int sum1=0,sum2=0,sum3=0;
        int sum1max=0,sum2max=0,sum3max=0;
        int sum1maxid,sum2maxid1,sum2maxid2;
        vector&amp;lt;int&amp;gt;ans;
        for(int i=2*k;i&amp;lt;n;i++)
        {
            sum1+=nums[i-2*k];
            sum2+=nums[i-k];
            sum3+=nums[i];
            if(i&amp;gt;=3*k-1)
            {
                if(sum1&amp;gt;sum1max)
                {
                    sum1max=sum1;
                    sum1maxid=i-3*k+1;          // 更新 1 个子数组最大值下标
                }
                if(sum1max+sum2&amp;gt;sum2max)
                {
                    sum2max=sum1max+sum2;
                    sum2maxid1=sum1maxid;       // 更新两个子数组中 1 个子数组最大值下标
                    sum2maxid2=i-2*k+1;         // 更新 1 个子数组最大值下标
                }
                if(sum2max+sum3&amp;gt;sum3max)
                {
                    sum3max=sum2max+sum3;
                    ans={sum2maxid1,sum2maxid2,i-k+1};  // 更新答案
                }
                sum1-=nums[i-3*k+1];             // 删去首个
                sum2-=nums[i-2*k+1];             // 删去首个
                sum3-=nums[i-k+1];               // 删去首个
            }
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/5beb97b2/</guid>
            <title>无重叠区间</title>
            <link>http://dpm12345.cn/posts/5beb97b2/</link>
            <category>队列</category>
            <category>动态规划</category>
            <pubDate>Mon, 06 Dec 2021 19:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbm9uLW92ZXJsYXBwaW5nLWludGVydmFscy8=&#34;&gt;无重叠区间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;思路：在这道题中，我们可以把题目要求所解问题换一种说法，找删去最少区间使剩下成为无重叠区间，即包含区间最多数。&lt;/p&gt;
&lt;p&gt;我们注意到，当其为无重叠区间时，前一个区间的末端必然小于等于后一个区间首端，那么我们便可以将这一组的无重叠区间的端点看作为一组不严格单调递增的序列。这样便与求 “最长上升序列” 的序列的问题相同了。&lt;/p&gt;
&lt;h1 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;p&gt;我们维护一个数组$dp[i]$，其中$dp[i]$以该位置为末尾区间的，所能得到的数量最多的无重叠区间的值。那么很容易得到，先分别枚举末尾区间位置，再从0开始遍历，寻找最长，转移方程即为： $dp[i]=max(dp[j]+1,dp[i])$（当$intervals[j][1]&amp;lt;intervals[i][0]$时)&lt;/p&gt;
&lt;p&gt;以下为代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int eraseOverlapIntervals(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; intervals) {
        sort(intervals.begin(),intervals.end());
        int n=intervals.size();
        vector&amp;lt;int&amp;gt;dp(n,1);
        for(int i=0;i&amp;lt;intervals.size();i++)
        {
            for(int j=0;j&amp;lt;i;j++)
            {
                if(intervals[j][1]&amp;lt;=intervals[i][0])
                {
                    dp[i]=max(dp[j]+1,dp[i]);
                }
            }
        }
        return n-*max_element(dp.begin(),dp.end());

    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提交后很不幸，超时了，时间复杂度为$O(n^2)$, 为此我们需要将时间优化。&lt;/p&gt;
&lt;h1 id=&#34;贪心方案&#34;&gt;&lt;a href=&#34;#贪心方案&#34; class=&#34;headerlink&#34; title=&#34;贪心方案&#34;&gt;&lt;/a&gt;贪心方案&lt;/h1&gt;&lt;p&gt;上面的动态规划方案中，枚举末尾，再从0开始遍历，寻找最长，这是无法避免的，为此难以优化，这样，我们可以使用贪心方案，将时间复杂度降低 &lt;/p&gt;
&lt;p&gt;实现思想: 我们要想得到最多数量的无重叠区间，那么我们需要尽可能地将区间长度较小地放入这一无重叠区间内，因此我们可以设想，如果我们将各个区间地右端点按升序排序，设一个变量&lt;code&gt;right&lt;/code&gt;为目前无重叠区间的右端点，如果下一个区间的左端大于&lt;code&gt;right&lt;/code&gt;，区间加一，&lt;code&gt;right&lt;/code&gt;更新，这样以此类推， 最终可以得到答案 &lt;/p&gt;
&lt;p&gt;证明：由于我们是将右端点降序排序，那么当两段区间相同时，实际上无论选择哪段结果都是一样的，因为不管该区间的左端点为多少，后面的区间只要左区间不大于&lt;code&gt;right&lt;/code&gt;，那么该区间必会被删。而当之后区间的左端点大于&lt;code&gt;right&lt;/code&gt;时，那么此时所选取的区间的右端点必然是满足条件的最小值，也因此能够得到最多数量的无重叠区间 &lt;/p&gt;
&lt;p&gt;以下为实现代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int eraseOverlapIntervals(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; intervals) {
        if (intervals.empty()) {
            return 0;
        }
        
        sort(intervals.begin(), intervals.end(), [](const auto&amp;amp; u, const auto&amp;amp; v) {
            return u[1] &amp;lt; v[1];
        });

        int n = intervals.size();
        int right = intervals[0][1];
        int ans = 1;
        for (int i = 1; i &amp;lt; n; ++i) {
            if (intervals[i][0] &amp;gt;= right) {
                ++ans;
                right = intervals[i][1];
            }
        }
        return n - ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/6f1a75f/</guid>
            <title>跳跃游戏 VI</title>
            <link>http://dpm12345.cn/posts/6f1a75f/</link>
            <category>队列</category>
            <category>动态规划</category>
            <pubDate>Sun, 05 Dec 2021 14:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvanVtcC1nYW1lLXZpLw==&#34;&gt;跳跃游戏 VI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/1696%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FVI.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;初期想法&#34;&gt;&lt;a href=&#34;#初期想法&#34; class=&#34;headerlink&#34; title=&#34;初期想法&#34;&gt;&lt;/a&gt;初期想法&lt;/h1&gt;&lt;p&gt;看到题目，很容易想到使用动态规划算法，$dp[i]$表示跳到位置$i$能取到的最大的值,其中$dp[i]=min{dp[i-1],dp[i-2]……,dp[i-k]}+nums[i]$, 那么很容易写出代码 如图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FVI_%E5%88%9D%E5%A7%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是已提交便发现，超时了，也就是说纯纯动态规划不能完成题目要求。&lt;/p&gt;
&lt;h1 id=&#34;反思&#34;&gt;&lt;a href=&#34;#反思&#34; class=&#34;headerlink&#34; title=&#34;反思&#34;&gt;&lt;/a&gt;反思&lt;/h1&gt;&lt;p&gt;思考初期想法的代码，哪里造成了代码超时呢？&lt;/p&gt;
&lt;p&gt;不难发现，在确定$i$位置前的$[i-k,i-1]$范围内的最小值时，每一个都比较了一次，而当$i$加一时，除去上次的$i-k$，和新增的$i-1$，其他位置又比较了一次，如果最大值，即比较过后仍然比较，其原因是缺少记录最大值的渠道。那么是否可以在循环时加上一个变量MAX记录$[i-k,i-1]$的最大值，当$i+1$时，将MAX与$dp[i]$比较呢？&lt;/p&gt;
&lt;p&gt;其结果是只能解决一部分，因为假设$MAX=dp[i-k]$，当$i+1$时，MAX的值明显不在之后的$[i-k,i-1]$范围之内了，因此要将原来范围内的次大值与$dp[i]$比较，这样我们又多了个任务，求次大值，所以单纯增加一个变量并不能解决问题。&lt;/p&gt;
&lt;p&gt;下面为解决方案：&lt;/p&gt;
&lt;h1 id=&#34;优化（单调队列）&#34;&gt;&lt;a href=&#34;#优化（单调队列）&#34; class=&#34;headerlink&#34; title=&#34;优化（单调队列）&#34;&gt;&lt;/a&gt;优化（单调队列）&lt;/h1&gt;&lt;p&gt;经过上面的分析，我们需要存储$[i-k,i-1]$内的最大值，同时要在最大值被删去时能快速得到之后的最大值那么，队列无非是我们的选择&lt;/p&gt;
&lt;p&gt;方法：为方便，我们将元素下标存入队列中队列内的元素按降序排序，即队首为最大元素的下标，队列第二个元素即为次大值循环时，首先先确保队首元素满足在下标$[i-k,i-1]$范围内，如不满足则删除队首，然后再进行$dp[i]$的计算$dp[i]=dp[q.front()]+nums[i]$，最后向队列中存入元素$dp[i]$（若$dp[i]&amp;gt;dp[q.back()]$, 便可将队尾元素删除，直到$dp[i]&amp;lt;=dp[q.back]$或队列为空），这样便为后面取最大值做准备。&lt;/p&gt;
&lt;p&gt;因此，代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int maxResult(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        vector&amp;lt;int&amp;gt;dp(n);
        dp[0]=nums[0];
        deque&amp;lt;int&amp;gt;q;
        q.push_back(0);
        for(int i=1;i&amp;lt;n;i++)
        {
            while(q.size()&amp;amp;&amp;amp;i-q.front()&amp;gt;k)
            {
                q.pop_front();
            }
            dp[i]=dp[q.front()]+nums[i];
            while(q.size()&amp;amp;&amp;amp;dp[i]&amp;gt;dp[q.back()])
            {
                q.pop_back();
            }
            q.push_back(i);
        }
        return dp[n-1];
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;优化（优先级队列）&#34;&gt;&lt;a href=&#34;#优化（优先级队列）&#34; class=&#34;headerlink&#34; title=&#34;优化（优先级队列）&#34;&gt;&lt;/a&gt;优化（优先级队列）&lt;/h1&gt;&lt;p&gt;与单调队列思想相同，只是优先级队列不用进行排序&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int maxResult(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n = nums.size();
        vector&amp;lt;int&amp;gt; dp(n);
        dp[0] = nums[0];
        priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; q;
        q.emplace(nums[0], 0);
        for (int i = 1; i &amp;lt; n; ++i) {
            while (i - q.top().second &amp;gt; k) {
                q.pop();
            }
            dp[i] = q.top().first + nums[i];
            q.emplace(dp[i], i);
        }
        return dp[n - 1];
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/ccc6bc8a/</guid>
            <title>下降路径最小和</title>
            <link>http://dpm12345.cn/posts/ccc6bc8a/</link>
            <category>动态规划</category>
            <pubDate>Fri, 26 Nov 2021 15:20:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1mYWxsaW5nLXBhdGgtc3VtLw==&#34;&gt;下降路径最小和&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;思路：由题意知，到达某一位置只能有在上一行中与它纵坐标相差1内 的位置到达，那么显然这题使用动态规划 其转移方程在一般情况下，为&lt;br&gt;$$&lt;br&gt;dp[i][j] = {min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]} + matrix[i][j];&lt;br&gt;$$&lt;br&gt;而当$i=0$，&lt;br&gt;$$&lt;br&gt;dp[i][j] = matrix[i][j];&lt;br&gt;$$&lt;br&gt;$j=0$&lt;br&gt;$$&lt;br&gt;dp[i][j] = {min(dp[i - 1][j], dp[i - 1][j + 1]} + matrix[i][j];&lt;br&gt;$$&lt;br&gt;$j = n - 1$&lt;br&gt;$$&lt;br&gt;dp[i][j] = {min(dp[i - 1][j], dp[i - 1][j - 1]} + matrix[i][j];&lt;br&gt;$$&lt;/p&gt;
&lt;h1 id=&#34;原始&#34;&gt;&lt;a href=&#34;#原始&#34; class=&#34;headerlink&#34; title=&#34;原始&#34;&gt;&lt;/a&gt;原始&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int minFallingPathSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) {
        int m = matrix.size(), n = matrix[0].size();
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(m, vector&amp;lt;int&amp;gt;(n));
        for (int i = 0; i&amp;lt;m; i++)
        {
            for (int j = 0; j&amp;lt;n; j++)
            {
                if (i == 0)
                {
                    dp[i][j] = matrix[i][j];
                }
                else if (j == 0)
                {
                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j + 1]) + matrix[i][j];
                }
                else if (j == n - 1)
                {
                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + matrix[i][j];
                }
                else
                {
                    dp[i][j] = min(dp[i - 1][j], min(dp[i - 1][j - 1], dp[i - 1][j + 1])) + matrix[i][j];
                }
            }
        }
        return *min_element(dp[m - 1].begin(), dp[m - 1].end());

    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;空间优化&#34;&gt;&lt;a href=&#34;#空间优化&#34; class=&#34;headerlink&#34; title=&#34;空间优化&#34;&gt;&lt;/a&gt;空间优化&lt;/h1&gt;&lt;p&gt;使用一个一维数组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int minFallingPathSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) {
        int m = matrix.size(), n = matrix[0].size();
        vector&amp;lt;int&amp;gt;dp(n + 2);              // 确保每个位置都是 min {dp [i-1],dp [i],dp [i+1]};
        int last;                        //last 记录上一个变换的 dp [i];
        for (int i = 0; i&amp;lt;m; i++)
        {
            dp[0] = dp[n + 1] = INT_MAX;
            last = dp[0];
            for (int j = 0; j&amp;lt;n; j++)
            {
                int temp = dp[j + 1];
                dp[j + 1] = min(last, min(dp[j + 1], dp[j + 2])) + matrix[i][j];             
                // 由于把原来数组增加了两个位置，
                // 所以记录 dp 时只需更新下标 1~n+1 的 dp 值
                last = temp;
            }
        }
        return *min_element(dp.begin(), dp.end());

    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/723dcd0c/</guid>
            <title>摆动序列</title>
            <link>http://dpm12345.cn/posts/723dcd0c/</link>
            <category>动态规划</category>
            <category>贪心</category>
            <pubDate>Fri, 26 Nov 2021 10:20:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;[题目链接:]{.orange}&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvd2lnZ2xlLXN1YnNlcXVlbmNlLw==&#34;&gt;摆动序列&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[题目详情:]{.orange}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg&#34; alt=&#34;摆动序列_题目详情&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h2 id=&#34;原始&#34;&gt;&lt;a href=&#34;#原始&#34; class=&#34;headerlink&#34; title=&#34;原始&#34;&gt;&lt;/a&gt;原始&lt;/h2&gt;&lt;p&gt;思路：关键点在于，当增添一个数成为摆动序列中的一个元素时，那么这个数要么小于，要么大于其前面的一个数 其大于或小于取决于前面一个数与再前面一个数之间的大小关系 就此，可利用动态规划的思想，分别用$up[i]$,$down[i]$记录前$i+1$个数的最长摆动序列。(其中$up[i]$记录末尾为上升的，$down[i]$记录下降的)     &lt;/p&gt;
&lt;p&gt;将题目解决方法转换为三方面：   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;当$nums[i]&amp;lt;nums[i-1]$时，该元素不可添加到$up[i]$中，而对于$down[i]$，取$down[i-1]$(不加上该数),$up[i-1]+1$(加上该数)中的最大值，即&lt;br&gt;$$&lt;br&gt;down[i] = max{up[i-1]+1, down[i-1]}&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当$nums[i]&amp;gt;nums[i-1]$时，该元素不可添加到$down[i]$中,而对于$up[i]$,取$up[i-1]$(不加上该数),$down[i-1]+1$(加上该数)中的最大值，即&lt;br&gt;$$&lt;br&gt;up[i] = max{up[i-1], down[i-1]+1}&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当$nums[i]=nums[i-1]$时，都不能加上,故&lt;br&gt;$$&lt;br&gt;up[i]=up[i-1]&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;dowm[i]=down[i-1]&lt;br&gt;$$&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int wiggleMaxLength(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (n == 1) return n;
        vector&amp;lt;int&amp;gt;up(n), down(n);
        up[0] = down[0] = 1;
        for (int i = 1; i&amp;lt;n; i++)
        {
            if (nums[i]&amp;lt;nums[i - 1])
            {
                up[i] = up[i - 1];
                down[i] = max(down[i - 1], up[i - 1] + 1);
            }
            else if (nums[i]&amp;gt;nums[i - 1])
            {
                up[i] = max(up[i - 1], down[i - 1] + 1);
                down[i] = down[i - 1];
            }
            else
            {
                up[i] = up[i - 1];
                down[i] = down[i - 1];
            }
        }
        return max(up[n - 1], down[n - 1]);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;动态规划的空间优化&#34;&gt;&lt;a href=&#34;#动态规划的空间优化&#34; class=&#34;headerlink&#34; title=&#34;动态规划的空间优化&#34;&gt;&lt;/a&gt;动态规划的空间优化&lt;/h3&gt;&lt;p&gt;由于$up[i]$,$down[i]$只与下标为$i-1$的值有关，那么可以用两个变量代替数组，最后取这两个变量的最大值&lt;/p&gt;
&lt;p&gt;优化代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int wiggleMaxLength(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (n == 1) return n;
        int up = 1, down = 1;
        for (int i = 1; i&amp;lt;n; i++)
        {
            if (nums[i]&amp;lt;nums[i - 1])
            {
                down = max(down, up + 1);
            }
            else if (nums[i]&amp;gt;nums[i - 1])
            {
                up = max(up, down + 1);
            }
        }
        return max(up, down);
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;贪心算法&#34;&gt;&lt;a href=&#34;#贪心算法&#34; class=&#34;headerlink&#34; title=&#34;贪心算法&#34;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;p&gt;代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int wiggleMaxLength(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        int n = nums.size();
        if (n &amp;lt; 2) {
            return n;
        }
        int prevdiff = nums[1] - nums[0];
        int num = prevdiff != 0 ? 2 : 1;
        for (int i = 2; i &amp;lt; n; i++) {
            int diff = nums[i] - nums[i - 1];
            if ((diff &amp;gt; 0 &amp;amp;&amp;amp; prevdiff &amp;lt;= 0) || (diff &amp;lt; 0 &amp;amp;&amp;amp; prevdiff &amp;gt;= 0)) {
                num++;
                prevdiff = diff;
            }
        }
        return num;
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一开始本身的疑点：其代码行只要有&lt;code&gt;(diff&amp;gt; 0 &amp;amp;&amp;amp; prevdiff &amp;lt;= 0) || (diff &amp;lt; 0 &amp;amp;&amp;amp; prevdiff &amp;gt;= 0)&lt;/code&gt;情况出现，则&lt;code&gt;num++&lt;/code&gt;,&lt;br&gt;不会导致因为所选数不是最佳方案而造成答案错误吗？&lt;br&gt;// 经过思考：正因为代码段&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;int diff = nums[i] - nums[i - 1];
if ((diff &amp;gt; 0 &amp;amp;&amp;amp; prevdiff &amp;lt;= 0) || (diff &amp;lt; 0 &amp;amp;&amp;amp; prevdiff &amp;gt;= 0)) {
    num++;
    prevdiff = diff;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每次都会更新diff的值，也就是说每次都会更新“峰”或“谷”的值，从而使得为最佳方案&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
