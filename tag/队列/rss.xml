<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;队列&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Tue, 04 Jan 2022 10:07:26 +0800</pubDate>
        <lastBuildDate>Tue, 04 Jan 2022 10:07:26 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/3140d327/</guid>
            <title>队列实现</title>
            <link>http://dpm12345.cn/posts/3140d327/</link>
            <category>数据结构</category>
            <category>队列</category>
            <pubDate>Tue, 04 Jan 2022 10:07:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;队列的实现&#34;&gt;&lt;a href=&#34;#队列的实现&#34; class=&#34;headerlink&#34; title=&#34;队列的实现&#34;&gt;&lt;/a&gt;队列的实现&lt;/h1&gt;&lt;p&gt;该实现使用的是C++的函数模板&lt;/p&gt;
&lt;h2 id=&#34;队列的特点&#34;&gt;&lt;a href=&#34;#队列的特点&#34; class=&#34;headerlink&#34; title=&#34;队列的特点&#34;&gt;&lt;/a&gt;队列的特点&lt;/h2&gt;&lt;p&gt;与栈有些许类似，将数据放入队列中时，放入的位置是队尾，但弹出$pop()$ 操作时，是将队头元素删去，并且队列可以通过$[$ $]$来访问数据，故可知实现的函数功能有以下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;void push(T val); // 入队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void pop(); // 出队&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;T back(); // 返回队尾元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;T front(); // 返回队首元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void operator=(const Queue&lt;t&gt;&amp;amp; q); // 重载 = 运算符&lt;/t&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;void print(); // 打印队列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;bool empty(); // 判断是否为空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;int size(); // 返回队列大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现之前的思考&#34;&gt;&lt;a href=&#34;#实现之前的思考&#34; class=&#34;headerlink&#34; title=&#34;实现之前的思考&#34;&gt;&lt;/a&gt;实现之前的思考&lt;/h2&gt;&lt;p&gt;由上面的实现功能列表，可以清楚此时队列中的元素增删分别是在尾部和头部来进行的 如果存储数据的是数组，增加数据时还好，可以直接添加，如果是删去元素，那么为了确保队列前面都有人存在(不为循环队列), 必须分别将各个元素慢慢地向前挪，效率较慢。注意到队列的增删操作与链表的尾插和头删相同，而链表的尾插和头删比较简单，因此 此实现采用链表来存储数据&lt;/p&gt;
&lt;h2 id=&#34;结点构造&#34;&gt;&lt;a href=&#34;#结点构造&#34; class=&#34;headerlink&#34; title=&#34;结点构造&#34;&gt;&lt;/a&gt;结点构造&lt;/h2&gt;&lt;p&gt;由于采用的是链表来存储数据，所以直接按照链表格式创建结点即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
struct node{
    T data;
    node&amp;lt;T&amp;gt;* next;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;Queue-类&#34;&gt;&lt;a href=&#34;#Queue-类&#34; class=&#34;headerlink&#34; title=&#34;Queue 类&#34;&gt;&lt;/a&gt;Queue 类&lt;/h2&gt;&lt;h3 id=&#34;函数成员&#34;&gt;&lt;a href=&#34;#函数成员&#34; class=&#34;headerlink&#34; title=&#34;函数成员&#34;&gt;&lt;/a&gt;函数成员&lt;/h3&gt;&lt;p&gt;在队列的实现中，我们要进行头删，尾插，并且可以通过$[$ $]$来访问数据，故需要的数据分别为头结点地址、尾结点地址(方便进行尾插)、链表的元素个数&lt;/p&gt;
&lt;p&gt;而函数成员即为实现功能所列&lt;/p&gt;
&lt;p&gt;所以整体结构为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
class Queue{
private:
    node&amp;lt;T&amp;gt;* head;         // 头结点
    node&amp;lt;T&amp;gt;* tail;         // 尾结点
    int num;
public:
    Queue();                              // 无参构造函数
    Queue(T val);                         // 有参构造函数
    ~Queue();                             // 析构函数
    Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q);             // 复制构造函数
    void push(T val);                     // 入队
    void pop();                           // 出队
    T back();                             // 返回队尾元素
    T front();                            // 返回队首元素
    void operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q);   // 重载 = 运算符
    void print();                         // 打印队列
    bool empty();                         // 判断是否为空
    int size();                           // 返回队列大小

};
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;成员函数实现&#34;&gt;&lt;a href=&#34;#成员函数实现&#34; class=&#34;headerlink&#34; title=&#34;成员函数实现&#34;&gt;&lt;/a&gt;成员函数实现&lt;/h3&gt;&lt;h4 id=&#34;构造函数&#34;&gt;&lt;a href=&#34;#构造函数&#34; class=&#34;headerlink&#34; title=&#34;构造函数&#34;&gt;&lt;/a&gt;构造函数&lt;/h4&gt;&lt;p&gt;在上面，拟定为两种构造函数形式，无参和有参，两种方式做的工作一样，目的是对数据进行初始化。&lt;/p&gt;
&lt;p&gt;如果是无参，$head$和$tail$都应指向空，而$num=0$, 如果是有参，那么新建一个结点后，$head$ 和$tail$ 都指向它，$num=1$&lt;/p&gt;
&lt;p&gt;由于涉及指针，故需要深复制，重写复制构造函数&lt;/p&gt;
&lt;p&gt;以下为实现代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;// 无参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue()
{
    head = tail = nullptr;
    num = 0;
}

// 有参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    head = tail = newnode;
    num = 1;
}

// 复制构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp!= nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;析构函数&#34;&gt;&lt;a href=&#34;#析构函数&#34; class=&#34;headerlink&#34; title=&#34;析构函数&#34;&gt;&lt;/a&gt;析构函数&lt;/h4&gt;&lt;p&gt;由于存储数据申请了空间，那么析构函数应当执行释放内存操作&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::~Queue()
{
    while (head != nullptr)
    {
        node&amp;lt;T&amp;gt;* temp = head;
        head = head-&amp;gt;next;
        delete temp;
    }
    tail = nullptr;
    num = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;push-T-val&#34;&gt;&lt;a href=&#34;#push-T-val&#34; class=&#34;headerlink&#34; title=&#34;push(T val)&#34;&gt;&lt;/a&gt;push(T val)&lt;/h4&gt;&lt;p&gt;由于$push_back()$即为链表中的尾插，那么只需创建新的结点，存储数值，之后使当前$tail$的$next$指向该结点，最后$tail$指向该结点即可。需要注意的是，如果队列中无元素，那么直接将$head$和$tail$指向该结点即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::push(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    if (head == nullptr)        // 无元素，或者可以写成 tail==nullptr 或 num==0
    {
        head = tail = newnode;
        num = 1;
    }
    else
    {
        tail-&amp;gt;next = newnode;
        tail = tail-&amp;gt;next;
        num++;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;pop&#34;&gt;&lt;a href=&#34;#pop&#34; class=&#34;headerlink&#34; title=&#34;pop()&#34;&gt;&lt;/a&gt;pop()&lt;/h4&gt;&lt;p&gt;所做的操作为头删&lt;/p&gt;
&lt;p&gt;在删之前，我们必须考虑队列为空的情况，因此可以使用$assert()$进行判断报错&lt;/p&gt;
&lt;p&gt;当队列中有元素时，删去头结点，那么可以先创建一个结点指针指向头结点，在删去头结点后再令&lt;code&gt;head=head-&amp;gt;next&lt;/code&gt;，&lt;code&gt;num--&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::pop()
{
    assert(head);
    node&amp;lt;T&amp;gt;*temp = head;
    head = head-&amp;gt;next;
    delete temp;     // 删去 head 也可以，只不过上面的 head 赋值需换到下面写成 head=temp-&amp;gt;next;
    num--;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;back&#34;&gt;&lt;a href=&#34;#back&#34; class=&#34;headerlink&#34; title=&#34;back()&#34;&gt;&lt;/a&gt;back()&lt;/h4&gt;&lt;p&gt;返回队尾元素，直接使用$tail$指针即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::back()
{
    return tail-&amp;gt;data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;front&#34;&gt;&lt;a href=&#34;#front&#34; class=&#34;headerlink&#34; title=&#34;front()&#34;&gt;&lt;/a&gt;front()&lt;/h4&gt;&lt;p&gt;返回队首元素，直接使用$head$指针即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::front()
{
    return head-&amp;gt;data;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;operator-x3D-const-Queue-amp-q&#34;&gt;&lt;a href=&#34;#operator-x3D-const-Queue-amp-q&#34; class=&#34;headerlink&#34; title=&#34;operator=(const Queue&amp;amp;q)&#34;&gt;&lt;/a&gt;operator=(const Queue&lt;t&gt;&amp;amp;q)&lt;/t&gt;&lt;/h4&gt;&lt;p&gt;与复制构造函数类似，但这里需要判断原Queue对象是否已经有队列元素&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;// 重载 = 运算符
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    if (head)             // 如果存在队列
    {
        this-&amp;gt;~Queue();
    }
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp != nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;print&#34;&gt;&lt;a href=&#34;#print&#34; class=&#34;headerlink&#34; title=&#34;print()&#34;&gt;&lt;/a&gt;print()&lt;/h4&gt;&lt;p&gt;即遍历链表，打印队列&lt;/p&gt;
&lt;p&gt;较为简单，直接上代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::print()
{
    node&amp;lt;T&amp;gt;* temp = head;
    while (temp != nullptr)
    {
        cout &amp;lt;&amp;lt; temp-&amp;gt;data &amp;lt;&amp;lt; &#34;  &#34;;
        temp = temp-&amp;gt;next;
    }
    cout &amp;lt;&amp;lt; endl;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;empty&#34;&gt;&lt;a href=&#34;#empty&#34; class=&#34;headerlink&#34; title=&#34;empty()&#34;&gt;&lt;/a&gt;empty()&lt;/h4&gt;&lt;p&gt;判断是否为空，即可判断$n==0?$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
bool Queue&amp;lt;T&amp;gt;::empty()
{
    return num == 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;size&#34;&gt;&lt;a href=&#34;#size&#34; class=&#34;headerlink&#34; title=&#34;size()&#34;&gt;&lt;/a&gt;size()&lt;/h4&gt;&lt;p&gt;返回队列大小，即为$num$的值&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;template&amp;lt;class T&amp;gt;
int Queue&amp;lt;T&amp;gt;::size()
{
    return num;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;结果&#34;&gt;&lt;a href=&#34;#结果&#34; class=&#34;headerlink&#34; title=&#34;结果&#34;&gt;&lt;/a&gt;结果&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;c++&#34;&gt;//#ifndef  _QUEUE_H
//#define  _QUEUE_H

#include&amp;lt;assert.h&amp;gt;
#include&amp;lt;iostream&amp;gt;
using namespace std;

template&amp;lt;class T&amp;gt;
struct node{
    T data;
    node&amp;lt;T&amp;gt;* next;
};


template&amp;lt;class T&amp;gt;
class Queue{
private:
    node&amp;lt;T&amp;gt;* head;         // 头结点
    node&amp;lt;T&amp;gt;* tail;         // 尾结点
    int num;
public:
    Queue();                              // 无参构造函数
    Queue(T val);                         // 有参构造函数
    ~Queue();                             // 析构函数
    Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q);             // 复制构造函数
    void push(T val);                     // 入队
    void pop();                           // 出队
    T back();                             // 返回队尾元素
    T front();                            // 返回队首元素
    void operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q);   // 重载 = 运算符
    void print();                         // 打印队列
    bool empty();                         // 判断是否为空
    int size();                           // 返回队列大小

};

// 无参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue()
{
    head = tail = nullptr;
    num = 0;
}

// 有参构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    head = tail = newnode;
    num = 1;
}

// 析构函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::~Queue()
{
    while (head != nullptr)
    {
        node&amp;lt;T&amp;gt;* temp = head;
        head = head-&amp;gt;next;
        delete temp;
    }
    tail = nullptr;
    num = 0;
}

// 复制构造函数
template&amp;lt;class T&amp;gt;
Queue&amp;lt;T&amp;gt;::Queue(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp!= nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }

}

// 入队 (尾插)
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::push(T val)
{
    node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
    newnode-&amp;gt;data = val;
    newnode-&amp;gt;next = nullptr;
    if (head == nullptr)
    {
        head = tail = newnode;
        num = 1;
    }
    else
    {
        tail-&amp;gt;next = newnode;
        tail = tail-&amp;gt;next;
        num++;
    }
}

// 出队 (头删)
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::pop()
{
    assert(head);
    node&amp;lt;T&amp;gt;*temp = head;
    head = head-&amp;gt;next;
    delete temp;
    num--;
}

// 返回队尾元素
template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::back()
{
    return tail-&amp;gt;data;
}

// 返回队首元素
template&amp;lt;class T&amp;gt;
T Queue&amp;lt;T&amp;gt;::front()
{
    return head-&amp;gt;data;
}

// 重载 = 运算符
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::operator =(const Queue&amp;lt;T&amp;gt;&amp;amp; q)
{
    if (head)
    {
        this-&amp;gt;~Queue();
    }
    node&amp;lt;T&amp;gt;*newp = q.head;
    while (newp != nullptr)
    {
        node&amp;lt;T&amp;gt;* newnode = new node&amp;lt;T&amp;gt;;
        newnode-&amp;gt;data = newp-&amp;gt;data;
        newnode-&amp;gt;next = nullptr;
        if (head == nullptr)
        {
            head = tail = newnode;
            num = 1;
        }
        else
        {
            tail-&amp;gt;next = newnode;
            tail = tail-&amp;gt;next;
            num++;
        }
        newp = newp-&amp;gt;next;
    }
}

// 打印队列
template&amp;lt;class T&amp;gt;
void Queue&amp;lt;T&amp;gt;::print()
{
    node&amp;lt;T&amp;gt;* temp = head;
    while (temp != nullptr)
    {
        cout &amp;lt;&amp;lt; temp-&amp;gt;data &amp;lt;&amp;lt; &#34;  &#34;;
        temp = temp-&amp;gt;next;
    }
    cout &amp;lt;&amp;lt; endl;
}

// 判断队列是否为空
template&amp;lt;class T&amp;gt;
bool Queue&amp;lt;T&amp;gt;::empty()
{
    return num == 0;
}

// 返回队列大小
template&amp;lt;class T&amp;gt;
int Queue&amp;lt;T&amp;gt;::size()
{
    return num;
}
//#endif
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/5beb97b2/</guid>
            <title>无重叠区间</title>
            <link>http://dpm12345.cn/posts/5beb97b2/</link>
            <category>队列</category>
            <category>动态规划</category>
            <pubDate>Mon, 06 Dec 2021 19:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbm9uLW92ZXJsYXBwaW5nLWludGVydmFscy8=&#34;&gt;无重叠区间&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;思路：在这道题中，我们可以把题目要求所解问题换一种说法，找删去最少区间使剩下成为无重叠区间，即包含区间最多数。&lt;/p&gt;
&lt;p&gt;我们注意到，当其为无重叠区间时，前一个区间的末端必然小于等于后一个区间首端，那么我们便可以将这一组的无重叠区间的端点看作为一组不严格单调递增的序列。这样便与求 “最长上升序列” 的序列的问题相同了。&lt;/p&gt;
&lt;h1 id=&#34;动态规划&#34;&gt;&lt;a href=&#34;#动态规划&#34; class=&#34;headerlink&#34; title=&#34;动态规划&#34;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;p&gt;我们维护一个数组$dp[i]$，其中$dp[i]$以该位置为末尾区间的，所能得到的数量最多的无重叠区间的值。那么很容易得到，先分别枚举末尾区间位置，再从0开始遍历，寻找最长，转移方程即为： $dp[i]=max(dp[j]+1,dp[i])$（当$intervals[j][1]&amp;lt;intervals[i][0]$时)&lt;/p&gt;
&lt;p&gt;以下为代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int eraseOverlapIntervals(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; intervals) {
        sort(intervals.begin(),intervals.end());
        int n=intervals.size();
        vector&amp;lt;int&amp;gt;dp(n,1);
        for(int i=0;i&amp;lt;intervals.size();i++)
        {
            for(int j=0;j&amp;lt;i;j++)
            {
                if(intervals[j][1]&amp;lt;=intervals[i][0])
                {
                    dp[i]=max(dp[j]+1,dp[i]);
                }
            }
        }
        return n-*max_element(dp.begin(),dp.end());

    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;提交后很不幸，超时了，时间复杂度为$O(n^2)$, 为此我们需要将时间优化。&lt;/p&gt;
&lt;h1 id=&#34;贪心方案&#34;&gt;&lt;a href=&#34;#贪心方案&#34; class=&#34;headerlink&#34; title=&#34;贪心方案&#34;&gt;&lt;/a&gt;贪心方案&lt;/h1&gt;&lt;p&gt;上面的动态规划方案中，枚举末尾，再从0开始遍历，寻找最长，这是无法避免的，为此难以优化，这样，我们可以使用贪心方案，将时间复杂度降低 &lt;/p&gt;
&lt;p&gt;实现思想: 我们要想得到最多数量的无重叠区间，那么我们需要尽可能地将区间长度较小地放入这一无重叠区间内，因此我们可以设想，如果我们将各个区间地右端点按升序排序，设一个变量&lt;code&gt;right&lt;/code&gt;为目前无重叠区间的右端点，如果下一个区间的左端大于&lt;code&gt;right&lt;/code&gt;，区间加一，&lt;code&gt;right&lt;/code&gt;更新，这样以此类推， 最终可以得到答案 &lt;/p&gt;
&lt;p&gt;证明：由于我们是将右端点降序排序，那么当两段区间相同时，实际上无论选择哪段结果都是一样的，因为不管该区间的左端点为多少，后面的区间只要左区间不大于&lt;code&gt;right&lt;/code&gt;，那么该区间必会被删。而当之后区间的左端点大于&lt;code&gt;right&lt;/code&gt;时，那么此时所选取的区间的右端点必然是满足条件的最小值，也因此能够得到最多数量的无重叠区间 &lt;/p&gt;
&lt;p&gt;以下为实现代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int eraseOverlapIntervals(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; intervals) {
        if (intervals.empty()) {
            return 0;
        }
        
        sort(intervals.begin(), intervals.end(), [](const auto&amp;amp; u, const auto&amp;amp; v) {
            return u[1] &amp;lt; v[1];
        });

        int n = intervals.size();
        int right = intervals[0][1];
        int ans = 1;
        for (int i = 1; i &amp;lt; n; ++i) {
            if (intervals[i][0] &amp;gt;= right) {
                ++ans;
                right = intervals[i][1];
            }
        }
        return n - ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/6f1a75f/</guid>
            <title>跳跃游戏 VI</title>
            <link>http://dpm12345.cn/posts/6f1a75f/</link>
            <category>队列</category>
            <category>动态规划</category>
            <pubDate>Sun, 05 Dec 2021 14:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvanVtcC1nYW1lLXZpLw==&#34;&gt;跳跃游戏 VI&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/1696%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FVI.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;初期想法&#34;&gt;&lt;a href=&#34;#初期想法&#34; class=&#34;headerlink&#34; title=&#34;初期想法&#34;&gt;&lt;/a&gt;初期想法&lt;/h1&gt;&lt;p&gt;看到题目，很容易想到使用动态规划算法，$dp[i]$表示跳到位置$i$能取到的最大的值,其中$dp[i]=min{dp[i-1],dp[i-2]……,dp[i-k]}+nums[i]$, 那么很容易写出代码 如图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FVI_%E5%88%9D%E5%A7%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是已提交便发现，超时了，也就是说纯纯动态规划不能完成题目要求。&lt;/p&gt;
&lt;h1 id=&#34;反思&#34;&gt;&lt;a href=&#34;#反思&#34; class=&#34;headerlink&#34; title=&#34;反思&#34;&gt;&lt;/a&gt;反思&lt;/h1&gt;&lt;p&gt;思考初期想法的代码，哪里造成了代码超时呢？&lt;/p&gt;
&lt;p&gt;不难发现，在确定$i$位置前的$[i-k,i-1]$范围内的最小值时，每一个都比较了一次，而当$i$加一时，除去上次的$i-k$，和新增的$i-1$，其他位置又比较了一次，如果最大值，即比较过后仍然比较，其原因是缺少记录最大值的渠道。那么是否可以在循环时加上一个变量MAX记录$[i-k,i-1]$的最大值，当$i+1$时，将MAX与$dp[i]$比较呢？&lt;/p&gt;
&lt;p&gt;其结果是只能解决一部分，因为假设$MAX=dp[i-k]$，当$i+1$时，MAX的值明显不在之后的$[i-k,i-1]$范围之内了，因此要将原来范围内的次大值与$dp[i]$比较，这样我们又多了个任务，求次大值，所以单纯增加一个变量并不能解决问题。&lt;/p&gt;
&lt;p&gt;下面为解决方案：&lt;/p&gt;
&lt;h1 id=&#34;优化（单调队列）&#34;&gt;&lt;a href=&#34;#优化（单调队列）&#34; class=&#34;headerlink&#34; title=&#34;优化（单调队列）&#34;&gt;&lt;/a&gt;优化（单调队列）&lt;/h1&gt;&lt;p&gt;经过上面的分析，我们需要存储$[i-k,i-1]$内的最大值，同时要在最大值被删去时能快速得到之后的最大值那么，队列无非是我们的选择&lt;/p&gt;
&lt;p&gt;方法：为方便，我们将元素下标存入队列中队列内的元素按降序排序，即队首为最大元素的下标，队列第二个元素即为次大值循环时，首先先确保队首元素满足在下标$[i-k,i-1]$范围内，如不满足则删除队首，然后再进行$dp[i]$的计算$dp[i]=dp[q.front()]+nums[i]$，最后向队列中存入元素$dp[i]$（若$dp[i]&amp;gt;dp[q.back()]$, 便可将队尾元素删除，直到$dp[i]&amp;lt;=dp[q.back]$或队列为空），这样便为后面取最大值做准备。&lt;/p&gt;
&lt;p&gt;因此，代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int maxResult(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        vector&amp;lt;int&amp;gt;dp(n);
        dp[0]=nums[0];
        deque&amp;lt;int&amp;gt;q;
        q.push_back(0);
        for(int i=1;i&amp;lt;n;i++)
        {
            while(q.size()&amp;amp;&amp;amp;i-q.front()&amp;gt;k)
            {
                q.pop_front();
            }
            dp[i]=dp[q.front()]+nums[i];
            while(q.size()&amp;amp;&amp;amp;dp[i]&amp;gt;dp[q.back()])
            {
                q.pop_back();
            }
            q.push_back(i);
        }
        return dp[n-1];
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;优化（优先级队列）&#34;&gt;&lt;a href=&#34;#优化（优先级队列）&#34; class=&#34;headerlink&#34; title=&#34;优化（优先级队列）&#34;&gt;&lt;/a&gt;优化（优先级队列）&lt;/h1&gt;&lt;p&gt;与单调队列思想相同，只是优先级队列不用进行排序&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int maxResult(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n = nums.size();
        vector&amp;lt;int&amp;gt; dp(n);
        dp[0] = nums[0];
        priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; q;
        q.emplace(nums[0], 0);
        for (int i = 1; i &amp;lt; n; ++i) {
            while (i - q.top().second &amp;gt; k) {
                q.pop();
            }
            dp[i] = q.top().first + nums[i];
            q.emplace(dp[i], i);
        }
        return dp[n - 1];
    }
};
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
    </channel>
</rss>
