<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;排列组合&#34; tag</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Thu, 02 Dec 2021 14:54:40 +0800</pubDate>
        <lastBuildDate>Thu, 02 Dec 2021 14:54:40 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/47ade4a0/</guid>
            <title>爬楼梯与零钱兑换题目对比</title>
            <link>http://dpm12345.cn/posts/47ade4a0/</link>
            <category>排列组合</category>
            <pubDate>Thu, 02 Dec 2021 14:54:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2xpbWJpbmctc3RhaXJzLw==&#34;&gt;爬楼梯&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E7%88%AC%E6%A5%BC%E6%A2%AF.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29pbi1jaGFuZ2UtMi8=&#34;&gt;零钱兑换 II&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;建立在做过题目的基础上，我们重新审视这几道题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对于爬楼梯，由于一次只能爬一阶或两阶，故$dp[i]=dp[i-1]+dp[i-2]$&lt;br&gt;对于零钱兑换II，其限制因素为零钱的面额，故当$i&amp;gt;=coin[j]$时，$dp[i]+=dp[i-coin[j]]$&lt;/p&gt;
&lt;p&gt;而现在我们将爬楼梯的限制由由只有一阶或两阶，改为一个数组$step[]={1,2}$；那么在做时，便要遍历一次$step [j]$, 当$i&amp;gt;=step[j]$时，$dp[i]=dp[i]+dp[i-step[j]]$, 而$step[j]$便与前面的减去 1、2 相同。这样不难发现，如果将每次能跨越的楼梯阶数改为一个数组里的元素，那么爬楼梯与零钱兑换II的解题代码就十分相似了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;接下来进行更深一层的讨论&lt;/p&gt;
&lt;p&gt;在爬楼梯题目中，我们要计算的是到达顶端的总数，每次只能一阶或两阶，由此可知，其为 若干个1和2排列，其对顺序有要求，也就是说，最后得到是排列数的结果&lt;/p&gt;
&lt;p&gt;而在零钱兑换II题目中，因为只是记录兑换一个金额的总数，先取小面额还是先取大面额是没有区别的，那么也就是说，该题求的是组合数。&lt;/p&gt;
&lt;p&gt;那么，该用什么方法区别这两种呢？&lt;/p&gt;
&lt;p&gt;下面给出两段代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;//  amount 表示金额，n 表示硬币面额数，coin [i] 表示某个硬币
    
    // 第一段
    for(int i=1;i&amp;lt;=amount;i++)
    {
       for(int j=0;j&amp;lt;n;j++)
          {
              if(i&amp;gt;=coin[j])
              {
                  dp[i]+=dp[i-coin[j]];
              }
          }
    }
    
    
    // 第二段
    for(int i=0;i&amp;lt;n;i++)
    {
       for(int j=1;j&amp;lt;=amount;j++)
          {
              if(j&amp;gt;=coin[i])
              {
                  dp[j]+=dp[j-coin[i]];
              }
          }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经过代码观察，不难看出，第一段代码先枚举金额，然后嵌套&lt;code&gt;coin&lt;/code&gt;硬币的循环； 第二段代码先枚举&lt;code&gt;coin&lt;/code&gt;硬币面额，然后再枚举金额&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;先看第一段代码：先枚举金额，再枚举硬币面额，也就是说每一个金额的&lt;code&gt;dp&lt;/code&gt;计算都会涉及到每一种硬币,当$i&amp;gt;=coin[j]$,意味着$i-coin[j]$后可以添加一个硬币元素$coin[j]$等于$i$,所以$dp[i]=dp[i]+dp[i-coin[j]]$,那么不难得出比如计算金额$3$时，如果硬币面额存在$1$和$2$，那么$dp[1]$和$dp[2]$的值都会加到$dp[3]$上，也,就是说首先$dp[3]+=dp[2]$,即$2，1$情况，然后$dp[3]+=dp[1]$,即$1，2$情况。很明显，”1,2”、”2,1”都计算的为排列数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;再看第二段代码：先枚举硬币面额，再枚举金额，也就是说每一个硬币面额都会在一种金额内计算一次，再根据循环的方式，从下标零开始遍历，知道结束，那么不难得出，$coin[i]$的值在$dp[i]$的每一种情况中，出现的顺序都是固定的，那么与上面分析相比，”1,2”、”2,1”只会出现一种，所以第二段代码计算的结果为组合数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面进行代码实现&lt;/p&gt;
&lt;p&gt;注：为确保爬楼梯代码无误，增加了数组b进行检验，若正确，则应先输出34&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;#include&amp;lt;iostream&amp;gt;
#include&amp;lt;vector&amp;gt;
using namespace std;

class Solution{
public:
    int climb_stairs(int amount, vector&amp;lt;int&amp;gt;&amp;amp;step)
    {
        vector&amp;lt;int&amp;gt;dp(amount + 1);
        int n = step.size();
        dp[0] = 1;
        for (int i = 1; i &amp;lt;= amount; i++)
        {
            for (int j = 0; j &amp;lt; n; j++)
            {
                if (i&amp;gt;=step[j])
                {
                    dp[i] += dp[i - step[j]];
                }
            }
        }
        return dp[amount];
    }
    int change(int amount, vector&amp;lt;int&amp;gt;&amp;amp;coin)
    {
        vector&amp;lt;int&amp;gt;dp(amount + 1);
        int n = coin.size();
        dp[0] = 1;   // 表示金额为零的情况，
                     // 因为零钱面额也为零，故 dp [0]=1
        for (int i = 0; i &amp;lt; n; i++)
        {
            for (int j = 1; j &amp;lt;=amount; j++)
            {
                if (j&amp;gt;=coin[i])
                {
                    dp[j] += dp[j - coin[i]];
                }
            }
        }
        return dp[amount];
    }
};

int main()
{
    int amount = 8;
    vector&amp;lt;int&amp;gt;a(3);
    a[0] = 1; a[1] = 2; a[2] = 5;
    vector&amp;lt;int&amp;gt;b(2);
    b[0] = 1; b[1] = 2;
    Solution A;
    cout &amp;lt;&amp;lt; A.climb_stairs(amount, b) &amp;lt;&amp;lt; endl;      
    cout &amp;lt;&amp;lt;A.climb_stairs(amount,a)  &amp;lt;&amp;lt; endl;
    cout &amp;lt;&amp;lt; A.change(amount,a)&amp;lt;&amp;lt; endl;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;将8，数组[1,2,5]分别输入leetcode控制器内检验，发现无误&lt;/p&gt;
&lt;p&gt;【2021-12-3 更新】&lt;/p&gt;
&lt;p&gt;类似的题目还有&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29tYmluYXRpb24tc3VtLWl2Lw==&#34;&gt;组合总数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E7%BB%84%E5%90%88%E6%80%BB%E6%95%B0IV.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法类似，但需要注意题目要求不能超过32位整数范围，需添加限制，如图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E5%8C%BA%E5%88%AB.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
