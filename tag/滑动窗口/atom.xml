<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;滑动窗口&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2023-04-15T02:20:40.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/1c771f88/</id>
        <title>最小覆盖子串</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/1c771f88/"/>
        <content type="html">&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9taW5pbXVtLXdpbmRvdy1zdWJzdHJpbmcv&#34;&gt;最小覆盖子串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;这道题是一道滑动窗口，根据题目意思，要保证查找到的子串既包含&lt;code&gt;t&lt;/code&gt;中所有出现的字符，同时也要保证相对应得字符在子串中出现的次数大于等于在&lt;code&gt;t&lt;/code&gt;中出现的次数&lt;/p&gt;
&lt;p&gt;这里可以使用两个哈希表分别记录两字符串中各字符出现的次数，tmap记录&lt;code&gt;t&lt;/code&gt;的字符出现情况，smap维护的是当前窗口内的字符出现数的字典。当要添加的字符在smap中的值小于等于tmap，那么说明此次添加是有效的，那么将correct加一，而当相等出现冗余时，则要从前面对窗口进行缩小。(当出现与首字符相等的字符时，那么就实现了另一种情况的考虑，从而遍历所有可能的子串，然后通过比较各次的长度，最终得到最小子串)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    string minWindow(string s, string t) {
        unordered_map&amp;lt;char, int&amp;gt; tmap, smap;
        int left = 0, correct = 0;
        string res = s+&#34;1&#34;;//加上一个新的字符是为了防止s等于t的情况，利于下面最小值的比较
        for (int i=0; i &amp;lt; t.size(); i++) 
            tmap[t[i]]++;

        for (int right = 0; right &amp;lt; s.size(); ++right) {
            // smap维护的是当前窗口内的字符出现数的字典
            ++smap[s[right]];
            // 当前right对应s的字符是在t中出现的，并且数量上还没有达到冗余，是一次有效添加
            if (tmap[s[right]] &amp;gt;= smap[s[right]])
                ++correct;
            // 字符串最短是空串 &amp;amp;&amp;amp; 如果left对应的字符是冗余，那么进行右移删除
            while (left &amp;lt; right &amp;amp;&amp;amp; smap[s[left]] &amp;gt; tmap[s[left]])
                --smap[s[left++]];
            if (correct == t.size()){
                // 窗口内已经满足t串的所有字符
                if (right - left + 1 &amp;lt; res.size())
                    res = s.substr(left, right - left + 1);
            }

        }
        return res==s+&#34;1&#34;?&#34;&#34;:res;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="滑动窗口" />
        <updated>2023-04-15T02:20:40.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.cn/posts/d10e2ef2/</id>
        <title>无重复字符的最长字串</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/d10e2ef2/"/>
        <content type="html">&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXN1YnN0cmluZy13aXRob3V0LXJlcGVhdGluZy1jaGFyYWN0ZXJzLw==&#34;&gt;无重复字符的最长字串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size()==0)
            return 0;
        int ans = 1;
        int left = 0;
        unordered_set&amp;lt;char&amp;gt;temp;
        for(int i=0;i&amp;lt;s.size();i++)         // 遍历每个元素
        {
            while(temp.find(s[i])!=temp.end())          // 如果出现过了，由于求的是子串，故以此为开头的字符必不成立，故删去开头
            {
                temp.erase(s[left]);
                left++;
            }
            temp.insert(s[i]);                         // 找到没有出现过的字符，加入
            ans = max(ans,i-left+1);
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="滑动窗口" />
        <category term="哈希表" />
        <category term="字符串" />
        <updated>2022-03-18T12:54:40.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.cn/posts/ca7417e/</id>
        <title>三个无重叠子数组的最大和</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/ca7417e/"/>
        <content type="html">&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1zdW0tb2YtMy1ub24tb3ZlcmxhcHBpbmctc3ViYXJyYXlzLw==&#34;&gt; 三个无重叠子数组的最大和&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E4%B8%89%E4%B8%AA%E6%97%A0%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;该题为 2021-12-8 的每日一题，可解决该问题的方法涉及到前缀和，动态规划，滑动窗口知识&lt;/p&gt;
&lt;p&gt;思路: 题目要求求出某一数组三个长度为 k 的无重叠数组，使它们的元素之和为最大。&lt;/p&gt;
&lt;p&gt;看到这个个数为 k，很容易想到滑动窗口这一算法，只是在这里，需要同时存在三个滑动窗口，&lt;/p&gt;
&lt;p&gt;同样的，在这题，也可以用动态规划进行解决&lt;/p&gt;
&lt;p&gt;下面是我自己在解题时的过程&lt;/p&gt;
&lt;h1 id=&#34;动态规划（劣质版）&#34;&gt;&lt;a href=&#34;#动态规划（劣质版）&#34; class=&#34;headerlink&#34; title=&#34;动态规划（劣质版）&#34;&gt;&lt;/a&gt;动态规划（劣质版）&lt;/h1&gt;&lt;p&gt;刚拿到题目时，我能想到，该题可以使用动态规划解决，但并无方向该从哪个地方下手将什么作为$dp[i]$所表达的意义，&lt;/p&gt;
&lt;p&gt;思考了大约20分钟后，我还是无从下手，于是打开了题解，第一眼看到的是”单个子数组的最大和“，顿时恍然大悟，我可以将不同个数的子数组作为一个$dp$，在计算个数加一时，便可以利用前面的$dp$，得到最优解。仔细思考，该方案的时间复杂度为$O(n)$。&lt;/p&gt;
&lt;p&gt;在以下的代码中，我是如此考虑的：&lt;/p&gt;
&lt;p&gt;先用$sum[i]$计算前缀和，为后续计算提供便利再分别使用$dp1$，$dp2$，$dp3$记录不同个数的子数组元素的最大值，其转移方程分别为：&lt;br&gt;$$&lt;br&gt;dp1[i]=max{dp1[i-1],sum[i+1]-sum[i-k+1]}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;dp2[i]=max{dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;dp3[i]=max{dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;但这样并不能记录下标输出答案，所以这里我采用了，三个flag数组，用于记录下标，具体见代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; maxSumOfThreeSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        vector&amp;lt;int&amp;gt;dp1(n),dp2(n),dp3(n);
        vector&amp;lt;int&amp;gt;flag1(n);
        vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;flag2(n);
        vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;flag3(n);
        vector&amp;lt;int&amp;gt;sum(n+1,0);
        vector&amp;lt;int&amp;gt;ans;
        for(int i=0;i&amp;lt;n;i++)
        {
            sum[i+1]+=nums[i]+sum[i];           
        }
        for(int i=k-1;i&amp;lt;n;i++)
        {
            dp1[i]=max(dp1[i-1],sum[i+1]-sum[i-k+1]);
            if(dp1[i]==dp1[i-1])
            {
                flag1[i]=flag1[i-1];
            }
            else
            {
                flag1[i]=i-k+1;
            }
        }
        for(int i=2*k-1;i&amp;lt;n;i++)
        {
            dp2[i]=max(dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp2[i]==dp2[i-1])
            {
                flag2[i]=flag2[i-1];
            }
            else
            {
                flag2[i]={flag1[i-k],i-k+1};
            }
        }
        for(int i=3*k-1;i&amp;lt;n;i++)
        {
            dp3[i]=max(dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp3[i]==dp3[i-1])
            {
                flag3[i]=flag3[i-1];
            }
            else
            {
                flag3[i]={flag2[i-k].second,i-k+1};
            }
        }
        return {flag2[flag3[n-1].first].first,flag3[n-1].first,flag3[n-1].second};
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;class Solution {public: &amp;nbsp; &amp;nbsp;int maxResult(vector&lt;int&gt;&amp;amp; nums, int k) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;int n = nums.size(); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;vector&lt;int&gt; dp(n); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dp[0] = nums[0]; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt; q; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;q.emplace(nums[0], 0); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;for (int i = 1; i &amp;lt; n; ++i) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;while (i - q.top().second &amp;gt; k) { &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;q.pop(); &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;  } &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;dp[i] = q.top().first + nums[i]; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;q.emplace(dp[i], i); &amp;nbsp; &amp;nbsp; &amp;nbsp;  } &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;return dp[n - 1]; &amp;nbsp;  }};cpp 优先级队列2&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;观察报错信息，可知，在我的代码中，并未考虑&lt;code&gt;k==1&lt;/code&gt;的情况，因为代码中我是通过&lt;code&gt;for(int i=k-1;i&amp;lt;n;i++)&lt;/code&gt;实现循环的，k-1 就会为 0，至于后面 i-1 造成错误&lt;/p&gt;
&lt;p&gt;改进代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;if(k==1)                      // 考虑 k==1 的情况
    {
        vector&amp;lt;int&amp;gt;ans(3);
        for(int i=0;i&amp;lt;3;i++)
        {
            ans[i]=max_element(nums.begin(),nums.end())-nums.begin();
                *max_element(nums.begin(),nums.end())=0;
        }
        sort(ans.begin(),ans.end());
        return ans;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次提交，发现答案出错，如下:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E4%B8%89%E4%B8%AA%E6%97%A0%E9%87%8D%E5%8F%A0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在这并不能看出什么，为此，我进行了多组数据的尝试，发现第一个大部分都不符合答案，但后两个一直都是正确的，说明&lt;code&gt;flag1&lt;/code&gt;求解过程无误，而是输出出错&lt;/p&gt;
&lt;p&gt;对此，进行代码分析，最后输出时，我写的是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;return {flag2[flag3[n-1].first].first,flag3[n-1].first,flag3[n-1].second};&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[flag2[flag3[n-1].first].first&lt;/code&gt;，因为我在&lt;code&gt;flag3.first&lt;/code&gt;存入的是&lt;code&gt;flag2&lt;/code&gt;的索引的第二个元素，以此来得到&lt;code&gt;flag1&lt;/code&gt;明显是不可行的，因为对应&lt;code&gt;flag1&lt;/code&gt;的下标与&lt;code&gt;flag2&lt;/code&gt;的第二个元素并无关系，&lt;code&gt;flag1[i-k]&lt;/code&gt;可能是前一个继承来的，与&lt;code&gt;flag2&lt;/code&gt;的第二个元素无关，也有可能与其有关，总之该方法不一定正确&lt;/p&gt;
&lt;p&gt;那么我做以下修改&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;重新定义&lt;code&gt;flag3&lt;/code&gt;数组类型，为&lt;code&gt;&amp;lt;pair&amp;lt;pair&amp;lt;int,int&amp;gt;，int&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;存入&lt;code&gt;flag3&lt;/code&gt;时存入&lt;code&gt;{flag2 [i-k],i-k+1}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;读取第一个使用&lt;code&gt;flag3[n-1].first.first&lt;/code&gt;，第二个使用&lt;code&gt;flag3[n-1].first.second&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下为修改后的代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; maxSumOfThreeSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        if(k==1)                      // 考虑 k==1 的情况
        {
            vector&amp;lt;int&amp;gt;ans(3);
            for(int i=0;i&amp;lt;3;i++)
            {
                ans[i]=max_element(nums.begin(),nums.end())-nums.begin();
                *max_element(nums.begin(),nums.end())=0;
            }
            sort(ans.begin(),ans.end());
            return ans;
        }
        //dp [i] 表示 0 到该位置所能得到的 x 个无重叠数组和的最大值
        vector&amp;lt;int&amp;gt;dp1(n),dp2(n),dp3(n);
        
        //flag1 记录某一位置 1 个最大无重叠数组的下标       
        vector&amp;lt;int&amp;gt;flag1(n);
        
        //flag2 记录某一位置 2 个最大无重叠数组的下标    
        vector&amp;lt;pair&amp;lt;int,int&amp;gt;&amp;gt;flag2(n);
        
        //flag3 记录某一位置 3 个最大无重叠数组的下标                  
        vector&amp;lt;pair&amp;lt;pair&amp;lt;int,int&amp;gt;,int&amp;gt;&amp;gt;flag3(n);              
        
        //sum [i] 表示前 i 个数之和
        vector&amp;lt;int&amp;gt;sum(n+1,0); 
        
        for(int i=0;i&amp;lt;n;i++)                       // 计算前缀和
        {
            sum[i+1]+=nums[i]+sum[i];           
        }
        
        // 计算从 k-1 开始 1 个无重叠子数组最大的值，用 flag1 记录下标值
        for(int i=k-1;i&amp;lt;n;i++)                      
        {
            dp1[i]=max(dp1[i-1],sum[i+1]-sum[i-k+1]);
            if(dp1[i]==dp1[i-1])
            {
                flag1[i]=flag1[i-1];
            }
            else
            {
                flag1[i]=i-k+1;
            }
        }
        
        // 计算从 2*k-1 开始 2 个无重叠子数组最大的值，用 flag2 记录下标值
        for(int i=2*k-1;i&amp;lt;n;i++)                   
        {
            dp2[i]=max(dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp2[i]==dp2[i-1])
            {
                flag2[i]=flag2[i-1];
            }
            else
            {
                flag2[i]={flag1[i-k],i-k+1};
            }
        }
        
        // 计算从 3*k-1 位置开始 3 个无重叠子数组最大的值，用 flag2 记录下标值
        for(int i=3*k-1;i&amp;lt;n;i++)                        
        { 
            dp3[i]=max(dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]);
            if(dp3[i]==dp3[i-1])
            {
                flag3[i]=flag3[i-1];
            }
            else
            {
                flag3[i]={flag2[i-k],i-k+1};
            }
        }
        
        // 根据 flag3 找寻下标
        return {flag3[n-1].first.first,flag3[n-1].first.second,flag3[n-1].second};   
    }
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;滑动窗口&#34;&gt;&lt;a href=&#34;#滑动窗口&#34; class=&#34;headerlink&#34; title=&#34;滑动窗口&#34;&gt;&lt;/a&gt;滑动窗口&lt;/h1&gt;&lt;p&gt;维护&lt;code&gt;sum1&lt;/code&gt;，&lt;code&gt;sum2&lt;/code&gt;，&lt;code&gt;sum3&lt;/code&gt;，分别表示&lt;code&gt;n&lt;/code&gt;个子数组的最大值，若大于原来的更新下标(代码中为&lt;code&gt;sum1maxid,sum2maxid1,sum2maxid2&lt;/code&gt;) 当数组个数大于等于k时，那么需删去首个元素，更新窗口&lt;/p&gt;
&lt;p&gt;以下为代码实现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; maxSumOfThreeSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {
        int n=nums.size();
        int sum1=0,sum2=0,sum3=0;
        int sum1max=0,sum2max=0,sum3max=0;
        int sum1maxid,sum2maxid1,sum2maxid2;
        vector&amp;lt;int&amp;gt;ans;
        for(int i=2*k;i&amp;lt;n;i++)
        {
            sum1+=nums[i-2*k];
            sum2+=nums[i-k];
            sum3+=nums[i];
            if(i&amp;gt;=3*k-1)
            {
                if(sum1&amp;gt;sum1max)
                {
                    sum1max=sum1;
                    sum1maxid=i-3*k+1;          // 更新 1 个子数组最大值下标
                }
                if(sum1max+sum2&amp;gt;sum2max)
                {
                    sum2max=sum1max+sum2;
                    sum2maxid1=sum1maxid;       // 更新两个子数组中 1 个子数组最大值下标
                    sum2maxid2=i-2*k+1;         // 更新 1 个子数组最大值下标
                }
                if(sum2max+sum3&amp;gt;sum3max)
                {
                    sum3max=sum2max+sum3;
                    ans={sum2maxid1,sum2maxid2,i-k+1};  // 更新答案
                }
                sum1-=nums[i-3*k+1];             // 删去首个
                sum2-=nums[i-2*k+1];             // 删去首个
                sum3-=nums[i-k+1];               // 删去首个
            }
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="前缀和" />
        <category term="动态规划" />
        <category term="滑动窗口" />
        <updated>2021-12-08T01:54:40.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.cn/posts/6ba8ad80/</id>
        <title>整数拆分</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/6ba8ad80/"/>
        <content type="html">&lt;p&gt;[题目链接:]{.orange}&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW50ZWdlci1icmVhay8=&#34;&gt;整数拆分&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;[题目详情]{.orange}&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;整数拆分_1&#34;&gt;&lt;/p&gt;
&lt;p&gt;[数学方法可以证明乘积最大时，因子最终都可以分解为若干个3和若干个2，且3的个数尽可能多]{.blue}&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class Solution {
public:
    int integerBreak(int n) {
        if (n == 2)return 1;
        if (n == 3)return 2;
        int num_3 = n / 3, num_2 = (n % 3) / 2;
        if (n % 3 == 1)
        {
            num_3--;
            num_2 += 2;
        }
        return pow(3, num_3)*pow(2, num_2);
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="滑动窗口" />
        <category term="哈希表" />
        <category term="字符串" />
        <updated>2021-11-21T07:54:40.000Z</updated>
    </entry>
</feed>
