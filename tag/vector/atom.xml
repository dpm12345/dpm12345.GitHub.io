<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.cn</id>
    <title>dpm12345 • Posts by &#34;vector&#34; tag</title>
    <link href="http://dpm12345.cn" />
    <updated>2022-01-24T14:54:40.000Z</updated>
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="git" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="Misc" />
    <category term="MFC" />
    <category term="cryptography" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="hexo" />
    <category term="队列" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="双指针（快慢指针）" />
    <category term="排列组合" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <category term="ciscn" />
    <category term="SSTI" />
    <category term="arm-linux" />
    <category term="Tiny6410" />
    <category term="信息安全" />
    <category term="linux" />
    <category term="web" />
    <category term="javascript" />
    <category term="XXE" />
    <entry>
        <id>http://dpm12345.cn/posts/5c639822/</id>
        <title>最小栈</title>
        <link rel="alternate" href="http://dpm12345.cn/posts/5c639822/"/>
        <content type="html">&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluLXN0YWNrLw==&#34;&gt;最小栈&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../post_images/%E6%9C%80%E5%B0%8F%E6%A0%88.png&#34; alt=&#34;最小栈详情&#34;&gt;&lt;/p&gt;
&lt;p&gt;要完成题目所要的功能，首先至少需要一个栈存储压入数据&lt;/p&gt;
&lt;p&gt;而对于该栈的使用方法有所不同&lt;/p&gt;
&lt;h2 id=&#34;用一个栈存储数据，使用-vector-数组存最小值&#34;&gt;&lt;a href=&#34;#用一个栈存储数据，使用-vector-数组存最小值&#34; class=&#34;headerlink&#34; title=&#34;用一个栈存储数据，使用 vector 数组存最小值&#34;&gt;&lt;/a&gt;用一个栈存储数据，使用 vector 数组存最小值&lt;/h2&gt;&lt;p&gt;在该方法中，入栈时，用$vector$存储最小值，当栈为空即可直接将要压入栈的值作为最小值，放入数组末尾，而如果栈不为空，那么根据压入值与最小值的比较，将较小值放入$vector$数组末尾，这样做的好处是在$pop()$操作时，不需判断$pop()$的值是否为最小值，可直接$pop_back()$$vector$数组末尾值&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class MinStack {
private:
    stack&amp;lt;int&amp;gt;a;
    vector&amp;lt;int&amp;gt;m;
public:
    MinStack() {

    }
    
    void push(int val) {
        if(a.empty())
        {
            a.push(val);
            m.push_back(val);
        }
        else
        {
            a.push(val);
            if(val&amp;lt;m.back())
            {
                m.push_back(val);
            }
            else
            {
                m.push_back(m.back());
            }
        }
    }
    
    void pop() {
        a.pop();
        m.pop_back();
    }
    
    int top() {
        return a.top();
      
    }
    
    int getMin() {
       return m.back();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj-&amp;gt;push(val);
 * obj-&amp;gt;pop();
 * int param_3 = obj-&amp;gt;top();
 * int param_4 = obj-&amp;gt;getMin();
 */
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;栈不用于存储数据，同时不需要额外空间存储&#34;&gt;&lt;a href=&#34;#栈不用于存储数据，同时不需要额外空间存储&#34; class=&#34;headerlink&#34; title=&#34;栈不用于存储数据，同时不需要额外空间存储&#34;&gt;&lt;/a&gt;栈不用于存储数据，同时不需要额外空间存储&lt;/h2&gt;&lt;p&gt;在该方法中，栈中存储的数值为压入栈值与当前最小值的差值&lt;/p&gt;
&lt;p&gt;代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;cpp&#34;&gt;class MinStack {
public:
    stack&amp;lt;long long&amp;gt; st;   // 使用 long long 防止数据溢出
    long long minv;

    MinStack() {
        minv = -1;
    }

    void push(int val) {
        if (!st.size()) {
            st.push(0);
            minv = val;
        }
        else {// 这次的值减去已有的最小值
            long long diff = val - minv;
            st.push(diff);
            minv = diff &amp;lt; 0 ? val : minv;
        }
    }

    void pop() {
        if (st.size()) {
            long long diff = st.top();
            st.pop();
            if (diff &amp;lt; 0)
                minv -= diff;
        }
    }

    int top() {
        long long diff = st.top();
        if (diff &amp;lt; 0)
            return minv;
        else 
            return minv + diff;
    }
    
    int getMin() {
        return minv;
    }
};
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="vector" />
        <category term="栈" />
        <updated>2022-01-24T14:54:40.000Z</updated>
    </entry>
</feed>
