<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>dpm12345 • Posts by &#34;密码学原理与实践&#34; category</title>
        <link>http://dpm12345.cn</link>
        <description>学习记录</description>
        <language>zh-CN</language>
        <pubDate>Tue, 24 Jan 2023 08:20:29 +0800</pubDate>
        <lastBuildDate>Tue, 24 Jan 2023 08:20:29 +0800</lastBuildDate>
        <category>Qt</category>
        <category>ms17</category>
        <category>msf</category>
        <category>git</category>
        <category>CTF</category>
        <category>sql注入</category>
        <category>笔记</category>
        <category>SSRF</category>
        <category>kali</category>
        <category>nmap</category>
        <category>Misc</category>
        <category>MFC</category>
        <category>cryptography</category>
        <category>ctfshow</category>
        <category>Web</category>
        <category>树</category>
        <category>二叉树</category>
        <category>数据结构</category>
        <category>hexo</category>
        <category>队列</category>
        <category>前缀和</category>
        <category>动态规划</category>
        <category>滑动窗口</category>
        <category>数组</category>
        <category>哈希表</category>
        <category>链表</category>
        <category>矩阵</category>
        <category>递归</category>
        <category>贪心</category>
        <category>子序列</category>
        <category>最长公共子序列</category>
        <category>最长回文子序列</category>
        <category>字符串</category>
        <category>括号</category>
        <category>vector</category>
        <category>栈</category>
        <category>双指针（快慢指针）</category>
        <category>排列组合</category>
        <category>等差数列</category>
        <category>深度优先搜索</category>
        <category>广度优先搜索</category>
        <category>ciscn</category>
        <category>SSTI</category>
        <category>arm-linux</category>
        <category>Tiny6410</category>
        <category>信息安全</category>
        <category>linux</category>
        <category>web</category>
        <category>javascript</category>
        <category>XXE</category>
        <item>
            <guid isPermalink="true">http://dpm12345.cn/posts/7821492f/</guid>
            <title>第四章 Hash函数</title>
            <link>http://dpm12345.cn/posts/7821492f/</link>
            <category>cryptography</category>
            <pubDate>Tue, 24 Jan 2023 08:20:29 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;定义4.1&lt;/strong&gt; 一个Hash族是满足下列条件的四元组$(\mathcal{X},\mathcal{Y},\mathcal{K},\mathcal{H})$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;$\mathcal{X}$是所有消息的集合&lt;/li&gt;
&lt;li&gt;$\mathcal{Y}$是由所有消息摘要或认证标签组成的有限集&lt;/li&gt;
&lt;li&gt;$\mathcal{K}$是密钥空间，是所有密钥的的有限集&lt;/li&gt;
&lt;li&gt;对于每个$K\in\mathcal{K}$，存在一个Hash函数 $h_k\in\mathcal {H},\ h_k:{\mathcal {X}}\rightarrow\mathcal {Y}$&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;Hash函数的安全性&#34;&gt;&lt;a href=&#34;#Hash函数的安全性&#34; class=&#34;headerlink&#34; title=&#34;Hash函数的安全性&#34;&gt;&lt;/a&gt;Hash函数的安全性&lt;/h1&gt;&lt;p&gt;三个问题&lt;/p&gt;
&lt;p&gt;:::primary no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题4.1&lt;/strong&gt;  原像&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件：&lt;/strong&gt;  Hash函数 $h:\mathcal{X}\rightarrow\mathcal{Y}$ 和 $y\in \mathcal {Y}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找出：&lt;/strong&gt;  $x\in\mathcal{X}$ 使得 $h(x)=y$&lt;/p&gt;
&lt;p&gt;给定一个(可能)的消息摘要y，原像问题是问是否可找到x使得 $h(x)=y$。如果对某个给定的$y\in\mathcal{Y}$，原像问题能够解决(即找到x)，则$(x,y)$是有效的。不能有效解决原像问题的Hash函数通常称为单项(one-way)的或者原像稳固的(preimage resistant)的&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::primary no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题4.2&lt;/strong&gt;  第二原像&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件：&lt;/strong&gt;  Hash函数 $h:\mathcal{X}\rightarrow\mathcal{Y}$ 和 $x\in\mathcal{X}$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找出：&lt;/strong&gt;  $x^{‘}\in\mathcal{X}$ 使得 $x^{‘}\not=x$，并且 $h(x^{‘})=h(x)$&lt;/p&gt;
&lt;p&gt;给定一个消息$x$，第二原像问题问是否能找到 $x^{‘}\not=x$，使得 $h(x^{‘})=h(x)$。要注意的是，如果问题能够得到解决，则 $(x^{‘},h(x))$ 是有效的二元组。不能有效解决第二原像问题(即找不到$x^{‘}$Hash函数通常称为第二原像稳固(second preimage resistant)&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::primary no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题4.3&lt;/strong&gt;  碰撞&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;条件：&lt;/strong&gt;  Hash函数 $h:\mathcal{X}\rightarrow\mathcal{Y}$ &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找出：&lt;/strong&gt;  $x,x^{‘}\in\mathcal{X}$ 使得 $x^{‘}\not=x$，并且 $h(x^{‘})=h(x)$&lt;/p&gt;
&lt;p&gt;碰撞问题是问是否可以找到 $x^{‘}\not=x$，使得 $h(x^{‘})=h(x)$。对这个问题的解答并不能直接产生有效的二元组。可是，如果 $(x,y)$ 是有效的的二元组，并且 $x,x^{‘}$ 是碰撞问题的解，则 $(x^{‘},x)$ 也是一个有效的二元组。已有各种各样的方案来避免这种情况的出现。不能有效解决碰撞问题(即找不到)的Hash函数同城成为碰撞稳固。&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;随机预言模型&#34;&gt;&lt;a href=&#34;#随机预言模型&#34; class=&#34;headerlink&#34; title=&#34;随机预言模型&#34;&gt;&lt;/a&gt;随机预言模型&lt;/h2&gt;&lt;p&gt;“理想的”Hash函数：对于该Hash函数 $h$,对于给定的 $x$，求出函数 $h$ 在点 $x$ 的值是得到 $h(x)$的唯一方法，即只能通过函数计算得出&lt;/p&gt;
&lt;p&gt;+++info 这里给出不满足该性质的一个例子&lt;/p&gt;
&lt;p&gt;假定Hash函数 $h:\mathbb{Z}_n\times\mathbb{Z}_n\rightarrow\mathbb{Z}_n$ 是一个线性函数，令&lt;br&gt;$$&lt;br&gt;h(x,y)=ax+by\quad mod\quad n&lt;br&gt;$$&lt;br&gt;$a,b\in\mathbb{Z}_n$ 且 $n\ge2$ 是正整数。假定已经得到&lt;br&gt;$$&lt;br&gt;h(x_1,y_1)=z_1\newline&lt;br&gt;h(x_2,y_2)=z_2&lt;br&gt;$$&lt;br&gt;令$r,s\in\mathbb{Z}_n$;则有&lt;br&gt;$$&lt;br&gt;\begin{eqnarray*}&lt;br&gt;h(rx_1+sx_2\ mod\ n,ry_1+sy_2\ mod\ n)&amp;amp;=&amp;amp; a(rx_1+sx_2) + b(ry_1+sy_2)\quad mod \quad n\newline&lt;br&gt;                                      &amp;amp;=&amp;amp; r(ax_1+by_1) + s(ax_2+by_2)\quad mod \quad n\newline&lt;br&gt;                                      &amp;amp;=&amp;amp; rh(x_1,y_1) + sh(x_2,y_2)\quad mod \quad n&lt;br&gt;\end{eqnarray*}&lt;br&gt;$$&lt;br&gt;也就是说，当知道函数 $h(x_1,y_1),h(x_2,y_2)$ 的值后，对其他点的值无需通过函数 $h$ 进行，而是可以由已知值得出&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::success&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.1&lt;/strong&gt;  假定 $h\in\mathcal{F}^{\mathcal{X},\mathcal{Y}}$ 是随机选择的，令$\mathcal{X}_0\in\mathcal{X}$。假定当且仅当 $x\in\mathcal{X}_0$ 时，$h(x)$ (通过查询 $h$ 的预言器)被确定。则对所有的 $x\in\mathcal{X}\setminus\mathcal{X}_0$ 和 有 $y\in\mathcal{Y}$，有 $\mathbf{Pr}[h(x)=y]=1/\mathbf{M}$&lt;/p&gt;
&lt;p&gt;( $y$ 的总个数为 $M$，而 $(x,y)$ 是一一对应，故概率为 $1/M$ )&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;随机语言模型中的算法&#34;&gt;&lt;a href=&#34;#随机语言模型中的算法&#34; class=&#34;headerlink&#34; title=&#34;随机语言模型中的算法&#34;&gt;&lt;/a&gt;随机语言模型中的算法&lt;/h2&gt;&lt;p&gt;$(\epsilon,q)$-算法来表示一个具有平均情况成功率为 $\epsilon$ 的 Las Vegas 算法，该算法向预言器查询(即求 $h$ 的值)的次数最多为 $q$ 。如果 $x$ 或者 $y$ 被确定作为问题实例的一部分，那么成功率 $\epsilon$ 就是对所有 $h\in\mathcal{F^{\mathcal{X},\mathcal{Y}}}$，以及所有 $x\in\mathcal{X}$ 或 $y\in\mathcal{Y}$ 的可能出现的随机选择的平均值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过计算 $q$ 个点的 $h$ 值来解决原像问题的算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法 4.1  $FindPreimage(h,y,q)$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择任意的 $\mathcal{X}_0\subseteq\mathcal{X}$, $|\mathcal{X}_0|=q$&lt;/p&gt;
&lt;p&gt;$for \quad each \quad x\in\mathcal{X}_0$&lt;/p&gt;
&lt;p&gt;​	$do\begin{cases}if :&amp;amp;h(x_0)=y\&amp;amp;then\quad return(x)\end{cases}$&lt;/p&gt;
&lt;p&gt;$return(failure)$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::success&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.2  对任意的 $\mathcal{X}_0\subseteq\mathcal{X}$,且 $|\mathcal{X}_0|=q$，算法 4.1 中平均情况成功率为 $\epsilon=1-(1-1/M)^q$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;+++info 证明&lt;/p&gt;
&lt;p&gt;给定 $y\in\mathcal{Y}$，令 $\mathcal{X}_0={x_1,\dots,x_q}$。对于 $1\le i\le q$，令 $E_i$ 表示事件“$h(x_i)=y$”。由定理 4.1 可知，$E_i$ 是独立事件，并且对所有的 $1\le i \le q$，$\mathbf{Pr}[E_i]=1/M$。因此，下面的等式成立：&lt;br&gt;$$&lt;br&gt;\mathbf{Pr}[E_1 \or E_2 \or \cdots \or E_q]=1-(1-\frac{1}{M})^q&lt;br&gt;$$&lt;br&gt;(对于一个 $E_i$ ,其成功概率为 $1/M$，若要求平均情况成功率，即求至少一个 $E_i$ 成立，那么所有都不成立的概率为 $(1-\frac{1}{M})^q$，故最后所求平均情况成功率为 $1-(1-\frac{1}{M})^q$ )&lt;/p&gt;
&lt;p&gt;对任何选定的 $y$，算法 4.1 的成功率都是常数。因此，所有 $y\in\mathcal{Y}$ 的成功率也是相同的。&lt;/p&gt;
&lt;p&gt;注意，$q$ 远小于 $M$，所以上面的成功率大约是 $q/M$&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面是一个企图解决第二原像问题的算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法 4.2 $FindSecondPreimage(h,x,q)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$y\leftarrow h(x)$&lt;/p&gt;
&lt;p&gt;选择 $\mathcal{X}_0\subseteq\mathcal{X}\setminus{x},\ |\mathcal{X}_0|=q-1$&lt;/p&gt;
&lt;p&gt;$for \quad each \quad x_0\in\mathcal{X}_0$&lt;/p&gt;
&lt;p&gt;​	$do\begin{cases}if :&amp;amp;h(x_0)=y\&amp;amp;then\quad return(x_0)\end{cases}$&lt;/p&gt;
&lt;p&gt;$return(failure)$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;对算法 4.2 的分析与以前的算法分析类似。唯一不同之处是额外使用 $h$，来对输入值 $x$ 计算 $y=h(x)$。&lt;/p&gt;
&lt;p&gt;:::success&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.3&lt;/strong&gt;  对任意的 $\mathcal{X}_0\subseteq\mathcal{X}\setminus{x}$，且 $|\mathcal{X}_0|=q-1$，算法 4.2 中的成功率为 $\epsilon=1-(1/M)^{q-1}$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面是针对碰撞问题的基本算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法 4.3  $FindCollision(h,q)$&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;选择任意的 $\mathcal{X}_0\subseteq\mathcal{X}$,$|\mathcal{X}_0|=q$&lt;/p&gt;
&lt;p&gt;$for \quad each \quad x\in\mathcal{X}_0$&lt;/p&gt;
&lt;p&gt;​	$do \quad y_x \leftarrow h(x)$&lt;/p&gt;
&lt;p&gt;$if$ 对某一 $x^{‘}\not=x$，有 $y_x=y_{x^{‘}}$&lt;/p&gt;
&lt;p&gt;​	$then \quad return(x,x^{‘})$&lt;/p&gt;
&lt;p&gt;$else \quad return(failure)$ &lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;在算法 4.3 中，对某一 $x^{‘}\not= x$，可以有效地检验是否有 $y_x = y_{x^{‘}}$，例如，可以对 $y_x$进行排序。这个算法可以利用类似于的”生日悖论”的概率来分析&lt;/p&gt;
&lt;p&gt;:::success&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.4&lt;/strong&gt;  对任意 $\mathcal{X}_0\subset\mathcal{X}$，且 $|\mathcal{X}_0|=q$，算法 4.3 的成功率为&lt;br&gt;$$&lt;br&gt;\epsilon=1-(\frac{M-1}{M})(\frac{M-2}{M})\cdots(\frac{M-q+1}{M})&lt;br&gt;$$&lt;br&gt;+++info 证明&lt;/p&gt;
&lt;p&gt;令 $\mathcal{X}&lt;em&gt;0={x_1,\cdots,x_q}$。对于 $1\le i \le q$，令 $E_i$ 表示事件：&lt;br&gt;$$&lt;br&gt;h(x_i)\notin{h(x_1),\dots,h(x&lt;/em&gt;{i-1})}&lt;br&gt;$$&lt;br&gt;利用归纳法，由定理 4.1 可知 $\mathbf{Pr}[E_i]=1$，并且对于 $2 \le i \le q$，有：&lt;br&gt;$$&lt;br&gt;\mathbf{Pr}[E_i|E_1 \and E_2 \and \cdots \and E_{i-1}]=\frac{M-i+1}{M}&lt;br&gt;$$&lt;br&gt;由此可得：&lt;br&gt;$$&lt;br&gt;\mathbf{Pr}[E_1 \and E_2 \and \cdots \and E_q]=(\frac{M-1}{M})(\frac{M-2}{M})\cdots(\frac{M-q+1}{M})&lt;br&gt;$$&lt;br&gt;至此定理成立。&lt;/p&gt;
&lt;p&gt;+++&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;上面的定理说明了无碰撞的概率是：&lt;br&gt;$$&lt;br&gt;(\frac{M-1}{M})(\frac{M-2}{M})\cdots(\frac{M-q+1}{M})=\prod^{q-1}_{i=1}\left(1-\frac{i}{M}\right)&lt;br&gt;$$&lt;br&gt;如果 $x$ 是一个小实数，则 $1-x\approx e^{-x}$。&lt;/p&gt;
&lt;p&gt;则无碰撞的概率大约是：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;\prod^{q-1}&lt;em&gt;{i=1}\left(1-\frac{i}{M}\right)&amp;amp;\approx\prod^{q-1}&lt;/em&gt;{i=1}e^{\frac{-i}{M}}\&lt;br&gt;                                           &amp;amp;=e^{-\sum^{q-1}_{i=1}\frac{i}{M}}\&lt;br&gt;                                           &amp;amp;=e^{\frac{-q(q-1)}{2M}}&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;因此，可以估计产生至少一个碰撞的概率为：&lt;br&gt;$$&lt;br&gt;1-e^{\frac{-q(q-1)}{2M}}&lt;br&gt;$$&lt;br&gt;如果把这个概率表示为 $\epsilon$，则可以把 $q$ 作为 $M$ 和 $\epsilon$ 的函数：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;e^{\frac{-q(q-1)}{2M}}&amp;amp;\approx 1-\epsilon\&lt;br&gt;\frac{-q(q-1)}{2M}&amp;amp;\approx ln(1-\epsilon)\&lt;br&gt;q^2-q&amp;amp;\approx2Mln\left(\frac{1}{1-\epsilon}\right)&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;如果忽略 $-q$ 项，则可以估计出：&lt;br&gt;$$&lt;br&gt;q\approx\sqrt{2Mln\left(\frac{1}{1-\epsilon}\right)}&lt;br&gt;$$&lt;br&gt;如果取 $\epsilon=0.5$，那么&lt;br&gt;$$&lt;br&gt;q\approx1.17\sqrt{M}&lt;br&gt;$$&lt;br&gt;这就说明了在 $\mathcal{X}$ 中对超过 $\sqrt{M}$ 个随机元素计算出的 Hash 函数值里面有 50% 的概率出现一个碰撞。注意，对 $\epsilon$ 不同的选择会导致不同的常数因子，但 $q$ 总是与 $\sqrt{M}$ 成一定的比例。这是一个$(1/2,O(\sqrt{M}))$-算法&lt;/p&gt;
&lt;p&gt;所以，对于40比特的消息摘要，那么在 $2^{20}$(约一百万)个随机 Hash 值中就有 50% 的概率发现一个碰撞，128比特，那么即需要 $2^{64}$ 个 Hash值&lt;/p&gt;
&lt;h3 id=&#34;安全标准的比较&#34;&gt;&lt;a href=&#34;#安全标准的比较&#34; class=&#34;headerlink&#34; title=&#34;安全标准的比较&#34;&gt;&lt;/a&gt;安全标准的比较&lt;/h3&gt;&lt;p&gt;利用下面算法 4.4 可以相当容易地把碰撞问题变为第二原像问题&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法 4.4&lt;/strong&gt;  $CollisionToSecondPreimage(h)$&lt;/p&gt;
&lt;p&gt;$external\quad Oracle2ndPreimage$&lt;/p&gt;
&lt;p&gt;均匀地随机选择 $x\in\mathcal{X}$&lt;/p&gt;
&lt;p&gt;$if\ (Oracle2ndPreimage(h,x)=x^{‘})$&lt;/p&gt;
&lt;p&gt;​	$then\quad return(x,x^{‘})$&lt;/p&gt;
&lt;p&gt;$else\quad return(failure)$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;假定&lt;code&gt;Oracle2ndPreimage&lt;/code&gt;是对一个特定的 Hash 函数解决了第二原像问题的 $(\epsilon,q)$-算法．显然&lt;code&gt;CollisionToSecondPreimage&lt;/code&gt;就是对同样的 Hash 函数 $h$ 解决了碰撞问题的  $(\epsilon,q+2)$-算法，这个转化并不要求对 Hash 函数 $h$ 做任何假定。作为这个转化的结果,可以说碰撞稳固性质意味着第二原像稳固性质。&lt;/p&gt;
&lt;p&gt;下面将研究更有趣的问题:是否碰撞问题可以转化为原像问题。也就是说，是否碰撞稳固意味着原像稳固？我们将证明至少在一些特殊情况下，这是对的。更明确的是,我们将证明任何能解决原像问题且概率为 1 的算法也能够解决碰撞问题。&lt;/p&gt;
&lt;p&gt;这个转化仅仅要求对 Hash 函数的定义域和值域做相当弱的假定就能够完成。设 Hash 函数 $h:\mathcal{X}\rightarrow\mathcal{Y}$，其中 $\mathcal{X}$ 和 $\mathcal{Y}$ 都是有限集,并且 $|x| \ge 2|y|$。假定&lt;code&gt;OraclePreimage&lt;/code&gt;对原像问题是一个$(1 ,q)$-算法。&lt;code&gt;OraclePreimage&lt;/code&gt;作为输入接收一个消息摘要 $y\in\mathcal{Y}$，并且总可以发现一个元素 $OraclePreimage(y)\in x$ ,使得 $h(OraclePreimage(y))=y$(这意味着 $h$ 是满射)。我们将分析算法 4.5 描述的 $CollisionToPreimage$ 算法。&lt;/p&gt;
&lt;p&gt;:::info no-icon&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法 4.5&lt;/strong&gt;  $CollisionToPreimage(h)$&lt;/p&gt;
&lt;p&gt;$external\quad OraclePreimage$&lt;/p&gt;
&lt;p&gt;均匀地随机选择 $x\in\mathcal{X}$&lt;/p&gt;
&lt;p&gt;$y\leftarrow h(x)$&lt;/p&gt;
&lt;p&gt;$if\ (OraclePreimage(h,y)=x^{‘})$ 且 $(x\not=x^{‘})$&lt;/p&gt;
&lt;p&gt;​	$then\quad return(x,x^{‘})$&lt;/p&gt;
&lt;p&gt;$else\quad return(failure)$&lt;/p&gt;
&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;:::success&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定理 4.5&lt;/strong&gt;  假定 $h:\mathcal{X}\rightarrow\mathcal{Y}$ 是一个 Hash 函数，$|\mathcal{X}|$ 和 $|\mathcal{Y}|$ 是有限的,并且$|\mathcal{X}|\ge2|\mathcal{Y}|$ 。假定&lt;code&gt;OrauclePreirmage&lt;/code&gt;对固定的 Hash 函数 $h$ 是原像问题的一个 $(1,q)$-算法。则 &lt;code&gt;CollisioriToPreimage&lt;/code&gt;对固定的 Hash 函数 $h$ 是碰撞问题的一个 $(1/2 , q+1)$-算法。&lt;/p&gt;
&lt;p&gt;+++info 证明&lt;/p&gt;
&lt;p&gt;显然&lt;code&gt;CollisionToPreimague&lt;/code&gt;是一个 Las Vegas 类型的概率算法，因为它或者发现一个碰撞，或者返回“失败”。这样，我们的主要任务是计算平均成功率。对任意 $x\in\mathcal{X}$，如果 $h(x)=h(x_1)$，定义 $(x\sim x_1)$。容易看出“~”是一个等价关系。定义;&lt;br&gt;$$&lt;br&gt;[x]={x_1\in\mathcal{X}:x\sim x_1 }&lt;br&gt;$$&lt;br&gt;每个等价类 $[x]$ 由 $\mathcal{Y}$ 中某个元的逆像组成。所以等价类的个数等于 $\mathcal{Y}$。用 $\mathcal{C}$ 表示等价类的集合。&lt;/p&gt;
&lt;p&gt;现在,设 $x$ 是由算法 $CollisionToPreimage$ 中选出的 $\mathcal{X}$ 中的随机数。对于这个 $x$，有 $|\ [\ x\ ]\ |-1$种可能的 $x_1$ 可以作为&lt;code&gt;OraclePreirmage&lt;/code&gt;的输出被返回。有 $|\ [\ x\ ]\ |-1$/ 个 $\x_1$与 $x$ 不同，因此可产生碰撞(注意,算法&lt;code&gt;OraclePreimage&lt;/code&gt;并不知道由算法&lt;code&gt;CollisionToPreimage&lt;/code&gt;初始选择的等价类 $[\ x\ ]$的代表元)。所以，给定元素 $x\in\mathcal{X}$，成功率为 $(|\ [\ x\ ]\ |-1)/|\ [\ x\ ]\ |$&lt;/p&gt;
&lt;p&gt;算法&lt;code&gt;CollisionToPreimage&lt;/code&gt;的成功率是通过对所有可能选择的 $x$ 做平均计算得到：&lt;br&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;\mathbf{Pr}&amp;amp;=\frac{1}{|\mathcal{X}|}\sum_{x\in\mathcal{X}}\frac{|[x]|-1}{|[x]|}\&lt;br&gt;           &amp;amp;=\frac{1}{|\mathcal{X}|}\sum_{c\in\mathcal{C}}\sum_{x\in\mathcal{C}}\frac{|C|-1}{|C|}\&lt;br&gt;           &amp;amp;=\frac{1}{|\mathcal{X}|}\left(\sum_{c\in\mathcal{C}}|C|-\sum_{C\in\mathcal{C}}1\right)\&lt;br&gt;           &amp;amp;=\frac{|\mathcal{X}|-|\mathcal{Y}|}{|\mathcal{X}|}\&lt;br&gt;           &amp;amp;\ge\frac{|\mathcal{X}|-|\mathcal{X}|/2}{|\mathcal{X}|}\&lt;br&gt;           &amp;amp;=\frac{1}{2}&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;br&gt;因此，我们构造了一个平均情况成功率至少为 1/2 的 Las Vegas 算法&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
