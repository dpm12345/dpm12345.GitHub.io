<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dpm12345.github.io</id>
    <title>dpm12345 • Posts by &#34;leetcode周赛&#34; category</title>
    <link href="http://dpm12345.github.io" />
    <updated>2021-12-28T15:20:34.000Z</updated>
    <category term="git" />
    <category term="Qt" />
    <category term="ms17" />
    <category term="msf" />
    <category term="CTF" />
    <category term="sql注入" />
    <category term="Misc" />
    <category term="笔记" />
    <category term="SSRF" />
    <category term="kali" />
    <category term="nmap" />
    <category term="MFC" />
    <category term="树" />
    <category term="二叉树" />
    <category term="数据结构" />
    <category term="队列" />
    <category term="ctfshow" />
    <category term="Web" />
    <category term="前缀和" />
    <category term="动态规划" />
    <category term="滑动窗口" />
    <category term="数组" />
    <category term="哈希表" />
    <category term="链表" />
    <category term="矩阵" />
    <category term="递归" />
    <category term="贪心" />
    <category term="子序列" />
    <category term="最长公共子序列" />
    <category term="最长回文子序列" />
    <category term="字符串" />
    <category term="括号" />
    <category term="vector" />
    <category term="栈" />
    <category term="排列组合" />
    <category term="双指针（快慢指针）" />
    <category term="等差数列" />
    <category term="深度优先搜索" />
    <category term="广度优先搜索" />
    <entry>
        <id>http://dpm12345.github.io/2021/12/28/leetcode/week-competition/leetcode%20%E7%AC%AC%2068%20%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B/</id>
        <title>leetcode 第 68 场双周赛</title>
        <link rel="alternate" href="http://dpm12345.github.io/2021/12/28/leetcode/week-competition/leetcode%20%E7%AC%AC%2068%20%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B/"/>
        <content type="html">&lt;p&gt;【战绩】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/leetcode%E7%AC%AC68%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B_%E6%88%98%E7%BB%A9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;p&gt;此次双周赛的成绩，看排名似乎还行，但事实上只在限定时间内做出了第一题，可以说是不太好。总的来说是，接触过的题目太少，知识储备不够造成的，因此之后的策略是涉及多方面的题目、知识与解法&lt;/p&gt;
&lt;p&gt;总结到此，下面是题目解析&lt;/p&gt;
&lt;h1 id=&#34;句子中的最多单词数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#句子中的最多单词数&#34;&gt;#&lt;/a&gt; 句子中的最多单词数&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1udW1iZXItb2Ytd29yZHMtZm91bmQtaW4tc2VudGVuY2VzLw==&#34;&gt; 句子中的最多单词数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这题非常简单，计算空格数即可&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int mostWordsFound(vector&amp;lt;string&amp;gt;&amp;amp; sentences) &amp;#123;
        int ans=0;
        for(int i=0;i&amp;lt;sentences.size();i++)
        &amp;#123;
            int cur=0;
            for(int j=0;j&amp;lt;sentences[i].size();j++)
            &amp;#123;
                if(sentences[i][j]==&#39; &#39;)
                    cur++;
            &amp;#125;
            ans=max(ans,cur+1);
        &amp;#125;
        return ans;
        
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;从给定原材料中找到所有可以做出的菜&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#从给定原材料中找到所有可以做出的菜&#34;&gt;#&lt;/a&gt; 从给定原材料中找到所有可以做出的菜&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1hbGwtcG9zc2libGUtcmVjaXBlcy1mcm9tLWdpdmVuLXN1cHBsaWVzLw==&#34;&gt; 从给定原材料中找到所有可以做出的菜&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;暴力法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#暴力法&#34;&gt;#&lt;/a&gt; 暴力法&lt;/h2&gt;
&lt;p&gt;根据题目要求，做好的菜可以作为原材料去做其他的菜，那么想法可以是先遍历一遍，如果发现有菜可以做出来，那么将该菜放入存有材料的哈希表中，重新开始循环，并且避免对已经做出来的菜重复计算，那么循环结束后便得到一个完整原材料的哈希表。最后再遍历一次食谱，得到的结果便是答案。&lt;/p&gt;
&lt;p&gt;以下为我自己写的代码 (原以为在周赛时间限制内，但是实际已经过了)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    void tj(vector&amp;lt;string&amp;gt;&amp;amp; recipes, vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt;&amp;amp; ingredients, vector&amp;lt;string&amp;gt;&amp;amp; supplies,unordered_map&amp;lt;string,int&amp;gt;&amp;amp;a)
    &amp;#123;
        int flag=1;       // 判断是否已经是否把所有情况遍历
        while(flag)
        &amp;#123;
            flag=0;      // 假设可以结束了
            for(int i=0;i&amp;lt;recipes.size();i++)
            &amp;#123;
                int j;
                for(j=0;j&amp;lt;ingredients[i].size();j++)
                &amp;#123;
                    if(!a.count(recipes[i])&amp;amp;&amp;amp;!a.count(ingredients[i][j]))   // 发现此菜品不能做出来
                        break;
                &amp;#125;
				
				// 发现菜品没有统计过并且可以做出来，j==ingredients [i].size () 说明原材料都有
                if(!a.count(recipes[i])&amp;amp;&amp;amp;j==ingredients[i].size())    
                &amp;#123;
                    a[recipes[i]]=1;
                    flag=1;         // 说明有新材料加入，那么重新遍历菜谱
                    break;
                &amp;#125;
            &amp;#125;
        &amp;#125;
    &amp;#125;
    vector&amp;lt;string&amp;gt; findAllRecipes(vector&amp;lt;string&amp;gt;&amp;amp; recipes, vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt;&amp;amp; ingredients, vector&amp;lt;string&amp;gt;&amp;amp; supplies) &amp;#123;
        unordered_map&amp;lt;string,int&amp;gt;a;
        vector&amp;lt;string&amp;gt;ans; 
        for(int i=0;i&amp;lt;supplies.size();i++)
        &amp;#123;
            a[supplies[i]]=1;         // 原材料放入哈希表
        &amp;#125;
        tj(recipes,ingredients,supplies,a);         // 统计新的原材料哈希表
        for(int i=0;i&amp;lt;recipes.size();i++)
        &amp;#123;
            int j;
            for(j=0;j&amp;lt;ingredients[i].size();j++)
            &amp;#123;
                if(!a.count(ingredients[i][j]))
                        break;
            &amp;#125;
            if(j==ingredients[i].size())
            &amp;#123;
                ans.push_back(recipes[i]);     // 将满足的菜品放入 ans 中
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;拓扑排序&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#拓扑排序&#34;&gt;#&lt;/a&gt; 拓扑排序&lt;/h2&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;string&amp;gt; findAllRecipes(vector&amp;lt;string&amp;gt;&amp;amp; recipes, vector&amp;lt;vector&amp;lt;string&amp;gt;&amp;gt;&amp;amp; ingredients, vector&amp;lt;string&amp;gt;&amp;amp; supplies) &amp;#123;
        int n = recipes.size();
        // 图
        unordered_map&amp;lt;string, vector&amp;lt;string&amp;gt;&amp;gt; depend;
        // 入度统计
        unordered_map&amp;lt;string, int&amp;gt; cnt;
        for (int i = 0; i &amp;lt; n; ++i) &amp;#123;
            for (const string&amp;amp; ing: ingredients[i]) &amp;#123;
                depend[ing].push_back(recipes[i]);
            &amp;#125;
            cnt[recipes[i]] = ingredients[i].size();
        &amp;#125;
        
        vector&amp;lt;string&amp;gt; ans;
        queue&amp;lt;string&amp;gt; q;
        // 把初始的原材料放入队列
        for (const string&amp;amp; sup: supplies) &amp;#123;
            q.push(sup);
        &amp;#125;
        // 拓扑排序
        while (!q.empty()) &amp;#123;
            string cur = q.front();
            q.pop();
            if (depend.count(cur)) &amp;#123;
                for (const string&amp;amp; rec: depend[cur]) &amp;#123;
                    --cnt[rec];
                    // 如果入度变为 0，说明可以做出这道菜
                    if (cnt[rec] == 0) &amp;#123;
                        ans.push_back(rec);
                        q.push(rec);
                    &amp;#125;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;判断一个括号字符串是否有效&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#判断一个括号字符串是否有效&#34;&gt;#&lt;/a&gt; 判断一个括号字符串是否有效&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtYS1wYXJlbnRoZXNlcy1zdHJpbmctY2FuLWJlLXZhbGlkLw==&#34;&gt;判断一个括号字符串是否有效&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;两次遍历正序遍历和逆序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#两次遍历正序遍历和逆序遍历&#34;&gt;#&lt;/a&gt; 两次遍历，正序遍历和逆序遍历。&lt;/h2&gt;
&lt;p&gt;首先排除奇数个数的情况，因为括号数为奇数时必不可能两两配对&lt;/p&gt;
&lt;p&gt;正序遍历时，用 count 记录此时不可修改的右括号数，在遍历时时候比对当前数目的右括号数与剩下的最多左括号数，如果后者小于前者，那么不可能经过改变得到有效的括号字符串&lt;/p&gt;
&lt;p&gt;逆序遍历时，同正序遍历时的方法，用 count 记录此时不可修改左括号数，在遍历时时候比对当前数目的右括号数与剩下的最多左括号数，如果后者小于前者，那么不可能经过改变得到有效的括号字符串&lt;/p&gt;
&lt;p&gt;两次遍历结束后若都不会返回 false，那么说明肯定存在一种情况使得左括号与右括号恰好两两配对&lt;/p&gt;
&lt;p&gt;因为一个是&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L&amp;gt;=R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72243em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 另一个是&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;L&lt;/mi&gt;&lt;mo&gt;&amp;lt;&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;L&amp;lt;=R&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72243em;vertical-align:-0.0391em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.36687em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，如果两种都满足则会有相等使其配对的情况，所以最后能得到正确结果&lt;/p&gt;
&lt;p&gt;以下为参考代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    bool canBeValid(string s, string locked) &amp;#123;
        if(s.size()%2==1) return false;
        int l=0,r=0;
        for(int i=0;i&amp;lt;s.size();i++)
        &amp;#123;
            if(locked[i]==&#39;1&#39;&amp;amp;&amp;amp;s[i]==&#39;)&#39;)
                r++;
            if(i+1-r&amp;lt;r)                  // 最大左括号数小于右括号数
                return false;
        &amp;#125;
        for(int i=s.size()-1;i&amp;gt;=0;i--)
        &amp;#123;
            if(locked[i]==&#39;1&#39;&amp;amp;&amp;amp;s[i]==&#39;(&#39;)
                l++;
            if(s.size()-i-l&amp;lt;l)           // 最大右括号数小于左括号数
                return false;
        &amp;#125;
        return true;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;贪心算法一次遍历用-maxc-记录最大未匹配数minc-记录最小未匹配数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#贪心算法一次遍历用-maxc-记录最大未匹配数minc-记录最小未匹配数&#34;&gt;#&lt;/a&gt; 贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数&lt;/h2&gt;
&lt;p&gt;首先排除奇数个数的情况，因为括号数为奇数时必不可能两两配对&lt;/p&gt;
&lt;p&gt;当遇到不可变的右 (左) 括号时， &lt;code&gt;maxc&lt;/code&gt;  和 &lt;code&gt;minc&lt;/code&gt;  都加一 (减一), 如果在此期间 &lt;code&gt;maxc&amp;lt;0&lt;/code&gt; ，那么证明有右括号不能被匹配那么这串字符串是无效的&lt;/p&gt;
&lt;p&gt;当遇到可变的位置时，由于既可以变也可以不变，那么 &lt;code&gt;maxc++&lt;/code&gt; ， &lt;code&gt;minc−−&lt;/code&gt; ，其中如果 &lt;code&gt;minc&lt;/code&gt;  减之前如果是 0，那么 &lt;code&gt;minc&lt;/code&gt;  就变为 1，因为会增加&lt;/p&gt;
&lt;p&gt;如果在遍历过程中， &lt;code&gt;minc&amp;gt;maxc&lt;/code&gt; ，那么证明该串是无效的&lt;/p&gt;
&lt;p&gt;最后如果该串是有效，那么 &lt;code&gt;minc&lt;/code&gt;  必为 0，所以返回值为 &lt;code&gt;minc==0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    bool canBeValid(string s, string locked) &amp;#123;
        if(s.size()%2==1)  return false;
        int minc=0,maxc=0;
        for(int i=0;i&amp;lt;s.size();i++)
        &amp;#123;
            if(locked[i]==&#39;1&#39;)
            &amp;#123;
                if(s[i]==&#39;(&#39;)
                &amp;#123;
                    minc++;
                    maxc++;
                &amp;#125;
                if(s[i]==&#39;)&#39;)
                &amp;#123;
                    maxc--;
                    minc=minc==0?1:minc-1;
                    if(maxc&amp;lt;0)
                        return false;
                &amp;#125;
            &amp;#125;
            else
            &amp;#123;
                minc=minc==0?1:minc-1;
                maxc++;
            &amp;#125;
            if(minc&amp;gt;maxc)
                return false;
        &amp;#125;
        return minc==0;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;一个区间内所有数乘积的缩写&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一个区间内所有数乘积的缩写&#34;&gt;#&lt;/a&gt; 一个区间内所有数乘积的缩写&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYWJicmV2aWF0aW5nLXRoZS1wcm9kdWN0LW9mLWEtcmFuZ2Uv&#34;&gt;一个区间内所有数乘积的缩写&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;目前学习中......&lt;/p&gt;
</content>
        <updated>2021-12-28T15:20:34.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.github.io/2021/12/28/leetcode/week-competition/leetcode%20%E7%AC%AC%20273%20%E5%9C%BA%E5%91%A8%E8%B5%9B/</id>
        <title>leetcode 第 273 场周赛</title>
        <link rel="alternate" href="http://dpm12345.github.io/2021/12/28/leetcode/week-competition/leetcode%20%E7%AC%AC%20273%20%E5%9C%BA%E5%91%A8%E8%B5%9B/"/>
        <content type="html">&lt;p&gt;【战绩】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/leetcode%E7%AC%AC273%E5%9C%BA%E5%91%A8%E8%B5%9B_%E6%88%98%E7%BB%A9.png&#34; alt=&#34;leetcode第273场周赛_战绩&#34; /&gt;&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;p&gt;此次周赛，成绩差，只做出来了两题，并且第一题还提交错误一次。总的来说题目看得不够清楚，对题目的 推导还比较欠缺&lt;/p&gt;
&lt;p&gt;总结到此，下面是题目解析&lt;/p&gt;
&lt;h1 id=&#34;反转两次的数字&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#反转两次的数字&#34;&gt;#&lt;/a&gt; 反转两次的数字&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYS1udW1iZXItYWZ0ZXItYS1kb3VibGUtcmV2ZXJzYWwv&#34;&gt; 反转两次的数字&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这道题比较简单，可以直接暴力进行两次数字反转得到答案&lt;/p&gt;
&lt;p&gt;但仔细想想会发现，如果一个数字反转两次后是元素，那么原数字末尾必不为 0 (0 除外) ，因为如果存在 0 时 在进行反转后 0 会被删去，数字总位数减少，从而再次进行反转得到的数字必然不会是原来的数字&lt;/p&gt;
&lt;p&gt;以下为代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    bool isSameAfterReversals(int num) &amp;#123;
        return num==0||num%10!=0;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;执行所有后缀指令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行所有后缀指令&#34;&gt;#&lt;/a&gt; 执行所有后缀指令&lt;/h1&gt;
&lt;p&gt;题目链接:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXhlY3V0aW9uLW9mLWFsbC1zdWZmaXgtaW5zdHJ1Y3Rpb25zLXN0YXlpbmctaW4tYS1ncmlkLw==&#34;&gt; 执行所有后缀指令&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;按照题目要求模拟即可，注意什么时候是行，什么时候是列即可&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    vector&amp;lt;int&amp;gt; executeInstructions(int n, vector&amp;lt;int&amp;gt;&amp;amp; startPos, string s) &amp;#123;
        vector&amp;lt;int&amp;gt;ans(s.size());
        for(int i=0;i&amp;lt;s.size();i++)
        &amp;#123;
            int j=0,num=0;
            vector&amp;lt;int&amp;gt;cur=startPos;
            for(j=i;j&amp;lt;s.size();j++)
            &amp;#123;
                if(s[j]==&#39;L&#39;&amp;amp;&amp;amp;cur[1]&amp;gt;0)
                &amp;#123;
                    cur[1]--;
                    num++;
                &amp;#125;
                else if(s[j]==&#39;R&#39;&amp;amp;&amp;amp;cur[1]&amp;lt;n-1)
                &amp;#123;
                    cur[1]++;
                    num++;
                &amp;#125;
                else if(s[j]==&#39;U&#39;&amp;amp;&amp;amp;cur[0]&amp;gt;0)
                &amp;#123;
                    cur[0]--;
                    num++;
                &amp;#125;   
                else if(s[j]==&#39;D&#39;&amp;amp;&amp;amp;cur[0]&amp;lt;n-1)
                &amp;#123;
                    cur[0]++;
                    num++;
                &amp;#125;
                else
                    break;
            &amp;#125;
            ans[i]=num;
            
        &amp;#125;
        return ans;
        
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;相同元素的间隔之和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相同元素的间隔之和&#34;&gt;#&lt;/a&gt; 相同元素的间隔之和&lt;/h1&gt;
</content>
        <updated>2021-12-28T15:20:34.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.github.io/2021/12/19/leetcode/week-competition/leetcode%20%E7%AC%AC%20272%20%E5%9C%BA%E5%91%A8%E8%B5%9B/</id>
        <title>leetcode 第 272 场周赛</title>
        <link rel="alternate" href="http://dpm12345.github.io/2021/12/19/leetcode/week-competition/leetcode%20%E7%AC%AC%20272%20%E5%9C%BA%E5%91%A8%E8%B5%9B/"/>
        <content type="html">&lt;p&gt;【战绩】&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/leetcode%E7%AC%AC272%E5%9C%BA%E5%91%A8%E8%B5%9B_%E6%88%98%E7%BB%A9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;总结:&lt;/p&gt;
&lt;p&gt;第一场按时参与的 leetcode 周赛，总的来说，这次的题目并不是很难，思路会有，而自己却写不出来，最主要还是细节方面和一些算法的不熟悉，不能够做到完全吸收，就拿第四题说，我能想到解题方向为先将下&lt;/p&gt;
&lt;p&gt;标间隔为 k 的元素构成一个个数组，然后求这些数组各自内部的最长非严格上升子序列的长度，最后用数组原长度减去这一最长非严格上升子序列的长度即为这一数组的最少修改值，答案即为所有数组的最少修改值。&lt;/p&gt;
&lt;p&gt;但最后我并没有写出来，更加不好的是，我明白怎么去求最长非严格上升序列的动态规划求法，但脑中并未有其时间复杂度更小的贪心 + 二分查找解法，为此我还去搜求最长严格递增的贪心 + 二分查找解法，但自己并&lt;/p&gt;
&lt;p&gt;未理解该算法的核心，也并不知道怎么修改才能作为求最长非严格上升子序列的代码&lt;/p&gt;
&lt;p&gt;总结到此，下面进行题目解析&lt;/p&gt;
&lt;h1 id=&#34;找出数组中的第一个回文字符串&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#找出数组中的第一个回文字符串&#34;&gt;#&lt;/a&gt; 找出数组中的第一个回文字符串&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1maXJzdC1wYWxpbmRyb21pYy1zdHJpbmctaW4tdGhlLWFycmF5Lw==&#34;&gt;找出数组中的第一个回文字符串&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;找出数组中的第一个回文字符串_题目详情&#34; /&gt;&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;这题比较简单，只需写一个函数用于判断是否为回文串，若是则直接输出，结束程序&lt;/p&gt;
&lt;p&gt;以下为代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    bool if_hw(string &amp;amp;s)
    &amp;#123;
        for(int i=0;i&amp;lt;s.length()/2;i++)
        &amp;#123;
            if(s[i]!=s[s.length()-i-1])
                return false;
        &amp;#125;
        return true;
    &amp;#125;
    string firstPalindrome(vector&amp;lt;string&amp;gt;&amp;amp; words) &amp;#123;
        for(int i=0;i&amp;lt;words.size();i++)
        &amp;#123;
            if(if_hw(words[i]))
                return words[i];
        &amp;#125;
        return &amp;quot;&amp;quot;;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者使用迭代器&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    string firstPalindrome(vector&amp;lt;string&amp;gt;&amp;amp; a) &amp;#123;
        for(string s : a) &amp;#123;
            if(s == string(s.rbegin(), s.rend())) return s;
        &amp;#125;
        return &amp;quot;&amp;quot;;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;向字符串添加空格&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#向字符串添加空格&#34;&gt;#&lt;/a&gt; 向字符串添加空格&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYWRkaW5nLXNwYWNlcy10by1hLXN0cmluZy8=&#34;&gt;向字符串添加空格&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E5%90%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%BB%E5%8A%A0%E7%A9%BA%E6%A0%BC_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;向字符串添加空格_题目详情&#34; /&gt;&lt;/p&gt;
&lt;p&gt;思路:&lt;/p&gt;
&lt;p&gt;这题也比较简单，只需遍历时，在对应位置添上空格即可，可使用 if 解决&lt;/p&gt;
&lt;p&gt;以下为代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    string addSpaces(string s, vector&amp;lt;int&amp;gt;&amp;amp; spaces) &amp;#123;
        int index=0;
        string ans;
        for(int i=0;i&amp;lt;s.length();i++)
        &amp;#123;
            if(index&amp;lt;spaces.size()&amp;amp;&amp;amp;i==spaces[index])
            &amp;#123;
                ans.push_back(&#39; &#39;);
                index++;
            &amp;#125;
            ans.push_back(s[i]);
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;股票平滑下跌阶段的数目&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#股票平滑下跌阶段的数目&#34;&gt;#&lt;/a&gt; 股票平滑下跌阶段的数目&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXNtb290aC1kZXNjZW50LXBlcmlvZHMtb2YtYS1zdG9jay8=&#34;&gt;股票平滑下跌阶段的数目&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E8%82%A1%E7%A5%A8%E5%B9%B3%E6%BB%91%E4%B8%8B%E8%B7%8C%E9%98%B6%E6%AE%B5%E7%9A%84%E6%95%B0%E7%9B%AE_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;股票平滑下跌阶段的数目_题目详情&#34; /&gt;&lt;/p&gt;
&lt;p&gt;思路:&lt;/p&gt;
&lt;p&gt;观察可知，平滑下跌阶段即为公差为 &lt;code&gt;-1&lt;/code&gt;  的等差数列，而要具体求出结果就可以为先求数组中的各个最长等差数列的长度，然后存入，最后只需加上各个等差数列长度的&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mtext&gt;・・・&lt;/mtext&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n+(n-1)+n-1+・・・+1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;・&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;・&lt;/span&gt;&lt;span class=&#34;mord cjk_fallback&#34;&gt;・&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;得到答案&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    long long cal(long long n)
    &amp;#123;
        long long ans=0;
        while(n!=0)
        &amp;#123;
            ans+=n--;
        &amp;#125;
        return ans;
    &amp;#125;
    long long getDescentPeriods(vector&amp;lt;int&amp;gt;&amp;amp; prices) &amp;#123;
        vector&amp;lt;long long&amp;gt;record;
        long long sum=0;
        for(int i=0;i&amp;lt;prices.size();i++)
        &amp;#123;
            if(sum==0)
                sum++;
            else
            &amp;#123;
                if(prices[i]==prices[i-1]-1)
                &amp;#123;
                    sum++;
                &amp;#125;
                else
                &amp;#123;
                    record.push_back(sum);
                    sum=1;
                &amp;#125;
            &amp;#125;
        &amp;#125;
        if(sum!=0)
            record.push_back(sum);
        long long ans=0;
        for(int i=0;i&amp;lt;record.size();i++)
        &amp;#123;
            ans+=cal(record[i]);
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大佬的代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    long long getDescentPeriods(vector&amp;lt;int&amp;gt;&amp;amp; a) &amp;#123;
        long long ans = 0;
        for(int i = 0; i &amp;lt; a.size(); ) &amp;#123;
            int j = i;
            while(j &amp;lt; a.size() &amp;amp;&amp;amp; a[j] - a[i] == i - j) ++j;
            ans += (long long)(j - i) * (j - i + 1) / 2;
            i = j;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;思路相同，但用来了更为简便的写法&lt;br /&gt;
相对于我的代码，我的显得过于繁琐，其实无需将个数存入新的数组，而是可以边得到边计算，而计算时用&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mtext&gt;−&lt;/mtext&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mtext&gt;∗&lt;/mtext&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mtext&gt;−&lt;/mtext&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mi mathvariant=&#34;normal&#34;&gt;/&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(j−i)∗(j−i+1)/2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;∗&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;s&gt; 我怎么就忘了呢&lt;/s&gt;&lt;/p&gt;
&lt;h1 id=&#34;使数组-k-递增的最少操作次数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使数组-k-递增的最少操作次数&#34;&gt;#&lt;/a&gt; 使数组 K 递增的最少操作次数&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1vcGVyYXRpb25zLXRvLW1ha2UtdGhlLWFycmF5LWstaW5jcmVhc2luZy8=&#34;&gt;使数组 K 递增的最少操作次数&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E4%BD%BF%E6%95%B0%E7%BB%84K%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png&#34; alt=&#34;使数组K递增的最少操作次数_题目详情&#34; /&gt;&lt;/p&gt;
&lt;p&gt;思路：在总结中我差不多讲过，这里简略讲一下&lt;/p&gt;
&lt;p&gt;题目要求求使数组 K 递增的最少操作次数，我们将相差 k 下标的元素排列在一起，若想要让其非严格递增，求最少修改数，不难得到此结论，若想在花最少次数得到非严格递增数列，那么该次数一定为该数列里的最长非严格递增子序列的长度与该序列长度的差值&lt;/p&gt;
&lt;p&gt;而求最长非严格递增子序列的长度的方法有两种，一种动态规划，另一种是贪心 + 二分。&lt;/p&gt;
&lt;p&gt;在这道题里，因为动态规划时间复杂度较高，很容易超出时间限制，故这题采用贪心 + 二分&lt;/p&gt;
&lt;p&gt;【相关题目】:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1pbmNyZWFzaW5nLXN1YnNlcXVlbmNlLw==&#34;&gt;【最长递增子序列】&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以说接下来所要做的事为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将下标相差 k 的元素放在一起，构成新的数组&lt;/li&gt;
&lt;li&gt;求出该数组的最长非严格递增子序列的长度与数组长度的差值&lt;/li&gt;
&lt;li&gt;将各差值相加&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该方法具体原理&lt;/p&gt;
&lt;p&gt;考虑一个简单的贪心，如果我们要使上升子序列尽可能的长，则我们需要让序列上升得尽可能慢，因此我们希望每次在上升子序列最后加上的那个数尽可能的小。&lt;/p&gt;
&lt;p&gt;基于上面的贪心思路，我们维护一个数组 &lt;code&gt;d[i]&lt;/code&gt; ，表示长度为 &lt;code&gt;i&lt;/code&gt;  的最长上升子序列的末尾元素的最小值， 用 &lt;code&gt;len&lt;/code&gt;  记录目前最长上升子序列的长度，起始时 &lt;code&gt;len&lt;/code&gt;  为 &lt;code&gt;1&lt;/code&gt; ， &lt;code&gt;d[1]=nums[0]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;同时我们可以注意到 &lt;code&gt;d[i]&lt;/code&gt;  是关于 &lt;code&gt;i&lt;/code&gt;  单调递增的。因为如果 &lt;code&gt;d[j]≥d[i]&lt;/code&gt;  且 &lt;code&gt;j &amp;lt; i&lt;/code&gt; ，我们考虑从长度为 &lt;code&gt;i&lt;/code&gt;  的最长上升子序列的末尾删除 &lt;code&gt;i-j&lt;/code&gt;  个元素，那么这个序列长度变为 &lt;code&gt;j&lt;/code&gt; ，且第 &lt;code&gt;j&lt;/code&gt;  个元素 &lt;code&gt;x&lt;/code&gt; （末尾元素）必然小于 &lt;code&gt;d[i]&lt;/code&gt; ，也就小于 &lt;code&gt;d[j]&lt;/code&gt; 。那么我们就找到了一个长度为 &lt;code&gt;j&lt;/code&gt;  的最长上升子序列，并且末尾元素比 &lt;code&gt;d[j]&lt;/code&gt;  小， 从而产生了矛盾。因此数组 &lt;code&gt;d&lt;/code&gt;  的单调性得证。&lt;/p&gt;
&lt;p&gt;我们依次遍历数组 &lt;code&gt;nums&lt;/code&gt;  中的每个元素，并更新数组 &lt;code&gt;d&lt;/code&gt;  和 &lt;code&gt;len&lt;/code&gt;  的值。如果 &lt;code&gt;nums [i]&amp;gt;d [len]&lt;/code&gt;  则更新 &lt;code&gt;len = len + 1&lt;/code&gt; ，否则在 &lt;code&gt;d[1…len]&lt;/code&gt;  中找满足 &lt;code&gt;d[i−1] &amp;lt; nums[j] &amp;lt; d[i]&lt;/code&gt;  的下标 &lt;code&gt;i&lt;/code&gt; ，并更新 &lt;code&gt;d[i] = nums[j]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据 d 数组的单调性，我们可以使用二分查找寻找下标 &lt;code&gt;i&lt;/code&gt; ，优化时间复杂度。&lt;/p&gt;
&lt;p&gt;最后整个算法流程为：&lt;/p&gt;
&lt;p&gt;设当前已求出的最长上升子序列的长度为 &lt;code&gt;len&lt;/code&gt;  初始时为 1），从前往后遍历数组 &lt;code&gt;nums&lt;/code&gt; ，在遍历到 &lt;code&gt;nums[i]&lt;/code&gt;  时：&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;nums [i]&amp;gt;d [len]&lt;/code&gt; ，则直接加入到 d 数组末尾，并更新 &lt;code&gt;len = len + 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;否则，在 d 数组中二分查找，找到第一个比 &lt;code&gt;nums[i]&lt;/code&gt;  小的数 &lt;code&gt;d[k]&lt;/code&gt; ，并更新 &lt;code&gt;d[k+1]=nums[i]&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;以输入序列 &lt;code&gt;[0, 8, 4, 12, 2]&lt;/code&gt;  为例：&lt;/p&gt;
&lt;p&gt;第一步插入 0，d = [0];&lt;/p&gt;
&lt;p&gt;第二步插入 8，d = [0, 8];&lt;/p&gt;
&lt;p&gt;第三步插入 4，d = [0, 4];&lt;/p&gt;
&lt;p&gt;第四步插入 12，d = [0, 4, 12];&lt;/p&gt;
&lt;p&gt;第五步插入 2，d = [0, 2, 12];&lt;/p&gt;
&lt;p&gt;最终得到最大递增子序列长度为 3。&lt;/p&gt;
&lt;p&gt;-- 摘自 leetcode 官方题解 (最长递增子序列)&lt;/p&gt;
&lt;p&gt;与本题区别： 上面的解析是针对严格递增的，不能有重复元素，而在本题中，是有重复元素，即不严格递增，所以在找寻 插入位置时会有所不同，当发现有数大于等于末位数时，直接接在后面，若小于，那么找出大于这个数的第一个数&lt;/p&gt;
&lt;p&gt;以下为代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int search(vector&amp;lt;int&amp;gt;&amp;amp;nums)
    &amp;#123;
        int n=nums.size();
        int index=1;
        vector&amp;lt;int&amp;gt;dp(n+1);
        dp[index]=nums[0];
        for(int i=1;i&amp;lt;n;i++)
        &amp;#123;
            if(nums[i]&amp;gt;=dp[index])
            &amp;#123;
                dp[++index]=nums[i];
            &amp;#125;
            else
            &amp;#123;
                int left=1,right=index;
                while(left&amp;lt;=right)
                &amp;#123;
                    int mid=(left+right)/2;
                    if(nums[i]&amp;gt;=dp[mid])
                    &amp;#123;
                        left=mid+1;
                    &amp;#125;
                    else
                    &amp;#123;
                        right=mid-1;
                    &amp;#125; 
                &amp;#125;
                dp[left]=nums[i];
            &amp;#125;
        &amp;#125;
        return index;
    &amp;#125;
    int kIncreasing(vector&amp;lt;int&amp;gt;&amp;amp; arr, int k) &amp;#123;
        vector&amp;lt;int&amp;gt;sum(arr.size());
        for(int i=0;i&amp;lt;k;i++)
            sum[i]=i;
        for(int i=k;i&amp;lt;arr.size();i++)
        &amp;#123;
            sum[i]=sum[i-k];
        &amp;#125;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;record(k,vector&amp;lt;int&amp;gt;(0));
        for(int i=0;i&amp;lt;arr.size();i++)
        &amp;#123;
            record[sum[i]].push_back(arr[i]);
        &amp;#125;
        int ans=0;
        for(int i=0;i&amp;lt;record.size();i++)
        &amp;#123;
            ans+=record[i].size()-search(record[i]);
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2021-12-19T15:20:34.000Z</updated>
    </entry>
    <entry>
        <id>http://dpm12345.github.io/2021/12/12/leetcode/week-competition/leetcode%20%E7%AC%AC%20271%20%E5%9C%BA%E5%91%A8%E8%B5%9B/</id>
        <title>leetcode 第 271 场周赛</title>
        <link rel="alternate" href="http://dpm12345.github.io/2021/12/12/leetcode/week-competition/leetcode%20%E7%AC%AC%20271%20%E5%9C%BA%E5%91%A8%E8%B5%9B/"/>
        <content type="html">&lt;p&gt;写在前面：这次是自己报名的第一场周赛，但最后忘记了有这一回事了，所以要记得给自己设个闹钟，提醒自己&lt;/p&gt;
&lt;p&gt;弥补：虽然错过了，但题目不能不做&lt;/p&gt;
&lt;p&gt;以下是之后做的&lt;/p&gt;
&lt;h1 id=&#34;环和杆&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环和杆&#34;&gt;#&lt;/a&gt; 环和杆&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmluZ3MtYW5kLXJvZHMv&#34;&gt;环和杆&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%853.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%854.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;该题是明显的计数题，记录每一条杆上不同颜色的环的数量，当三种颜色数量都不为零时，总个数加一&lt;/p&gt;
&lt;h2 id=&#34;解法一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解法一&#34;&gt;#&lt;/a&gt; 解法一&lt;/h2&gt;
&lt;p&gt;利用数组&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int countPoints(string rings) &amp;#123;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;a(10,vector&amp;lt;int&amp;gt;(3));     // 总共最多有 10 个杆，a [i][0],a [i][1],a [i][2]
		                                             // 分别记录 R、G、B 的个数
        for(int i=0;i&amp;lt;rings.length();i+=2)
        &amp;#123;
            if(rings[i]==&#39;R&#39;)
            &amp;#123;
                a[rings[i+1]-48][0]++;
            &amp;#125;
            else if(rings[i]==&#39;G&#39;)
            &amp;#123;
                a[rings[i+1]-48][1]++;
            &amp;#125;
            else if(rings[i]==&#39;B&#39;)
            &amp;#123;
                a[rings[i+1]-48][2]++;
            &amp;#125;
        &amp;#125;
        int ans=0;
        for(int i=0;i&amp;lt;=9;i++)
        &amp;#123;
            if(a[i][0]&amp;amp;&amp;amp;a[i][1]&amp;amp;&amp;amp;a[i][2])     // 当三种杆数量都不为 0 时，ans 加一
            ans++;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解法二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#解法二&#34;&gt;#&lt;/a&gt; 解法二&lt;/h2&gt;
&lt;p&gt;下面为周赛用时最少的 Aoxiang Cui 的代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int countPoints(string s) &amp;#123;
        map&amp;lt;char, int&amp;gt; A;
        A[&#39;R&#39;] = 0;
        A[&#39;G&#39;] = 1;
        A[&#39;B&#39;] = 2;
        vector&amp;lt;int&amp;gt; cnt(10);
        for (int i = 0; i &amp;lt; (int)s.size(); i += 2) &amp;#123;
            int x = A[s[i]];
            int y = s[i + 1] - &#39;0&#39;;
            cnt[y] |= 1 &amp;lt;&amp;lt; x;
        &amp;#125;
        int ret = 0;
        for (int k = 0; k &amp;lt; 10; ++k) &amp;#123;
            if (cnt[k] == 7) ++ret;
        &amp;#125;
        return ret;
        
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;借鉴经验：&lt;/p&gt;
&lt;p&gt;在该题中我的方法中的若找到某个字母，则在对应的数组位置加一，最后需判断三个代表 环的元素是否大于零，需要用 &lt;code&gt;if&lt;/code&gt;  来判断，缺点是单判断的个数变多是，代码则会显得冗长 而在其所用的是二进制的计数法，&lt;/p&gt;
&lt;p&gt;因为二进制的特点为 &lt;code&gt;0，1&lt;/code&gt;  组合，那么这样可以把不同的位看作是一个一个的容器，当存储某个东西时，可将该容器值变为 &lt;code&gt;1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;该方法中的核心代码便是：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;int x = A[s[i]];
int y = s[i + 1] - &#39;0&#39;;
cnt[y] |= 1 &amp;lt;&amp;lt; x;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这几行代码表示的意思分别为&lt;/p&gt;
&lt;p&gt;第一行：对读到的环进行判断，依据之前的 map，找到对应容器&lt;/p&gt;
&lt;p&gt;第二行：对读到的杆编号转化为 int 类型&lt;/p&gt;
&lt;p&gt;第三行：将该环存入，1&amp;lt;&amp;lt;x 表示的为环所在位置&lt;/p&gt;
&lt;p&gt;那么当所有环都存完后，那么如果三个环都存入，那么 &lt;code&gt;cnt[i]&lt;/code&gt;  的值必然是 &lt;code&gt;7&lt;/code&gt; ，&lt;/p&gt;
&lt;p&gt;因为在该方法中，由 map，R、G、B 对应的位置分别为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;2^0,2^1,2^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.008548em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, 如果都存入，三个&lt;/p&gt;
&lt;p&gt;位置显示都为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，那么&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msup&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;7&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;cnt[i]=2^0+2^1+2^2=7&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.897438em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999999em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;所以结尾处代码为&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;for (int k = 0; k &amp;lt; 10; ++k) 
&amp;#123;
     if (cnt[k] == 7) ++ret;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;子数组范围和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#子数组范围和&#34;&gt;#&lt;/a&gt; 子数组范围和&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VtLW9mLXN1YmFycmF5LXJhbmdlcy8=&#34;&gt;子数组范围和&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;方法：滑动窗口 (暴力)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;i&lt;/code&gt;  遍历每一个数组开头，开始增加窗口长度之前，先更新 &lt;code&gt;MAX&lt;/code&gt;  和 &lt;code&gt;MIN&lt;/code&gt;  的值，之后 &lt;code&gt;j&lt;/code&gt;  从 &lt;code&gt;i+1&lt;/code&gt;  开始不断增加 增加的过程中不断更新 &lt;code&gt;MAX&lt;/code&gt; ， &lt;code&gt;MIN&lt;/code&gt;  的值，更新完后加上最大值减去最小值的值，如此，循环结束后 自然能够得到答案&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    long long subArrayRanges(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;
        long long MAX,MIN,ans=0;
        for(int i=0;i&amp;lt;nums.size();i++)
        &amp;#123;
            MAX=MIN=nums[i];
            for(int j=i+1;j&amp;lt;nums.size();j++)
            &amp;#123;
                MAX=fmax(MAX,nums[j]);
                MIN=fmin(MIN,nums[j]);
                ans+=MAX-MIN;      
            &amp;#125;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;给植物浇水-ii&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#给植物浇水-ii&#34;&gt;#&lt;/a&gt; 给植物浇水 II&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvd2F0ZXJpbmctcGxhbnRzLWlpLw==&#34;&gt;给植物浇水 II&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;题目详情:&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%853.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E7%B4%A0%E6%9D%90/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%854.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;方法一&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法一&#34;&gt;#&lt;/a&gt; 方法一&lt;/h2&gt;
&lt;p&gt;我的思路：题目中要求求重新灌满水的次数，由题可知，两人浇水过程的位置是对称的， 所以说浇完后两人的次数要么相等要么相差 &lt;code&gt;1&lt;/code&gt;  ，那么每一位置的浇水量必然不大于该人的水罐容量，也就不需要考虑某人浇不了水要等另一个人浇 (这样就明显变为另一个题目了)&lt;/p&gt;
&lt;p&gt;(或许可以有这样的题目: &amp;quot;如果两人分别从两边开始浇水，若可以浇水，则浇，若水量不够则重新灌水，若还是不够，则选择原地等待，等另一个人浇。请返回以下值，若可以全浇完，返回重新灌水次数，若不行，返回 - 1&amp;quot;)&lt;/p&gt;
&lt;p&gt;接上面思路：&lt;/p&gt;
&lt;p&gt;这样我们可以知道，每个人浇水次数至少是植物数整除 2 的结果，所以我们可以用循环循环这一次数，结束时，根据提示， &lt;code&gt;plants[i]&amp;gt;0&lt;/code&gt; ，所以可在浇完水后将浇完水的植物 &lt;code&gt;plant[i]&lt;/code&gt;  赋值 &lt;code&gt;0&lt;/code&gt; ，最后只需判断最中间&lt;/p&gt;
&lt;p&gt;的 &lt;code&gt;plants[i]&lt;/code&gt;  是否为 &lt;code&gt;0&lt;/code&gt; ，若不为 &lt;code&gt;0&lt;/code&gt; ，则还需再浇一次，因此判断两人剩余量的最大值是否可行，不可行则灌水次数加一&lt;/p&gt;
&lt;p&gt;据上面分析，我们所需要的变量为： &lt;code&gt;curA&lt;/code&gt;  记录 Alice 剩余水量， &lt;code&gt;curB&lt;/code&gt;  记录 &lt;code&gt;Bob&lt;/code&gt;  剩余水量， &lt;code&gt;ans&lt;/code&gt;  记录总灌水次数， &lt;code&gt;time&lt;/code&gt;  记录最少浇水次数&lt;/p&gt;
&lt;p&gt;以下为代码:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int minimumRefill(vector&amp;lt;int&amp;gt;&amp;amp; plants, int capacityA, int capacityB) &amp;#123;
        int times=plants.size()/2;
        int curA=capacityA,curB=capacityB;
        int ans=0;
        for(int i=0;i&amp;lt;times;i++)
        &amp;#123;
            if(curA&amp;gt;=plants[i])
            &amp;#123;
                curA-=plants[i];
                plants[i]=0;
            &amp;#125;
            else
            &amp;#123;
                ans++;
                curA=capacityA-plants[i];
                plants[i]=0;
            &amp;#125;
            if(curB&amp;gt;=plants[plants.size()-1-i])
            &amp;#123;
                curB-=plants[plants.size()-1-i];
                plants[plants.size()-1-i]=0;
            &amp;#125;
            else
            &amp;#123;
                ans++;
                curB=capacityB-plants[plants.size()-1-i];
                plants[plants.size()-1-i]=0;
            &amp;#125;
        &amp;#125;
        if(plants[times])
        &amp;#123;
            if(max(curA,curB)&amp;lt;plants[times])
            ans++;
        &amp;#125;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int minimumRefill(vector&amp;lt;int&amp;gt;&amp;amp; plants, int capacityA, int capacityB) &amp;#123;
        int n = plants.size(), ans = 0, a = capacityA, b = capacityB;
        for (int i = 0, j = n - 1; i &amp;lt; j; ++i, --j) &amp;#123;
            if (a &amp;lt; plants[i]) a = capacityA, ++ans;
            a -= plants[i];
            if (b &amp;lt; plants[j]) b = capacityB, ++ans;
            b -= plants[j];
        &amp;#125;
        if (n &amp;amp; 1 &amp;amp;&amp;amp; max(a, b) &amp;lt; plants[n / 2]) ++ans;
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;方法二&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法二&#34;&gt;#&lt;/a&gt; 方法二&lt;/h2&gt;
&lt;h1 id=&#34;摘水果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#摘水果&#34;&gt;#&lt;/a&gt; 摘水果&lt;/h1&gt;
&lt;p&gt;题目链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1mcnVpdHMtaGFydmVzdGVkLWFmdGVyLWF0LW1vc3Qtay1zdGVwcy8=&#34;&gt;摘水果&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c++&#34;&gt;class Solution &amp;#123;
public:
    int maxTotalFruits(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; fruits, int startPos, int k) &amp;#123;
        int n = fruits.size();
        
        // 前缀和，用于求区间 [l, r] 共有多少水果
        vector&amp;lt;int&amp;gt; sum;
        sum.push_back(0);
        for (int i = 1; i &amp;lt;= n; ++ i)
            sum.push_back(fruits[i - 1][1] + sum[i - 1]);

        vector&amp;lt;int&amp;gt; pos;
        for (int i = 0; i &amp;lt; n; ++ i)
            pos.push_back(fruits[i][0]);

        // 枚举可能抵达的区间
        int ans = 0;
        for (int x = k; x &amp;gt;= 0; -- x)
        &amp;#123;
            int y = (k - x) / 2;
            int l, r;
            // x + 2y = k
            l = startPos - x, r = startPos + y;
            auto pl = lower_bound(pos.begin(), pos.end(), l) - pos.begin(), pr = upper_bound(pos.begin(), pos.end(), r) - pos.begin();
            ans = max(ans, sum[pr] - sum[pl]);
            // 2y + x = k
            l = startPos - y, r = startPos + x;
            pl = lower_bound(pos.begin(), pos.end(), l) - pos.begin(), pr = upper_bound(pos.begin(), pos.end(), r) - pos.begin();
            ans = max(ans, sum[pr] - sum[pl]);
        &amp;#125;
        
        return ans;
    &amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <updated>2021-12-12T15:20:34.000Z</updated>
    </entry>
</feed>
