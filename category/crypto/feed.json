{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345 • All posts by \"crypto\" category",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/1f01c3ee/",
            "url": "http://dpm12345.cn/posts/1f01c3ee/",
            "title": "BJDCTF2020",
            "date_published": "2023-04-08T12:12:40.000Z",
            "content_html": "<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"easyrsa\"><a href=\"#easyrsa\" class=\"headerlink\" title=\"easyrsa\"></a>easyrsa</h2><pre><code class=\"python\">from Crypto.Util.number import getPrime,bytes_to_long\nfrom sympy import Derivative\nfrom fractions import Fraction\nfrom secret import flag\n\np=getPrime(1024)\nq=getPrime(1024)\ne=65537                                                                                                                                                     \nn=p*q\nz=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint(c,z,n)\n'''\noutput:\n7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\n32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\n15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n\n'''\n</code></pre>\n<p>根据源代码，已知c,z,m</p>\n<p>而<code>z=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arctan(q),q))</code></p>\n<p>查阅资料，<code>Derivative</code>为求导操作，<code>arctan</code>和<code>arctan</code>的导数分别为$\\frac{1}{1+x^2}$,$\\frac{1}{1-x^2}$，而Fraction给出分数，故$z=p^2+q^2$</p>\n<p>因此，可以通过以下式子求解<br>$$<br>(p+q)^2 = z + 2n\\<br>故可以求得\\ p+q = \\sqrt{z+2n}\\</p>\n<p>构造\\ x^2 - (p+q)x + pq = 0，其解为\\ p和\\ q\\<br>p = \\frac{p+q+\\sqrt{(p+q)^2-4pq}}{2}\\<br>q =  \\frac{p+q-\\sqrt{(p+q)^2-4pq}}{2}(或者可以q=p+q-p)\\<br>故\\phi(n)=(p-1)*(q-1)\\<br>可以求得d，最后m=c^d\\ (mod \\ n)<br>$$</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nc = 7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\nz = 32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\nn = 15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n\ne = 65537\n\np_and_q,_ = gmpy2.iroot(z+2*n,2)\np = (p_and_q + gmpy2.iroot(pow(p_and_q,2)-4*n,2)[0])//2\nq = p_and_q - p\nprint(p,q)\n\nphi = (p-1)*(q-1)\n\nd = gmpy2.invert(e,phi)\nm = pow(c,d,n)\n\nprint(long_to_bytes(m))\n# BJD{Advanced_mathematics_is_too_hard!!!}\n</code></pre>\n<h2 id=\"rsaoutput\"><a href=\"#rsaoutput\" class=\"headerlink\" title=\"rsaoutput\"></a>rsaoutput</h2><p>注意到输出信息，很容易得到n相同，e不同，为共模攻击</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\nn1 = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne1 = 2767\n\nn2 = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne2 = 3659\n\nmessage1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599\n\nmessage2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227\n\n_,s,t = gmpy2.gcdext(e1,e2)\nm = gmpy2.powmod(message1,int(s),n1)*gmpy2.powmod(message2,int(t),n1) % n1\n\nprint(long_to_bytes(int(m)))\n# BJD{r3a_C0mmoN_moD@_4ttack}\n</code></pre>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><pre><code class=\"python\">from Crypto.Util.number import getPrime,bytes_to_long\n\nflag=open(\"flag\",\"rb\").read()\n\np=getPrime(1024)\nq=getPrime(1024)\nassert(e&lt;100000)\nn=p*q\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint c,n\nprint pow(294,e,n)\n\np=getPrime(1024)\nn=p*q\nm=bytes_to_long(\"BJD\"*32)\nc=pow(m,e,n)\nprint c,n\n\n'''\noutput:\nn381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018\nn'''\n</code></pre>\n<p>根据两个n的生成方法，可以通过求两数的最大公因数，求得q，然后依次求得p1,phi，再根据e的范围，可以爆破出e，之后求得d，最后求得m</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\nc1 = 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120\nn1 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037\npow_num = 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018\nc2 = 979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721\nn2 = 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047\n\nq = gmpy2.gcd(n1, n2)\np1 = n1 // q\np2 = n2 // q\nphi1 = (p1-1)*(q-1)\nphi2 = (p2-1)*(q-1)\nfor i in range(100000):\n    if pow(294,i,n1) == pow_num:\n        e = i\n        break\nd1 = gmpy2.invert(e,phi1)\n\nm = pow(c1,d1,n1)\n\nprint(long_to_bytes(m))\n# BJD{p_is_common_divisor}\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/68282885/",
            "url": "http://dpm12345.cn/posts/68282885/",
            "title": "crypto",
            "date_published": "2023-04-08T12:12:40.000Z",
            "content_html": "<h2 id=\"crypto-1\"><a href=\"#crypto-1\" class=\"headerlink\" title=\"crypto 1\"></a>crypto 1</h2><h2 id=\"crypto-2\"><a href=\"#crypto-2\" class=\"headerlink\" title=\"crypto 2\"></a>crypto 2</h2><p>js,放在浏览器控制台</p>\n<h2 id=\"crypto-3\"><a href=\"#crypto-3\" class=\"headerlink\" title=\"crypto 3\"></a>crypto 3</h2><p>js颜文字加密，浏览器打开乱码，尝试下载打开(复制链接下载)，然后放入控制台</p>\n<h2 id=\"crypto-4\"><a href=\"#crypto-4\" class=\"headerlink\" title=\"crypto 4\"></a>crypto 4</h2><p>RSA密码求d</p>\n<h2 id=\"crypto-5\"><a href=\"#crypto-5\" class=\"headerlink\" title=\"crypto 5\"></a>crypto 5</h2><p>RSA密码求m</p>\n<h2 id=\"crypto-6\"><a href=\"#crypto-6\" class=\"headerlink\" title=\"crypto 6\"></a>crypto 6</h2><p>rabbit加密</p>\n<pre><code class=\"raw\">U2FsdGVkX19mGsGlfI3nciNVpWZZRqZO2PYjJ1ZQuRqoiknyHSWeQv8ol0uRZP94MqeD2xz+\n</code></pre>\n<h2 id=\"crypto-7\"><a href=\"#crypto-7\" class=\"headerlink\" title=\"crypto 7\"></a>crypto 7</h2><p>ook解密</p>\n<h2 id=\"crypto-8\"><a href=\"#crypto-8\" class=\"headerlink\" title=\"crypto 8\"></a>crypto 8</h2><p>brainfuck解密</p>\n<h2 id=\"crypto-9\"><a href=\"#crypto-9\" class=\"headerlink\" title=\"crypto 9\"></a>crypto 9</h2><p>暴力破解加密压缩包，为<code>4132</code></p>\n<p>解压后，得到文件，然后利用压缩包名字的加密方式解密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NlcnBlbnQub25saW5lLWRvbWFpbi10b29scy5jb20v\">http://serpent.online-domain-tools.com/</span></p>\n<h2 id=\"crypto-10\"><a href=\"#crypto-10\" class=\"headerlink\" title=\"crypto 10\"></a>crypto 10</h2><p>一连等于，Quoted-printable编码</p>\n<h1 id=\"crypto-11\"><a href=\"#crypto-11\" class=\"headerlink\" title=\"crypto 11\"></a>crypto 11</h1><p>MD5解密</p>\n<h2 id=\"crypto-0\"><a href=\"#crypto-0\" class=\"headerlink\" title=\"crypto 0\"></a>crypto 0</h2><p>凯撒密码</p>\n<h2 id=\"crypto-12\"><a href=\"#crypto-12\" class=\"headerlink\" title=\"crypto 12\"></a>crypto 12</h2><p>Atbash cipher(埃特巴什码)加密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wcmFjdGljYWxjcnlwdG9ncmFwaHkuY29tL2NpcGhlcnMvY2xhc3NpY2FsLWVyYS9hdGJhc2gtY2lwaGVyLw==\">http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/</span></p>\n<h2 id=\"crypto-13\"><a href=\"#crypto-13\" class=\"headerlink\" title=\"crypto 13\"></a>crypto 13</h2><p>base家族解密</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-28 12:30:32\nLastAuthor   : zhong\nlastTime     : 2022-08-28 13:36:13\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport base64\nimport hashlib\nmw = ''\nwith open(\"./base.txt\", 'r', encoding='utf-8') as f:\n    mw = f.read()\n\nwhile True:\n    try:\n        res = base64.b16decode(mw)\n        mw = res.decode('utf-8')\n        print(1)\n        if \"flag\" in mw:\n            break\n    except:\n        pass\n    try:\n        res = base64.b32decode(mw)\n        mw = res.decode('utf-8')\n        print(2)\n        if \"flag\" in mw:\n            break\n    except:\n        pass\n    try:\n        res = base64.b64decode(mw)\n        mw = res.decode('utf-8')\n        print(3)\n        if \"flag\" in mw:\n            break\n\n    except:\n        pass\nprint(mw)\n</code></pre>\n<h2 id=\"crypto-14\"><a href=\"#crypto-14\" class=\"headerlink\" title=\"crypto 14\"></a>crypto 14</h2><p>得到数字以空格为分隔符转为十六进制再转为字母</p>\n<p>得到<code>3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG</code></p>\n<p>“flag”使用base64<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlOEElQTAlRTUlQUYlODYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">加密</span>后的字符串是 ZmxhZw== 前面的ZmxhZ不管flag后面是什么都不会改变。我们对比一下前四个字符，”Zmxh”和”3EP/“在base64表中查一下，Z和3差了30，m和E差了30。</p>\n<p>解密脚本</p>\n<pre><code class=\"python\">s= '3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG'\nt = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nl=\"\"\nfor i in s:\n    l += t[(t.index(i)-30)%64]\n\nif len(l)%4!=0:\n    l=l+\"=\"*(4-(len(l)%4))\nprint(l)\n</code></pre>\n<h2 id=\"easyrsa2\"><a href=\"#easyrsa2\" class=\"headerlink\" title=\"easyrsa2\"></a>easyrsa2</h2><pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import long_to_bytes\ne = 65537\nn1 = 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747\nc1 = 1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815\n\ne = 65537\nn2 = 22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711\nc2 = 2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062\n\n\np = gmpy2.gcd(n1,n2)\nq1 = n1//p\nd = gmpy2.invert(e,(p-1)*(q1-1))\nprint(long_to_bytes(pow(c1,d,n1)))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        }
    ]
}